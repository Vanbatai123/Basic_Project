                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module WS2812
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _fadeToBlackBy
                                     12 	.globl _LED__SendByte_
                                     13 	.globl _LED__SendOne_
                                     14 	.globl _LED__SendZero_
                                     15 	.globl _cosf
                                     16 	.globl __delay_us
                                     17 	.globl __delay_ms
                                     18 	.globl _eiph1
                                     19 	.globl _eip1
                                     20 	.globl _pmd
                                     21 	.globl _pmen
                                     22 	.globl _pdtcnt
                                     23 	.globl _pdten
                                     24 	.globl _scon_1
                                     25 	.globl _eiph
                                     26 	.globl _aindids
                                     27 	.globl _spdr
                                     28 	.globl _spsr
                                     29 	.globl _spcr2
                                     30 	.globl _spcr
                                     31 	.globl _capcon4
                                     32 	.globl _capcon3
                                     33 	.globl _b
                                     34 	.globl _eip
                                     35 	.globl _c2h
                                     36 	.globl _c2l
                                     37 	.globl _pif
                                     38 	.globl _pipen
                                     39 	.globl _pinen
                                     40 	.globl _picon
                                     41 	.globl _adccon0
                                     42 	.globl _c1h
                                     43 	.globl _c1l
                                     44 	.globl _c0h
                                     45 	.globl _c0l
                                     46 	.globl _adcdly
                                     47 	.globl _adccon2
                                     48 	.globl _adccon1
                                     49 	.globl _acc
                                     50 	.globl _pwmcon1
                                     51 	.globl _piocon0
                                     52 	.globl _pwm3l
                                     53 	.globl _pwm2l
                                     54 	.globl _pwm1l
                                     55 	.globl _pwm0l
                                     56 	.globl _pwmpl
                                     57 	.globl _pwmcon0
                                     58 	.globl _fbd
                                     59 	.globl _pnp
                                     60 	.globl _pwm3h
                                     61 	.globl _pwm2h
                                     62 	.globl _pwm1h
                                     63 	.globl _pwm0h
                                     64 	.globl _pwmph
                                     65 	.globl _psw
                                     66 	.globl _adcmph
                                     67 	.globl _adcmpl
                                     68 	.globl _pwm5l
                                     69 	.globl _th2
                                     70 	.globl _pwm4l
                                     71 	.globl _tl2
                                     72 	.globl _rcmp2h
                                     73 	.globl _rcmp2l
                                     74 	.globl _t2mod
                                     75 	.globl _t2con
                                     76 	.globl _ta
                                     77 	.globl _piocon1
                                     78 	.globl _rh3
                                     79 	.globl _pwm5h
                                     80 	.globl _rl3
                                     81 	.globl _pwm4h
                                     82 	.globl _t3con
                                     83 	.globl _adcrh
                                     84 	.globl _adcrl
                                     85 	.globl _i2addr
                                     86 	.globl _i2con
                                     87 	.globl _i2toc
                                     88 	.globl _i2clk
                                     89 	.globl _i2stat
                                     90 	.globl _i2dat
                                     91 	.globl _saddr_1
                                     92 	.globl _saden_1
                                     93 	.globl _saden
                                     94 	.globl _ip
                                     95 	.globl _pwmintc
                                     96 	.globl _iph
                                     97 	.globl _p2s
                                     98 	.globl _p1sr
                                     99 	.globl _p1m2
                                    100 	.globl _p1s
                                    101 	.globl _p1m1
                                    102 	.globl _p0sr
                                    103 	.globl _p0m2
                                    104 	.globl _p0s
                                    105 	.globl _p0m1
                                    106 	.globl _p3
                                    107 	.globl _iapcn
                                    108 	.globl _iapfd
                                    109 	.globl _p3sr
                                    110 	.globl _p3m2
                                    111 	.globl _p3s
                                    112 	.globl _p3m1
                                    113 	.globl _bodcon1
                                    114 	.globl _wdcon
                                    115 	.globl _saddr
                                    116 	.globl _ie
                                    117 	.globl _iapah
                                    118 	.globl _iapal
                                    119 	.globl _iapuen
                                    120 	.globl _iaptrg
                                    121 	.globl _bodcon0
                                    122 	.globl _auxr1
                                    123 	.globl _p2
                                    124 	.globl _chpcon
                                    125 	.globl _eie1
                                    126 	.globl _eie
                                    127 	.globl _sbuf_1
                                    128 	.globl _sbuf
                                    129 	.globl _scon
                                    130 	.globl _cken
                                    131 	.globl _ckswt
                                    132 	.globl _ckdiv
                                    133 	.globl _capcon2
                                    134 	.globl _capcon1
                                    135 	.globl _capcon0
                                    136 	.globl _sfrs
                                    137 	.globl _p1
                                    138 	.globl _wkcon
                                    139 	.globl _ckcon
                                    140 	.globl _th1
                                    141 	.globl _th0
                                    142 	.globl _tl1
                                    143 	.globl _tl0
                                    144 	.globl _tmod
                                    145 	.globl _tcon
                                    146 	.globl _pcon
                                    147 	.globl _rwk
                                    148 	.globl _rctrim1
                                    149 	.globl _rctrim0
                                    150 	.globl _dph
                                    151 	.globl _dpl
                                    152 	.globl _sp
                                    153 	.globl _p0
                                    154 	.globl _Pattern2_PARM_6
                                    155 	.globl _Pattern2_PARM_5
                                    156 	.globl _Pattern2_PARM_4
                                    157 	.globl _Pattern2_PARM_3
                                    158 	.globl _Pattern2_PARM_2
                                    159 	.globl _Pattern1_PARM_3
                                    160 	.globl _Pattern1_PARM_2
                                    161 	.globl _fadeToBlackBy_PARM_2
                                    162 	.globl _Pattern3_PARM_4
                                    163 	.globl _Pattern3_PARM_3
                                    164 	.globl _Pattern3_PARM_2
                                    165 	.globl _colorWipe_PARM_4
                                    166 	.globl _colorWipe_PARM_3
                                    167 	.globl _colorWipe_PARM_2
                                    168 	.globl _CylonBounceI_PARM_5
                                    169 	.globl _CylonBounceI_PARM_4
                                    170 	.globl _CylonBounceI_PARM_3
                                    171 	.globl _CylonBounceI_PARM_2
                                    172 	.globl _CylonBounce_PARM_5
                                    173 	.globl _CylonBounce_PARM_4
                                    174 	.globl _CylonBounce_PARM_3
                                    175 	.globl _CylonBounce_PARM_2
                                    176 	.globl _FadeInOut_PARM_3
                                    177 	.globl _FadeInOut_PARM_2
                                    178 	.globl _setAll_PARM_3
                                    179 	.globl _setAll_PARM_2
                                    180 	.globl _setPixel_PARM_4
                                    181 	.globl _setPixel_PARM_3
                                    182 	.globl _setPixel_PARM_2
                                    183 	.globl _curEffect
                                    184 	.globl _curColor
                                    185 	.globl _clearAll
                                    186 	.globl _showStrip
                                    187 	.globl _setPixel
                                    188 	.globl _setAll
                                    189 	.globl _FadeInOut
                                    190 	.globl _CylonBounce
                                    191 	.globl _CylonBounceI
                                    192 	.globl _colorWipe
                                    193 	.globl _rainbowCycle
                                    194 	.globl _Pattern3
                                    195 	.globl _Pattern1
                                    196 	.globl _Pattern2
                                    197 ;--------------------------------------------------------
                                    198 ; special function registers
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _p0	=	0x0080
                           000081   203 _sp	=	0x0081
                           000082   204 _dpl	=	0x0082
                           000083   205 _dph	=	0x0083
                           000084   206 _rctrim0	=	0x0084
                           000085   207 _rctrim1	=	0x0085
                           000086   208 _rwk	=	0x0086
                           000087   209 _pcon	=	0x0087
                           000088   210 _tcon	=	0x0088
                           000089   211 _tmod	=	0x0089
                           00008A   212 _tl0	=	0x008a
                           00008B   213 _tl1	=	0x008b
                           00008C   214 _th0	=	0x008c
                           00008D   215 _th1	=	0x008d
                           00008E   216 _ckcon	=	0x008e
                           00008F   217 _wkcon	=	0x008f
                           000090   218 _p1	=	0x0090
                           000091   219 _sfrs	=	0x0091
                           000092   220 _capcon0	=	0x0092
                           000093   221 _capcon1	=	0x0093
                           000094   222 _capcon2	=	0x0094
                           000095   223 _ckdiv	=	0x0095
                           000096   224 _ckswt	=	0x0096
                           000097   225 _cken	=	0x0097
                           000098   226 _scon	=	0x0098
                           000099   227 _sbuf	=	0x0099
                           00009A   228 _sbuf_1	=	0x009a
                           00009B   229 _eie	=	0x009b
                           00009C   230 _eie1	=	0x009c
                           00009F   231 _chpcon	=	0x009f
                           0000A0   232 _p2	=	0x00a0
                           0000A2   233 _auxr1	=	0x00a2
                           0000A3   234 _bodcon0	=	0x00a3
                           0000A4   235 _iaptrg	=	0x00a4
                           0000A5   236 _iapuen	=	0x00a5
                           0000A6   237 _iapal	=	0x00a6
                           0000A7   238 _iapah	=	0x00a7
                           0000A8   239 _ie	=	0x00a8
                           0000A9   240 _saddr	=	0x00a9
                           0000AA   241 _wdcon	=	0x00aa
                           0000AB   242 _bodcon1	=	0x00ab
                           0000AC   243 _p3m1	=	0x00ac
                           0000AC   244 _p3s	=	0x00ac
                           0000AD   245 _p3m2	=	0x00ad
                           0000AD   246 _p3sr	=	0x00ad
                           0000AE   247 _iapfd	=	0x00ae
                           0000AF   248 _iapcn	=	0x00af
                           0000B0   249 _p3	=	0x00b0
                           0000B1   250 _p0m1	=	0x00b1
                           0000B1   251 _p0s	=	0x00b1
                           0000B2   252 _p0m2	=	0x00b2
                           0000B2   253 _p0sr	=	0x00b2
                           0000B3   254 _p1m1	=	0x00b3
                           0000B3   255 _p1s	=	0x00b3
                           0000B4   256 _p1m2	=	0x00b4
                           0000B4   257 _p1sr	=	0x00b4
                           0000B5   258 _p2s	=	0x00b5
                           0000B7   259 _iph	=	0x00b7
                           0000B7   260 _pwmintc	=	0x00b7
                           0000B8   261 _ip	=	0x00b8
                           0000B9   262 _saden	=	0x00b9
                           0000BA   263 _saden_1	=	0x00ba
                           0000BB   264 _saddr_1	=	0x00bb
                           0000BC   265 _i2dat	=	0x00bc
                           0000BD   266 _i2stat	=	0x00bd
                           0000BE   267 _i2clk	=	0x00be
                           0000BF   268 _i2toc	=	0x00bf
                           0000C0   269 _i2con	=	0x00c0
                           0000C1   270 _i2addr	=	0x00c1
                           0000C2   271 _adcrl	=	0x00c2
                           0000C3   272 _adcrh	=	0x00c3
                           0000C4   273 _t3con	=	0x00c4
                           0000C4   274 _pwm4h	=	0x00c4
                           0000C5   275 _rl3	=	0x00c5
                           0000C5   276 _pwm5h	=	0x00c5
                           0000C6   277 _rh3	=	0x00c6
                           0000C6   278 _piocon1	=	0x00c6
                           0000C7   279 _ta	=	0x00c7
                           0000C8   280 _t2con	=	0x00c8
                           0000C9   281 _t2mod	=	0x00c9
                           0000CA   282 _rcmp2l	=	0x00ca
                           0000CB   283 _rcmp2h	=	0x00cb
                           0000CC   284 _tl2	=	0x00cc
                           0000CC   285 _pwm4l	=	0x00cc
                           0000CD   286 _th2	=	0x00cd
                           0000CD   287 _pwm5l	=	0x00cd
                           0000CE   288 _adcmpl	=	0x00ce
                           0000CF   289 _adcmph	=	0x00cf
                           0000D0   290 _psw	=	0x00d0
                           0000D1   291 _pwmph	=	0x00d1
                           0000D2   292 _pwm0h	=	0x00d2
                           0000D3   293 _pwm1h	=	0x00d3
                           0000D4   294 _pwm2h	=	0x00d4
                           0000D5   295 _pwm3h	=	0x00d5
                           0000D6   296 _pnp	=	0x00d6
                           0000D7   297 _fbd	=	0x00d7
                           0000D8   298 _pwmcon0	=	0x00d8
                           0000D9   299 _pwmpl	=	0x00d9
                           0000DA   300 _pwm0l	=	0x00da
                           0000DB   301 _pwm1l	=	0x00db
                           0000DC   302 _pwm2l	=	0x00dc
                           0000DD   303 _pwm3l	=	0x00dd
                           0000DE   304 _piocon0	=	0x00de
                           0000DF   305 _pwmcon1	=	0x00df
                           0000E0   306 _acc	=	0x00e0
                           0000E1   307 _adccon1	=	0x00e1
                           0000E2   308 _adccon2	=	0x00e2
                           0000E3   309 _adcdly	=	0x00e3
                           0000E4   310 _c0l	=	0x00e4
                           0000E5   311 _c0h	=	0x00e5
                           0000E6   312 _c1l	=	0x00e6
                           0000E7   313 _c1h	=	0x00e7
                           0000E8   314 _adccon0	=	0x00e8
                           0000E9   315 _picon	=	0x00e9
                           0000EA   316 _pinen	=	0x00ea
                           0000EB   317 _pipen	=	0x00eb
                           0000EC   318 _pif	=	0x00ec
                           0000ED   319 _c2l	=	0x00ed
                           0000EE   320 _c2h	=	0x00ee
                           0000EF   321 _eip	=	0x00ef
                           0000F0   322 _b	=	0x00f0
                           0000F1   323 _capcon3	=	0x00f1
                           0000F2   324 _capcon4	=	0x00f2
                           0000F3   325 _spcr	=	0x00f3
                           0000F3   326 _spcr2	=	0x00f3
                           0000F4   327 _spsr	=	0x00f4
                           0000F5   328 _spdr	=	0x00f5
                           0000F6   329 _aindids	=	0x00f6
                           0000F7   330 _eiph	=	0x00f7
                           0000F8   331 _scon_1	=	0x00f8
                           0000F9   332 _pdten	=	0x00f9
                           0000FA   333 _pdtcnt	=	0x00fa
                           0000FB   334 _pmen	=	0x00fb
                           0000FC   335 _pmd	=	0x00fc
                           0000FE   336 _eip1	=	0x00fe
                           0000FF   337 _eiph1	=	0x00ff
                                    338 ;--------------------------------------------------------
                                    339 ; special function bits
                                    340 ;--------------------------------------------------------
                                    341 	.area RSEG    (ABS,DATA)
      000000                        342 	.org 0x0000
                                    343 ;--------------------------------------------------------
                                    344 ; overlayable register banks
                                    345 ;--------------------------------------------------------
                                    346 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        347 	.ds 8
                                    348 ;--------------------------------------------------------
                                    349 ; internal ram data
                                    350 ;--------------------------------------------------------
                                    351 	.area DSEG    (DATA)
      000000                        352 _curColor::
      000000                        353 	.ds 1
      000001                        354 _curEffect::
      000001                        355 	.ds 1
      000002                        356 _setPixel_PARM_2:
      000002                        357 	.ds 1
      000003                        358 _setPixel_PARM_3:
      000003                        359 	.ds 1
      000004                        360 _setPixel_PARM_4:
      000004                        361 	.ds 1
      000005                        362 _setAll_PARM_2:
      000005                        363 	.ds 1
      000006                        364 _setAll_PARM_3:
      000006                        365 	.ds 1
      000007                        366 _FadeInOut_PARM_2:
      000007                        367 	.ds 1
      000008                        368 _FadeInOut_PARM_3:
      000008                        369 	.ds 1
      000009                        370 _FadeInOut_green_65536_80:
      000009                        371 	.ds 1
      00000A                        372 _FadeInOut_g_65536_81:
      00000A                        373 	.ds 1
      00000B                        374 _FadeInOut_r_65536_81:
      00000B                        375 	.ds 1
      00000C                        376 _FadeInOut_curEffect_65536_81:
      00000C                        377 	.ds 1
      00000D                        378 _FadeInOut_curColor_65536_81:
      00000D                        379 	.ds 1
      00000E                        380 _FadeInOut_k_131072_85:
      00000E                        381 	.ds 2
      000010                        382 _CylonBounce_PARM_2:
      000010                        383 	.ds 1
      000011                        384 _CylonBounce_PARM_3:
      000011                        385 	.ds 1
      000012                        386 _CylonBounce_PARM_4:
      000012                        387 	.ds 2
      000014                        388 _CylonBounce_PARM_5:
      000014                        389 	.ds 2
      000016                        390 _CylonBounce_green_65536_88:
      000016                        391 	.ds 1
      000017                        392 _CylonBounce_i_65537_90:
      000017                        393 	.ds 1
      000018                        394 _CylonBounce_j_65537_90:
      000018                        395 	.ds 1
      000019                        396 _CylonBounce_sloc0_1_0:
      000019                        397 	.ds 1
      00001A                        398 _CylonBounce_sloc1_1_0:
      00001A                        399 	.ds 1
      00001B                        400 _CylonBounceI_PARM_2:
      00001B                        401 	.ds 1
      00001C                        402 _CylonBounceI_PARM_3:
      00001C                        403 	.ds 1
      00001D                        404 _CylonBounceI_PARM_4:
      00001D                        405 	.ds 2
      00001F                        406 _CylonBounceI_PARM_5:
      00001F                        407 	.ds 2
      000021                        408 _CylonBounceI_green_65536_101:
      000021                        409 	.ds 1
      000022                        410 _CylonBounceI_j_65537_103:
      000022                        411 	.ds 1
      000023                        412 _CylonBounceI_sloc0_1_0:
      000023                        413 	.ds 2
      000025                        414 _colorWipe_PARM_2:
      000025                        415 	.ds 1
      000026                        416 _colorWipe_PARM_3:
      000026                        417 	.ds 1
      000027                        418 _colorWipe_PARM_4:
      000027                        419 	.ds 1
      000028                        420 _rainbowCycle_WheelPos_65537_120:
      000028                        421 	.ds 1
      000029                        422 _Pattern3_PARM_2:
      000029                        423 	.ds 1
      00002A                        424 _Pattern3_PARM_3:
      00002A                        425 	.ds 1
      00002B                        426 _Pattern3_PARM_4:
      00002B                        427 	.ds 1
      00002C                        428 _Pattern3_sloc0_1_0:
      00002C                        429 	.ds 2
      00002E                        430 _fadeToBlackBy_PARM_2:
      00002E                        431 	.ds 1
      00002F                        432 _fadeToBlackBy_pixel_65536_134:
      00002F                        433 	.ds 2
      000031                        434 _Pattern1_PARM_2:
      000031                        435 	.ds 1
      000032                        436 _Pattern1_PARM_3:
      000032                        437 	.ds 1
      000033                        438 _Pattern1_g_65536_136:
      000033                        439 	.ds 1
      000034                        440 _Pattern1_i_65537_138:
      000034                        441 	.ds 4
      000038                        442 _Pattern2_PARM_2:
      000038                        443 	.ds 1
      000039                        444 _Pattern2_PARM_3:
      000039                        445 	.ds 1
      00003A                        446 _Pattern2_PARM_4:
      00003A                        447 	.ds 1
      00003B                        448 _Pattern2_PARM_5:
      00003B                        449 	.ds 1
      00003C                        450 _Pattern2_PARM_6:
      00003C                        451 	.ds 1
      00003D                        452 _Pattern2_g_65536_143:
      00003D                        453 	.ds 1
      00003E                        454 _Pattern2_i_65537_145:
      00003E                        455 	.ds 4
                                    456 ;--------------------------------------------------------
                                    457 ; overlayable items in internal ram
                                    458 ;--------------------------------------------------------
                                    459 	.area	OSEG    (OVR,DATA)
                                    460 ;--------------------------------------------------------
                                    461 ; indirectly addressable internal ram data
                                    462 ;--------------------------------------------------------
                                    463 	.area ISEG    (DATA)
                                    464 ;--------------------------------------------------------
                                    465 ; absolute internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area IABS    (ABS,DATA)
                                    468 	.area IABS    (ABS,DATA)
                                    469 ;--------------------------------------------------------
                                    470 ; bit data
                                    471 ;--------------------------------------------------------
                                    472 	.area BSEG    (BIT)
      000000                        473 _fadeToBlackBy_sloc0_1_0:
      000000                        474 	.ds 1
      000001                        475 _Pattern1_sloc0_1_0:
      000001                        476 	.ds 1
      000002                        477 _Pattern2_sloc0_1_0:
      000002                        478 	.ds 1
                                    479 ;--------------------------------------------------------
                                    480 ; paged external ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area PSEG    (PAG,XDATA)
                                    483 ;--------------------------------------------------------
                                    484 ; external ram data
                                    485 ;--------------------------------------------------------
                                    486 	.area XSEG    (XDATA)
                                    487 ;--------------------------------------------------------
                                    488 ; absolute external ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area XABS    (ABS,XDATA)
                                    491 ;--------------------------------------------------------
                                    492 ; external initialized ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area XISEG   (XDATA)
                                    495 	.area HOME    (CODE)
                                    496 	.area GSINIT0 (CODE)
                                    497 	.area GSINIT1 (CODE)
                                    498 	.area GSINIT2 (CODE)
                                    499 	.area GSINIT3 (CODE)
                                    500 	.area GSINIT4 (CODE)
                                    501 	.area GSINIT5 (CODE)
                                    502 	.area GSINIT  (CODE)
                                    503 	.area GSFINAL (CODE)
                                    504 	.area CSEG    (CODE)
                                    505 ;--------------------------------------------------------
                                    506 ; global & static initialisations
                                    507 ;--------------------------------------------------------
                                    508 	.area HOME    (CODE)
                                    509 	.area GSINIT  (CODE)
                                    510 	.area GSFINAL (CODE)
                                    511 	.area GSINIT  (CODE)
                                    512 ;--------------------------------------------------------
                                    513 ; Home
                                    514 ;--------------------------------------------------------
                                    515 	.area HOME    (CODE)
                                    516 	.area HOME    (CODE)
                                    517 ;--------------------------------------------------------
                                    518 ; code
                                    519 ;--------------------------------------------------------
                                    520 	.area CSEG    (CODE)
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'LED__SendZero_'
                                    523 ;------------------------------------------------------------
                                    524 ;	./src/WS2812.c:24: void LED__SendZero_()
                                    525 ;	-----------------------------------------
                                    526 ;	 function LED__SendZero_
                                    527 ;	-----------------------------------------
      000000                        528 _LED__SendZero_:
                           000007   529 	ar7 = 0x07
                           000006   530 	ar6 = 0x06
                           000005   531 	ar5 = 0x05
                           000004   532 	ar4 = 0x04
                           000003   533 	ar3 = 0x03
                           000002   534 	ar2 = 0x02
                           000001   535 	ar1 = 0x01
                           000000   536 	ar0 = 0x00
                                    537 ;	./src/WS2812.c:26: setb(LED_PORT, LED_PIN);
      000000 43 80 40         [24]  538 	orl	_p0,#0x40
                                    539 ;	./src/WS2812.c:27: _nop_();
      000003 00               [12]  540 	nop
                                    541 ;	./src/WS2812.c:28: _nop_();
      000004 00               [12]  542 	nop
                                    543 ;	./src/WS2812.c:29: clrb(LED_PORT, LED_PIN);
      000005 53 80 BF         [24]  544 	anl	_p0,#0xbf
                                    545 ;	./src/WS2812.c:30: _nop_();
      000008 00               [12]  546 	nop
                                    547 ;	./src/WS2812.c:31: _nop_();
      000009 00               [12]  548 	nop
                                    549 ;	./src/WS2812.c:32: _nop_();
      00000A 00               [12]  550 	nop
                                    551 ;	./src/WS2812.c:33: _nop_();
      00000B 00               [12]  552 	nop
                                    553 ;	./src/WS2812.c:34: }
      00000C 22               [24]  554 	ret
                                    555 ;------------------------------------------------------------
                                    556 ;Allocation info for local variables in function 'LED__SendOne_'
                                    557 ;------------------------------------------------------------
                                    558 ;	./src/WS2812.c:35: void LED__SendOne_()
                                    559 ;	-----------------------------------------
                                    560 ;	 function LED__SendOne_
                                    561 ;	-----------------------------------------
      00000D                        562 _LED__SendOne_:
                                    563 ;	./src/WS2812.c:37: setb(LED_PORT, LED_PIN);
      00000D 43 80 40         [24]  564 	orl	_p0,#0x40
                                    565 ;	./src/WS2812.c:38: _nop_();
      000010 00               [12]  566 	nop
                                    567 ;	./src/WS2812.c:39: _nop_();
      000011 00               [12]  568 	nop
                                    569 ;	./src/WS2812.c:40: _nop_();
      000012 00               [12]  570 	nop
                                    571 ;	./src/WS2812.c:41: _nop_();
      000013 00               [12]  572 	nop
                                    573 ;	./src/WS2812.c:42: _nop_();
      000014 00               [12]  574 	nop
                                    575 ;	./src/WS2812.c:43: _nop_();
      000015 00               [12]  576 	nop
                                    577 ;	./src/WS2812.c:44: _nop_();
      000016 00               [12]  578 	nop
                                    579 ;	./src/WS2812.c:45: clrb(LED_PORT, LED_PIN);
      000017 53 80 BF         [24]  580 	anl	_p0,#0xbf
                                    581 ;	./src/WS2812.c:46: }
      00001A 22               [24]  582 	ret
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'LED__SendByte_'
                                    585 ;------------------------------------------------------------
                                    586 ;dat                       Allocated to registers r7 
                                    587 ;------------------------------------------------------------
                                    588 ;	./src/WS2812.c:47: void LED__SendByte_(uint8_t dat)
                                    589 ;	-----------------------------------------
                                    590 ;	 function LED__SendByte_
                                    591 ;	-----------------------------------------
      00001B                        592 _LED__SendByte_:
                                    593 ;	./src/WS2812.c:49: if (dat & 0x80)
      00001B E5 82            [12]  594 	mov	a,dpl
      00001D FF               [12]  595 	mov	r7,a
      00001E 30 E7 09         [24]  596 	jnb	acc.7,00102$
                                    597 ;	./src/WS2812.c:50: LED__SendOne_();
      000021 C0 07            [24]  598 	push	ar7
      000023 12r00r0D         [24]  599 	lcall	_LED__SendOne_
      000026 D0 07            [24]  600 	pop	ar7
      000028 80 07            [24]  601 	sjmp	00103$
      00002A                        602 00102$:
                                    603 ;	./src/WS2812.c:52: LED__SendZero_();
      00002A C0 07            [24]  604 	push	ar7
      00002C 12r00r00         [24]  605 	lcall	_LED__SendZero_
      00002F D0 07            [24]  606 	pop	ar7
      000031                        607 00103$:
                                    608 ;	./src/WS2812.c:53: if (dat & 0x40)
      000031 EF               [12]  609 	mov	a,r7
      000032 30 E6 09         [24]  610 	jnb	acc.6,00105$
                                    611 ;	./src/WS2812.c:54: LED__SendOne_();
      000035 C0 07            [24]  612 	push	ar7
      000037 12r00r0D         [24]  613 	lcall	_LED__SendOne_
      00003A D0 07            [24]  614 	pop	ar7
      00003C 80 07            [24]  615 	sjmp	00106$
      00003E                        616 00105$:
                                    617 ;	./src/WS2812.c:56: LED__SendZero_();
      00003E C0 07            [24]  618 	push	ar7
      000040 12r00r00         [24]  619 	lcall	_LED__SendZero_
      000043 D0 07            [24]  620 	pop	ar7
      000045                        621 00106$:
                                    622 ;	./src/WS2812.c:57: if (dat & 0x20)
      000045 EF               [12]  623 	mov	a,r7
      000046 30 E5 09         [24]  624 	jnb	acc.5,00108$
                                    625 ;	./src/WS2812.c:58: LED__SendOne_();
      000049 C0 07            [24]  626 	push	ar7
      00004B 12r00r0D         [24]  627 	lcall	_LED__SendOne_
      00004E D0 07            [24]  628 	pop	ar7
      000050 80 07            [24]  629 	sjmp	00109$
      000052                        630 00108$:
                                    631 ;	./src/WS2812.c:60: LED__SendZero_();
      000052 C0 07            [24]  632 	push	ar7
      000054 12r00r00         [24]  633 	lcall	_LED__SendZero_
      000057 D0 07            [24]  634 	pop	ar7
      000059                        635 00109$:
                                    636 ;	./src/WS2812.c:61: if (dat & 0x10)
      000059 EF               [12]  637 	mov	a,r7
      00005A 30 E4 09         [24]  638 	jnb	acc.4,00111$
                                    639 ;	./src/WS2812.c:62: LED__SendOne_();
      00005D C0 07            [24]  640 	push	ar7
      00005F 12r00r0D         [24]  641 	lcall	_LED__SendOne_
      000062 D0 07            [24]  642 	pop	ar7
      000064 80 07            [24]  643 	sjmp	00112$
      000066                        644 00111$:
                                    645 ;	./src/WS2812.c:64: LED__SendZero_();
      000066 C0 07            [24]  646 	push	ar7
      000068 12r00r00         [24]  647 	lcall	_LED__SendZero_
      00006B D0 07            [24]  648 	pop	ar7
      00006D                        649 00112$:
                                    650 ;	./src/WS2812.c:65: if (dat & 0x08)
      00006D EF               [12]  651 	mov	a,r7
      00006E 30 E3 09         [24]  652 	jnb	acc.3,00114$
                                    653 ;	./src/WS2812.c:66: LED__SendOne_();
      000071 C0 07            [24]  654 	push	ar7
      000073 12r00r0D         [24]  655 	lcall	_LED__SendOne_
      000076 D0 07            [24]  656 	pop	ar7
      000078 80 07            [24]  657 	sjmp	00115$
      00007A                        658 00114$:
                                    659 ;	./src/WS2812.c:68: LED__SendZero_();
      00007A C0 07            [24]  660 	push	ar7
      00007C 12r00r00         [24]  661 	lcall	_LED__SendZero_
      00007F D0 07            [24]  662 	pop	ar7
      000081                        663 00115$:
                                    664 ;	./src/WS2812.c:69: if (dat & 0x04)
      000081 EF               [12]  665 	mov	a,r7
      000082 30 E2 09         [24]  666 	jnb	acc.2,00117$
                                    667 ;	./src/WS2812.c:70: LED__SendOne_();
      000085 C0 07            [24]  668 	push	ar7
      000087 12r00r0D         [24]  669 	lcall	_LED__SendOne_
      00008A D0 07            [24]  670 	pop	ar7
      00008C 80 07            [24]  671 	sjmp	00118$
      00008E                        672 00117$:
                                    673 ;	./src/WS2812.c:72: LED__SendZero_();
      00008E C0 07            [24]  674 	push	ar7
      000090 12r00r00         [24]  675 	lcall	_LED__SendZero_
      000093 D0 07            [24]  676 	pop	ar7
      000095                        677 00118$:
                                    678 ;	./src/WS2812.c:73: if (dat & 0x02)
      000095 EF               [12]  679 	mov	a,r7
      000096 30 E1 09         [24]  680 	jnb	acc.1,00120$
                                    681 ;	./src/WS2812.c:74: LED__SendOne_();
      000099 C0 07            [24]  682 	push	ar7
      00009B 12r00r0D         [24]  683 	lcall	_LED__SendOne_
      00009E D0 07            [24]  684 	pop	ar7
      0000A0 80 07            [24]  685 	sjmp	00121$
      0000A2                        686 00120$:
                                    687 ;	./src/WS2812.c:76: LED__SendZero_();
      0000A2 C0 07            [24]  688 	push	ar7
      0000A4 12r00r00         [24]  689 	lcall	_LED__SendZero_
      0000A7 D0 07            [24]  690 	pop	ar7
      0000A9                        691 00121$:
                                    692 ;	./src/WS2812.c:77: if (dat & 0x01)
      0000A9 EF               [12]  693 	mov	a,r7
      0000AA 30 E0 03         [24]  694 	jnb	acc.0,00123$
                                    695 ;	./src/WS2812.c:78: LED__SendOne_();
      0000AD 02r00r0D         [24]  696 	ljmp	_LED__SendOne_
      0000B0                        697 00123$:
                                    698 ;	./src/WS2812.c:80: LED__SendZero_();
                                    699 ;	./src/WS2812.c:81: }
      0000B0 02r00r00         [24]  700 	ljmp	_LED__SendZero_
                                    701 ;------------------------------------------------------------
                                    702 ;Allocation info for local variables in function 'clearAll'
                                    703 ;------------------------------------------------------------
                                    704 ;i                         Allocated to registers r6 r7 
                                    705 ;------------------------------------------------------------
                                    706 ;	./src/WS2812.c:83: void clearAll()
                                    707 ;	-----------------------------------------
                                    708 ;	 function clearAll
                                    709 ;	-----------------------------------------
      0000B3                        710 _clearAll:
                                    711 ;	./src/WS2812.c:86: for (i = 0; i < 300; i++)
      0000B3 7E 00            [12]  712 	mov	r6,#0x00
      0000B5 7F 00            [12]  713 	mov	r7,#0x00
      0000B7                        714 00102$:
                                    715 ;	./src/WS2812.c:88: LED__SendByte_(0);
      0000B7 75 82 00         [24]  716 	mov	dpl,#0x00
      0000BA C0 07            [24]  717 	push	ar7
      0000BC C0 06            [24]  718 	push	ar6
      0000BE 12r00r1B         [24]  719 	lcall	_LED__SendByte_
                                    720 ;	./src/WS2812.c:89: LED__SendByte_(0);
      0000C1 75 82 00         [24]  721 	mov	dpl,#0x00
      0000C4 12r00r1B         [24]  722 	lcall	_LED__SendByte_
                                    723 ;	./src/WS2812.c:90: LED__SendByte_(0);
      0000C7 75 82 00         [24]  724 	mov	dpl,#0x00
      0000CA 12r00r1B         [24]  725 	lcall	_LED__SendByte_
      0000CD D0 06            [24]  726 	pop	ar6
      0000CF D0 07            [24]  727 	pop	ar7
                                    728 ;	./src/WS2812.c:86: for (i = 0; i < 300; i++)
      0000D1 0E               [12]  729 	inc	r6
      0000D2 BE 00 01         [24]  730 	cjne	r6,#0x00,00111$
      0000D5 0F               [12]  731 	inc	r7
      0000D6                        732 00111$:
      0000D6 8E 04            [24]  733 	mov	ar4,r6
      0000D8 8F 05            [24]  734 	mov	ar5,r7
      0000DA C3               [12]  735 	clr	c
      0000DB EC               [12]  736 	mov	a,r4
      0000DC 94 2C            [12]  737 	subb	a,#0x2c
      0000DE ED               [12]  738 	mov	a,r5
      0000DF 94 01            [12]  739 	subb	a,#0x01
      0000E1 40 D4            [24]  740 	jc	00102$
                                    741 ;	./src/WS2812.c:92: }
      0000E3 22               [24]  742 	ret
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'showStrip'
                                    745 ;------------------------------------------------------------
                                    746 ;i                         Allocated to registers r7 
                                    747 ;------------------------------------------------------------
                                    748 ;	./src/WS2812.c:94: void showStrip()
                                    749 ;	-----------------------------------------
                                    750 ;	 function showStrip
                                    751 ;	-----------------------------------------
      0000E4                        752 _showStrip:
                                    753 ;	./src/WS2812.c:97: for (i = 0; i < NUM_LEDS; ++i)
      0000E4 7F 00            [12]  754 	mov	r7,#0x00
      0000E6                        755 00103$:
      0000E6 8F 05            [24]  756 	mov	ar5,r7
      0000E8 7E 00            [12]  757 	mov	r6,#0x00
      0000EA C3               [12]  758 	clr	c
      0000EB ED               [12]  759 	mov	a,r5
      0000EC 95*00            [12]  760 	subb	a,_NUM_LEDS
      0000EE EE               [12]  761 	mov	a,r6
      0000EF 95*01            [12]  762 	subb	a,(_NUM_LEDS + 1)
      0000F1 50 64            [24]  763 	jnc	00105$
                                    764 ;	./src/WS2812.c:99: LED__SendByte_(leds[i * 3]);
      0000F3 8F*00            [24]  765 	mov	__mulint_PARM_2,r7
      0000F5 75*01 00         [24]  766 	mov	(__mulint_PARM_2 + 1),#0x00
      0000F8 90 00 03         [24]  767 	mov	dptr,#0x0003
      0000FB C0 07            [24]  768 	push	ar7
      0000FD 12r00r00         [24]  769 	lcall	__mulint
      000100 AD 82            [24]  770 	mov	r5,dpl
      000102 AE 83            [24]  771 	mov	r6,dph
      000104 ED               [12]  772 	mov	a,r5
      000105 24r00            [12]  773 	add	a,#_leds
      000107 F5 82            [12]  774 	mov	dpl,a
      000109 EE               [12]  775 	mov	a,r6
      00010A 34s00            [12]  776 	addc	a,#(_leds >> 8)
      00010C F5 83            [12]  777 	mov	dph,a
      00010E E0               [24]  778 	movx	a,@dptr
      00010F F5 82            [12]  779 	mov	dpl,a
      000111 C0 06            [24]  780 	push	ar6
      000113 C0 05            [24]  781 	push	ar5
      000115 12r00r1B         [24]  782 	lcall	_LED__SendByte_
      000118 D0 05            [24]  783 	pop	ar5
      00011A D0 06            [24]  784 	pop	ar6
                                    785 ;	./src/WS2812.c:100: LED__SendByte_(leds[i * 3 + 1]);
      00011C 74 01            [12]  786 	mov	a,#0x01
      00011E 2D               [12]  787 	add	a,r5
      00011F FB               [12]  788 	mov	r3,a
      000120 E4               [12]  789 	clr	a
      000121 3E               [12]  790 	addc	a,r6
      000122 FC               [12]  791 	mov	r4,a
      000123 EB               [12]  792 	mov	a,r3
      000124 24r00            [12]  793 	add	a,#_leds
      000126 F5 82            [12]  794 	mov	dpl,a
      000128 EC               [12]  795 	mov	a,r4
      000129 34s00            [12]  796 	addc	a,#(_leds >> 8)
      00012B F5 83            [12]  797 	mov	dph,a
      00012D E0               [24]  798 	movx	a,@dptr
      00012E F5 82            [12]  799 	mov	dpl,a
      000130 C0 06            [24]  800 	push	ar6
      000132 C0 05            [24]  801 	push	ar5
      000134 12r00r1B         [24]  802 	lcall	_LED__SendByte_
      000137 D0 05            [24]  803 	pop	ar5
      000139 D0 06            [24]  804 	pop	ar6
                                    805 ;	./src/WS2812.c:101: LED__SendByte_(leds[i * 3 + 2]);
      00013B 74 02            [12]  806 	mov	a,#0x02
      00013D 2D               [12]  807 	add	a,r5
      00013E FD               [12]  808 	mov	r5,a
      00013F E4               [12]  809 	clr	a
      000140 3E               [12]  810 	addc	a,r6
      000141 FE               [12]  811 	mov	r6,a
      000142 ED               [12]  812 	mov	a,r5
      000143 24r00            [12]  813 	add	a,#_leds
      000145 F5 82            [12]  814 	mov	dpl,a
      000147 EE               [12]  815 	mov	a,r6
      000148 34s00            [12]  816 	addc	a,#(_leds >> 8)
      00014A F5 83            [12]  817 	mov	dph,a
      00014C E0               [24]  818 	movx	a,@dptr
      00014D F5 82            [12]  819 	mov	dpl,a
      00014F 12r00r1B         [24]  820 	lcall	_LED__SendByte_
      000152 D0 07            [24]  821 	pop	ar7
                                    822 ;	./src/WS2812.c:97: for (i = 0; i < NUM_LEDS; ++i)
      000154 0F               [12]  823 	inc	r7
      000155 80 8F            [24]  824 	sjmp	00103$
      000157                        825 00105$:
                                    826 ;	./src/WS2812.c:103: }
      000157 22               [24]  827 	ret
                                    828 ;------------------------------------------------------------
                                    829 ;Allocation info for local variables in function 'setPixel'
                                    830 ;------------------------------------------------------------
                                    831 ;green                     Allocated with name '_setPixel_PARM_2'
                                    832 ;red                       Allocated with name '_setPixel_PARM_3'
                                    833 ;blue                      Allocated with name '_setPixel_PARM_4'
                                    834 ;Pixel                     Allocated to registers r6 r7 
                                    835 ;------------------------------------------------------------
                                    836 ;	./src/WS2812.c:106: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                    837 ;	-----------------------------------------
                                    838 ;	 function setPixel
                                    839 ;	-----------------------------------------
      000158                        840 _setPixel:
      000158 AE 82            [24]  841 	mov	r6,dpl
      00015A AF 83            [24]  842 	mov	r7,dph
                                    843 ;	./src/WS2812.c:108: leds[Pixel * 3] = green;
      00015C 8E*00            [24]  844 	mov	__mulint_PARM_2,r6
      00015E 8F*01            [24]  845 	mov	(__mulint_PARM_2 + 1),r7
      000160 90 00 03         [24]  846 	mov	dptr,#0x0003
      000163 12r00r00         [24]  847 	lcall	__mulint
      000166 AE 82            [24]  848 	mov	r6,dpl
      000168 AF 83            [24]  849 	mov	r7,dph
      00016A EE               [12]  850 	mov	a,r6
      00016B 24r00            [12]  851 	add	a,#_leds
      00016D F5 82            [12]  852 	mov	dpl,a
      00016F EF               [12]  853 	mov	a,r7
      000170 34s00            [12]  854 	addc	a,#(_leds >> 8)
      000172 F5 83            [12]  855 	mov	dph,a
      000174 E5*02            [12]  856 	mov	a,_setPixel_PARM_2
      000176 F0               [24]  857 	movx	@dptr,a
                                    858 ;	./src/WS2812.c:109: leds[Pixel * 3 + 1] = red;
      000177 74 01            [12]  859 	mov	a,#0x01
      000179 2E               [12]  860 	add	a,r6
      00017A FC               [12]  861 	mov	r4,a
      00017B E4               [12]  862 	clr	a
      00017C 3F               [12]  863 	addc	a,r7
      00017D FD               [12]  864 	mov	r5,a
      00017E EC               [12]  865 	mov	a,r4
      00017F 24r00            [12]  866 	add	a,#_leds
      000181 F5 82            [12]  867 	mov	dpl,a
      000183 ED               [12]  868 	mov	a,r5
      000184 34s00            [12]  869 	addc	a,#(_leds >> 8)
      000186 F5 83            [12]  870 	mov	dph,a
      000188 E5*03            [12]  871 	mov	a,_setPixel_PARM_3
      00018A F0               [24]  872 	movx	@dptr,a
                                    873 ;	./src/WS2812.c:110: leds[Pixel * 3 + 2] = blue;
      00018B 74 02            [12]  874 	mov	a,#0x02
      00018D 2E               [12]  875 	add	a,r6
      00018E FE               [12]  876 	mov	r6,a
      00018F E4               [12]  877 	clr	a
      000190 3F               [12]  878 	addc	a,r7
      000191 FF               [12]  879 	mov	r7,a
      000192 EE               [12]  880 	mov	a,r6
      000193 24r00            [12]  881 	add	a,#_leds
      000195 F5 82            [12]  882 	mov	dpl,a
      000197 EF               [12]  883 	mov	a,r7
      000198 34s00            [12]  884 	addc	a,#(_leds >> 8)
      00019A F5 83            [12]  885 	mov	dph,a
      00019C E5*04            [12]  886 	mov	a,_setPixel_PARM_4
      00019E F0               [24]  887 	movx	@dptr,a
                                    888 ;	./src/WS2812.c:111: }
      00019F 22               [24]  889 	ret
                                    890 ;------------------------------------------------------------
                                    891 ;Allocation info for local variables in function 'setAll'
                                    892 ;------------------------------------------------------------
                                    893 ;red                       Allocated with name '_setAll_PARM_2'
                                    894 ;blue                      Allocated with name '_setAll_PARM_3'
                                    895 ;green                     Allocated to registers r7 
                                    896 ;i                         Allocated to registers r6 
                                    897 ;------------------------------------------------------------
                                    898 ;	./src/WS2812.c:114: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                    899 ;	-----------------------------------------
                                    900 ;	 function setAll
                                    901 ;	-----------------------------------------
      0001A0                        902 _setAll:
      0001A0 AF 82            [24]  903 	mov	r7,dpl
                                    904 ;	./src/WS2812.c:117: for (i = 0; i < NUM_LEDS; ++i)
      0001A2 7E 00            [12]  905 	mov	r6,#0x00
      0001A4                        906 00103$:
      0001A4 8E 04            [24]  907 	mov	ar4,r6
      0001A6 7D 00            [12]  908 	mov	r5,#0x00
      0001A8 C3               [12]  909 	clr	c
      0001A9 EC               [12]  910 	mov	a,r4
      0001AA 95*00            [12]  911 	subb	a,_NUM_LEDS
      0001AC ED               [12]  912 	mov	a,r5
      0001AD 95*01            [12]  913 	subb	a,(_NUM_LEDS + 1)
      0001AF 50 1A            [24]  914 	jnc	00105$
                                    915 ;	./src/WS2812.c:119: setPixel(i, green, red, blue);
      0001B1 8F*02            [24]  916 	mov	_setPixel_PARM_2,r7
      0001B3 85*05*03         [24]  917 	mov	_setPixel_PARM_3,_setAll_PARM_2
      0001B6 85*06*04         [24]  918 	mov	_setPixel_PARM_4,_setAll_PARM_3
      0001B9 8C 82            [24]  919 	mov	dpl,r4
      0001BB 8D 83            [24]  920 	mov	dph,r5
      0001BD C0 07            [24]  921 	push	ar7
      0001BF C0 06            [24]  922 	push	ar6
      0001C1 12r01r58         [24]  923 	lcall	_setPixel
      0001C4 D0 06            [24]  924 	pop	ar6
      0001C6 D0 07            [24]  925 	pop	ar7
                                    926 ;	./src/WS2812.c:117: for (i = 0; i < NUM_LEDS; ++i)
      0001C8 0E               [12]  927 	inc	r6
      0001C9 80 D9            [24]  928 	sjmp	00103$
      0001CB                        929 00105$:
                                    930 ;	./src/WS2812.c:121: }
      0001CB 22               [24]  931 	ret
                                    932 ;------------------------------------------------------------
                                    933 ;Allocation info for local variables in function 'FadeInOut'
                                    934 ;------------------------------------------------------------
                                    935 ;red                       Allocated with name '_FadeInOut_PARM_2'
                                    936 ;blue                      Allocated with name '_FadeInOut_PARM_3'
                                    937 ;green                     Allocated with name '_FadeInOut_green_65536_80'
                                    938 ;i                         Allocated to registers r4 
                                    939 ;g                         Allocated with name '_FadeInOut_g_65536_81'
                                    940 ;r                         Allocated with name '_FadeInOut_r_65536_81'
                                    941 ;b                         Allocated to registers 
                                    942 ;curEffect                 Allocated with name '_FadeInOut_curEffect_65536_81'
                                    943 ;curColor                  Allocated with name '_FadeInOut_curColor_65536_81'
                                    944 ;k                         Allocated with name '_FadeInOut_k_131072_85'
                                    945 ;------------------------------------------------------------
                                    946 ;	./src/WS2812.c:123: void FadeInOut(uint8_t green, uint8_t red, uint8_t blue)
                                    947 ;	-----------------------------------------
                                    948 ;	 function FadeInOut
                                    949 ;	-----------------------------------------
      0001CC                        950 _FadeInOut:
      0001CC 85 82*09         [24]  951 	mov	_FadeInOut_green_65536_80,dpl
                                    952 ;	./src/WS2812.c:127: uint8_t curEffect = effect;
      0001CF 85*00*0C         [24]  953 	mov	_FadeInOut_curEffect_65536_81,_effect
                                    954 ;	./src/WS2812.c:128: uint8_t curColor = _color;
      0001D2 85*00*0D         [24]  955 	mov	_FadeInOut_curColor_65536_81,__color
                                    956 ;	./src/WS2812.c:130: for (i = 0; i < 255; i = i + NUM_LEDS / 50)
      0001D5 7C 00            [12]  957 	mov	r4,#0x00
      0001D7                        958 00109$:
                                    959 ;	./src/WS2812.c:132: CHECK_EFF;
      0001D7 E5*00            [12]  960 	mov	a,_effect
      0001D9 B5*0C 07         [24]  961 	cjne	a,_FadeInOut_curEffect_65536_81,00101$
      0001DC E5*00            [12]  962 	mov	a,__color
      0001DE B5*0D 02         [24]  963 	cjne	a,_FadeInOut_curColor_65536_81,00148$
      0001E1 80 04            [24]  964 	sjmp	00102$
      0001E3                        965 00148$:
      0001E3                        966 00101$:
      0001E3 75*00 12         [24]  967 	mov	__status,#0x12
      0001E6 22               [24]  968 	ret
      0001E7                        969 00102$:
                                    970 ;	./src/WS2812.c:134: r = i * red / 256;
      0001E7 8C F0            [24]  971 	mov	b,r4
      0001E9 E5*07            [12]  972 	mov	a,_FadeInOut_PARM_2
      0001EB A4               [48]  973 	mul	ab
      0001EC F5 82            [12]  974 	mov	dpl,a
      0001EE 85 F0 83         [24]  975 	mov	dph,b
      0001F1 75*00 00         [24]  976 	mov	__divsint_PARM_2,#0x00
      0001F4 75*01 01         [24]  977 	mov	(__divsint_PARM_2 + 1),#0x01
      0001F7 C0 04            [24]  978 	push	ar4
      0001F9 12r00r00         [24]  979 	lcall	__divsint
      0001FC AA 82            [24]  980 	mov	r2,dpl
      0001FE D0 04            [24]  981 	pop	ar4
                                    982 ;	./src/WS2812.c:135: g = i * green / 256;
      000200 8C F0            [24]  983 	mov	b,r4
      000202 E5*09            [12]  984 	mov	a,_FadeInOut_green_65536_80
      000204 A4               [48]  985 	mul	ab
      000205 F5 82            [12]  986 	mov	dpl,a
      000207 85 F0 83         [24]  987 	mov	dph,b
      00020A 75*00 00         [24]  988 	mov	__divsint_PARM_2,#0x00
      00020D 75*01 01         [24]  989 	mov	(__divsint_PARM_2 + 1),#0x01
      000210 C0 04            [24]  990 	push	ar4
      000212 C0 02            [24]  991 	push	ar2
      000214 12r00r00         [24]  992 	lcall	__divsint
      000217 A9 82            [24]  993 	mov	r1,dpl
      000219 D0 02            [24]  994 	pop	ar2
      00021B D0 04            [24]  995 	pop	ar4
                                    996 ;	./src/WS2812.c:136: b = i * blue / 256;
      00021D 8C F0            [24]  997 	mov	b,r4
      00021F E5*08            [12]  998 	mov	a,_FadeInOut_PARM_3
      000221 A4               [48]  999 	mul	ab
      000222 F5 82            [12] 1000 	mov	dpl,a
      000224 85 F0 83         [24] 1001 	mov	dph,b
      000227 75*00 00         [24] 1002 	mov	__divsint_PARM_2,#0x00
      00022A 75*01 01         [24] 1003 	mov	(__divsint_PARM_2 + 1),#0x01
      00022D C0 04            [24] 1004 	push	ar4
      00022F C0 02            [24] 1005 	push	ar2
      000231 C0 01            [24] 1006 	push	ar1
      000233 12r00r00         [24] 1007 	lcall	__divsint
      000236 A8 82            [24] 1008 	mov	r0,dpl
      000238 D0 01            [24] 1009 	pop	ar1
      00023A D0 02            [24] 1010 	pop	ar2
      00023C 88*06            [24] 1011 	mov	_setAll_PARM_3,r0
                                   1012 ;	./src/WS2812.c:137: setAll(g, r, b);
      00023E 8A*05            [24] 1013 	mov	_setAll_PARM_2,r2
      000240 89 82            [24] 1014 	mov	dpl,r1
      000242 12r01rA0         [24] 1015 	lcall	_setAll
                                   1016 ;	./src/WS2812.c:138: showStrip();
      000245 12r00rE4         [24] 1017 	lcall	_showStrip
                                   1018 ;	./src/WS2812.c:139: _delay_ms(DELAY2);
      000248 85*00*00         [24] 1019 	mov	__divuint_PARM_2,_NUM_LEDS
      00024B 85*01*01         [24] 1020 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00024E 90 00 C8         [24] 1021 	mov	dptr,#0x00c8
      000251 12r00r00         [24] 1022 	lcall	__divuint
      000254 85*00*00         [24] 1023 	mov	__mulint_PARM_2,__delay
      000257 85*01*01         [24] 1024 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00025A 12r00r00         [24] 1025 	lcall	__mulint
      00025D 75*00 64         [24] 1026 	mov	__divuint_PARM_2,#0x64
      000260 75*01 00         [24] 1027 	mov	(__divuint_PARM_2 + 1),#0x00
      000263 12r00r00         [24] 1028 	lcall	__divuint
      000266 E5 82            [12] 1029 	mov	a,dpl
      000268 85 83 F0         [24] 1030 	mov	b,dph
      00026B 24 01            [12] 1031 	add	a,#0x01
      00026D FA               [12] 1032 	mov	r2,a
      00026E E4               [12] 1033 	clr	a
      00026F 35 F0            [12] 1034 	addc	a,b
      000271 FB               [12] 1035 	mov	r3,a
      000272 8A 00            [24] 1036 	mov	ar0,r2
      000274 8B 01            [24] 1037 	mov	ar1,r3
      000276 7A 00            [12] 1038 	mov	r2,#0x00
      000278 7B 00            [12] 1039 	mov	r3,#0x00
      00027A 88 82            [24] 1040 	mov	dpl,r0
      00027C 89 83            [24] 1041 	mov	dph,r1
      00027E 8A F0            [24] 1042 	mov	b,r2
      000280 EB               [12] 1043 	mov	a,r3
      000281 12r00r00         [24] 1044 	lcall	__delay_ms
                                   1045 ;	./src/WS2812.c:130: for (i = 0; i < 255; i = i + NUM_LEDS / 50)
      000284 85*00 82         [24] 1046 	mov	dpl,_NUM_LEDS
      000287 85*01 83         [24] 1047 	mov	dph,(_NUM_LEDS + 1)
      00028A 75*00 32         [24] 1048 	mov	__divuint_PARM_2,#0x32
      00028D 75*01 00         [24] 1049 	mov	(__divuint_PARM_2 + 1),#0x00
      000290 12r00r00         [24] 1050 	lcall	__divuint
      000293 AA 82            [24] 1051 	mov	r2,dpl
      000295 AB 83            [24] 1052 	mov	r3,dph
      000297 D0 04            [24] 1053 	pop	ar4
      000299 EA               [12] 1054 	mov	a,r2
      00029A 2C               [12] 1055 	add	a,r4
      00029B FC               [12] 1056 	mov	r4,a
      00029C BC FF 00         [24] 1057 	cjne	r4,#0xff,00149$
      00029F                       1058 00149$:
      00029F 50 03            [24] 1059 	jnc	00150$
      0002A1 02r01rD7         [24] 1060 	ljmp	00109$
      0002A4                       1061 00150$:
                                   1062 ;	./src/WS2812.c:142: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      0002A4 75*0E FF         [24] 1063 	mov	_FadeInOut_k_131072_85,#0xff
      0002A7 75*0F 00         [24] 1064 	mov	(_FadeInOut_k_131072_85 + 1),#0x00
      0002AA                       1065 00112$:
      0002AA A9*0E            [24] 1066 	mov	r1,_FadeInOut_k_131072_85
      0002AC AA*0F            [24] 1067 	mov	r2,(_FadeInOut_k_131072_85 + 1)
      0002AE C3               [12] 1068 	clr	c
      0002AF E4               [12] 1069 	clr	a
      0002B0 99               [12] 1070 	subb	a,r1
      0002B1 74 80            [12] 1071 	mov	a,#(0x00 ^ 0x80)
      0002B3 8A F0            [24] 1072 	mov	b,r2
      0002B5 63 F0 80         [24] 1073 	xrl	b,#0x80
      0002B8 95 F0            [12] 1074 	subb	a,b
      0002BA 40 01            [24] 1075 	jc	00151$
      0002BC 22               [24] 1076 	ret
      0002BD                       1077 00151$:
                                   1078 ;	./src/WS2812.c:144: CHECK_EFF;
      0002BD E5*00            [12] 1079 	mov	a,_effect
      0002BF B5*0C 07         [24] 1080 	cjne	a,_FadeInOut_curEffect_65536_81,00105$
      0002C2 E5*00            [12] 1081 	mov	a,__color
      0002C4 B5*0D 02         [24] 1082 	cjne	a,_FadeInOut_curColor_65536_81,00154$
      0002C7 80 04            [24] 1083 	sjmp	00106$
      0002C9                       1084 00154$:
      0002C9                       1085 00105$:
      0002C9 75*00 12         [24] 1086 	mov	__status,#0x12
      0002CC 22               [24] 1087 	ret
      0002CD                       1088 00106$:
                                   1089 ;	./src/WS2812.c:145: r = (k / 256.0) * red;
      0002CD 85*0E 82         [24] 1090 	mov	dpl,_FadeInOut_k_131072_85
      0002D0 85*0F 83         [24] 1091 	mov	dph,(_FadeInOut_k_131072_85 + 1)
      0002D3 12r00r00         [24] 1092 	lcall	___sint2fs
      0002D6 A8 82            [24] 1093 	mov	r0,dpl
      0002D8 A9 83            [24] 1094 	mov	r1,dph
      0002DA AA F0            [24] 1095 	mov	r2,b
      0002DC FD               [12] 1096 	mov	r5,a
      0002DD E4               [12] 1097 	clr	a
      0002DE C0 E0            [24] 1098 	push	acc
      0002E0 C0 E0            [24] 1099 	push	acc
      0002E2 74 80            [12] 1100 	mov	a,#0x80
      0002E4 C0 E0            [24] 1101 	push	acc
      0002E6 74 43            [12] 1102 	mov	a,#0x43
      0002E8 C0 E0            [24] 1103 	push	acc
      0002EA 88 82            [24] 1104 	mov	dpl,r0
      0002EC 89 83            [24] 1105 	mov	dph,r1
      0002EE 8A F0            [24] 1106 	mov	b,r2
      0002F0 ED               [12] 1107 	mov	a,r5
      0002F1 12r00r00         [24] 1108 	lcall	___fsdiv
      0002F4 A8 82            [24] 1109 	mov	r0,dpl
      0002F6 A9 83            [24] 1110 	mov	r1,dph
      0002F8 AA F0            [24] 1111 	mov	r2,b
      0002FA FD               [12] 1112 	mov	r5,a
      0002FB E5 81            [12] 1113 	mov	a,sp
      0002FD 24 FC            [12] 1114 	add	a,#0xfc
      0002FF F5 81            [12] 1115 	mov	sp,a
      000301 85*07 82         [24] 1116 	mov	dpl,_FadeInOut_PARM_2
      000304 C0 05            [24] 1117 	push	ar5
      000306 C0 02            [24] 1118 	push	ar2
      000308 C0 01            [24] 1119 	push	ar1
      00030A C0 00            [24] 1120 	push	ar0
      00030C 12r00r00         [24] 1121 	lcall	___uchar2fs
      00030F AB 82            [24] 1122 	mov	r3,dpl
      000311 AC 83            [24] 1123 	mov	r4,dph
      000313 AE F0            [24] 1124 	mov	r6,b
      000315 FF               [12] 1125 	mov	r7,a
      000316 D0 00            [24] 1126 	pop	ar0
      000318 D0 01            [24] 1127 	pop	ar1
      00031A D0 02            [24] 1128 	pop	ar2
      00031C D0 05            [24] 1129 	pop	ar5
      00031E C0 05            [24] 1130 	push	ar5
      000320 C0 02            [24] 1131 	push	ar2
      000322 C0 01            [24] 1132 	push	ar1
      000324 C0 00            [24] 1133 	push	ar0
      000326 C0 03            [24] 1134 	push	ar3
      000328 C0 04            [24] 1135 	push	ar4
      00032A C0 06            [24] 1136 	push	ar6
      00032C C0 07            [24] 1137 	push	ar7
      00032E 88 82            [24] 1138 	mov	dpl,r0
      000330 89 83            [24] 1139 	mov	dph,r1
      000332 8A F0            [24] 1140 	mov	b,r2
      000334 ED               [12] 1141 	mov	a,r5
      000335 12r00r00         [24] 1142 	lcall	___fsmul
      000338 AB 82            [24] 1143 	mov	r3,dpl
      00033A AC 83            [24] 1144 	mov	r4,dph
      00033C AE F0            [24] 1145 	mov	r6,b
      00033E FF               [12] 1146 	mov	r7,a
      00033F E5 81            [12] 1147 	mov	a,sp
      000341 24 FC            [12] 1148 	add	a,#0xfc
      000343 F5 81            [12] 1149 	mov	sp,a
      000345 8B 82            [24] 1150 	mov	dpl,r3
      000347 8C 83            [24] 1151 	mov	dph,r4
      000349 8E F0            [24] 1152 	mov	b,r6
      00034B EF               [12] 1153 	mov	a,r7
      00034C 12r00r00         [24] 1154 	lcall	___fs2uchar
      00034F 85 82*0B         [24] 1155 	mov	_FadeInOut_r_65536_81,dpl
                                   1156 ;	./src/WS2812.c:146: g = (k / 256.0) * green;
      000352 85*09 82         [24] 1157 	mov	dpl,_FadeInOut_green_65536_80
      000355 12r00r00         [24] 1158 	lcall	___uchar2fs
      000358 AB 82            [24] 1159 	mov	r3,dpl
      00035A AC 83            [24] 1160 	mov	r4,dph
      00035C AE F0            [24] 1161 	mov	r6,b
      00035E FF               [12] 1162 	mov	r7,a
      00035F D0 00            [24] 1163 	pop	ar0
      000361 D0 01            [24] 1164 	pop	ar1
      000363 D0 02            [24] 1165 	pop	ar2
      000365 D0 05            [24] 1166 	pop	ar5
      000367 C0 05            [24] 1167 	push	ar5
      000369 C0 02            [24] 1168 	push	ar2
      00036B C0 01            [24] 1169 	push	ar1
      00036D C0 00            [24] 1170 	push	ar0
      00036F C0 03            [24] 1171 	push	ar3
      000371 C0 04            [24] 1172 	push	ar4
      000373 C0 06            [24] 1173 	push	ar6
      000375 C0 07            [24] 1174 	push	ar7
      000377 88 82            [24] 1175 	mov	dpl,r0
      000379 89 83            [24] 1176 	mov	dph,r1
      00037B 8A F0            [24] 1177 	mov	b,r2
      00037D ED               [12] 1178 	mov	a,r5
      00037E 12r00r00         [24] 1179 	lcall	___fsmul
      000381 AB 82            [24] 1180 	mov	r3,dpl
      000383 AC 83            [24] 1181 	mov	r4,dph
      000385 AE F0            [24] 1182 	mov	r6,b
      000387 FF               [12] 1183 	mov	r7,a
      000388 E5 81            [12] 1184 	mov	a,sp
      00038A 24 FC            [12] 1185 	add	a,#0xfc
      00038C F5 81            [12] 1186 	mov	sp,a
      00038E 8B 82            [24] 1187 	mov	dpl,r3
      000390 8C 83            [24] 1188 	mov	dph,r4
      000392 8E F0            [24] 1189 	mov	b,r6
      000394 EF               [12] 1190 	mov	a,r7
      000395 12r00r00         [24] 1191 	lcall	___fs2uchar
      000398 85 82*0A         [24] 1192 	mov	_FadeInOut_g_65536_81,dpl
                                   1193 ;	./src/WS2812.c:147: b = (k / 256.0) * blue;
      00039B 85*08 82         [24] 1194 	mov	dpl,_FadeInOut_PARM_3
      00039E 12r00r00         [24] 1195 	lcall	___uchar2fs
      0003A1 AB 82            [24] 1196 	mov	r3,dpl
      0003A3 AC 83            [24] 1197 	mov	r4,dph
      0003A5 AE F0            [24] 1198 	mov	r6,b
      0003A7 FF               [12] 1199 	mov	r7,a
      0003A8 D0 00            [24] 1200 	pop	ar0
      0003AA D0 01            [24] 1201 	pop	ar1
      0003AC D0 02            [24] 1202 	pop	ar2
      0003AE D0 05            [24] 1203 	pop	ar5
      0003B0 C0 03            [24] 1204 	push	ar3
      0003B2 C0 04            [24] 1205 	push	ar4
      0003B4 C0 06            [24] 1206 	push	ar6
      0003B6 C0 07            [24] 1207 	push	ar7
      0003B8 88 82            [24] 1208 	mov	dpl,r0
      0003BA 89 83            [24] 1209 	mov	dph,r1
      0003BC 8A F0            [24] 1210 	mov	b,r2
      0003BE ED               [12] 1211 	mov	a,r5
      0003BF 12r00r00         [24] 1212 	lcall	___fsmul
      0003C2 AC 82            [24] 1213 	mov	r4,dpl
      0003C4 AD 83            [24] 1214 	mov	r5,dph
      0003C6 AE F0            [24] 1215 	mov	r6,b
      0003C8 FF               [12] 1216 	mov	r7,a
      0003C9 E5 81            [12] 1217 	mov	a,sp
      0003CB 24 FC            [12] 1218 	add	a,#0xfc
      0003CD F5 81            [12] 1219 	mov	sp,a
      0003CF 8C 82            [24] 1220 	mov	dpl,r4
      0003D1 8D 83            [24] 1221 	mov	dph,r5
      0003D3 8E F0            [24] 1222 	mov	b,r6
      0003D5 EF               [12] 1223 	mov	a,r7
      0003D6 12r00r00         [24] 1224 	lcall	___fs2uchar
      0003D9 85 82*06         [24] 1225 	mov	_setAll_PARM_3,dpl
                                   1226 ;	./src/WS2812.c:148: setAll(g, r, b);
      0003DC 85*0B*05         [24] 1227 	mov	_setAll_PARM_2,_FadeInOut_r_65536_81
      0003DF 85*0A 82         [24] 1228 	mov	dpl,_FadeInOut_g_65536_81
      0003E2 12r01rA0         [24] 1229 	lcall	_setAll
                                   1230 ;	./src/WS2812.c:149: showStrip();
      0003E5 12r00rE4         [24] 1231 	lcall	_showStrip
                                   1232 ;	./src/WS2812.c:150: _delay_ms(DELAY2);
      0003E8 85*00*00         [24] 1233 	mov	__divuint_PARM_2,_NUM_LEDS
      0003EB 85*01*01         [24] 1234 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0003EE 90 00 C8         [24] 1235 	mov	dptr,#0x00c8
      0003F1 12r00r00         [24] 1236 	lcall	__divuint
      0003F4 85*00*00         [24] 1237 	mov	__mulint_PARM_2,__delay
      0003F7 85*01*01         [24] 1238 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0003FA 12r00r00         [24] 1239 	lcall	__mulint
      0003FD 75*00 64         [24] 1240 	mov	__divuint_PARM_2,#0x64
      000400 75*01 00         [24] 1241 	mov	(__divuint_PARM_2 + 1),#0x00
      000403 12r00r00         [24] 1242 	lcall	__divuint
      000406 E5 82            [12] 1243 	mov	a,dpl
      000408 85 83 F0         [24] 1244 	mov	b,dph
      00040B 24 01            [12] 1245 	add	a,#0x01
      00040D FE               [12] 1246 	mov	r6,a
      00040E E4               [12] 1247 	clr	a
      00040F 35 F0            [12] 1248 	addc	a,b
      000411 FF               [12] 1249 	mov	r7,a
      000412 7D 00            [12] 1250 	mov	r5,#0x00
      000414 7C 00            [12] 1251 	mov	r4,#0x00
      000416 8E 82            [24] 1252 	mov	dpl,r6
      000418 8F 83            [24] 1253 	mov	dph,r7
      00041A 8D F0            [24] 1254 	mov	b,r5
      00041C EC               [12] 1255 	mov	a,r4
      00041D 12r00r00         [24] 1256 	lcall	__delay_ms
                                   1257 ;	./src/WS2812.c:142: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      000420 85*00 82         [24] 1258 	mov	dpl,_NUM_LEDS
      000423 85*01 83         [24] 1259 	mov	dph,(_NUM_LEDS + 1)
      000426 75*00 19         [24] 1260 	mov	__divuint_PARM_2,#0x19
      000429 75*01 00         [24] 1261 	mov	(__divuint_PARM_2 + 1),#0x00
      00042C 12r00r00         [24] 1262 	lcall	__divuint
      00042F AE 82            [24] 1263 	mov	r6,dpl
      000431 AF 83            [24] 1264 	mov	r7,dph
      000433 AB*0E            [24] 1265 	mov	r3,_FadeInOut_k_131072_85
      000435 AC*0F            [24] 1266 	mov	r4,(_FadeInOut_k_131072_85 + 1)
      000437 EB               [12] 1267 	mov	a,r3
      000438 C3               [12] 1268 	clr	c
      000439 9E               [12] 1269 	subb	a,r6
      00043A FE               [12] 1270 	mov	r6,a
      00043B EC               [12] 1271 	mov	a,r4
      00043C 9F               [12] 1272 	subb	a,r7
      00043D FF               [12] 1273 	mov	r7,a
      00043E 8E*0E            [24] 1274 	mov	_FadeInOut_k_131072_85,r6
      000440 8F*0F            [24] 1275 	mov	(_FadeInOut_k_131072_85 + 1),r7
                                   1276 ;	./src/WS2812.c:152: }
      000442 02r02rAA         [24] 1277 	ljmp	00112$
                                   1278 ;------------------------------------------------------------
                                   1279 ;Allocation info for local variables in function 'CylonBounce'
                                   1280 ;------------------------------------------------------------
                                   1281 ;red                       Allocated with name '_CylonBounce_PARM_2'
                                   1282 ;blue                      Allocated with name '_CylonBounce_PARM_3'
                                   1283 ;EyeSize                   Allocated with name '_CylonBounce_PARM_4'
                                   1284 ;ReturnDelay               Allocated with name '_CylonBounce_PARM_5'
                                   1285 ;green                     Allocated with name '_CylonBounce_green_65536_88'
                                   1286 ;i                         Allocated with name '_CylonBounce_i_65537_90'
                                   1287 ;j                         Allocated with name '_CylonBounce_j_65537_90'
                                   1288 ;k                         Allocated to registers 
                                   1289 ;sloc0                     Allocated with name '_CylonBounce_sloc0_1_0'
                                   1290 ;sloc1                     Allocated with name '_CylonBounce_sloc1_1_0'
                                   1291 ;------------------------------------------------------------
                                   1292 ;	./src/WS2812.c:154: void CylonBounce(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t ReturnDelay)
                                   1293 ;	-----------------------------------------
                                   1294 ;	 function CylonBounce
                                   1295 ;	-----------------------------------------
      000445                       1296 _CylonBounce:
      000445 85 82*16         [24] 1297 	mov	_CylonBounce_green_65536_88,dpl
                                   1298 ;	./src/WS2812.c:156: curEffect = effect;
      000448 85*00*01         [24] 1299 	mov	_curEffect,_effect
                                   1300 ;	./src/WS2812.c:157: curColor = _color;
      00044B 85*00*00         [24] 1301 	mov	_curColor,__color
                                   1302 ;	./src/WS2812.c:159: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      00044E 75*17 00         [24] 1303 	mov	_CylonBounce_i_65537_90,#0x00
      000451                       1304 00115$:
      000451 AC*12            [24] 1305 	mov	r4,_CylonBounce_PARM_4
      000453 AD*13            [24] 1306 	mov	r5,(_CylonBounce_PARM_4 + 1)
      000455 E5*00            [12] 1307 	mov	a,_NUM_LEDS
      000457 C3               [12] 1308 	clr	c
      000458 9C               [12] 1309 	subb	a,r4
      000459 FA               [12] 1310 	mov	r2,a
      00045A E5*01            [12] 1311 	mov	a,(_NUM_LEDS + 1)
      00045C 9D               [12] 1312 	subb	a,r5
      00045D FB               [12] 1313 	mov	r3,a
      00045E EA               [12] 1314 	mov	a,r2
      00045F 24 FE            [12] 1315 	add	a,#0xfe
      000461 FA               [12] 1316 	mov	r2,a
      000462 EB               [12] 1317 	mov	a,r3
      000463 34 FF            [12] 1318 	addc	a,#0xff
      000465 FB               [12] 1319 	mov	r3,a
      000466 A8*17            [24] 1320 	mov	r0,_CylonBounce_i_65537_90
      000468 79 00            [12] 1321 	mov	r1,#0x00
      00046A C3               [12] 1322 	clr	c
      00046B E8               [12] 1323 	mov	a,r0
      00046C 9A               [12] 1324 	subb	a,r2
      00046D E9               [12] 1325 	mov	a,r1
      00046E 9B               [12] 1326 	subb	a,r3
      00046F 40 03            [24] 1327 	jc	00165$
      000471 02r05r9F         [24] 1328 	ljmp	00105$
      000474                       1329 00165$:
                                   1330 ;	./src/WS2812.c:161: setAll(0, 0, 0);
      000474 75*05 00         [24] 1331 	mov	_setAll_PARM_2,#0x00
      000477 75*06 00         [24] 1332 	mov	_setAll_PARM_3,#0x00
      00047A 75 82 00         [24] 1333 	mov	dpl,#0x00
      00047D 12r01rA0         [24] 1334 	lcall	_setAll
                                   1335 ;	./src/WS2812.c:162: setPixel(i, red / 10, green / 10, blue / 10);
      000480 AA*17            [24] 1336 	mov	r2,_CylonBounce_i_65537_90
      000482 7B 00            [12] 1337 	mov	r3,#0x00
      000484 A8*10            [24] 1338 	mov	r0,_CylonBounce_PARM_2
      000486 79 00            [12] 1339 	mov	r1,#0x00
      000488 75*00 0A         [24] 1340 	mov	__divsint_PARM_2,#0x0a
                                   1341 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00048B 8B*01            [24] 1342 	mov	(__divsint_PARM_2 + 1),r3
      00048D 88 82            [24] 1343 	mov	dpl,r0
      00048F 89 83            [24] 1344 	mov	dph,r1
      000491 C0 03            [24] 1345 	push	ar3
      000493 C0 02            [24] 1346 	push	ar2
      000495 12r00r00         [24] 1347 	lcall	__divsint
      000498 A8 82            [24] 1348 	mov	r0,dpl
      00049A A9*16            [24] 1349 	mov	r1,_CylonBounce_green_65536_88
      00049C 7F 00            [12] 1350 	mov	r7,#0x00
      00049E 75*00 0A         [24] 1351 	mov	__divsint_PARM_2,#0x0a
                                   1352 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0004A1 8F*01            [24] 1353 	mov	(__divsint_PARM_2 + 1),r7
      0004A3 89 82            [24] 1354 	mov	dpl,r1
      0004A5 8F 83            [24] 1355 	mov	dph,r7
      0004A7 C0 00            [24] 1356 	push	ar0
      0004A9 12r00r00         [24] 1357 	lcall	__divsint
      0004AC A9 82            [24] 1358 	mov	r1,dpl
      0004AE D0 00            [24] 1359 	pop	ar0
      0004B0 AE*11            [24] 1360 	mov	r6,_CylonBounce_PARM_3
      0004B2 7F 00            [12] 1361 	mov	r7,#0x00
      0004B4 75*00 0A         [24] 1362 	mov	__divsint_PARM_2,#0x0a
                                   1363 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0004B7 8F*01            [24] 1364 	mov	(__divsint_PARM_2 + 1),r7
      0004B9 8E 82            [24] 1365 	mov	dpl,r6
      0004BB 8F 83            [24] 1366 	mov	dph,r7
      0004BD C0 01            [24] 1367 	push	ar1
      0004BF C0 00            [24] 1368 	push	ar0
      0004C1 12r00r00         [24] 1369 	lcall	__divsint
      0004C4 AE 82            [24] 1370 	mov	r6,dpl
      0004C6 D0 00            [24] 1371 	pop	ar0
      0004C8 D0 01            [24] 1372 	pop	ar1
      0004CA D0 02            [24] 1373 	pop	ar2
      0004CC D0 03            [24] 1374 	pop	ar3
      0004CE 88*02            [24] 1375 	mov	_setPixel_PARM_2,r0
      0004D0 89*03            [24] 1376 	mov	_setPixel_PARM_3,r1
      0004D2 8E*04            [24] 1377 	mov	_setPixel_PARM_4,r6
      0004D4 8A 82            [24] 1378 	mov	dpl,r2
      0004D6 8B 83            [24] 1379 	mov	dph,r3
      0004D8 C0 06            [24] 1380 	push	ar6
      0004DA C0 01            [24] 1381 	push	ar1
      0004DC C0 00            [24] 1382 	push	ar0
      0004DE 12r01r58         [24] 1383 	lcall	_setPixel
      0004E1 D0 00            [24] 1384 	pop	ar0
      0004E3 D0 01            [24] 1385 	pop	ar1
      0004E5 D0 06            [24] 1386 	pop	ar6
                                   1387 ;	./src/WS2812.c:163: for (j = 1; j <= EyeSize; j++)
      0004E7 75*18 01         [24] 1388 	mov	_CylonBounce_j_65537_90,#0x01
      0004EA                       1389 00112$:
      0004EA AA*18            [24] 1390 	mov	r2,_CylonBounce_j_65537_90
      0004EC 7B 00            [12] 1391 	mov	r3,#0x00
      0004EE C3               [12] 1392 	clr	c
      0004EF E5*12            [12] 1393 	mov	a,_CylonBounce_PARM_4
      0004F1 9A               [12] 1394 	subb	a,r2
      0004F2 E5*13            [12] 1395 	mov	a,(_CylonBounce_PARM_4 + 1)
      0004F4 64 80            [12] 1396 	xrl	a,#0x80
      0004F6 8B F0            [24] 1397 	mov	b,r3
      0004F8 63 F0 80         [24] 1398 	xrl	b,#0x80
      0004FB 95 F0            [12] 1399 	subb	a,b
      0004FD 40 42            [24] 1400 	jc	00104$
                                   1401 ;	./src/WS2812.c:165: CHECK_EFF;
      0004FF E5*00            [12] 1402 	mov	a,_effect
      000501 B5*01 07         [24] 1403 	cjne	a,_curEffect,00101$
      000504 E5*00            [12] 1404 	mov	a,__color
      000506 B5*00 02         [24] 1405 	cjne	a,_curColor,00169$
      000509 80 04            [24] 1406 	sjmp	00102$
      00050B                       1407 00169$:
      00050B                       1408 00101$:
      00050B 75*00 12         [24] 1409 	mov	__status,#0x12
      00050E 22               [24] 1410 	ret
      00050F                       1411 00102$:
                                   1412 ;	./src/WS2812.c:166: setPixel(i + j, green, red, blue);
      00050F C0 06            [24] 1413 	push	ar6
      000511 AA*17            [24] 1414 	mov	r2,_CylonBounce_i_65537_90
      000513 7B 00            [12] 1415 	mov	r3,#0x00
      000515 AE*18            [24] 1416 	mov	r6,_CylonBounce_j_65537_90
      000517 7F 00            [12] 1417 	mov	r7,#0x00
      000519 EE               [12] 1418 	mov	a,r6
      00051A 2A               [12] 1419 	add	a,r2
      00051B FA               [12] 1420 	mov	r2,a
      00051C EF               [12] 1421 	mov	a,r7
      00051D 3B               [12] 1422 	addc	a,r3
      00051E FB               [12] 1423 	mov	r3,a
      00051F 8A 82            [24] 1424 	mov	dpl,r2
      000521 8B 83            [24] 1425 	mov	dph,r3
      000523 85*16*02         [24] 1426 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_88
      000526 85*10*03         [24] 1427 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000529 85*11*04         [24] 1428 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      00052C C0 06            [24] 1429 	push	ar6
      00052E C0 01            [24] 1430 	push	ar1
      000530 C0 00            [24] 1431 	push	ar0
      000532 12r01r58         [24] 1432 	lcall	_setPixel
      000535 D0 00            [24] 1433 	pop	ar0
      000537 D0 01            [24] 1434 	pop	ar1
      000539 D0 06            [24] 1435 	pop	ar6
                                   1436 ;	./src/WS2812.c:163: for (j = 1; j <= EyeSize; j++)
      00053B 05*18            [12] 1437 	inc	_CylonBounce_j_65537_90
      00053D D0 06            [24] 1438 	pop	ar6
      00053F 80 A9            [24] 1439 	sjmp	00112$
      000541                       1440 00104$:
                                   1441 ;	./src/WS2812.c:168: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      000541 AB*17            [24] 1442 	mov	r3,_CylonBounce_i_65537_90
      000543 7F 00            [12] 1443 	mov	r7,#0x00
      000545 E5*12            [12] 1444 	mov	a,_CylonBounce_PARM_4
      000547 2B               [12] 1445 	add	a,r3
      000548 FB               [12] 1446 	mov	r3,a
      000549 E5*13            [12] 1447 	mov	a,(_CylonBounce_PARM_4 + 1)
      00054B 3F               [12] 1448 	addc	a,r7
      00054C FF               [12] 1449 	mov	r7,a
      00054D 0B               [12] 1450 	inc	r3
      00054E BB 00 01         [24] 1451 	cjne	r3,#0x00,00170$
      000551 0F               [12] 1452 	inc	r7
      000552                       1453 00170$:
      000552 8B 82            [24] 1454 	mov	dpl,r3
      000554 8F 83            [24] 1455 	mov	dph,r7
      000556 88*02            [24] 1456 	mov	_setPixel_PARM_2,r0
      000558 89*03            [24] 1457 	mov	_setPixel_PARM_3,r1
      00055A 8E*04            [24] 1458 	mov	_setPixel_PARM_4,r6
      00055C 12r01r58         [24] 1459 	lcall	_setPixel
                                   1460 ;	./src/WS2812.c:169: showStrip();
      00055F 12r00rE4         [24] 1461 	lcall	_showStrip
                                   1462 ;	./src/WS2812.c:170: _delay_ms(DELAY2);
      000562 85*00*00         [24] 1463 	mov	__divuint_PARM_2,_NUM_LEDS
      000565 85*01*01         [24] 1464 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000568 90 00 C8         [24] 1465 	mov	dptr,#0x00c8
      00056B 12r00r00         [24] 1466 	lcall	__divuint
      00056E 85*00*00         [24] 1467 	mov	__mulint_PARM_2,__delay
      000571 85*01*01         [24] 1468 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000574 12r00r00         [24] 1469 	lcall	__mulint
      000577 75*00 64         [24] 1470 	mov	__divuint_PARM_2,#0x64
      00057A 75*01 00         [24] 1471 	mov	(__divuint_PARM_2 + 1),#0x00
      00057D 12r00r00         [24] 1472 	lcall	__divuint
      000580 E5 82            [12] 1473 	mov	a,dpl
      000582 85 83 F0         [24] 1474 	mov	b,dph
      000585 24 01            [12] 1475 	add	a,#0x01
      000587 FE               [12] 1476 	mov	r6,a
      000588 E4               [12] 1477 	clr	a
      000589 35 F0            [12] 1478 	addc	a,b
      00058B FF               [12] 1479 	mov	r7,a
      00058C 7B 00            [12] 1480 	mov	r3,#0x00
      00058E 7A 00            [12] 1481 	mov	r2,#0x00
      000590 8E 82            [24] 1482 	mov	dpl,r6
      000592 8F 83            [24] 1483 	mov	dph,r7
      000594 8B F0            [24] 1484 	mov	b,r3
      000596 EA               [12] 1485 	mov	a,r2
      000597 12r00r00         [24] 1486 	lcall	__delay_ms
                                   1487 ;	./src/WS2812.c:159: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      00059A 05*17            [12] 1488 	inc	_CylonBounce_i_65537_90
      00059C 02r04r51         [24] 1489 	ljmp	00115$
      00059F                       1490 00105$:
                                   1491 ;	./src/WS2812.c:173: _delay_ms(ReturnDelay);
      00059F AA*14            [24] 1492 	mov	r2,_CylonBounce_PARM_5
      0005A1 E5*15            [12] 1493 	mov	a,(_CylonBounce_PARM_5 + 1)
      0005A3 FB               [12] 1494 	mov	r3,a
      0005A4 33               [12] 1495 	rlc	a
      0005A5 95 E0            [12] 1496 	subb	a,acc
      0005A7 FE               [12] 1497 	mov	r6,a
      0005A8 FF               [12] 1498 	mov	r7,a
      0005A9 8A 82            [24] 1499 	mov	dpl,r2
      0005AB 8B 83            [24] 1500 	mov	dph,r3
      0005AD 8E F0            [24] 1501 	mov	b,r6
      0005AF C0 07            [24] 1502 	push	ar7
      0005B1 C0 06            [24] 1503 	push	ar6
      0005B3 C0 05            [24] 1504 	push	ar5
      0005B5 C0 04            [24] 1505 	push	ar4
      0005B7 C0 03            [24] 1506 	push	ar3
      0005B9 C0 02            [24] 1507 	push	ar2
      0005BB 12r00r00         [24] 1508 	lcall	__delay_ms
      0005BE D0 02            [24] 1509 	pop	ar2
      0005C0 D0 03            [24] 1510 	pop	ar3
      0005C2 D0 04            [24] 1511 	pop	ar4
      0005C4 D0 05            [24] 1512 	pop	ar5
      0005C6 D0 06            [24] 1513 	pop	ar6
      0005C8 D0 07            [24] 1514 	pop	ar7
                                   1515 ;	./src/WS2812.c:175: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      0005CA E5*00            [12] 1516 	mov	a,_NUM_LEDS
      0005CC C3               [12] 1517 	clr	c
      0005CD 9C               [12] 1518 	subb	a,r4
      0005CE FC               [12] 1519 	mov	r4,a
      0005CF E5*01            [12] 1520 	mov	a,(_NUM_LEDS + 1)
      0005D1 9D               [12] 1521 	subb	a,r5
      0005D2 FD               [12] 1522 	mov	r5,a
      0005D3 EC               [12] 1523 	mov	a,r4
      0005D4 24 FE            [12] 1524 	add	a,#0xfe
      0005D6 FC               [12] 1525 	mov	r4,a
      0005D7 ED               [12] 1526 	mov	a,r5
      0005D8 34 FF            [12] 1527 	addc	a,#0xff
      0005DA FD               [12] 1528 	mov	r5,a
      0005DB                       1529 00121$:
      0005DB 8C 00            [24] 1530 	mov	ar0,r4
      0005DD 8D 01            [24] 1531 	mov	ar1,r5
      0005DF C3               [12] 1532 	clr	c
      0005E0 E4               [12] 1533 	clr	a
      0005E1 98               [12] 1534 	subb	a,r0
      0005E2 74 80            [12] 1535 	mov	a,#(0x00 ^ 0x80)
      0005E4 89 F0            [24] 1536 	mov	b,r1
      0005E6 63 F0 80         [24] 1537 	xrl	b,#0x80
      0005E9 95 F0            [12] 1538 	subb	a,b
      0005EB 40 03            [24] 1539 	jc	00171$
      0005ED 02r07rF5         [24] 1540 	ljmp	00110$
      0005F0                       1541 00171$:
                                   1542 ;	./src/WS2812.c:177: setAll(0, 0, 0);
      0005F0 C0 02            [24] 1543 	push	ar2
      0005F2 C0 03            [24] 1544 	push	ar3
      0005F4 C0 06            [24] 1545 	push	ar6
      0005F6 C0 07            [24] 1546 	push	ar7
      0005F8 75*05 00         [24] 1547 	mov	_setAll_PARM_2,#0x00
      0005FB 75*06 00         [24] 1548 	mov	_setAll_PARM_3,#0x00
      0005FE 75 82 00         [24] 1549 	mov	dpl,#0x00
      000601 C0 07            [24] 1550 	push	ar7
      000603 C0 06            [24] 1551 	push	ar6
      000605 C0 05            [24] 1552 	push	ar5
      000607 C0 04            [24] 1553 	push	ar4
      000609 C0 03            [24] 1554 	push	ar3
      00060B C0 02            [24] 1555 	push	ar2
      00060D 12r01rA0         [24] 1556 	lcall	_setAll
                                   1557 ;	./src/WS2812.c:178: setPixel(k, red / 10, green / 10, blue / 10);
      000610 A8*10            [24] 1558 	mov	r0,_CylonBounce_PARM_2
      000612 79 00            [12] 1559 	mov	r1,#0x00
      000614 75*00 0A         [24] 1560 	mov	__divsint_PARM_2,#0x0a
                                   1561 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000617 89*01            [24] 1562 	mov	(__divsint_PARM_2 + 1),r1
      000619 88 82            [24] 1563 	mov	dpl,r0
      00061B 89 83            [24] 1564 	mov	dph,r1
      00061D 12r00r00         [24] 1565 	lcall	__divsint
      000620 A8 82            [24] 1566 	mov	r0,dpl
      000622 D0 02            [24] 1567 	pop	ar2
      000624 D0 03            [24] 1568 	pop	ar3
      000626 D0 04            [24] 1569 	pop	ar4
      000628 D0 05            [24] 1570 	pop	ar5
      00062A D0 06            [24] 1571 	pop	ar6
      00062C D0 07            [24] 1572 	pop	ar7
      00062E A9*16            [24] 1573 	mov	r1,_CylonBounce_green_65536_88
      000630 7F 00            [12] 1574 	mov	r7,#0x00
      000632 75*00 0A         [24] 1575 	mov	__divsint_PARM_2,#0x0a
                                   1576 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000635 8F*01            [24] 1577 	mov	(__divsint_PARM_2 + 1),r7
      000637 89 82            [24] 1578 	mov	dpl,r1
      000639 8F 83            [24] 1579 	mov	dph,r7
      00063B C0 05            [24] 1580 	push	ar5
      00063D C0 04            [24] 1581 	push	ar4
      00063F C0 03            [24] 1582 	push	ar3
      000641 C0 02            [24] 1583 	push	ar2
      000643 C0 00            [24] 1584 	push	ar0
      000645 12r00r00         [24] 1585 	lcall	__divsint
      000648 AE 82            [24] 1586 	mov	r6,dpl
      00064A 8E*19            [24] 1587 	mov	_CylonBounce_sloc0_1_0,r6
      00064C AE*11            [24] 1588 	mov	r6,_CylonBounce_PARM_3
      00064E 7F 00            [12] 1589 	mov	r7,#0x00
      000650 75*00 0A         [24] 1590 	mov	__divsint_PARM_2,#0x0a
                                   1591 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000653 8F*01            [24] 1592 	mov	(__divsint_PARM_2 + 1),r7
      000655 8E 82            [24] 1593 	mov	dpl,r6
      000657 8F 83            [24] 1594 	mov	dph,r7
      000659 12r00r00         [24] 1595 	lcall	__divsint
      00065C AE 82            [24] 1596 	mov	r6,dpl
      00065E AF 83            [24] 1597 	mov	r7,dph
      000660 D0 00            [24] 1598 	pop	ar0
      000662 D0 02            [24] 1599 	pop	ar2
      000664 D0 03            [24] 1600 	pop	ar3
      000666 D0 04            [24] 1601 	pop	ar4
      000668 D0 05            [24] 1602 	pop	ar5
      00066A 8E*1A            [24] 1603 	mov	_CylonBounce_sloc1_1_0,r6
      00066C 88*02            [24] 1604 	mov	_setPixel_PARM_2,r0
      00066E 85*19*03         [24] 1605 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000671 85*1A*04         [24] 1606 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000674 8C 82            [24] 1607 	mov	dpl,r4
      000676 8D 83            [24] 1608 	mov	dph,r5
      000678 C0 07            [24] 1609 	push	ar7
      00067A C0 06            [24] 1610 	push	ar6
      00067C C0 05            [24] 1611 	push	ar5
      00067E C0 04            [24] 1612 	push	ar4
      000680 C0 03            [24] 1613 	push	ar3
      000682 C0 02            [24] 1614 	push	ar2
      000684 C0 00            [24] 1615 	push	ar0
      000686 12r01r58         [24] 1616 	lcall	_setPixel
      000689 D0 00            [24] 1617 	pop	ar0
      00068B D0 02            [24] 1618 	pop	ar2
      00068D D0 03            [24] 1619 	pop	ar3
      00068F D0 04            [24] 1620 	pop	ar4
      000691 D0 05            [24] 1621 	pop	ar5
      000693 D0 06            [24] 1622 	pop	ar6
      000695 D0 07            [24] 1623 	pop	ar7
                                   1624 ;	./src/WS2812.c:179: for (j = 1; j <= EyeSize; j++)
      000697 75*18 01         [24] 1625 	mov	_CylonBounce_j_65537_90,#0x01
                                   1626 ;	./src/WS2812.c:189: _delay_ms(ReturnDelay);
      00069A D0 07            [24] 1627 	pop	ar7
      00069C D0 06            [24] 1628 	pop	ar6
      00069E D0 03            [24] 1629 	pop	ar3
      0006A0 D0 02            [24] 1630 	pop	ar2
                                   1631 ;	./src/WS2812.c:179: for (j = 1; j <= EyeSize; j++)
      0006A2                       1632 00118$:
      0006A2 C0 02            [24] 1633 	push	ar2
      0006A4 C0 03            [24] 1634 	push	ar3
      0006A6 C0 06            [24] 1635 	push	ar6
      0006A8 C0 07            [24] 1636 	push	ar7
      0006AA A9*18            [24] 1637 	mov	r1,_CylonBounce_j_65537_90
      0006AC 7F 00            [12] 1638 	mov	r7,#0x00
      0006AE C3               [12] 1639 	clr	c
      0006AF E5*12            [12] 1640 	mov	a,_CylonBounce_PARM_4
      0006B1 99               [12] 1641 	subb	a,r1
      0006B2 E5*13            [12] 1642 	mov	a,(_CylonBounce_PARM_4 + 1)
      0006B4 64 80            [12] 1643 	xrl	a,#0x80
      0006B6 8F F0            [24] 1644 	mov	b,r7
      0006B8 63 F0 80         [24] 1645 	xrl	b,#0x80
      0006BB 95 F0            [12] 1646 	subb	a,b
      0006BD D0 07            [24] 1647 	pop	ar7
      0006BF D0 06            [24] 1648 	pop	ar6
      0006C1 D0 03            [24] 1649 	pop	ar3
      0006C3 D0 02            [24] 1650 	pop	ar2
      0006C5 40 5F            [24] 1651 	jc	00109$
                                   1652 ;	./src/WS2812.c:181: CHECK_EFF;
      0006C7 E5*00            [12] 1653 	mov	a,_effect
      0006C9 B5*01 07         [24] 1654 	cjne	a,_curEffect,00106$
      0006CC E5*00            [12] 1655 	mov	a,__color
      0006CE B5*00 02         [24] 1656 	cjne	a,_curColor,00175$
      0006D1 80 04            [24] 1657 	sjmp	00107$
      0006D3                       1658 00175$:
      0006D3                       1659 00106$:
      0006D3 75*00 12         [24] 1660 	mov	__status,#0x12
      0006D6 22               [24] 1661 	ret
      0006D7                       1662 00107$:
                                   1663 ;	./src/WS2812.c:182: setPixel(k + j, green, red, blue);
      0006D7 C0 02            [24] 1664 	push	ar2
      0006D9 C0 03            [24] 1665 	push	ar3
      0006DB C0 06            [24] 1666 	push	ar6
      0006DD C0 07            [24] 1667 	push	ar7
      0006DF A9*18            [24] 1668 	mov	r1,_CylonBounce_j_65537_90
      0006E1 7F 00            [12] 1669 	mov	r7,#0x00
      0006E3 8C 03            [24] 1670 	mov	ar3,r4
      0006E5 8D 06            [24] 1671 	mov	ar6,r5
      0006E7 E9               [12] 1672 	mov	a,r1
      0006E8 2B               [12] 1673 	add	a,r3
      0006E9 F9               [12] 1674 	mov	r1,a
      0006EA EF               [12] 1675 	mov	a,r7
      0006EB 3E               [12] 1676 	addc	a,r6
      0006EC FF               [12] 1677 	mov	r7,a
      0006ED 89 82            [24] 1678 	mov	dpl,r1
      0006EF 8F 83            [24] 1679 	mov	dph,r7
      0006F1 85*16*02         [24] 1680 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_88
      0006F4 85*10*03         [24] 1681 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      0006F7 85*11*04         [24] 1682 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      0006FA C0 07            [24] 1683 	push	ar7
      0006FC C0 06            [24] 1684 	push	ar6
      0006FE C0 05            [24] 1685 	push	ar5
      000700 C0 04            [24] 1686 	push	ar4
      000702 C0 03            [24] 1687 	push	ar3
      000704 C0 02            [24] 1688 	push	ar2
      000706 C0 00            [24] 1689 	push	ar0
      000708 12r01r58         [24] 1690 	lcall	_setPixel
      00070B D0 00            [24] 1691 	pop	ar0
      00070D D0 02            [24] 1692 	pop	ar2
      00070F D0 03            [24] 1693 	pop	ar3
      000711 D0 04            [24] 1694 	pop	ar4
      000713 D0 05            [24] 1695 	pop	ar5
      000715 D0 06            [24] 1696 	pop	ar6
      000717 D0 07            [24] 1697 	pop	ar7
                                   1698 ;	./src/WS2812.c:179: for (j = 1; j <= EyeSize; j++)
      000719 05*18            [12] 1699 	inc	_CylonBounce_j_65537_90
      00071B D0 07            [24] 1700 	pop	ar7
      00071D D0 06            [24] 1701 	pop	ar6
      00071F D0 03            [24] 1702 	pop	ar3
      000721 D0 02            [24] 1703 	pop	ar2
      000723 02r06rA2         [24] 1704 	ljmp	00118$
      000726                       1705 00109$:
                                   1706 ;	./src/WS2812.c:184: setPixel(k + EyeSize + 1, red / 10, green / 10, blue / 10);
      000726 C0 02            [24] 1707 	push	ar2
      000728 C0 03            [24] 1708 	push	ar3
      00072A C0 06            [24] 1709 	push	ar6
      00072C C0 07            [24] 1710 	push	ar7
      00072E E5*12            [12] 1711 	mov	a,_CylonBounce_PARM_4
      000730 2C               [12] 1712 	add	a,r4
      000731 F9               [12] 1713 	mov	r1,a
      000732 E5*13            [12] 1714 	mov	a,(_CylonBounce_PARM_4 + 1)
      000734 3D               [12] 1715 	addc	a,r5
      000735 FF               [12] 1716 	mov	r7,a
      000736 09               [12] 1717 	inc	r1
      000737 B9 00 01         [24] 1718 	cjne	r1,#0x00,00176$
      00073A 0F               [12] 1719 	inc	r7
      00073B                       1720 00176$:
      00073B 89 82            [24] 1721 	mov	dpl,r1
      00073D 8F 83            [24] 1722 	mov	dph,r7
      00073F 88*02            [24] 1723 	mov	_setPixel_PARM_2,r0
      000741 85*19*03         [24] 1724 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000744 85*1A*04         [24] 1725 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000747 C0 07            [24] 1726 	push	ar7
      000749 C0 06            [24] 1727 	push	ar6
      00074B C0 05            [24] 1728 	push	ar5
      00074D C0 04            [24] 1729 	push	ar4
      00074F C0 03            [24] 1730 	push	ar3
      000751 C0 02            [24] 1731 	push	ar2
      000753 12r01r58         [24] 1732 	lcall	_setPixel
                                   1733 ;	./src/WS2812.c:185: showStrip();
      000756 12r00rE4         [24] 1734 	lcall	_showStrip
                                   1735 ;	./src/WS2812.c:186: _delay_ms(DELAY2);
      000759 85*00*00         [24] 1736 	mov	__divuint_PARM_2,_NUM_LEDS
      00075C 85*01*01         [24] 1737 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00075F 90 00 C8         [24] 1738 	mov	dptr,#0x00c8
      000762 12r00r00         [24] 1739 	lcall	__divuint
      000765 D0 02            [24] 1740 	pop	ar2
      000767 D0 03            [24] 1741 	pop	ar3
      000769 D0 04            [24] 1742 	pop	ar4
      00076B D0 05            [24] 1743 	pop	ar5
      00076D D0 06            [24] 1744 	pop	ar6
      00076F D0 07            [24] 1745 	pop	ar7
      000771 85*00*00         [24] 1746 	mov	__mulint_PARM_2,__delay
      000774 85*01*01         [24] 1747 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000777 C0 05            [24] 1748 	push	ar5
      000779 C0 04            [24] 1749 	push	ar4
      00077B C0 03            [24] 1750 	push	ar3
      00077D C0 02            [24] 1751 	push	ar2
      00077F 12r00r00         [24] 1752 	lcall	__mulint
      000782 AE 82            [24] 1753 	mov	r6,dpl
      000784 AF 83            [24] 1754 	mov	r7,dph
      000786 D0 02            [24] 1755 	pop	ar2
      000788 D0 03            [24] 1756 	pop	ar3
      00078A D0 04            [24] 1757 	pop	ar4
      00078C D0 05            [24] 1758 	pop	ar5
      00078E 8E 82            [24] 1759 	mov	dpl,r6
      000790 8F 83            [24] 1760 	mov	dph,r7
      000792 75*00 64         [24] 1761 	mov	__divuint_PARM_2,#0x64
      000795 75*01 00         [24] 1762 	mov	(__divuint_PARM_2 + 1),#0x00
      000798 C0 07            [24] 1763 	push	ar7
      00079A C0 06            [24] 1764 	push	ar6
      00079C C0 05            [24] 1765 	push	ar5
      00079E C0 04            [24] 1766 	push	ar4
      0007A0 C0 03            [24] 1767 	push	ar3
      0007A2 C0 02            [24] 1768 	push	ar2
      0007A4 12r00r00         [24] 1769 	lcall	__divuint
      0007A7 E5 82            [12] 1770 	mov	a,dpl
      0007A9 85 83 F0         [24] 1771 	mov	b,dph
      0007AC D0 02            [24] 1772 	pop	ar2
      0007AE D0 03            [24] 1773 	pop	ar3
      0007B0 D0 04            [24] 1774 	pop	ar4
      0007B2 D0 05            [24] 1775 	pop	ar5
      0007B4 D0 06            [24] 1776 	pop	ar6
      0007B6 D0 07            [24] 1777 	pop	ar7
      0007B8 24 01            [12] 1778 	add	a,#0x01
      0007BA FE               [12] 1779 	mov	r6,a
      0007BB E4               [12] 1780 	clr	a
      0007BC 35 F0            [12] 1781 	addc	a,b
      0007BE FF               [12] 1782 	mov	r7,a
      0007BF 7B 00            [12] 1783 	mov	r3,#0x00
      0007C1 7A 00            [12] 1784 	mov	r2,#0x00
      0007C3 8E 82            [24] 1785 	mov	dpl,r6
      0007C5 8F 83            [24] 1786 	mov	dph,r7
      0007C7 8B F0            [24] 1787 	mov	b,r3
      0007C9 EA               [12] 1788 	mov	a,r2
      0007CA C0 07            [24] 1789 	push	ar7
      0007CC C0 06            [24] 1790 	push	ar6
      0007CE C0 05            [24] 1791 	push	ar5
      0007D0 C0 04            [24] 1792 	push	ar4
      0007D2 C0 03            [24] 1793 	push	ar3
      0007D4 C0 02            [24] 1794 	push	ar2
      0007D6 12r00r00         [24] 1795 	lcall	__delay_ms
      0007D9 D0 02            [24] 1796 	pop	ar2
      0007DB D0 03            [24] 1797 	pop	ar3
      0007DD D0 04            [24] 1798 	pop	ar4
      0007DF D0 05            [24] 1799 	pop	ar5
      0007E1 D0 06            [24] 1800 	pop	ar6
      0007E3 D0 07            [24] 1801 	pop	ar7
                                   1802 ;	./src/WS2812.c:175: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      0007E5 1C               [12] 1803 	dec	r4
      0007E6 BC FF 01         [24] 1804 	cjne	r4,#0xff,00177$
      0007E9 1D               [12] 1805 	dec	r5
      0007EA                       1806 00177$:
      0007EA D0 07            [24] 1807 	pop	ar7
      0007EC D0 06            [24] 1808 	pop	ar6
      0007EE D0 03            [24] 1809 	pop	ar3
      0007F0 D0 02            [24] 1810 	pop	ar2
      0007F2 02r05rDB         [24] 1811 	ljmp	00121$
      0007F5                       1812 00110$:
                                   1813 ;	./src/WS2812.c:189: _delay_ms(ReturnDelay);
      0007F5 8A 82            [24] 1814 	mov	dpl,r2
      0007F7 8B 83            [24] 1815 	mov	dph,r3
      0007F9 8E F0            [24] 1816 	mov	b,r6
      0007FB EF               [12] 1817 	mov	a,r7
                                   1818 ;	./src/WS2812.c:190: }
      0007FC 02r00r00         [24] 1819 	ljmp	__delay_ms
                                   1820 ;------------------------------------------------------------
                                   1821 ;Allocation info for local variables in function 'CylonBounceI'
                                   1822 ;------------------------------------------------------------
                                   1823 ;red                       Allocated with name '_CylonBounceI_PARM_2'
                                   1824 ;blue                      Allocated with name '_CylonBounceI_PARM_3'
                                   1825 ;EyeSize                   Allocated with name '_CylonBounceI_PARM_4'
                                   1826 ;ReturnDelay               Allocated with name '_CylonBounceI_PARM_5'
                                   1827 ;green                     Allocated with name '_CylonBounceI_green_65536_101'
                                   1828 ;i                         Allocated to registers r6 
                                   1829 ;j                         Allocated with name '_CylonBounceI_j_65537_103'
                                   1830 ;k                         Allocated to registers 
                                   1831 ;sloc0                     Allocated with name '_CylonBounceI_sloc0_1_0'
                                   1832 ;------------------------------------------------------------
                                   1833 ;	./src/WS2812.c:191: void CylonBounceI(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t ReturnDelay)
                                   1834 ;	-----------------------------------------
                                   1835 ;	 function CylonBounceI
                                   1836 ;	-----------------------------------------
      0007FF                       1837 _CylonBounceI:
      0007FF 85 82*21         [24] 1838 	mov	_CylonBounceI_green_65536_101,dpl
                                   1839 ;	./src/WS2812.c:193: curEffect = effect;
      000802 85*00*01         [24] 1840 	mov	_curEffect,_effect
                                   1841 ;	./src/WS2812.c:194: curColor = _color;
      000805 85*00*00         [24] 1842 	mov	_curColor,__color
                                   1843 ;	./src/WS2812.c:196: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      000808 7E 00            [12] 1844 	mov	r6,#0x00
      00080A                       1845 00115$:
      00080A AC*1D            [24] 1846 	mov	r4,_CylonBounceI_PARM_4
      00080C AD*1E            [24] 1847 	mov	r5,(_CylonBounceI_PARM_4 + 1)
      00080E E5*00            [12] 1848 	mov	a,_NUM_LEDS
      000810 C3               [12] 1849 	clr	c
      000811 9C               [12] 1850 	subb	a,r4
      000812 FA               [12] 1851 	mov	r2,a
      000813 E5*01            [12] 1852 	mov	a,(_NUM_LEDS + 1)
      000815 9D               [12] 1853 	subb	a,r5
      000816 FB               [12] 1854 	mov	r3,a
      000817 EA               [12] 1855 	mov	a,r2
      000818 24 FE            [12] 1856 	add	a,#0xfe
      00081A FA               [12] 1857 	mov	r2,a
      00081B EB               [12] 1858 	mov	a,r3
      00081C 34 FF            [12] 1859 	addc	a,#0xff
      00081E FB               [12] 1860 	mov	r3,a
      00081F 8E 00            [24] 1861 	mov	ar0,r6
      000821 79 00            [12] 1862 	mov	r1,#0x00
      000823 C3               [12] 1863 	clr	c
      000824 E8               [12] 1864 	mov	a,r0
      000825 9A               [12] 1865 	subb	a,r2
      000826 E9               [12] 1866 	mov	a,r1
      000827 9B               [12] 1867 	subb	a,r3
      000828 40 03            [24] 1868 	jc	00165$
      00082A 02r08rDC         [24] 1869 	ljmp	00105$
      00082D                       1870 00165$:
                                   1871 ;	./src/WS2812.c:198: setAll(green, red, blue);
      00082D 85*1B*05         [24] 1872 	mov	_setAll_PARM_2,_CylonBounceI_PARM_2
      000830 85*1C*06         [24] 1873 	mov	_setAll_PARM_3,_CylonBounceI_PARM_3
      000833 85*21 82         [24] 1874 	mov	dpl,_CylonBounceI_green_65536_101
      000836 C0 06            [24] 1875 	push	ar6
      000838 12r01rA0         [24] 1876 	lcall	_setAll
      00083B D0 06            [24] 1877 	pop	ar6
                                   1878 ;	./src/WS2812.c:199: for (j = 0; j <= EyeSize + 1; j++)
      00083D 7B 00            [12] 1879 	mov	r3,#0x00
      00083F                       1880 00112$:
      00083F A9*1D            [24] 1881 	mov	r1,_CylonBounceI_PARM_4
      000841 AA*1E            [24] 1882 	mov	r2,(_CylonBounceI_PARM_4 + 1)
      000843 09               [12] 1883 	inc	r1
      000844 B9 00 01         [24] 1884 	cjne	r1,#0x00,00166$
      000847 0A               [12] 1885 	inc	r2
      000848                       1886 00166$:
      000848 8B*23            [24] 1887 	mov	_CylonBounceI_sloc0_1_0,r3
      00084A 75*24 00         [24] 1888 	mov	(_CylonBounceI_sloc0_1_0 + 1),#0x00
      00084D C3               [12] 1889 	clr	c
      00084E E9               [12] 1890 	mov	a,r1
      00084F 95*23            [12] 1891 	subb	a,_CylonBounceI_sloc0_1_0
      000851 EA               [12] 1892 	mov	a,r2
      000852 64 80            [12] 1893 	xrl	a,#0x80
      000854 85*24 F0         [24] 1894 	mov	b,(_CylonBounceI_sloc0_1_0 + 1)
      000857 63 F0 80         [24] 1895 	xrl	b,#0x80
      00085A 95 F0            [12] 1896 	subb	a,b
      00085C 40 37            [24] 1897 	jc	00104$
                                   1898 ;	./src/WS2812.c:201: CHECK_EFF;
      00085E E5*00            [12] 1899 	mov	a,_effect
      000860 B5*01 07         [24] 1900 	cjne	a,_curEffect,00101$
      000863 E5*00            [12] 1901 	mov	a,__color
      000865 B5*00 02         [24] 1902 	cjne	a,_curColor,00170$
      000868 80 04            [24] 1903 	sjmp	00102$
      00086A                       1904 00170$:
      00086A                       1905 00101$:
      00086A 75*00 12         [24] 1906 	mov	__status,#0x12
      00086D 22               [24] 1907 	ret
      00086E                       1908 00102$:
                                   1909 ;	./src/WS2812.c:202: setPixel(i + j, 0, 0, 0);
      00086E 8E 01            [24] 1910 	mov	ar1,r6
      000870 7A 00            [12] 1911 	mov	r2,#0x00
      000872 E5*23            [12] 1912 	mov	a,_CylonBounceI_sloc0_1_0
      000874 29               [12] 1913 	add	a,r1
      000875 F9               [12] 1914 	mov	r1,a
      000876 E5*24            [12] 1915 	mov	a,(_CylonBounceI_sloc0_1_0 + 1)
      000878 3A               [12] 1916 	addc	a,r2
      000879 FA               [12] 1917 	mov	r2,a
      00087A 89 82            [24] 1918 	mov	dpl,r1
      00087C 8A 83            [24] 1919 	mov	dph,r2
      00087E 75*02 00         [24] 1920 	mov	_setPixel_PARM_2,#0x00
      000881 75*03 00         [24] 1921 	mov	_setPixel_PARM_3,#0x00
      000884 75*04 00         [24] 1922 	mov	_setPixel_PARM_4,#0x00
      000887 C0 06            [24] 1923 	push	ar6
      000889 C0 03            [24] 1924 	push	ar3
      00088B 12r01r58         [24] 1925 	lcall	_setPixel
      00088E D0 03            [24] 1926 	pop	ar3
      000890 D0 06            [24] 1927 	pop	ar6
                                   1928 ;	./src/WS2812.c:199: for (j = 0; j <= EyeSize + 1; j++)
      000892 0B               [12] 1929 	inc	r3
      000893 80 AA            [24] 1930 	sjmp	00112$
      000895                       1931 00104$:
                                   1932 ;	./src/WS2812.c:204: showStrip();
      000895 C0 06            [24] 1933 	push	ar6
      000897 12r00rE4         [24] 1934 	lcall	_showStrip
                                   1935 ;	./src/WS2812.c:205: _delay_ms(DELAY2);
      00089A 85*00*00         [24] 1936 	mov	__divuint_PARM_2,_NUM_LEDS
      00089D 85*01*01         [24] 1937 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0008A0 90 00 C8         [24] 1938 	mov	dptr,#0x00c8
      0008A3 12r00r00         [24] 1939 	lcall	__divuint
      0008A6 85*00*00         [24] 1940 	mov	__mulint_PARM_2,__delay
      0008A9 85*01*01         [24] 1941 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0008AC 12r00r00         [24] 1942 	lcall	__mulint
      0008AF 75*00 64         [24] 1943 	mov	__divuint_PARM_2,#0x64
      0008B2 75*01 00         [24] 1944 	mov	(__divuint_PARM_2 + 1),#0x00
      0008B5 12r00r00         [24] 1945 	lcall	__divuint
      0008B8 E5 82            [12] 1946 	mov	a,dpl
      0008BA 85 83 F0         [24] 1947 	mov	b,dph
      0008BD 24 01            [12] 1948 	add	a,#0x01
      0008BF FA               [12] 1949 	mov	r2,a
      0008C0 E4               [12] 1950 	clr	a
      0008C1 35 F0            [12] 1951 	addc	a,b
      0008C3 FB               [12] 1952 	mov	r3,a
      0008C4 8A 00            [24] 1953 	mov	ar0,r2
      0008C6 8B 01            [24] 1954 	mov	ar1,r3
      0008C8 7A 00            [12] 1955 	mov	r2,#0x00
      0008CA 7B 00            [12] 1956 	mov	r3,#0x00
      0008CC 88 82            [24] 1957 	mov	dpl,r0
      0008CE 89 83            [24] 1958 	mov	dph,r1
      0008D0 8A F0            [24] 1959 	mov	b,r2
      0008D2 EB               [12] 1960 	mov	a,r3
      0008D3 12r00r00         [24] 1961 	lcall	__delay_ms
      0008D6 D0 06            [24] 1962 	pop	ar6
                                   1963 ;	./src/WS2812.c:196: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      0008D8 0E               [12] 1964 	inc	r6
      0008D9 02r08r0A         [24] 1965 	ljmp	00115$
      0008DC                       1966 00105$:
                                   1967 ;	./src/WS2812.c:208: _delay_ms(ReturnDelay);
      0008DC A9*1F            [24] 1968 	mov	r1,_CylonBounceI_PARM_5
      0008DE E5*20            [12] 1969 	mov	a,(_CylonBounceI_PARM_5 + 1)
      0008E0 FA               [12] 1970 	mov	r2,a
      0008E1 33               [12] 1971 	rlc	a
      0008E2 95 E0            [12] 1972 	subb	a,acc
      0008E4 FB               [12] 1973 	mov	r3,a
      0008E5 FE               [12] 1974 	mov	r6,a
      0008E6 89 82            [24] 1975 	mov	dpl,r1
      0008E8 8A 83            [24] 1976 	mov	dph,r2
      0008EA 8B F0            [24] 1977 	mov	b,r3
      0008EC C0 06            [24] 1978 	push	ar6
      0008EE C0 05            [24] 1979 	push	ar5
      0008F0 C0 04            [24] 1980 	push	ar4
      0008F2 C0 03            [24] 1981 	push	ar3
      0008F4 C0 02            [24] 1982 	push	ar2
      0008F6 C0 01            [24] 1983 	push	ar1
      0008F8 12r00r00         [24] 1984 	lcall	__delay_ms
      0008FB D0 01            [24] 1985 	pop	ar1
      0008FD D0 02            [24] 1986 	pop	ar2
      0008FF D0 03            [24] 1987 	pop	ar3
      000901 D0 04            [24] 1988 	pop	ar4
      000903 D0 05            [24] 1989 	pop	ar5
      000905 D0 06            [24] 1990 	pop	ar6
                                   1991 ;	./src/WS2812.c:210: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      000907 E5*00            [12] 1992 	mov	a,_NUM_LEDS
      000909 C3               [12] 1993 	clr	c
      00090A 9C               [12] 1994 	subb	a,r4
      00090B FC               [12] 1995 	mov	r4,a
      00090C E5*01            [12] 1996 	mov	a,(_NUM_LEDS + 1)
      00090E 9D               [12] 1997 	subb	a,r5
      00090F FD               [12] 1998 	mov	r5,a
      000910 EC               [12] 1999 	mov	a,r4
      000911 24 FE            [12] 2000 	add	a,#0xfe
      000913 FC               [12] 2001 	mov	r4,a
      000914 ED               [12] 2002 	mov	a,r5
      000915 34 FF            [12] 2003 	addc	a,#0xff
      000917 FD               [12] 2004 	mov	r5,a
      000918                       2005 00121$:
      000918 8C 00            [24] 2006 	mov	ar0,r4
      00091A 8D 07            [24] 2007 	mov	ar7,r5
      00091C C3               [12] 2008 	clr	c
      00091D E4               [12] 2009 	clr	a
      00091E 98               [12] 2010 	subb	a,r0
      00091F 74 80            [12] 2011 	mov	a,#(0x00 ^ 0x80)
      000921 8F F0            [24] 2012 	mov	b,r7
      000923 63 F0 80         [24] 2013 	xrl	b,#0x80
      000926 95 F0            [12] 2014 	subb	a,b
      000928 40 03            [24] 2015 	jc	00171$
      00092A 02r0Ar3F         [24] 2016 	ljmp	00110$
      00092D                       2017 00171$:
                                   2018 ;	./src/WS2812.c:212: setAll(green, red, blue);
      00092D 85*1B*05         [24] 2019 	mov	_setAll_PARM_2,_CylonBounceI_PARM_2
      000930 85*1C*06         [24] 2020 	mov	_setAll_PARM_3,_CylonBounceI_PARM_3
      000933 85*21 82         [24] 2021 	mov	dpl,_CylonBounceI_green_65536_101
      000936 C0 06            [24] 2022 	push	ar6
      000938 C0 05            [24] 2023 	push	ar5
      00093A C0 04            [24] 2024 	push	ar4
      00093C C0 03            [24] 2025 	push	ar3
      00093E C0 02            [24] 2026 	push	ar2
      000940 C0 01            [24] 2027 	push	ar1
      000942 12r01rA0         [24] 2028 	lcall	_setAll
      000945 D0 01            [24] 2029 	pop	ar1
      000947 D0 02            [24] 2030 	pop	ar2
      000949 D0 03            [24] 2031 	pop	ar3
      00094B D0 04            [24] 2032 	pop	ar4
      00094D D0 05            [24] 2033 	pop	ar5
      00094F D0 06            [24] 2034 	pop	ar6
                                   2035 ;	./src/WS2812.c:213: for (j = 0; j <= EyeSize + 1; j++)
      000951 75*22 00         [24] 2036 	mov	_CylonBounceI_j_65537_103,#0x00
      000954                       2037 00118$:
      000954 A8*1D            [24] 2038 	mov	r0,_CylonBounceI_PARM_4
      000956 AF*1E            [24] 2039 	mov	r7,(_CylonBounceI_PARM_4 + 1)
      000958 08               [12] 2040 	inc	r0
      000959 B8 00 01         [24] 2041 	cjne	r0,#0x00,00172$
      00095C 0F               [12] 2042 	inc	r7
      00095D                       2043 00172$:
      00095D 85*22*23         [24] 2044 	mov	_CylonBounceI_sloc0_1_0,_CylonBounceI_j_65537_103
      000960 75*24 00         [24] 2045 	mov	(_CylonBounceI_sloc0_1_0 + 1),#0x00
      000963 C3               [12] 2046 	clr	c
      000964 E8               [12] 2047 	mov	a,r0
      000965 95*23            [12] 2048 	subb	a,_CylonBounceI_sloc0_1_0
      000967 EF               [12] 2049 	mov	a,r7
      000968 64 80            [12] 2050 	xrl	a,#0x80
      00096A 85*24 F0         [24] 2051 	mov	b,(_CylonBounceI_sloc0_1_0 + 1)
      00096D 63 F0 80         [24] 2052 	xrl	b,#0x80
      000970 95 F0            [12] 2053 	subb	a,b
      000972 40 48            [24] 2054 	jc	00109$
                                   2055 ;	./src/WS2812.c:215: CHECK_EFF;
      000974 E5*00            [12] 2056 	mov	a,_effect
      000976 B5*01 07         [24] 2057 	cjne	a,_curEffect,00106$
      000979 E5*00            [12] 2058 	mov	a,__color
      00097B B5*00 02         [24] 2059 	cjne	a,_curColor,00176$
      00097E 80 04            [24] 2060 	sjmp	00107$
      000980                       2061 00176$:
      000980                       2062 00106$:
      000980 75*00 12         [24] 2063 	mov	__status,#0x12
      000983 22               [24] 2064 	ret
      000984                       2065 00107$:
                                   2066 ;	./src/WS2812.c:216: setPixel(k + j, 0, 0, 0);
      000984 8C 00            [24] 2067 	mov	ar0,r4
      000986 8D 07            [24] 2068 	mov	ar7,r5
      000988 E5*23            [12] 2069 	mov	a,_CylonBounceI_sloc0_1_0
      00098A 28               [12] 2070 	add	a,r0
      00098B F8               [12] 2071 	mov	r0,a
      00098C E5*24            [12] 2072 	mov	a,(_CylonBounceI_sloc0_1_0 + 1)
      00098E 3F               [12] 2073 	addc	a,r7
      00098F FF               [12] 2074 	mov	r7,a
      000990 88 82            [24] 2075 	mov	dpl,r0
      000992 8F 83            [24] 2076 	mov	dph,r7
      000994 75*02 00         [24] 2077 	mov	_setPixel_PARM_2,#0x00
      000997 75*03 00         [24] 2078 	mov	_setPixel_PARM_3,#0x00
      00099A 75*04 00         [24] 2079 	mov	_setPixel_PARM_4,#0x00
      00099D C0 06            [24] 2080 	push	ar6
      00099F C0 05            [24] 2081 	push	ar5
      0009A1 C0 04            [24] 2082 	push	ar4
      0009A3 C0 03            [24] 2083 	push	ar3
      0009A5 C0 02            [24] 2084 	push	ar2
      0009A7 C0 01            [24] 2085 	push	ar1
      0009A9 12r01r58         [24] 2086 	lcall	_setPixel
      0009AC D0 01            [24] 2087 	pop	ar1
      0009AE D0 02            [24] 2088 	pop	ar2
      0009B0 D0 03            [24] 2089 	pop	ar3
      0009B2 D0 04            [24] 2090 	pop	ar4
      0009B4 D0 05            [24] 2091 	pop	ar5
      0009B6 D0 06            [24] 2092 	pop	ar6
                                   2093 ;	./src/WS2812.c:213: for (j = 0; j <= EyeSize + 1; j++)
      0009B8 05*22            [12] 2094 	inc	_CylonBounceI_j_65537_103
      0009BA 80 98            [24] 2095 	sjmp	00118$
      0009BC                       2096 00109$:
                                   2097 ;	./src/WS2812.c:218: showStrip();
      0009BC C0 01            [24] 2098 	push	ar1
      0009BE C0 02            [24] 2099 	push	ar2
      0009C0 C0 03            [24] 2100 	push	ar3
      0009C2 C0 06            [24] 2101 	push	ar6
      0009C4 C0 06            [24] 2102 	push	ar6
      0009C6 C0 05            [24] 2103 	push	ar5
      0009C8 C0 04            [24] 2104 	push	ar4
      0009CA C0 03            [24] 2105 	push	ar3
      0009CC C0 02            [24] 2106 	push	ar2
      0009CE C0 01            [24] 2107 	push	ar1
      0009D0 12r00rE4         [24] 2108 	lcall	_showStrip
                                   2109 ;	./src/WS2812.c:219: _delay_ms(DELAY2);
      0009D3 85*00*00         [24] 2110 	mov	__divuint_PARM_2,_NUM_LEDS
      0009D6 85*01*01         [24] 2111 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0009D9 90 00 C8         [24] 2112 	mov	dptr,#0x00c8
      0009DC 12r00r00         [24] 2113 	lcall	__divuint
      0009DF 85*00*00         [24] 2114 	mov	__mulint_PARM_2,__delay
      0009E2 85*01*01         [24] 2115 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0009E5 12r00r00         [24] 2116 	lcall	__mulint
      0009E8 75*00 64         [24] 2117 	mov	__divuint_PARM_2,#0x64
      0009EB 75*01 00         [24] 2118 	mov	(__divuint_PARM_2 + 1),#0x00
      0009EE 12r00r00         [24] 2119 	lcall	__divuint
      0009F1 E5 82            [12] 2120 	mov	a,dpl
      0009F3 85 83 F0         [24] 2121 	mov	b,dph
      0009F6 D0 01            [24] 2122 	pop	ar1
      0009F8 D0 02            [24] 2123 	pop	ar2
      0009FA D0 03            [24] 2124 	pop	ar3
      0009FC D0 04            [24] 2125 	pop	ar4
      0009FE D0 05            [24] 2126 	pop	ar5
      000A00 D0 06            [24] 2127 	pop	ar6
      000A02 24 01            [12] 2128 	add	a,#0x01
      000A04 F8               [12] 2129 	mov	r0,a
      000A05 E4               [12] 2130 	clr	a
      000A06 35 F0            [12] 2131 	addc	a,b
      000A08 FB               [12] 2132 	mov	r3,a
      000A09 7E 00            [12] 2133 	mov	r6,#0x00
      000A0B 7F 00            [12] 2134 	mov	r7,#0x00
      000A0D 88 82            [24] 2135 	mov	dpl,r0
      000A0F 8B 83            [24] 2136 	mov	dph,r3
      000A11 8E F0            [24] 2137 	mov	b,r6
      000A13 EF               [12] 2138 	mov	a,r7
      000A14 C0 06            [24] 2139 	push	ar6
      000A16 C0 05            [24] 2140 	push	ar5
      000A18 C0 04            [24] 2141 	push	ar4
      000A1A C0 03            [24] 2142 	push	ar3
      000A1C C0 02            [24] 2143 	push	ar2
      000A1E C0 01            [24] 2144 	push	ar1
      000A20 12r00r00         [24] 2145 	lcall	__delay_ms
      000A23 D0 01            [24] 2146 	pop	ar1
      000A25 D0 02            [24] 2147 	pop	ar2
      000A27 D0 03            [24] 2148 	pop	ar3
      000A29 D0 04            [24] 2149 	pop	ar4
      000A2B D0 05            [24] 2150 	pop	ar5
      000A2D D0 06            [24] 2151 	pop	ar6
                                   2152 ;	./src/WS2812.c:210: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      000A2F 1C               [12] 2153 	dec	r4
      000A30 BC FF 01         [24] 2154 	cjne	r4,#0xff,00177$
      000A33 1D               [12] 2155 	dec	r5
      000A34                       2156 00177$:
      000A34 D0 06            [24] 2157 	pop	ar6
      000A36 D0 03            [24] 2158 	pop	ar3
      000A38 D0 02            [24] 2159 	pop	ar2
      000A3A D0 01            [24] 2160 	pop	ar1
      000A3C 02r09r18         [24] 2161 	ljmp	00121$
      000A3F                       2162 00110$:
                                   2163 ;	./src/WS2812.c:222: _delay_ms(ReturnDelay);
      000A3F 89 82            [24] 2164 	mov	dpl,r1
      000A41 8A 83            [24] 2165 	mov	dph,r2
      000A43 8B F0            [24] 2166 	mov	b,r3
      000A45 EE               [12] 2167 	mov	a,r6
                                   2168 ;	./src/WS2812.c:223: }
      000A46 02r00r00         [24] 2169 	ljmp	__delay_ms
                                   2170 ;------------------------------------------------------------
                                   2171 ;Allocation info for local variables in function 'colorWipe'
                                   2172 ;------------------------------------------------------------
                                   2173 ;red                       Allocated with name '_colorWipe_PARM_2'
                                   2174 ;blue                      Allocated with name '_colorWipe_PARM_3'
                                   2175 ;orient                    Allocated with name '_colorWipe_PARM_4'
                                   2176 ;green                     Allocated to registers r7 
                                   2177 ;i                         Allocated to registers r6 
                                   2178 ;------------------------------------------------------------
                                   2179 ;	./src/WS2812.c:224: void colorWipe(uint8_t green, uint8_t red, uint8_t blue, uint8_t orient)
                                   2180 ;	-----------------------------------------
                                   2181 ;	 function colorWipe
                                   2182 ;	-----------------------------------------
      000A49                       2183 _colorWipe:
      000A49 AF 82            [24] 2184 	mov	r7,dpl
                                   2185 ;	./src/WS2812.c:227: curEffect = effect;
      000A4B 85*00*01         [24] 2186 	mov	_curEffect,_effect
                                   2187 ;	./src/WS2812.c:228: curColor = _color;
      000A4E 85*00*00         [24] 2188 	mov	_curColor,__color
                                   2189 ;	./src/WS2812.c:229: for (i = 0; i < NUM_LEDS; i++)
      000A51 7E 00            [12] 2190 	mov	r6,#0x00
      000A53                       2191 00106$:
      000A53 8E 04            [24] 2192 	mov	ar4,r6
      000A55 7D 00            [12] 2193 	mov	r5,#0x00
      000A57 C3               [12] 2194 	clr	c
      000A58 EC               [12] 2195 	mov	a,r4
      000A59 95*00            [12] 2196 	subb	a,_NUM_LEDS
      000A5B ED               [12] 2197 	mov	a,r5
      000A5C 95*01            [12] 2198 	subb	a,(_NUM_LEDS + 1)
      000A5E 40 01            [24] 2199 	jc	00128$
      000A60 22               [24] 2200 	ret
      000A61                       2201 00128$:
                                   2202 ;	./src/WS2812.c:231: CHECK_EFF;
      000A61 E5*00            [12] 2203 	mov	a,_effect
      000A63 B5*01 07         [24] 2204 	cjne	a,_curEffect,00101$
      000A66 E5*00            [12] 2205 	mov	a,__color
      000A68 B5*00 02         [24] 2206 	cjne	a,_curColor,00131$
      000A6B 80 04            [24] 2207 	sjmp	00102$
      000A6D                       2208 00131$:
      000A6D                       2209 00101$:
      000A6D 75*00 12         [24] 2210 	mov	__status,#0x12
      000A70 22               [24] 2211 	ret
      000A71                       2212 00102$:
                                   2213 ;	./src/WS2812.c:232: setPixel(orient == 0 ? i : NUM_LEDS - i - 1, green, red, blue);
      000A71 E5*27            [12] 2214 	mov	a,_colorWipe_PARM_4
      000A73 70 05            [24] 2215 	jnz	00110$
      000A75 8E 04            [24] 2216 	mov	ar4,r6
      000A77 FD               [12] 2217 	mov	r5,a
      000A78 80 17            [24] 2218 	sjmp	00111$
      000A7A                       2219 00110$:
      000A7A 8E 02            [24] 2220 	mov	ar2,r6
      000A7C 7B 00            [12] 2221 	mov	r3,#0x00
      000A7E A8*00            [24] 2222 	mov	r0,_NUM_LEDS
      000A80 A9*01            [24] 2223 	mov	r1,(_NUM_LEDS + 1)
      000A82 E8               [12] 2224 	mov	a,r0
      000A83 C3               [12] 2225 	clr	c
      000A84 9A               [12] 2226 	subb	a,r2
      000A85 F8               [12] 2227 	mov	r0,a
      000A86 E9               [12] 2228 	mov	a,r1
      000A87 9B               [12] 2229 	subb	a,r3
      000A88 F9               [12] 2230 	mov	r1,a
      000A89 E8               [12] 2231 	mov	a,r0
      000A8A 24 FF            [12] 2232 	add	a,#0xff
      000A8C FC               [12] 2233 	mov	r4,a
      000A8D E9               [12] 2234 	mov	a,r1
      000A8E 34 FF            [12] 2235 	addc	a,#0xff
      000A90 FD               [12] 2236 	mov	r5,a
      000A91                       2237 00111$:
      000A91 8C 82            [24] 2238 	mov	dpl,r4
      000A93 8D 83            [24] 2239 	mov	dph,r5
      000A95 8F*02            [24] 2240 	mov	_setPixel_PARM_2,r7
      000A97 85*25*03         [24] 2241 	mov	_setPixel_PARM_3,_colorWipe_PARM_2
      000A9A 85*26*04         [24] 2242 	mov	_setPixel_PARM_4,_colorWipe_PARM_3
      000A9D C0 07            [24] 2243 	push	ar7
      000A9F C0 06            [24] 2244 	push	ar6
      000AA1 12r01r58         [24] 2245 	lcall	_setPixel
                                   2246 ;	./src/WS2812.c:233: showStrip();
      000AA4 12r00rE4         [24] 2247 	lcall	_showStrip
                                   2248 ;	./src/WS2812.c:234: _delay_ms(DELAY2 + 1);
      000AA7 85*00*00         [24] 2249 	mov	__divuint_PARM_2,_NUM_LEDS
      000AAA 85*01*01         [24] 2250 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000AAD 90 00 C8         [24] 2251 	mov	dptr,#0x00c8
      000AB0 12r00r00         [24] 2252 	lcall	__divuint
      000AB3 85*00*00         [24] 2253 	mov	__mulint_PARM_2,__delay
      000AB6 85*01*01         [24] 2254 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000AB9 12r00r00         [24] 2255 	lcall	__mulint
      000ABC 75*00 64         [24] 2256 	mov	__divuint_PARM_2,#0x64
      000ABF 75*01 00         [24] 2257 	mov	(__divuint_PARM_2 + 1),#0x00
      000AC2 12r00r00         [24] 2258 	lcall	__divuint
      000AC5 E5 82            [12] 2259 	mov	a,dpl
      000AC7 85 83 F0         [24] 2260 	mov	b,dph
      000ACA 24 02            [12] 2261 	add	a,#0x02
      000ACC FC               [12] 2262 	mov	r4,a
      000ACD E4               [12] 2263 	clr	a
      000ACE 35 F0            [12] 2264 	addc	a,b
      000AD0 FD               [12] 2265 	mov	r5,a
      000AD1 7B 00            [12] 2266 	mov	r3,#0x00
      000AD3 7A 00            [12] 2267 	mov	r2,#0x00
      000AD5 8C 82            [24] 2268 	mov	dpl,r4
      000AD7 8D 83            [24] 2269 	mov	dph,r5
      000AD9 8B F0            [24] 2270 	mov	b,r3
      000ADB EA               [12] 2271 	mov	a,r2
      000ADC 12r00r00         [24] 2272 	lcall	__delay_ms
      000ADF D0 06            [24] 2273 	pop	ar6
      000AE1 D0 07            [24] 2274 	pop	ar7
                                   2275 ;	./src/WS2812.c:229: for (i = 0; i < NUM_LEDS; i++)
      000AE3 0E               [12] 2276 	inc	r6
                                   2277 ;	./src/WS2812.c:236: }
      000AE4 02r0Ar53         [24] 2278 	ljmp	00106$
                                   2279 ;------------------------------------------------------------
                                   2280 ;Allocation info for local variables in function 'rainbowCycle'
                                   2281 ;------------------------------------------------------------
                                   2282 ;i                         Allocated to registers r5 
                                   2283 ;r                         Allocated to registers r2 
                                   2284 ;g                         Allocated to registers r3 
                                   2285 ;b                         Allocated to registers r1 
                                   2286 ;WheelPos                  Allocated with name '_rainbowCycle_WheelPos_65537_120'
                                   2287 ;j                         Allocated to registers r6 r7 
                                   2288 ;------------------------------------------------------------
                                   2289 ;	./src/WS2812.c:238: void rainbowCycle()
                                   2290 ;	-----------------------------------------
                                   2291 ;	 function rainbowCycle
                                   2292 ;	-----------------------------------------
      000AE7                       2293 _rainbowCycle:
                                   2294 ;	./src/WS2812.c:242: curEffect = effect;
      000AE7 85*00*01         [24] 2295 	mov	_curEffect,_effect
                                   2296 ;	./src/WS2812.c:243: curColor = _color;
      000AEA 85*00*00         [24] 2297 	mov	_curColor,__color
                                   2298 ;	./src/WS2812.c:246: for (uint16_t j = 0; j < 256 * 5; j++)
      000AED 7E 00            [12] 2299 	mov	r6,#0x00
      000AEF 7F 00            [12] 2300 	mov	r7,#0x00
      000AF1                       2301 00116$:
      000AF1 8E 04            [24] 2302 	mov	ar4,r6
      000AF3 8F 05            [24] 2303 	mov	ar5,r7
      000AF5 74 FB            [12] 2304 	mov	a,#0x100 - 0x05
      000AF7 2D               [12] 2305 	add	a,r5
      000AF8 50 01            [24] 2306 	jnc	00155$
      000AFA 22               [24] 2307 	ret
      000AFB                       2308 00155$:
                                   2309 ;	./src/WS2812.c:248: for (i = 0; i < NUM_LEDS; i++)
      000AFB 7D 00            [12] 2310 	mov	r5,#0x00
      000AFD                       2311 00113$:
      000AFD 8D 03            [24] 2312 	mov	ar3,r5
      000AFF 7C 00            [12] 2313 	mov	r4,#0x00
      000B01 C3               [12] 2314 	clr	c
      000B02 EB               [12] 2315 	mov	a,r3
      000B03 95*00            [12] 2316 	subb	a,_NUM_LEDS
      000B05 EC               [12] 2317 	mov	a,r4
      000B06 95*01            [12] 2318 	subb	a,(_NUM_LEDS + 1)
      000B08 40 03            [24] 2319 	jc	00156$
      000B0A 02r0BrB5         [24] 2320 	ljmp	00110$
      000B0D                       2321 00156$:
                                   2322 ;	./src/WS2812.c:250: CHECK_EFF;
      000B0D E5*00            [12] 2323 	mov	a,_effect
      000B0F B5*01 07         [24] 2324 	cjne	a,_curEffect,00101$
      000B12 E5*00            [12] 2325 	mov	a,__color
      000B14 B5*00 02         [24] 2326 	cjne	a,_curColor,00159$
      000B17 80 04            [24] 2327 	sjmp	00102$
      000B19                       2328 00159$:
      000B19                       2329 00101$:
      000B19 75*00 12         [24] 2330 	mov	__status,#0x12
      000B1C 22               [24] 2331 	ret
      000B1D                       2332 00102$:
                                   2333 ;	./src/WS2812.c:251: WheelPos = (((i * 256 / NUM_LEDS) + j) & 255);
      000B1D 8D 03            [24] 2334 	mov	ar3,r5
      000B1F 8B 04            [24] 2335 	mov	ar4,r3
      000B21 7B 00            [12] 2336 	mov	r3,#0x00
      000B23 8B 82            [24] 2337 	mov	dpl,r3
      000B25 8C 83            [24] 2338 	mov	dph,r4
      000B27 85*00*00         [24] 2339 	mov	__divuint_PARM_2,_NUM_LEDS
      000B2A 85*01*01         [24] 2340 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000B2D C0 07            [24] 2341 	push	ar7
      000B2F C0 06            [24] 2342 	push	ar6
      000B31 C0 05            [24] 2343 	push	ar5
      000B33 12r00r00         [24] 2344 	lcall	__divuint
      000B36 AB 82            [24] 2345 	mov	r3,dpl
      000B38 D0 05            [24] 2346 	pop	ar5
      000B3A D0 06            [24] 2347 	pop	ar6
      000B3C D0 07            [24] 2348 	pop	ar7
      000B3E 8E 04            [24] 2349 	mov	ar4,r6
      000B40 EC               [12] 2350 	mov	a,r4
      000B41 2B               [12] 2351 	add	a,r3
      000B42 FC               [12] 2352 	mov	r4,a
                                   2353 ;	./src/WS2812.c:253: if (WheelPos < 85)
      000B43 BC 55 00         [24] 2354 	cjne	r4,#0x55,00160$
      000B46                       2355 00160$:
      000B46 50 16            [24] 2356 	jnc	00108$
                                   2357 ;	./src/WS2812.c:255: g = WheelPos * 3;
      000B48 EC               [12] 2358 	mov	a,r4
      000B49 75 F0 03         [24] 2359 	mov	b,#0x03
      000B4C A4               [48] 2360 	mul	ab
      000B4D FB               [12] 2361 	mov	r3,a
                                   2362 ;	./src/WS2812.c:256: r = 255 - WheelPos * 3;
      000B4E 8C 02            [24] 2363 	mov	ar2,r4
      000B50 EA               [12] 2364 	mov	a,r2
      000B51 75 F0 03         [24] 2365 	mov	b,#0x03
      000B54 A4               [48] 2366 	mul	ab
      000B55 D3               [12] 2367 	setb	c
      000B56 94 FF            [12] 2368 	subb	a,#0xff
      000B58 F4               [12] 2369 	cpl	a
      000B59 FA               [12] 2370 	mov	r2,a
                                   2371 ;	./src/WS2812.c:257: b = 0;
      000B5A 79 00            [12] 2372 	mov	r1,#0x00
      000B5C 80 36            [24] 2373 	sjmp	00109$
      000B5E                       2374 00108$:
                                   2375 ;	./src/WS2812.c:259: else if (WheelPos < 170)
      000B5E BC AA 00         [24] 2376 	cjne	r4,#0xaa,00162$
      000B61                       2377 00162$:
      000B61 50 1C            [24] 2378 	jnc	00105$
                                   2379 ;	./src/WS2812.c:261: WheelPos -= 85;
      000B63 8C 00            [24] 2380 	mov	ar0,r4
      000B65 E8               [12] 2381 	mov	a,r0
      000B66 24 AB            [12] 2382 	add	a,#0xab
                                   2383 ;	./src/WS2812.c:262: g = 255 - WheelPos * 3;
      000B68 F5*28            [12] 2384 	mov	_rainbowCycle_WheelPos_65537_120,a
      000B6A F8               [12] 2385 	mov	r0,a
      000B6B 75 F0 03         [24] 2386 	mov	b,#0x03
      000B6E A4               [48] 2387 	mul	ab
      000B6F D3               [12] 2388 	setb	c
      000B70 94 FF            [12] 2389 	subb	a,#0xff
      000B72 F4               [12] 2390 	cpl	a
      000B73 FB               [12] 2391 	mov	r3,a
                                   2392 ;	./src/WS2812.c:263: r = 0;
      000B74 7A 00            [12] 2393 	mov	r2,#0x00
                                   2394 ;	./src/WS2812.c:264: b = WheelPos * 3;
      000B76 E5*28            [12] 2395 	mov	a,_rainbowCycle_WheelPos_65537_120
      000B78 75 F0 03         [24] 2396 	mov	b,#0x03
      000B7B A4               [48] 2397 	mul	ab
      000B7C F9               [12] 2398 	mov	r1,a
      000B7D 80 15            [24] 2399 	sjmp	00109$
      000B7F                       2400 00105$:
                                   2401 ;	./src/WS2812.c:268: WheelPos -= 170;
      000B7F EC               [12] 2402 	mov	a,r4
      000B80 24 56            [12] 2403 	add	a,#0x56
                                   2404 ;	./src/WS2812.c:269: g = 0;
                                   2405 ;	./src/WS2812.c:270: r = WheelPos * 3;
      000B82 FC               [12] 2406 	mov	r4,a
      000B83 7B 00            [12] 2407 	mov	r3,#0x00
      000B85 75 F0 03         [24] 2408 	mov	b,#0x03
      000B88 A4               [48] 2409 	mul	ab
      000B89 FA               [12] 2410 	mov	r2,a
                                   2411 ;	./src/WS2812.c:271: b = 255 - WheelPos * 3;
      000B8A EC               [12] 2412 	mov	a,r4
      000B8B 75 F0 03         [24] 2413 	mov	b,#0x03
      000B8E A4               [48] 2414 	mul	ab
      000B8F D3               [12] 2415 	setb	c
      000B90 94 FF            [12] 2416 	subb	a,#0xff
      000B92 F4               [12] 2417 	cpl	a
      000B93 F9               [12] 2418 	mov	r1,a
      000B94                       2419 00109$:
                                   2420 ;	./src/WS2812.c:274: setPixel(i, g, r, b);
      000B94 8D 00            [24] 2421 	mov	ar0,r5
      000B96 7C 00            [12] 2422 	mov	r4,#0x00
      000B98 8B*02            [24] 2423 	mov	_setPixel_PARM_2,r3
      000B9A 8A*03            [24] 2424 	mov	_setPixel_PARM_3,r2
      000B9C 89*04            [24] 2425 	mov	_setPixel_PARM_4,r1
      000B9E 88 82            [24] 2426 	mov	dpl,r0
      000BA0 8C 83            [24] 2427 	mov	dph,r4
      000BA2 C0 07            [24] 2428 	push	ar7
      000BA4 C0 06            [24] 2429 	push	ar6
      000BA6 C0 05            [24] 2430 	push	ar5
      000BA8 12r01r58         [24] 2431 	lcall	_setPixel
      000BAB D0 05            [24] 2432 	pop	ar5
      000BAD D0 06            [24] 2433 	pop	ar6
      000BAF D0 07            [24] 2434 	pop	ar7
                                   2435 ;	./src/WS2812.c:248: for (i = 0; i < NUM_LEDS; i++)
      000BB1 0D               [12] 2436 	inc	r5
      000BB2 02r0ArFD         [24] 2437 	ljmp	00113$
      000BB5                       2438 00110$:
                                   2439 ;	./src/WS2812.c:276: showStrip();
      000BB5 C0 07            [24] 2440 	push	ar7
      000BB7 C0 06            [24] 2441 	push	ar6
      000BB9 12r00rE4         [24] 2442 	lcall	_showStrip
                                   2443 ;	./src/WS2812.c:277: _delay_ms(DELAY);
      000BBC 85*00*00         [24] 2444 	mov	__divuint_PARM_2,_NUM_LEDS
      000BBF 85*01*01         [24] 2445 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000BC2 90 00 C8         [24] 2446 	mov	dptr,#0x00c8
      000BC5 12r00r00         [24] 2447 	lcall	__divuint
      000BC8 85*00*00         [24] 2448 	mov	__mulint_PARM_2,__delay
      000BCB 85*01*01         [24] 2449 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000BCE 12r00r00         [24] 2450 	lcall	__mulint
      000BD1 75*00 0A         [24] 2451 	mov	__divuint_PARM_2,#0x0a
      000BD4 75*01 00         [24] 2452 	mov	(__divuint_PARM_2 + 1),#0x00
      000BD7 12r00r00         [24] 2453 	lcall	__divuint
      000BDA E5 82            [12] 2454 	mov	a,dpl
      000BDC 85 83 F0         [24] 2455 	mov	b,dph
      000BDF 24 01            [12] 2456 	add	a,#0x01
      000BE1 FC               [12] 2457 	mov	r4,a
      000BE2 E4               [12] 2458 	clr	a
      000BE3 35 F0            [12] 2459 	addc	a,b
      000BE5 FD               [12] 2460 	mov	r5,a
      000BE6 7B 00            [12] 2461 	mov	r3,#0x00
      000BE8 7A 00            [12] 2462 	mov	r2,#0x00
      000BEA 8C 82            [24] 2463 	mov	dpl,r4
      000BEC 8D 83            [24] 2464 	mov	dph,r5
      000BEE 8B F0            [24] 2465 	mov	b,r3
      000BF0 EA               [12] 2466 	mov	a,r2
      000BF1 12r00r00         [24] 2467 	lcall	__delay_ms
      000BF4 D0 06            [24] 2468 	pop	ar6
      000BF6 D0 07            [24] 2469 	pop	ar7
                                   2470 ;	./src/WS2812.c:246: for (uint16_t j = 0; j < 256 * 5; j++)
      000BF8 0E               [12] 2471 	inc	r6
      000BF9 BE 00 01         [24] 2472 	cjne	r6,#0x00,00164$
      000BFC 0F               [12] 2473 	inc	r7
      000BFD                       2474 00164$:
                                   2475 ;	./src/WS2812.c:279: }
      000BFD 02r0ArF1         [24] 2476 	ljmp	00116$
                                   2477 ;------------------------------------------------------------
                                   2478 ;Allocation info for local variables in function 'Pattern3'
                                   2479 ;------------------------------------------------------------
                                   2480 ;r                         Allocated with name '_Pattern3_PARM_2'
                                   2481 ;b                         Allocated with name '_Pattern3_PARM_3'
                                   2482 ;orient                    Allocated with name '_Pattern3_PARM_4'
                                   2483 ;g                         Allocated to registers r7 
                                   2484 ;i                         Allocated with name '_Pattern3_i_65536_130'
                                   2485 ;i                         Allocated to registers r5 r6 
                                   2486 ;sloc0                     Allocated with name '_Pattern3_sloc0_1_0'
                                   2487 ;------------------------------------------------------------
                                   2488 ;	./src/WS2812.c:280: void Pattern3(uint8_t g, uint8_t r, uint8_t b, uint8_t orient)
                                   2489 ;	-----------------------------------------
                                   2490 ;	 function Pattern3
                                   2491 ;	-----------------------------------------
      000C00                       2492 _Pattern3:
      000C00 AF 82            [24] 2493 	mov	r7,dpl
                                   2494 ;	./src/WS2812.c:283: curEffect = effect;
      000C02 85*00*01         [24] 2495 	mov	_curEffect,_effect
                                   2496 ;	./src/WS2812.c:284: curColor = _color;
      000C05 85*00*00         [24] 2497 	mov	_curColor,__color
                                   2498 ;	./src/WS2812.c:285: for (int i = 0; i < (NUM_LEDS / 2); i++)
      000C08 7D 00            [12] 2499 	mov	r5,#0x00
      000C0A 7E 00            [12] 2500 	mov	r6,#0x00
      000C0C                       2501 00106$:
      000C0C AB*00            [24] 2502 	mov	r3,_NUM_LEDS
      000C0E AC*01            [24] 2503 	mov	r4,(_NUM_LEDS + 1)
      000C10 8B 01            [24] 2504 	mov	ar1,r3
      000C12 EC               [12] 2505 	mov	a,r4
      000C13 C3               [12] 2506 	clr	c
      000C14 13               [12] 2507 	rrc	a
      000C15 C9               [12] 2508 	xch	a,r1
      000C16 13               [12] 2509 	rrc	a
      000C17 C9               [12] 2510 	xch	a,r1
      000C18 FA               [12] 2511 	mov	r2,a
      000C19 8D*2C            [24] 2512 	mov	_Pattern3_sloc0_1_0,r5
      000C1B 8E*2D            [24] 2513 	mov	(_Pattern3_sloc0_1_0 + 1),r6
      000C1D C3               [12] 2514 	clr	c
      000C1E E5*2C            [12] 2515 	mov	a,_Pattern3_sloc0_1_0
      000C20 99               [12] 2516 	subb	a,r1
      000C21 E5*2D            [12] 2517 	mov	a,(_Pattern3_sloc0_1_0 + 1)
      000C23 9A               [12] 2518 	subb	a,r2
      000C24 40 03            [24] 2519 	jc	00134$
      000C26 02r0CrF6         [24] 2520 	ljmp	00104$
      000C29                       2521 00134$:
                                   2522 ;	./src/WS2812.c:287: CHECK_EFF;
      000C29 E5*00            [12] 2523 	mov	a,_effect
      000C2B B5*01 07         [24] 2524 	cjne	a,_curEffect,00101$
      000C2E E5*00            [12] 2525 	mov	a,__color
      000C30 B5*00 02         [24] 2526 	cjne	a,_curColor,00137$
      000C33 80 04            [24] 2527 	sjmp	00102$
      000C35                       2528 00137$:
      000C35                       2529 00101$:
      000C35 75*00 12         [24] 2530 	mov	__status,#0x12
      000C38 22               [24] 2531 	ret
      000C39                       2532 00102$:
                                   2533 ;	./src/WS2812.c:288: setPixel(orient ? (NUM_LEDS / 2) + i : NUM_LEDS - 1 - i, g, r, b);
      000C39 E5*2B            [12] 2534 	mov	a,_Pattern3_PARM_4
      000C3B 60 0A            [24] 2535 	jz	00110$
      000C3D E5*2C            [12] 2536 	mov	a,_Pattern3_sloc0_1_0
      000C3F 29               [12] 2537 	add	a,r1
      000C40 F9               [12] 2538 	mov	r1,a
      000C41 E5*2D            [12] 2539 	mov	a,(_Pattern3_sloc0_1_0 + 1)
      000C43 3A               [12] 2540 	addc	a,r2
      000C44 FA               [12] 2541 	mov	r2,a
      000C45 80 0E            [24] 2542 	sjmp	00111$
      000C47                       2543 00110$:
      000C47 1B               [12] 2544 	dec	r3
      000C48 BB FF 01         [24] 2545 	cjne	r3,#0xff,00139$
      000C4B 1C               [12] 2546 	dec	r4
      000C4C                       2547 00139$:
      000C4C EB               [12] 2548 	mov	a,r3
      000C4D C3               [12] 2549 	clr	c
      000C4E 95*2C            [12] 2550 	subb	a,_Pattern3_sloc0_1_0
      000C50 F9               [12] 2551 	mov	r1,a
      000C51 EC               [12] 2552 	mov	a,r4
      000C52 95*2D            [12] 2553 	subb	a,(_Pattern3_sloc0_1_0 + 1)
      000C54 FA               [12] 2554 	mov	r2,a
      000C55                       2555 00111$:
      000C55 89 82            [24] 2556 	mov	dpl,r1
      000C57 8A 83            [24] 2557 	mov	dph,r2
      000C59 8F*02            [24] 2558 	mov	_setPixel_PARM_2,r7
      000C5B 85*29*03         [24] 2559 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      000C5E 85*2A*04         [24] 2560 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      000C61 C0 07            [24] 2561 	push	ar7
      000C63 C0 06            [24] 2562 	push	ar6
      000C65 C0 05            [24] 2563 	push	ar5
      000C67 12r01r58         [24] 2564 	lcall	_setPixel
      000C6A D0 05            [24] 2565 	pop	ar5
      000C6C D0 06            [24] 2566 	pop	ar6
      000C6E D0 07            [24] 2567 	pop	ar7
                                   2568 ;	./src/WS2812.c:289: setPixel(orient ? ((NUM_LEDS / 2) - 1) - i : i, g, r, b);
      000C70 E5*2B            [12] 2569 	mov	a,_Pattern3_PARM_4
      000C72 60 1C            [24] 2570 	jz	00112$
      000C74 AB*00            [24] 2571 	mov	r3,_NUM_LEDS
      000C76 E5*01            [12] 2572 	mov	a,(_NUM_LEDS + 1)
      000C78 C3               [12] 2573 	clr	c
      000C79 13               [12] 2574 	rrc	a
      000C7A CB               [12] 2575 	xch	a,r3
      000C7B 13               [12] 2576 	rrc	a
      000C7C CB               [12] 2577 	xch	a,r3
      000C7D FC               [12] 2578 	mov	r4,a
      000C7E 1B               [12] 2579 	dec	r3
      000C7F BB FF 01         [24] 2580 	cjne	r3,#0xff,00141$
      000C82 1C               [12] 2581 	dec	r4
      000C83                       2582 00141$:
      000C83 8D 01            [24] 2583 	mov	ar1,r5
      000C85 8E 02            [24] 2584 	mov	ar2,r6
      000C87 EB               [12] 2585 	mov	a,r3
      000C88 C3               [12] 2586 	clr	c
      000C89 99               [12] 2587 	subb	a,r1
      000C8A FB               [12] 2588 	mov	r3,a
      000C8B EC               [12] 2589 	mov	a,r4
      000C8C 9A               [12] 2590 	subb	a,r2
      000C8D FC               [12] 2591 	mov	r4,a
      000C8E 80 04            [24] 2592 	sjmp	00113$
      000C90                       2593 00112$:
      000C90 8D 03            [24] 2594 	mov	ar3,r5
      000C92 8E 04            [24] 2595 	mov	ar4,r6
      000C94                       2596 00113$:
      000C94 8B 82            [24] 2597 	mov	dpl,r3
      000C96 8C 83            [24] 2598 	mov	dph,r4
      000C98 8F*02            [24] 2599 	mov	_setPixel_PARM_2,r7
      000C9A 85*29*03         [24] 2600 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      000C9D 85*2A*04         [24] 2601 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      000CA0 C0 07            [24] 2602 	push	ar7
      000CA2 C0 06            [24] 2603 	push	ar6
      000CA4 C0 05            [24] 2604 	push	ar5
      000CA6 12r01r58         [24] 2605 	lcall	_setPixel
                                   2606 ;	./src/WS2812.c:290: showStrip();
      000CA9 12r00rE4         [24] 2607 	lcall	_showStrip
                                   2608 ;	./src/WS2812.c:291: _delay_ms(DELAY2);
      000CAC 85*00*00         [24] 2609 	mov	__divuint_PARM_2,_NUM_LEDS
      000CAF 85*01*01         [24] 2610 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000CB2 90 00 C8         [24] 2611 	mov	dptr,#0x00c8
      000CB5 12r00r00         [24] 2612 	lcall	__divuint
      000CB8 85*00*00         [24] 2613 	mov	__mulint_PARM_2,__delay
      000CBB 85*01*01         [24] 2614 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000CBE 12r00r00         [24] 2615 	lcall	__mulint
      000CC1 75*00 64         [24] 2616 	mov	__divuint_PARM_2,#0x64
      000CC4 75*01 00         [24] 2617 	mov	(__divuint_PARM_2 + 1),#0x00
      000CC7 12r00r00         [24] 2618 	lcall	__divuint
      000CCA E5 82            [12] 2619 	mov	a,dpl
      000CCC 85 83 F0         [24] 2620 	mov	b,dph
      000CCF 24 01            [12] 2621 	add	a,#0x01
      000CD1 FB               [12] 2622 	mov	r3,a
      000CD2 E4               [12] 2623 	clr	a
      000CD3 35 F0            [12] 2624 	addc	a,b
      000CD5 FC               [12] 2625 	mov	r4,a
      000CD6 8B 01            [24] 2626 	mov	ar1,r3
      000CD8 8C 02            [24] 2627 	mov	ar2,r4
      000CDA 7B 00            [12] 2628 	mov	r3,#0x00
      000CDC 7C 00            [12] 2629 	mov	r4,#0x00
      000CDE 89 82            [24] 2630 	mov	dpl,r1
      000CE0 8A 83            [24] 2631 	mov	dph,r2
      000CE2 8B F0            [24] 2632 	mov	b,r3
      000CE4 EC               [12] 2633 	mov	a,r4
      000CE5 12r00r00         [24] 2634 	lcall	__delay_ms
      000CE8 D0 05            [24] 2635 	pop	ar5
      000CEA D0 06            [24] 2636 	pop	ar6
      000CEC D0 07            [24] 2637 	pop	ar7
                                   2638 ;	./src/WS2812.c:285: for (int i = 0; i < (NUM_LEDS / 2); i++)
      000CEE 0D               [12] 2639 	inc	r5
      000CEF BD 00 01         [24] 2640 	cjne	r5,#0x00,00142$
      000CF2 0E               [12] 2641 	inc	r6
      000CF3                       2642 00142$:
      000CF3 02r0Cr0C         [24] 2643 	ljmp	00106$
      000CF6                       2644 00104$:
                                   2645 ;	./src/WS2812.c:293: _delay_ms(300);
      000CF6 90 01 2C         [24] 2646 	mov	dptr,#0x012c
      000CF9 E4               [12] 2647 	clr	a
      000CFA F5 F0            [12] 2648 	mov	b,a
                                   2649 ;	./src/WS2812.c:294: }
      000CFC 02r00r00         [24] 2650 	ljmp	__delay_ms
                                   2651 ;------------------------------------------------------------
                                   2652 ;Allocation info for local variables in function 'fadeToBlackBy'
                                   2653 ;------------------------------------------------------------
                                   2654 ;fadeBy                    Allocated with name '_fadeToBlackBy_PARM_2'
                                   2655 ;pixel                     Allocated with name '_fadeToBlackBy_pixel_65536_134'
                                   2656 ;r1                        Allocated to registers r1 
                                   2657 ;g1                        Allocated to registers r6 
                                   2658 ;b1                        Allocated to registers 
                                   2659 ;------------------------------------------------------------
                                   2660 ;	./src/WS2812.c:296: void fadeToBlackBy(uint16_t pixel, uint8_t fadeBy)
                                   2661 ;	-----------------------------------------
                                   2662 ;	 function fadeToBlackBy
                                   2663 ;	-----------------------------------------
      000CFF                       2664 _fadeToBlackBy:
      000CFF 85 82*2F         [24] 2665 	mov	_fadeToBlackBy_pixel_65536_134,dpl
      000D02 85 83*30         [24] 2666 	mov	(_fadeToBlackBy_pixel_65536_134 + 1),dph
                                   2667 ;	./src/WS2812.c:301: r1 = leds[3 * pixel + 1];
      000D05 85*2F*00         [24] 2668 	mov	__mulint_PARM_2,_fadeToBlackBy_pixel_65536_134
      000D08 85*30*01         [24] 2669 	mov	(__mulint_PARM_2 + 1),(_fadeToBlackBy_pixel_65536_134 + 1)
      000D0B 90 00 03         [24] 2670 	mov	dptr,#0x0003
      000D0E 12r00r00         [24] 2671 	lcall	__mulint
      000D11 AC 82            [24] 2672 	mov	r4,dpl
      000D13 AD 83            [24] 2673 	mov	r5,dph
      000D15 74 01            [12] 2674 	mov	a,#0x01
      000D17 2C               [12] 2675 	add	a,r4
      000D18 FA               [12] 2676 	mov	r2,a
      000D19 E4               [12] 2677 	clr	a
      000D1A 3D               [12] 2678 	addc	a,r5
      000D1B FB               [12] 2679 	mov	r3,a
      000D1C EA               [12] 2680 	mov	a,r2
      000D1D 24r00            [12] 2681 	add	a,#_leds
      000D1F F5 82            [12] 2682 	mov	dpl,a
      000D21 EB               [12] 2683 	mov	a,r3
      000D22 34s00            [12] 2684 	addc	a,#(_leds >> 8)
      000D24 F5 83            [12] 2685 	mov	dph,a
      000D26 E0               [24] 2686 	movx	a,@dptr
      000D27 FB               [12] 2687 	mov	r3,a
                                   2688 ;	./src/WS2812.c:302: g1 = leds[3 * pixel];
      000D28 EC               [12] 2689 	mov	a,r4
      000D29 24r00            [12] 2690 	add	a,#_leds
      000D2B F5 82            [12] 2691 	mov	dpl,a
      000D2D ED               [12] 2692 	mov	a,r5
      000D2E 34s00            [12] 2693 	addc	a,#(_leds >> 8)
      000D30 F5 83            [12] 2694 	mov	dph,a
      000D32 E0               [24] 2695 	movx	a,@dptr
      000D33 FA               [12] 2696 	mov	r2,a
                                   2697 ;	./src/WS2812.c:303: b1 = leds[3 * pixel + 2];
      000D34 74 02            [12] 2698 	mov	a,#0x02
      000D36 2C               [12] 2699 	add	a,r4
      000D37 FC               [12] 2700 	mov	r4,a
      000D38 E4               [12] 2701 	clr	a
      000D39 3D               [12] 2702 	addc	a,r5
      000D3A FD               [12] 2703 	mov	r5,a
      000D3B EC               [12] 2704 	mov	a,r4
      000D3C 24r00            [12] 2705 	add	a,#_leds
      000D3E F5 82            [12] 2706 	mov	dpl,a
      000D40 ED               [12] 2707 	mov	a,r5
      000D41 34s00            [12] 2708 	addc	a,#(_leds >> 8)
      000D43 F5 83            [12] 2709 	mov	dph,a
      000D45 E0               [24] 2710 	movx	a,@dptr
      000D46 FD               [12] 2711 	mov	r5,a
                                   2712 ;	./src/WS2812.c:305: r1 = (r1 <= 12) ? 0 : (int)r1 - (r1 * fadeBy / 256);
      000D47 EB               [12] 2713 	mov	a,r3
      000D48 24 F3            [12] 2714 	add	a,#0xff - 0x0c
      000D4A 92*00            [24] 2715 	mov	_fadeToBlackBy_sloc0_1_0,c
      000D4C 40 06            [24] 2716 	jc	00103$
      000D4E 79 00            [12] 2717 	mov	r1,#0x00
      000D50 7C 00            [12] 2718 	mov	r4,#0x00
      000D52 80 2E            [24] 2719 	sjmp	00104$
      000D54                       2720 00103$:
      000D54 8B 00            [24] 2721 	mov	ar0,r3
      000D56 8B F0            [24] 2722 	mov	b,r3
      000D58 E5*2E            [12] 2723 	mov	a,_fadeToBlackBy_PARM_2
      000D5A A4               [48] 2724 	mul	ab
      000D5B F5 82            [12] 2725 	mov	dpl,a
      000D5D 85 F0 83         [24] 2726 	mov	dph,b
      000D60 75*00 00         [24] 2727 	mov	__divsint_PARM_2,#0x00
      000D63 75*01 01         [24] 2728 	mov	(__divsint_PARM_2 + 1),#0x01
      000D66 C0 05            [24] 2729 	push	ar5
      000D68 C0 02            [24] 2730 	push	ar2
      000D6A C0 00            [24] 2731 	push	ar0
      000D6C 12r00r00         [24] 2732 	lcall	__divsint
      000D6F AB 82            [24] 2733 	mov	r3,dpl
      000D71 AF 83            [24] 2734 	mov	r7,dph
      000D73 D0 00            [24] 2735 	pop	ar0
      000D75 D0 02            [24] 2736 	pop	ar2
      000D77 D0 05            [24] 2737 	pop	ar5
      000D79 E8               [12] 2738 	mov	a,r0
      000D7A C3               [12] 2739 	clr	c
      000D7B 9B               [12] 2740 	subb	a,r3
      000D7C F8               [12] 2741 	mov	r0,a
      000D7D F9               [12] 2742 	mov	r1,a
      000D7E 33               [12] 2743 	rlc	a
      000D7F 95 E0            [12] 2744 	subb	a,acc
      000D81 FC               [12] 2745 	mov	r4,a
      000D82                       2746 00104$:
                                   2747 ;	./src/WS2812.c:306: g1 = (g1 <= 12) ? 0 : (int)g1 - (g1 * fadeBy / 256);
      000D82 EA               [12] 2748 	mov	a,r2
      000D83 24 F3            [12] 2749 	add	a,#0xff - 0x0c
      000D85 92*00            [24] 2750 	mov	_fadeToBlackBy_sloc0_1_0,c
      000D87 40 06            [24] 2751 	jc	00105$
      000D89 7E 00            [12] 2752 	mov	r6,#0x00
      000D8B 7F 00            [12] 2753 	mov	r7,#0x00
      000D8D 80 2E            [24] 2754 	sjmp	00106$
      000D8F                       2755 00105$:
      000D8F 8A 04            [24] 2756 	mov	ar4,r2
      000D91 8A F0            [24] 2757 	mov	b,r2
      000D93 E5*2E            [12] 2758 	mov	a,_fadeToBlackBy_PARM_2
      000D95 A4               [48] 2759 	mul	ab
      000D96 F5 82            [12] 2760 	mov	dpl,a
      000D98 85 F0 83         [24] 2761 	mov	dph,b
      000D9B 75*00 00         [24] 2762 	mov	__divsint_PARM_2,#0x00
      000D9E 75*01 01         [24] 2763 	mov	(__divsint_PARM_2 + 1),#0x01
      000DA1 C0 05            [24] 2764 	push	ar5
      000DA3 C0 04            [24] 2765 	push	ar4
      000DA5 C0 01            [24] 2766 	push	ar1
      000DA7 12r00r00         [24] 2767 	lcall	__divsint
      000DAA AA 82            [24] 2768 	mov	r2,dpl
      000DAC AB 83            [24] 2769 	mov	r3,dph
      000DAE D0 01            [24] 2770 	pop	ar1
      000DB0 D0 04            [24] 2771 	pop	ar4
      000DB2 D0 05            [24] 2772 	pop	ar5
      000DB4 EC               [12] 2773 	mov	a,r4
      000DB5 C3               [12] 2774 	clr	c
      000DB6 9A               [12] 2775 	subb	a,r2
      000DB7 FC               [12] 2776 	mov	r4,a
      000DB8 FE               [12] 2777 	mov	r6,a
      000DB9 33               [12] 2778 	rlc	a
      000DBA 95 E0            [12] 2779 	subb	a,acc
      000DBC FF               [12] 2780 	mov	r7,a
      000DBD                       2781 00106$:
                                   2782 ;	./src/WS2812.c:307: b1 = (b1 <= 12) ? 0 : (int)b1 - (b1 * fadeBy / 256);
      000DBD ED               [12] 2783 	mov	a,r5
      000DBE 24 F3            [12] 2784 	add	a,#0xff - 0x0c
      000DC0 92*00            [24] 2785 	mov	_fadeToBlackBy_sloc0_1_0,c
      000DC2 40 06            [24] 2786 	jc	00107$
      000DC4 7C 00            [12] 2787 	mov	r4,#0x00
      000DC6 7F 00            [12] 2788 	mov	r7,#0x00
      000DC8 80 2E            [24] 2789 	sjmp	00108$
      000DCA                       2790 00107$:
      000DCA 8D 03            [24] 2791 	mov	ar3,r5
      000DCC 8D F0            [24] 2792 	mov	b,r5
      000DCE E5*2E            [12] 2793 	mov	a,_fadeToBlackBy_PARM_2
      000DD0 A4               [48] 2794 	mul	ab
      000DD1 F5 82            [12] 2795 	mov	dpl,a
      000DD3 85 F0 83         [24] 2796 	mov	dph,b
      000DD6 75*00 00         [24] 2797 	mov	__divsint_PARM_2,#0x00
      000DD9 75*01 01         [24] 2798 	mov	(__divsint_PARM_2 + 1),#0x01
      000DDC C0 06            [24] 2799 	push	ar6
      000DDE C0 03            [24] 2800 	push	ar3
      000DE0 C0 01            [24] 2801 	push	ar1
      000DE2 12r00r00         [24] 2802 	lcall	__divsint
      000DE5 AA 82            [24] 2803 	mov	r2,dpl
      000DE7 AD 83            [24] 2804 	mov	r5,dph
      000DE9 D0 01            [24] 2805 	pop	ar1
      000DEB D0 03            [24] 2806 	pop	ar3
      000DED D0 06            [24] 2807 	pop	ar6
      000DEF EB               [12] 2808 	mov	a,r3
      000DF0 C3               [12] 2809 	clr	c
      000DF1 9A               [12] 2810 	subb	a,r2
      000DF2 FB               [12] 2811 	mov	r3,a
      000DF3 FC               [12] 2812 	mov	r4,a
      000DF4 33               [12] 2813 	rlc	a
      000DF5 95 E0            [12] 2814 	subb	a,acc
      000DF7 FF               [12] 2815 	mov	r7,a
      000DF8                       2816 00108$:
      000DF8 8C*04            [24] 2817 	mov	_setPixel_PARM_4,r4
                                   2818 ;	./src/WS2812.c:309: setPixel(pixel, g1, r1, b1);
      000DFA 8E*02            [24] 2819 	mov	_setPixel_PARM_2,r6
      000DFC 89*03            [24] 2820 	mov	_setPixel_PARM_3,r1
      000DFE 85*2F 82         [24] 2821 	mov	dpl,_fadeToBlackBy_pixel_65536_134
      000E01 85*30 83         [24] 2822 	mov	dph,(_fadeToBlackBy_pixel_65536_134 + 1)
                                   2823 ;	./src/WS2812.c:310: }
      000E04 02r01r58         [24] 2824 	ljmp	_setPixel
                                   2825 ;------------------------------------------------------------
                                   2826 ;Allocation info for local variables in function 'Pattern1'
                                   2827 ;------------------------------------------------------------
                                   2828 ;r                         Allocated with name '_Pattern1_PARM_2'
                                   2829 ;b                         Allocated with name '_Pattern1_PARM_3'
                                   2830 ;g                         Allocated with name '_Pattern1_g_65536_136'
                                   2831 ;j                         Allocated to registers r2 
                                   2832 ;pixel                     Allocated to registers r7 
                                   2833 ;i                         Allocated with name '_Pattern1_i_65537_138'
                                   2834 ;------------------------------------------------------------
                                   2835 ;	./src/WS2812.c:312: void Pattern1(uint8_t g, uint8_t r, uint8_t b)
                                   2836 ;	-----------------------------------------
                                   2837 ;	 function Pattern1
                                   2838 ;	-----------------------------------------
      000E07                       2839 _Pattern1:
      000E07 85 82*33         [24] 2840 	mov	_Pattern1_g_65536_136,dpl
                                   2841 ;	./src/WS2812.c:316: curEffect = effect;
      000E0A 85*00*01         [24] 2842 	mov	_curEffect,_effect
                                   2843 ;	./src/WS2812.c:317: curColor = _color;
      000E0D 85*00*00         [24] 2844 	mov	_curColor,__color
                                   2845 ;	./src/WS2812.c:318: float i = 0;
      000E10 E4               [12] 2846 	clr	a
      000E11 F5*34            [12] 2847 	mov	_Pattern1_i_65537_138,a
      000E13 F5*35            [12] 2848 	mov	(_Pattern1_i_65537_138 + 1),a
      000E15 F5*36            [12] 2849 	mov	(_Pattern1_i_65537_138 + 2),a
      000E17 F5*37            [12] 2850 	mov	(_Pattern1_i_65537_138 + 3),a
                                   2851 ;	./src/WS2812.c:319: while (i <= 2 * PI)
      000E19                       2852 00105$:
      000E19 C0*34            [24] 2853 	push	_Pattern1_i_65537_138
      000E1B C0*35            [24] 2854 	push	(_Pattern1_i_65537_138 + 1)
      000E1D C0*36            [24] 2855 	push	(_Pattern1_i_65537_138 + 2)
      000E1F C0*37            [24] 2856 	push	(_Pattern1_i_65537_138 + 3)
      000E21 90 0F DB         [24] 2857 	mov	dptr,#0x0fdb
      000E24 75 F0 C9         [24] 2858 	mov	b,#0xc9
      000E27 74 40            [12] 2859 	mov	a,#0x40
      000E29 12r00r00         [24] 2860 	lcall	___fslt
      000E2C E5 81            [12] 2861 	mov	a,sp
      000E2E 24 FC            [12] 2862 	add	a,#0xfc
      000E30 F5 81            [12] 2863 	mov	sp,a
      000E32 E5 82            [12] 2864 	mov	a,dpl
      000E34 24 FF            [12] 2865 	add	a,#0xff
      000E36 92*01            [24] 2866 	mov	_Pattern1_sloc0_1_0,c
      000E38 50 01            [24] 2867 	jnc	00134$
      000E3A 22               [24] 2868 	ret
      000E3B                       2869 00134$:
                                   2870 ;	./src/WS2812.c:322: for (j = 0; j < NUM_LEDS; j++)
      000E3B 7A 00            [12] 2871 	mov	r2,#0x00
      000E3D                       2872 00109$:
      000E3D 8A 00            [24] 2873 	mov	ar0,r2
      000E3F 79 00            [12] 2874 	mov	r1,#0x00
      000E41 C3               [12] 2875 	clr	c
      000E42 E8               [12] 2876 	mov	a,r0
      000E43 95*00            [12] 2877 	subb	a,_NUM_LEDS
      000E45 E9               [12] 2878 	mov	a,r1
      000E46 95*01            [12] 2879 	subb	a,(_NUM_LEDS + 1)
      000E48 50 11            [24] 2880 	jnc	00101$
                                   2881 ;	./src/WS2812.c:324: fadeToBlackBy(j, 20);
      000E4A 75*2E 14         [24] 2882 	mov	_fadeToBlackBy_PARM_2,#0x14
      000E4D 88 82            [24] 2883 	mov	dpl,r0
      000E4F 89 83            [24] 2884 	mov	dph,r1
      000E51 C0 02            [24] 2885 	push	ar2
      000E53 12r0CrFF         [24] 2886 	lcall	_fadeToBlackBy
      000E56 D0 02            [24] 2887 	pop	ar2
                                   2888 ;	./src/WS2812.c:322: for (j = 0; j < NUM_LEDS; j++)
      000E58 0A               [12] 2889 	inc	r2
      000E59 80 E2            [24] 2890 	sjmp	00109$
      000E5B                       2891 00101$:
                                   2892 ;	./src/WS2812.c:326: pixel = (uint8_t)(NUM_LEDS / 2 * (cosf(i) + 1));
      000E5B A9*00            [24] 2893 	mov	r1,_NUM_LEDS
      000E5D E5*01            [12] 2894 	mov	a,(_NUM_LEDS + 1)
      000E5F C3               [12] 2895 	clr	c
      000E60 13               [12] 2896 	rrc	a
      000E61 C9               [12] 2897 	xch	a,r1
      000E62 13               [12] 2898 	rrc	a
      000E63 C9               [12] 2899 	xch	a,r1
      000E64 FA               [12] 2900 	mov	r2,a
      000E65 85*34 82         [24] 2901 	mov	dpl,_Pattern1_i_65537_138
      000E68 85*35 83         [24] 2902 	mov	dph,(_Pattern1_i_65537_138 + 1)
      000E6B 85*36 F0         [24] 2903 	mov	b,(_Pattern1_i_65537_138 + 2)
      000E6E E5*37            [12] 2904 	mov	a,(_Pattern1_i_65537_138 + 3)
      000E70 C0 02            [24] 2905 	push	ar2
      000E72 C0 01            [24] 2906 	push	ar1
      000E74 12r00r00         [24] 2907 	lcall	_cosf
      000E77 A8 82            [24] 2908 	mov	r0,dpl
      000E79 AD 83            [24] 2909 	mov	r5,dph
      000E7B AE F0            [24] 2910 	mov	r6,b
      000E7D FF               [12] 2911 	mov	r7,a
      000E7E E4               [12] 2912 	clr	a
      000E7F C0 E0            [24] 2913 	push	acc
      000E81 C0 E0            [24] 2914 	push	acc
      000E83 74 80            [12] 2915 	mov	a,#0x80
      000E85 C0 E0            [24] 2916 	push	acc
      000E87 74 3F            [12] 2917 	mov	a,#0x3f
      000E89 C0 E0            [24] 2918 	push	acc
      000E8B 88 82            [24] 2919 	mov	dpl,r0
      000E8D 8D 83            [24] 2920 	mov	dph,r5
      000E8F 8E F0            [24] 2921 	mov	b,r6
      000E91 EF               [12] 2922 	mov	a,r7
      000E92 12r00r00         [24] 2923 	lcall	___fsadd
      000E95 AC 82            [24] 2924 	mov	r4,dpl
      000E97 AD 83            [24] 2925 	mov	r5,dph
      000E99 AE F0            [24] 2926 	mov	r6,b
      000E9B FF               [12] 2927 	mov	r7,a
      000E9C E5 81            [12] 2928 	mov	a,sp
      000E9E 24 FC            [12] 2929 	add	a,#0xfc
      000EA0 F5 81            [12] 2930 	mov	sp,a
      000EA2 D0 01            [24] 2931 	pop	ar1
      000EA4 D0 02            [24] 2932 	pop	ar2
      000EA6 89 82            [24] 2933 	mov	dpl,r1
      000EA8 8A 83            [24] 2934 	mov	dph,r2
      000EAA C0 07            [24] 2935 	push	ar7
      000EAC C0 06            [24] 2936 	push	ar6
      000EAE C0 05            [24] 2937 	push	ar5
      000EB0 C0 04            [24] 2938 	push	ar4
      000EB2 12r00r00         [24] 2939 	lcall	___uint2fs
      000EB5 A8 82            [24] 2940 	mov	r0,dpl
      000EB7 A9 83            [24] 2941 	mov	r1,dph
      000EB9 AA F0            [24] 2942 	mov	r2,b
      000EBB FB               [12] 2943 	mov	r3,a
      000EBC D0 04            [24] 2944 	pop	ar4
      000EBE D0 05            [24] 2945 	pop	ar5
      000EC0 D0 06            [24] 2946 	pop	ar6
      000EC2 D0 07            [24] 2947 	pop	ar7
      000EC4 C0 04            [24] 2948 	push	ar4
      000EC6 C0 05            [24] 2949 	push	ar5
      000EC8 C0 06            [24] 2950 	push	ar6
      000ECA C0 07            [24] 2951 	push	ar7
      000ECC 88 82            [24] 2952 	mov	dpl,r0
      000ECE 89 83            [24] 2953 	mov	dph,r1
      000ED0 8A F0            [24] 2954 	mov	b,r2
      000ED2 EB               [12] 2955 	mov	a,r3
      000ED3 12r00r00         [24] 2956 	lcall	___fsmul
      000ED6 AC 82            [24] 2957 	mov	r4,dpl
      000ED8 AD 83            [24] 2958 	mov	r5,dph
      000EDA AE F0            [24] 2959 	mov	r6,b
      000EDC FF               [12] 2960 	mov	r7,a
      000EDD E5 81            [12] 2961 	mov	a,sp
      000EDF 24 FC            [12] 2962 	add	a,#0xfc
      000EE1 F5 81            [12] 2963 	mov	sp,a
      000EE3 8C 82            [24] 2964 	mov	dpl,r4
      000EE5 8D 83            [24] 2965 	mov	dph,r5
      000EE7 8E F0            [24] 2966 	mov	b,r6
      000EE9 EF               [12] 2967 	mov	a,r7
      000EEA 12r00r00         [24] 2968 	lcall	___fs2uchar
      000EED AF 82            [24] 2969 	mov	r7,dpl
                                   2970 ;	./src/WS2812.c:327: i += 0.01;
      000EEF C0 07            [24] 2971 	push	ar7
      000EF1 74 0A            [12] 2972 	mov	a,#0x0a
      000EF3 C0 E0            [24] 2973 	push	acc
      000EF5 74 D7            [12] 2974 	mov	a,#0xd7
      000EF7 C0 E0            [24] 2975 	push	acc
      000EF9 74 23            [12] 2976 	mov	a,#0x23
      000EFB C0 E0            [24] 2977 	push	acc
      000EFD 74 3C            [12] 2978 	mov	a,#0x3c
      000EFF C0 E0            [24] 2979 	push	acc
      000F01 85*34 82         [24] 2980 	mov	dpl,_Pattern1_i_65537_138
      000F04 85*35 83         [24] 2981 	mov	dph,(_Pattern1_i_65537_138 + 1)
      000F07 85*36 F0         [24] 2982 	mov	b,(_Pattern1_i_65537_138 + 2)
      000F0A E5*37            [12] 2983 	mov	a,(_Pattern1_i_65537_138 + 3)
      000F0C 12r00r00         [24] 2984 	lcall	___fsadd
      000F0F 85 82*34         [24] 2985 	mov	_Pattern1_i_65537_138,dpl
      000F12 85 83*35         [24] 2986 	mov	(_Pattern1_i_65537_138 + 1),dph
      000F15 85 F0*36         [24] 2987 	mov	(_Pattern1_i_65537_138 + 2),b
      000F18 F5*37            [12] 2988 	mov	(_Pattern1_i_65537_138 + 3),a
      000F1A E5 81            [12] 2989 	mov	a,sp
      000F1C 24 FC            [12] 2990 	add	a,#0xfc
      000F1E F5 81            [12] 2991 	mov	sp,a
                                   2992 ;	./src/WS2812.c:328: _delay_us(DELAY);
      000F20 85*00*00         [24] 2993 	mov	__divuint_PARM_2,_NUM_LEDS
      000F23 85*01*01         [24] 2994 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000F26 90 00 C8         [24] 2995 	mov	dptr,#0x00c8
      000F29 12r00r00         [24] 2996 	lcall	__divuint
      000F2C 85*00*00         [24] 2997 	mov	__mulint_PARM_2,__delay
      000F2F 85*01*01         [24] 2998 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000F32 12r00r00         [24] 2999 	lcall	__mulint
      000F35 75*00 0A         [24] 3000 	mov	__divuint_PARM_2,#0x0a
      000F38 75*01 00         [24] 3001 	mov	(__divuint_PARM_2 + 1),#0x00
      000F3B 12r00r00         [24] 3002 	lcall	__divuint
      000F3E E5 82            [12] 3003 	mov	a,dpl
      000F40 85 83 F0         [24] 3004 	mov	b,dph
      000F43 24 01            [12] 3005 	add	a,#0x01
      000F45 FD               [12] 3006 	mov	r5,a
      000F46 E4               [12] 3007 	clr	a
      000F47 35 F0            [12] 3008 	addc	a,b
      000F49 FE               [12] 3009 	mov	r6,a
      000F4A 7C 00            [12] 3010 	mov	r4,#0x00
      000F4C 7B 00            [12] 3011 	mov	r3,#0x00
      000F4E 8D 82            [24] 3012 	mov	dpl,r5
      000F50 8E 83            [24] 3013 	mov	dph,r6
      000F52 8C F0            [24] 3014 	mov	b,r4
      000F54 EB               [12] 3015 	mov	a,r3
      000F55 12r00r00         [24] 3016 	lcall	__delay_us
      000F58 D0 07            [24] 3017 	pop	ar7
                                   3018 ;	./src/WS2812.c:330: setPixel(pixel, g, r, b);
      000F5A 7E 00            [12] 3019 	mov	r6,#0x00
      000F5C 85*33*02         [24] 3020 	mov	_setPixel_PARM_2,_Pattern1_g_65536_136
      000F5F 85*31*03         [24] 3021 	mov	_setPixel_PARM_3,_Pattern1_PARM_2
      000F62 85*32*04         [24] 3022 	mov	_setPixel_PARM_4,_Pattern1_PARM_3
      000F65 8F 82            [24] 3023 	mov	dpl,r7
      000F67 8E 83            [24] 3024 	mov	dph,r6
      000F69 12r01r58         [24] 3025 	lcall	_setPixel
                                   3026 ;	./src/WS2812.c:332: showStrip();
      000F6C 12r00rE4         [24] 3027 	lcall	_showStrip
                                   3028 ;	./src/WS2812.c:333: CHECK_EFF;
      000F6F E5*00            [12] 3029 	mov	a,_effect
      000F71 B5*01 08         [24] 3030 	cjne	a,_curEffect,00102$
      000F74 E5*00            [12] 3031 	mov	a,__color
      000F76 B5*00 03         [24] 3032 	cjne	a,_curColor,00138$
      000F79 02r0Er19         [24] 3033 	ljmp	00105$
      000F7C                       3034 00138$:
      000F7C                       3035 00102$:
      000F7C 75*00 12         [24] 3036 	mov	__status,#0x12
                                   3037 ;	./src/WS2812.c:335: }
      000F7F 22               [24] 3038 	ret
                                   3039 ;------------------------------------------------------------
                                   3040 ;Allocation info for local variables in function 'Pattern2'
                                   3041 ;------------------------------------------------------------
                                   3042 ;r                         Allocated with name '_Pattern2_PARM_2'
                                   3043 ;b                         Allocated with name '_Pattern2_PARM_3'
                                   3044 ;g2                        Allocated with name '_Pattern2_PARM_4'
                                   3045 ;r2                        Allocated with name '_Pattern2_PARM_5'
                                   3046 ;b2                        Allocated with name '_Pattern2_PARM_6'
                                   3047 ;g                         Allocated with name '_Pattern2_g_65536_143'
                                   3048 ;j                         Allocated to registers r2 
                                   3049 ;pixel                     Allocated to registers r7 
                                   3050 ;i                         Allocated with name '_Pattern2_i_65537_145'
                                   3051 ;------------------------------------------------------------
                                   3052 ;	./src/WS2812.c:336: void Pattern2(uint8_t g, uint8_t r, uint8_t b, uint8_t g2, uint8_t r2, uint8_t b2)
                                   3053 ;	-----------------------------------------
                                   3054 ;	 function Pattern2
                                   3055 ;	-----------------------------------------
      000F80                       3056 _Pattern2:
      000F80 85 82*3D         [24] 3057 	mov	_Pattern2_g_65536_143,dpl
                                   3058 ;	./src/WS2812.c:340: curEffect = effect;
      000F83 85*00*01         [24] 3059 	mov	_curEffect,_effect
                                   3060 ;	./src/WS2812.c:341: curColor = _color;
      000F86 85*00*00         [24] 3061 	mov	_curColor,__color
                                   3062 ;	./src/WS2812.c:342: float i = 0;
      000F89 E4               [12] 3063 	clr	a
      000F8A F5*3E            [12] 3064 	mov	_Pattern2_i_65537_145,a
      000F8C F5*3F            [12] 3065 	mov	(_Pattern2_i_65537_145 + 1),a
      000F8E F5*40            [12] 3066 	mov	(_Pattern2_i_65537_145 + 2),a
      000F90 F5*41            [12] 3067 	mov	(_Pattern2_i_65537_145 + 3),a
                                   3068 ;	./src/WS2812.c:343: while (i <= 2 * PI)
      000F92                       3069 00105$:
      000F92 C0*3E            [24] 3070 	push	_Pattern2_i_65537_145
      000F94 C0*3F            [24] 3071 	push	(_Pattern2_i_65537_145 + 1)
      000F96 C0*40            [24] 3072 	push	(_Pattern2_i_65537_145 + 2)
      000F98 C0*41            [24] 3073 	push	(_Pattern2_i_65537_145 + 3)
      000F9A 90 0F DB         [24] 3074 	mov	dptr,#0x0fdb
      000F9D 75 F0 C9         [24] 3075 	mov	b,#0xc9
      000FA0 74 40            [12] 3076 	mov	a,#0x40
      000FA2 12r00r00         [24] 3077 	lcall	___fslt
      000FA5 E5 81            [12] 3078 	mov	a,sp
      000FA7 24 FC            [12] 3079 	add	a,#0xfc
      000FA9 F5 81            [12] 3080 	mov	sp,a
      000FAB E5 82            [12] 3081 	mov	a,dpl
      000FAD 24 FF            [12] 3082 	add	a,#0xff
      000FAF 92*02            [24] 3083 	mov	_Pattern2_sloc0_1_0,c
      000FB1 50 01            [24] 3084 	jnc	00134$
      000FB3 22               [24] 3085 	ret
      000FB4                       3086 00134$:
                                   3087 ;	./src/WS2812.c:346: for (j = 0; j < NUM_LEDS; j++)
      000FB4 7A 00            [12] 3088 	mov	r2,#0x00
      000FB6                       3089 00109$:
      000FB6 8A 00            [24] 3090 	mov	ar0,r2
      000FB8 79 00            [12] 3091 	mov	r1,#0x00
      000FBA C3               [12] 3092 	clr	c
      000FBB E8               [12] 3093 	mov	a,r0
      000FBC 95*00            [12] 3094 	subb	a,_NUM_LEDS
      000FBE E9               [12] 3095 	mov	a,r1
      000FBF 95*01            [12] 3096 	subb	a,(_NUM_LEDS + 1)
      000FC1 50 11            [24] 3097 	jnc	00101$
                                   3098 ;	./src/WS2812.c:348: fadeToBlackBy(j, 20);
      000FC3 75*2E 14         [24] 3099 	mov	_fadeToBlackBy_PARM_2,#0x14
      000FC6 88 82            [24] 3100 	mov	dpl,r0
      000FC8 89 83            [24] 3101 	mov	dph,r1
      000FCA C0 02            [24] 3102 	push	ar2
      000FCC 12r0CrFF         [24] 3103 	lcall	_fadeToBlackBy
      000FCF D0 02            [24] 3104 	pop	ar2
                                   3105 ;	./src/WS2812.c:346: for (j = 0; j < NUM_LEDS; j++)
      000FD1 0A               [12] 3106 	inc	r2
      000FD2 80 E2            [24] 3107 	sjmp	00109$
      000FD4                       3108 00101$:
                                   3109 ;	./src/WS2812.c:350: pixel = (uint8_t)(NUM_LEDS / 2 * (cosf(i) + 1));
      000FD4 A9*00            [24] 3110 	mov	r1,_NUM_LEDS
      000FD6 E5*01            [12] 3111 	mov	a,(_NUM_LEDS + 1)
      000FD8 C3               [12] 3112 	clr	c
      000FD9 13               [12] 3113 	rrc	a
      000FDA C9               [12] 3114 	xch	a,r1
      000FDB 13               [12] 3115 	rrc	a
      000FDC C9               [12] 3116 	xch	a,r1
      000FDD FA               [12] 3117 	mov	r2,a
      000FDE 85*3E 82         [24] 3118 	mov	dpl,_Pattern2_i_65537_145
      000FE1 85*3F 83         [24] 3119 	mov	dph,(_Pattern2_i_65537_145 + 1)
      000FE4 85*40 F0         [24] 3120 	mov	b,(_Pattern2_i_65537_145 + 2)
      000FE7 E5*41            [12] 3121 	mov	a,(_Pattern2_i_65537_145 + 3)
      000FE9 C0 02            [24] 3122 	push	ar2
      000FEB C0 01            [24] 3123 	push	ar1
      000FED 12r00r00         [24] 3124 	lcall	_cosf
      000FF0 A8 82            [24] 3125 	mov	r0,dpl
      000FF2 AD 83            [24] 3126 	mov	r5,dph
      000FF4 AE F0            [24] 3127 	mov	r6,b
      000FF6 FF               [12] 3128 	mov	r7,a
      000FF7 E4               [12] 3129 	clr	a
      000FF8 C0 E0            [24] 3130 	push	acc
      000FFA C0 E0            [24] 3131 	push	acc
      000FFC 74 80            [12] 3132 	mov	a,#0x80
      000FFE C0 E0            [24] 3133 	push	acc
      001000 74 3F            [12] 3134 	mov	a,#0x3f
      001002 C0 E0            [24] 3135 	push	acc
      001004 88 82            [24] 3136 	mov	dpl,r0
      001006 8D 83            [24] 3137 	mov	dph,r5
      001008 8E F0            [24] 3138 	mov	b,r6
      00100A EF               [12] 3139 	mov	a,r7
      00100B 12r00r00         [24] 3140 	lcall	___fsadd
      00100E AC 82            [24] 3141 	mov	r4,dpl
      001010 AD 83            [24] 3142 	mov	r5,dph
      001012 AE F0            [24] 3143 	mov	r6,b
      001014 FF               [12] 3144 	mov	r7,a
      001015 E5 81            [12] 3145 	mov	a,sp
      001017 24 FC            [12] 3146 	add	a,#0xfc
      001019 F5 81            [12] 3147 	mov	sp,a
      00101B D0 01            [24] 3148 	pop	ar1
      00101D D0 02            [24] 3149 	pop	ar2
      00101F 89 82            [24] 3150 	mov	dpl,r1
      001021 8A 83            [24] 3151 	mov	dph,r2
      001023 C0 07            [24] 3152 	push	ar7
      001025 C0 06            [24] 3153 	push	ar6
      001027 C0 05            [24] 3154 	push	ar5
      001029 C0 04            [24] 3155 	push	ar4
      00102B 12r00r00         [24] 3156 	lcall	___uint2fs
      00102E A8 82            [24] 3157 	mov	r0,dpl
      001030 A9 83            [24] 3158 	mov	r1,dph
      001032 AA F0            [24] 3159 	mov	r2,b
      001034 FB               [12] 3160 	mov	r3,a
      001035 D0 04            [24] 3161 	pop	ar4
      001037 D0 05            [24] 3162 	pop	ar5
      001039 D0 06            [24] 3163 	pop	ar6
      00103B D0 07            [24] 3164 	pop	ar7
      00103D C0 04            [24] 3165 	push	ar4
      00103F C0 05            [24] 3166 	push	ar5
      001041 C0 06            [24] 3167 	push	ar6
      001043 C0 07            [24] 3168 	push	ar7
      001045 88 82            [24] 3169 	mov	dpl,r0
      001047 89 83            [24] 3170 	mov	dph,r1
      001049 8A F0            [24] 3171 	mov	b,r2
      00104B EB               [12] 3172 	mov	a,r3
      00104C 12r00r00         [24] 3173 	lcall	___fsmul
      00104F AC 82            [24] 3174 	mov	r4,dpl
      001051 AD 83            [24] 3175 	mov	r5,dph
      001053 AE F0            [24] 3176 	mov	r6,b
      001055 FF               [12] 3177 	mov	r7,a
      001056 E5 81            [12] 3178 	mov	a,sp
      001058 24 FC            [12] 3179 	add	a,#0xfc
      00105A F5 81            [12] 3180 	mov	sp,a
      00105C 8C 82            [24] 3181 	mov	dpl,r4
      00105E 8D 83            [24] 3182 	mov	dph,r5
      001060 8E F0            [24] 3183 	mov	b,r6
      001062 EF               [12] 3184 	mov	a,r7
      001063 12r00r00         [24] 3185 	lcall	___fs2uchar
      001066 AF 82            [24] 3186 	mov	r7,dpl
                                   3187 ;	./src/WS2812.c:351: i += 0.01;
      001068 C0 07            [24] 3188 	push	ar7
      00106A 74 0A            [12] 3189 	mov	a,#0x0a
      00106C C0 E0            [24] 3190 	push	acc
      00106E 74 D7            [12] 3191 	mov	a,#0xd7
      001070 C0 E0            [24] 3192 	push	acc
      001072 74 23            [12] 3193 	mov	a,#0x23
      001074 C0 E0            [24] 3194 	push	acc
      001076 74 3C            [12] 3195 	mov	a,#0x3c
      001078 C0 E0            [24] 3196 	push	acc
      00107A 85*3E 82         [24] 3197 	mov	dpl,_Pattern2_i_65537_145
      00107D 85*3F 83         [24] 3198 	mov	dph,(_Pattern2_i_65537_145 + 1)
      001080 85*40 F0         [24] 3199 	mov	b,(_Pattern2_i_65537_145 + 2)
      001083 E5*41            [12] 3200 	mov	a,(_Pattern2_i_65537_145 + 3)
      001085 12r00r00         [24] 3201 	lcall	___fsadd
      001088 85 82*3E         [24] 3202 	mov	_Pattern2_i_65537_145,dpl
      00108B 85 83*3F         [24] 3203 	mov	(_Pattern2_i_65537_145 + 1),dph
      00108E 85 F0*40         [24] 3204 	mov	(_Pattern2_i_65537_145 + 2),b
      001091 F5*41            [12] 3205 	mov	(_Pattern2_i_65537_145 + 3),a
      001093 E5 81            [12] 3206 	mov	a,sp
      001095 24 FC            [12] 3207 	add	a,#0xfc
      001097 F5 81            [12] 3208 	mov	sp,a
                                   3209 ;	./src/WS2812.c:352: _delay_ms(DELAY);
      001099 85*00*00         [24] 3210 	mov	__divuint_PARM_2,_NUM_LEDS
      00109C 85*01*01         [24] 3211 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00109F 90 00 C8         [24] 3212 	mov	dptr,#0x00c8
      0010A2 12r00r00         [24] 3213 	lcall	__divuint
      0010A5 85*00*00         [24] 3214 	mov	__mulint_PARM_2,__delay
      0010A8 85*01*01         [24] 3215 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0010AB 12r00r00         [24] 3216 	lcall	__mulint
      0010AE 75*00 0A         [24] 3217 	mov	__divuint_PARM_2,#0x0a
      0010B1 75*01 00         [24] 3218 	mov	(__divuint_PARM_2 + 1),#0x00
      0010B4 12r00r00         [24] 3219 	lcall	__divuint
      0010B7 E5 82            [12] 3220 	mov	a,dpl
      0010B9 85 83 F0         [24] 3221 	mov	b,dph
      0010BC 24 01            [12] 3222 	add	a,#0x01
      0010BE FD               [12] 3223 	mov	r5,a
      0010BF E4               [12] 3224 	clr	a
      0010C0 35 F0            [12] 3225 	addc	a,b
      0010C2 FE               [12] 3226 	mov	r6,a
      0010C3 7C 00            [12] 3227 	mov	r4,#0x00
      0010C5 7B 00            [12] 3228 	mov	r3,#0x00
      0010C7 8D 82            [24] 3229 	mov	dpl,r5
      0010C9 8E 83            [24] 3230 	mov	dph,r6
      0010CB 8C F0            [24] 3231 	mov	b,r4
      0010CD EB               [12] 3232 	mov	a,r3
      0010CE 12r00r00         [24] 3233 	lcall	__delay_ms
      0010D1 D0 07            [24] 3234 	pop	ar7
                                   3235 ;	./src/WS2812.c:354: setPixel(pixel, g, r, b);
      0010D3 8F 05            [24] 3236 	mov	ar5,r7
      0010D5 7E 00            [12] 3237 	mov	r6,#0x00
      0010D7 85*3D*02         [24] 3238 	mov	_setPixel_PARM_2,_Pattern2_g_65536_143
      0010DA 85*38*03         [24] 3239 	mov	_setPixel_PARM_3,_Pattern2_PARM_2
      0010DD 85*39*04         [24] 3240 	mov	_setPixel_PARM_4,_Pattern2_PARM_3
      0010E0 8D 82            [24] 3241 	mov	dpl,r5
      0010E2 8E 83            [24] 3242 	mov	dph,r6
      0010E4 C0 07            [24] 3243 	push	ar7
      0010E6 12r01r58         [24] 3244 	lcall	_setPixel
      0010E9 D0 07            [24] 3245 	pop	ar7
                                   3246 ;	./src/WS2812.c:355: setPixel(NUM_LEDS - 1 - pixel, g2, r2, b2);
      0010EB AD*00            [24] 3247 	mov	r5,_NUM_LEDS
      0010ED AE*01            [24] 3248 	mov	r6,(_NUM_LEDS + 1)
      0010EF 1D               [12] 3249 	dec	r5
      0010F0 BD FF 01         [24] 3250 	cjne	r5,#0xff,00136$
      0010F3 1E               [12] 3251 	dec	r6
      0010F4                       3252 00136$:
      0010F4 7C 00            [12] 3253 	mov	r4,#0x00
      0010F6 ED               [12] 3254 	mov	a,r5
      0010F7 C3               [12] 3255 	clr	c
      0010F8 9F               [12] 3256 	subb	a,r7
      0010F9 FD               [12] 3257 	mov	r5,a
      0010FA EE               [12] 3258 	mov	a,r6
      0010FB 9C               [12] 3259 	subb	a,r4
      0010FC FE               [12] 3260 	mov	r6,a
      0010FD 8D 82            [24] 3261 	mov	dpl,r5
      0010FF 8E 83            [24] 3262 	mov	dph,r6
      001101 85*3A*02         [24] 3263 	mov	_setPixel_PARM_2,_Pattern2_PARM_4
      001104 85*3B*03         [24] 3264 	mov	_setPixel_PARM_3,_Pattern2_PARM_5
      001107 85*3C*04         [24] 3265 	mov	_setPixel_PARM_4,_Pattern2_PARM_6
      00110A 12r01r58         [24] 3266 	lcall	_setPixel
                                   3267 ;	./src/WS2812.c:356: showStrip();
      00110D 12r00rE4         [24] 3268 	lcall	_showStrip
                                   3269 ;	./src/WS2812.c:357: CHECK_EFF;
      001110 E5*00            [12] 3270 	mov	a,_effect
      001112 B5*01 08         [24] 3271 	cjne	a,_curEffect,00102$
      001115 E5*00            [12] 3272 	mov	a,__color
      001117 B5*00 03         [24] 3273 	cjne	a,_curColor,00139$
      00111A 02r0Fr92         [24] 3274 	ljmp	00105$
      00111D                       3275 00139$:
      00111D                       3276 00102$:
      00111D 75*00 12         [24] 3277 	mov	__status,#0x12
                                   3278 ;	./src/WS2812.c:359: }
      001120 22               [24] 3279 	ret
                                   3280 	.area CSEG    (CODE)
                                   3281 	.area CONST   (CODE)
                                   3282 	.area XINIT   (CODE)
                                   3283 	.area CABS    (ABS,CODE)
