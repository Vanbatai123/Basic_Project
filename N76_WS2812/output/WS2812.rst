                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module WS2812
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _fadeToBlackBy
                                     12 	.globl _LED__SendByte_
                                     13 	.globl _LED__SendOne_
                                     14 	.globl _LED__SendZero_
                                     15 	.globl _cosf
                                     16 	.globl __delay_us
                                     17 	.globl __delay_ms
                                     18 	.globl _eiph1
                                     19 	.globl _eip1
                                     20 	.globl _pmd
                                     21 	.globl _pmen
                                     22 	.globl _pdtcnt
                                     23 	.globl _pdten
                                     24 	.globl _scon_1
                                     25 	.globl _eiph
                                     26 	.globl _aindids
                                     27 	.globl _spdr
                                     28 	.globl _spsr
                                     29 	.globl _spcr2
                                     30 	.globl _spcr
                                     31 	.globl _capcon4
                                     32 	.globl _capcon3
                                     33 	.globl _b
                                     34 	.globl _eip
                                     35 	.globl _c2h
                                     36 	.globl _c2l
                                     37 	.globl _pif
                                     38 	.globl _pipen
                                     39 	.globl _pinen
                                     40 	.globl _picon
                                     41 	.globl _adccon0
                                     42 	.globl _c1h
                                     43 	.globl _c1l
                                     44 	.globl _c0h
                                     45 	.globl _c0l
                                     46 	.globl _adcdly
                                     47 	.globl _adccon2
                                     48 	.globl _adccon1
                                     49 	.globl _acc
                                     50 	.globl _pwmcon1
                                     51 	.globl _piocon0
                                     52 	.globl _pwm3l
                                     53 	.globl _pwm2l
                                     54 	.globl _pwm1l
                                     55 	.globl _pwm0l
                                     56 	.globl _pwmpl
                                     57 	.globl _pwmcon0
                                     58 	.globl _fbd
                                     59 	.globl _pnp
                                     60 	.globl _pwm3h
                                     61 	.globl _pwm2h
                                     62 	.globl _pwm1h
                                     63 	.globl _pwm0h
                                     64 	.globl _pwmph
                                     65 	.globl _psw
                                     66 	.globl _adcmph
                                     67 	.globl _adcmpl
                                     68 	.globl _pwm5l
                                     69 	.globl _th2
                                     70 	.globl _pwm4l
                                     71 	.globl _tl2
                                     72 	.globl _rcmp2h
                                     73 	.globl _rcmp2l
                                     74 	.globl _t2mod
                                     75 	.globl _t2con
                                     76 	.globl _ta
                                     77 	.globl _piocon1
                                     78 	.globl _rh3
                                     79 	.globl _pwm5h
                                     80 	.globl _rl3
                                     81 	.globl _pwm4h
                                     82 	.globl _t3con
                                     83 	.globl _adcrh
                                     84 	.globl _adcrl
                                     85 	.globl _i2addr
                                     86 	.globl _i2con
                                     87 	.globl _i2toc
                                     88 	.globl _i2clk
                                     89 	.globl _i2stat
                                     90 	.globl _i2dat
                                     91 	.globl _saddr_1
                                     92 	.globl _saden_1
                                     93 	.globl _saden
                                     94 	.globl _ip
                                     95 	.globl _pwmintc
                                     96 	.globl _iph
                                     97 	.globl _p2s
                                     98 	.globl _p1sr
                                     99 	.globl _p1m2
                                    100 	.globl _p1s
                                    101 	.globl _p1m1
                                    102 	.globl _p0sr
                                    103 	.globl _p0m2
                                    104 	.globl _p0s
                                    105 	.globl _p0m1
                                    106 	.globl _p3
                                    107 	.globl _iapcn
                                    108 	.globl _iapfd
                                    109 	.globl _p3sr
                                    110 	.globl _p3m2
                                    111 	.globl _p3s
                                    112 	.globl _p3m1
                                    113 	.globl _bodcon1
                                    114 	.globl _wdcon
                                    115 	.globl _saddr
                                    116 	.globl _ie
                                    117 	.globl _iapah
                                    118 	.globl _iapal
                                    119 	.globl _iapuen
                                    120 	.globl _iaptrg
                                    121 	.globl _bodcon0
                                    122 	.globl _auxr1
                                    123 	.globl _p2
                                    124 	.globl _chpcon
                                    125 	.globl _eie1
                                    126 	.globl _eie
                                    127 	.globl _sbuf_1
                                    128 	.globl _sbuf
                                    129 	.globl _scon
                                    130 	.globl _cken
                                    131 	.globl _ckswt
                                    132 	.globl _ckdiv
                                    133 	.globl _capcon2
                                    134 	.globl _capcon1
                                    135 	.globl _capcon0
                                    136 	.globl _sfrs
                                    137 	.globl _p1
                                    138 	.globl _wkcon
                                    139 	.globl _ckcon
                                    140 	.globl _th1
                                    141 	.globl _th0
                                    142 	.globl _tl1
                                    143 	.globl _tl0
                                    144 	.globl _tmod
                                    145 	.globl _tcon
                                    146 	.globl _pcon
                                    147 	.globl _rwk
                                    148 	.globl _rctrim1
                                    149 	.globl _rctrim0
                                    150 	.globl _dph
                                    151 	.globl _dpl
                                    152 	.globl _sp
                                    153 	.globl _p0
                                    154 	.globl _Pattern2_PARM_6
                                    155 	.globl _Pattern2_PARM_5
                                    156 	.globl _Pattern2_PARM_4
                                    157 	.globl _Pattern2_PARM_3
                                    158 	.globl _Pattern2_PARM_2
                                    159 	.globl _Pattern1_PARM_3
                                    160 	.globl _Pattern1_PARM_2
                                    161 	.globl _fadeToBlackBy_PARM_2
                                    162 	.globl _Pattern3_PARM_4
                                    163 	.globl _Pattern3_PARM_3
                                    164 	.globl _Pattern3_PARM_2
                                    165 	.globl _colorWipe_PARM_4
                                    166 	.globl _colorWipe_PARM_3
                                    167 	.globl _colorWipe_PARM_2
                                    168 	.globl _CylonBounceI_PARM_5
                                    169 	.globl _CylonBounceI_PARM_4
                                    170 	.globl _CylonBounceI_PARM_3
                                    171 	.globl _CylonBounceI_PARM_2
                                    172 	.globl _CylonBounce_PARM_5
                                    173 	.globl _CylonBounce_PARM_4
                                    174 	.globl _CylonBounce_PARM_3
                                    175 	.globl _CylonBounce_PARM_2
                                    176 	.globl _FadeInOut_PARM_3
                                    177 	.globl _FadeInOut_PARM_2
                                    178 	.globl _setAll_PARM_3
                                    179 	.globl _setAll_PARM_2
                                    180 	.globl _setPixel_PARM_4
                                    181 	.globl _setPixel_PARM_3
                                    182 	.globl _setPixel_PARM_2
                                    183 	.globl _curEffect
                                    184 	.globl _curColor
                                    185 	.globl _clearAll
                                    186 	.globl _showStrip
                                    187 	.globl _setPixel
                                    188 	.globl _setAll
                                    189 	.globl _FadeInOut
                                    190 	.globl _CylonBounce
                                    191 	.globl _CylonBounceI
                                    192 	.globl _colorWipe
                                    193 	.globl _rainbowCycle
                                    194 	.globl _Pattern3
                                    195 	.globl _Pattern1
                                    196 	.globl _Pattern2
                                    197 ;--------------------------------------------------------
                                    198 ; special function registers
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _p0	=	0x0080
                           000081   203 _sp	=	0x0081
                           000082   204 _dpl	=	0x0082
                           000083   205 _dph	=	0x0083
                           000084   206 _rctrim0	=	0x0084
                           000085   207 _rctrim1	=	0x0085
                           000086   208 _rwk	=	0x0086
                           000087   209 _pcon	=	0x0087
                           000088   210 _tcon	=	0x0088
                           000089   211 _tmod	=	0x0089
                           00008A   212 _tl0	=	0x008a
                           00008B   213 _tl1	=	0x008b
                           00008C   214 _th0	=	0x008c
                           00008D   215 _th1	=	0x008d
                           00008E   216 _ckcon	=	0x008e
                           00008F   217 _wkcon	=	0x008f
                           000090   218 _p1	=	0x0090
                           000091   219 _sfrs	=	0x0091
                           000092   220 _capcon0	=	0x0092
                           000093   221 _capcon1	=	0x0093
                           000094   222 _capcon2	=	0x0094
                           000095   223 _ckdiv	=	0x0095
                           000096   224 _ckswt	=	0x0096
                           000097   225 _cken	=	0x0097
                           000098   226 _scon	=	0x0098
                           000099   227 _sbuf	=	0x0099
                           00009A   228 _sbuf_1	=	0x009a
                           00009B   229 _eie	=	0x009b
                           00009C   230 _eie1	=	0x009c
                           00009F   231 _chpcon	=	0x009f
                           0000A0   232 _p2	=	0x00a0
                           0000A2   233 _auxr1	=	0x00a2
                           0000A3   234 _bodcon0	=	0x00a3
                           0000A4   235 _iaptrg	=	0x00a4
                           0000A5   236 _iapuen	=	0x00a5
                           0000A6   237 _iapal	=	0x00a6
                           0000A7   238 _iapah	=	0x00a7
                           0000A8   239 _ie	=	0x00a8
                           0000A9   240 _saddr	=	0x00a9
                           0000AA   241 _wdcon	=	0x00aa
                           0000AB   242 _bodcon1	=	0x00ab
                           0000AC   243 _p3m1	=	0x00ac
                           0000AC   244 _p3s	=	0x00ac
                           0000AD   245 _p3m2	=	0x00ad
                           0000AD   246 _p3sr	=	0x00ad
                           0000AE   247 _iapfd	=	0x00ae
                           0000AF   248 _iapcn	=	0x00af
                           0000B0   249 _p3	=	0x00b0
                           0000B1   250 _p0m1	=	0x00b1
                           0000B1   251 _p0s	=	0x00b1
                           0000B2   252 _p0m2	=	0x00b2
                           0000B2   253 _p0sr	=	0x00b2
                           0000B3   254 _p1m1	=	0x00b3
                           0000B3   255 _p1s	=	0x00b3
                           0000B4   256 _p1m2	=	0x00b4
                           0000B4   257 _p1sr	=	0x00b4
                           0000B5   258 _p2s	=	0x00b5
                           0000B7   259 _iph	=	0x00b7
                           0000B7   260 _pwmintc	=	0x00b7
                           0000B8   261 _ip	=	0x00b8
                           0000B9   262 _saden	=	0x00b9
                           0000BA   263 _saden_1	=	0x00ba
                           0000BB   264 _saddr_1	=	0x00bb
                           0000BC   265 _i2dat	=	0x00bc
                           0000BD   266 _i2stat	=	0x00bd
                           0000BE   267 _i2clk	=	0x00be
                           0000BF   268 _i2toc	=	0x00bf
                           0000C0   269 _i2con	=	0x00c0
                           0000C1   270 _i2addr	=	0x00c1
                           0000C2   271 _adcrl	=	0x00c2
                           0000C3   272 _adcrh	=	0x00c3
                           0000C4   273 _t3con	=	0x00c4
                           0000C4   274 _pwm4h	=	0x00c4
                           0000C5   275 _rl3	=	0x00c5
                           0000C5   276 _pwm5h	=	0x00c5
                           0000C6   277 _rh3	=	0x00c6
                           0000C6   278 _piocon1	=	0x00c6
                           0000C7   279 _ta	=	0x00c7
                           0000C8   280 _t2con	=	0x00c8
                           0000C9   281 _t2mod	=	0x00c9
                           0000CA   282 _rcmp2l	=	0x00ca
                           0000CB   283 _rcmp2h	=	0x00cb
                           0000CC   284 _tl2	=	0x00cc
                           0000CC   285 _pwm4l	=	0x00cc
                           0000CD   286 _th2	=	0x00cd
                           0000CD   287 _pwm5l	=	0x00cd
                           0000CE   288 _adcmpl	=	0x00ce
                           0000CF   289 _adcmph	=	0x00cf
                           0000D0   290 _psw	=	0x00d0
                           0000D1   291 _pwmph	=	0x00d1
                           0000D2   292 _pwm0h	=	0x00d2
                           0000D3   293 _pwm1h	=	0x00d3
                           0000D4   294 _pwm2h	=	0x00d4
                           0000D5   295 _pwm3h	=	0x00d5
                           0000D6   296 _pnp	=	0x00d6
                           0000D7   297 _fbd	=	0x00d7
                           0000D8   298 _pwmcon0	=	0x00d8
                           0000D9   299 _pwmpl	=	0x00d9
                           0000DA   300 _pwm0l	=	0x00da
                           0000DB   301 _pwm1l	=	0x00db
                           0000DC   302 _pwm2l	=	0x00dc
                           0000DD   303 _pwm3l	=	0x00dd
                           0000DE   304 _piocon0	=	0x00de
                           0000DF   305 _pwmcon1	=	0x00df
                           0000E0   306 _acc	=	0x00e0
                           0000E1   307 _adccon1	=	0x00e1
                           0000E2   308 _adccon2	=	0x00e2
                           0000E3   309 _adcdly	=	0x00e3
                           0000E4   310 _c0l	=	0x00e4
                           0000E5   311 _c0h	=	0x00e5
                           0000E6   312 _c1l	=	0x00e6
                           0000E7   313 _c1h	=	0x00e7
                           0000E8   314 _adccon0	=	0x00e8
                           0000E9   315 _picon	=	0x00e9
                           0000EA   316 _pinen	=	0x00ea
                           0000EB   317 _pipen	=	0x00eb
                           0000EC   318 _pif	=	0x00ec
                           0000ED   319 _c2l	=	0x00ed
                           0000EE   320 _c2h	=	0x00ee
                           0000EF   321 _eip	=	0x00ef
                           0000F0   322 _b	=	0x00f0
                           0000F1   323 _capcon3	=	0x00f1
                           0000F2   324 _capcon4	=	0x00f2
                           0000F3   325 _spcr	=	0x00f3
                           0000F3   326 _spcr2	=	0x00f3
                           0000F4   327 _spsr	=	0x00f4
                           0000F5   328 _spdr	=	0x00f5
                           0000F6   329 _aindids	=	0x00f6
                           0000F7   330 _eiph	=	0x00f7
                           0000F8   331 _scon_1	=	0x00f8
                           0000F9   332 _pdten	=	0x00f9
                           0000FA   333 _pdtcnt	=	0x00fa
                           0000FB   334 _pmen	=	0x00fb
                           0000FC   335 _pmd	=	0x00fc
                           0000FE   336 _eip1	=	0x00fe
                           0000FF   337 _eiph1	=	0x00ff
                                    338 ;--------------------------------------------------------
                                    339 ; special function bits
                                    340 ;--------------------------------------------------------
                                    341 	.area RSEG    (ABS,DATA)
      000000                        342 	.org 0x0000
                                    343 ;--------------------------------------------------------
                                    344 ; overlayable register banks
                                    345 ;--------------------------------------------------------
                                    346 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        347 	.ds 8
                                    348 ;--------------------------------------------------------
                                    349 ; internal ram data
                                    350 ;--------------------------------------------------------
                                    351 	.area DSEG    (DATA)
      000022                        352 _curColor::
      000022                        353 	.ds 1
      000023                        354 _curEffect::
      000023                        355 	.ds 1
      000024                        356 _setPixel_PARM_2:
      000024                        357 	.ds 1
      000025                        358 _setPixel_PARM_3:
      000025                        359 	.ds 1
      000026                        360 _setPixel_PARM_4:
      000026                        361 	.ds 1
      000027                        362 _setAll_PARM_2:
      000027                        363 	.ds 1
      000028                        364 _setAll_PARM_3:
      000028                        365 	.ds 1
      000029                        366 _FadeInOut_PARM_2:
      000029                        367 	.ds 1
      00002A                        368 _FadeInOut_PARM_3:
      00002A                        369 	.ds 1
      00002B                        370 _FadeInOut_green_65536_80:
      00002B                        371 	.ds 1
      00002C                        372 _FadeInOut_g_65536_81:
      00002C                        373 	.ds 1
      00002D                        374 _FadeInOut_r_65536_81:
      00002D                        375 	.ds 1
      00002E                        376 _FadeInOut_curEffect_65536_81:
      00002E                        377 	.ds 1
      00002F                        378 _FadeInOut_curColor_65536_81:
      00002F                        379 	.ds 1
      000030                        380 _FadeInOut_k_131072_85:
      000030                        381 	.ds 2
      000032                        382 _CylonBounce_PARM_2:
      000032                        383 	.ds 1
      000033                        384 _CylonBounce_PARM_3:
      000033                        385 	.ds 1
      000034                        386 _CylonBounce_PARM_4:
      000034                        387 	.ds 2
      000036                        388 _CylonBounce_PARM_5:
      000036                        389 	.ds 2
      000038                        390 _CylonBounce_green_65536_88:
      000038                        391 	.ds 1
      000039                        392 _CylonBounce_i_65537_90:
      000039                        393 	.ds 1
      00003A                        394 _CylonBounce_j_65537_90:
      00003A                        395 	.ds 1
      00003B                        396 _CylonBounce_sloc0_1_0:
      00003B                        397 	.ds 1
      00003C                        398 _CylonBounce_sloc1_1_0:
      00003C                        399 	.ds 1
      00003D                        400 _CylonBounceI_PARM_2:
      00003D                        401 	.ds 1
      00003E                        402 _CylonBounceI_PARM_3:
      00003E                        403 	.ds 1
      00003F                        404 _CylonBounceI_PARM_4:
      00003F                        405 	.ds 2
      000041                        406 _CylonBounceI_PARM_5:
      000041                        407 	.ds 2
      000043                        408 _CylonBounceI_green_65536_101:
      000043                        409 	.ds 1
      000044                        410 _CylonBounceI_j_65537_103:
      000044                        411 	.ds 1
      000045                        412 _CylonBounceI_sloc0_1_0:
      000045                        413 	.ds 2
      000047                        414 _colorWipe_PARM_2:
      000047                        415 	.ds 1
      000048                        416 _colorWipe_PARM_3:
      000048                        417 	.ds 1
      000049                        418 _colorWipe_PARM_4:
      000049                        419 	.ds 1
      00004A                        420 _rainbowCycle_WheelPos_65537_120:
      00004A                        421 	.ds 1
      00004B                        422 _Pattern3_PARM_2:
      00004B                        423 	.ds 1
      00004C                        424 _Pattern3_PARM_3:
      00004C                        425 	.ds 1
      00004D                        426 _Pattern3_PARM_4:
      00004D                        427 	.ds 1
      00004E                        428 _Pattern3_sloc0_1_0:
      00004E                        429 	.ds 2
      000050                        430 _fadeToBlackBy_PARM_2:
      000050                        431 	.ds 1
      000051                        432 _fadeToBlackBy_pixel_65536_134:
      000051                        433 	.ds 2
      000053                        434 _Pattern1_PARM_2:
      000053                        435 	.ds 1
      000054                        436 _Pattern1_PARM_3:
      000054                        437 	.ds 1
      000055                        438 _Pattern1_g_65536_136:
      000055                        439 	.ds 1
      000056                        440 _Pattern1_i_65537_138:
      000056                        441 	.ds 4
      00005A                        442 _Pattern2_PARM_2:
      00005A                        443 	.ds 1
      00005B                        444 _Pattern2_PARM_3:
      00005B                        445 	.ds 1
      00005C                        446 _Pattern2_PARM_4:
      00005C                        447 	.ds 1
      00005D                        448 _Pattern2_PARM_5:
      00005D                        449 	.ds 1
      00005E                        450 _Pattern2_PARM_6:
      00005E                        451 	.ds 1
      00005F                        452 _Pattern2_g_65536_143:
      00005F                        453 	.ds 1
      000060                        454 _Pattern2_i_65537_145:
      000060                        455 	.ds 4
                                    456 ;--------------------------------------------------------
                                    457 ; overlayable items in internal ram
                                    458 ;--------------------------------------------------------
                                    459 	.area	OSEG    (OVR,DATA)
                                    460 ;--------------------------------------------------------
                                    461 ; indirectly addressable internal ram data
                                    462 ;--------------------------------------------------------
                                    463 	.area ISEG    (DATA)
                                    464 ;--------------------------------------------------------
                                    465 ; absolute internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area IABS    (ABS,DATA)
                                    468 	.area IABS    (ABS,DATA)
                                    469 ;--------------------------------------------------------
                                    470 ; bit data
                                    471 ;--------------------------------------------------------
                                    472 	.area BSEG    (BIT)
      000000                        473 _fadeToBlackBy_sloc0_1_0:
      000000                        474 	.ds 1
      000001                        475 _Pattern1_sloc0_1_0:
      000001                        476 	.ds 1
      000002                        477 _Pattern2_sloc0_1_0:
      000002                        478 	.ds 1
                                    479 ;--------------------------------------------------------
                                    480 ; paged external ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area PSEG    (PAG,XDATA)
                                    483 ;--------------------------------------------------------
                                    484 ; external ram data
                                    485 ;--------------------------------------------------------
                                    486 	.area XSEG    (XDATA)
                                    487 ;--------------------------------------------------------
                                    488 ; absolute external ram data
                                    489 ;--------------------------------------------------------
                                    490 	.area XABS    (ABS,XDATA)
                                    491 ;--------------------------------------------------------
                                    492 ; external initialized ram data
                                    493 ;--------------------------------------------------------
                                    494 	.area XISEG   (XDATA)
                                    495 	.area HOME    (CODE)
                                    496 	.area GSINIT0 (CODE)
                                    497 	.area GSINIT1 (CODE)
                                    498 	.area GSINIT2 (CODE)
                                    499 	.area GSINIT3 (CODE)
                                    500 	.area GSINIT4 (CODE)
                                    501 	.area GSINIT5 (CODE)
                                    502 	.area GSINIT  (CODE)
                                    503 	.area GSFINAL (CODE)
                                    504 	.area CSEG    (CODE)
                                    505 ;--------------------------------------------------------
                                    506 ; global & static initialisations
                                    507 ;--------------------------------------------------------
                                    508 	.area HOME    (CODE)
                                    509 	.area GSINIT  (CODE)
                                    510 	.area GSFINAL (CODE)
                                    511 	.area GSINIT  (CODE)
                                    512 ;--------------------------------------------------------
                                    513 ; Home
                                    514 ;--------------------------------------------------------
                                    515 	.area HOME    (CODE)
                                    516 	.area HOME    (CODE)
                                    517 ;--------------------------------------------------------
                                    518 ; code
                                    519 ;--------------------------------------------------------
                                    520 	.area CSEG    (CODE)
                                    521 ;------------------------------------------------------------
                                    522 ;Allocation info for local variables in function 'LED__SendZero_'
                                    523 ;------------------------------------------------------------
                                    524 ;	./src/WS2812.c:24: void LED__SendZero_()
                                    525 ;	-----------------------------------------
                                    526 ;	 function LED__SendZero_
                                    527 ;	-----------------------------------------
      000808                        528 _LED__SendZero_:
                           000007   529 	ar7 = 0x07
                           000006   530 	ar6 = 0x06
                           000005   531 	ar5 = 0x05
                           000004   532 	ar4 = 0x04
                           000003   533 	ar3 = 0x03
                           000002   534 	ar2 = 0x02
                           000001   535 	ar1 = 0x01
                           000000   536 	ar0 = 0x00
                                    537 ;	./src/WS2812.c:26: setb(LED_PORT, LED_PIN);
      000808 43 80 40         [24]  538 	orl	_p0,#0x40
                                    539 ;	./src/WS2812.c:27: _nop_();
      00080B 00               [12]  540 	nop
                                    541 ;	./src/WS2812.c:28: _nop_();
      00080C 00               [12]  542 	nop
                                    543 ;	./src/WS2812.c:29: clrb(LED_PORT, LED_PIN);
      00080D 53 80 BF         [24]  544 	anl	_p0,#0xbf
                                    545 ;	./src/WS2812.c:30: _nop_();
      000810 00               [12]  546 	nop
                                    547 ;	./src/WS2812.c:31: _nop_();
      000811 00               [12]  548 	nop
                                    549 ;	./src/WS2812.c:32: _nop_();
      000812 00               [12]  550 	nop
                                    551 ;	./src/WS2812.c:33: _nop_();
      000813 00               [12]  552 	nop
                                    553 ;	./src/WS2812.c:34: }
      000814 22               [24]  554 	ret
                                    555 ;------------------------------------------------------------
                                    556 ;Allocation info for local variables in function 'LED__SendOne_'
                                    557 ;------------------------------------------------------------
                                    558 ;	./src/WS2812.c:35: void LED__SendOne_()
                                    559 ;	-----------------------------------------
                                    560 ;	 function LED__SendOne_
                                    561 ;	-----------------------------------------
      000815                        562 _LED__SendOne_:
                                    563 ;	./src/WS2812.c:37: setb(LED_PORT, LED_PIN);
      000815 43 80 40         [24]  564 	orl	_p0,#0x40
                                    565 ;	./src/WS2812.c:38: _nop_();
      000818 00               [12]  566 	nop
                                    567 ;	./src/WS2812.c:39: _nop_();
      000819 00               [12]  568 	nop
                                    569 ;	./src/WS2812.c:40: _nop_();
      00081A 00               [12]  570 	nop
                                    571 ;	./src/WS2812.c:41: _nop_();
      00081B 00               [12]  572 	nop
                                    573 ;	./src/WS2812.c:42: _nop_();
      00081C 00               [12]  574 	nop
                                    575 ;	./src/WS2812.c:43: _nop_();
      00081D 00               [12]  576 	nop
                                    577 ;	./src/WS2812.c:44: _nop_();
      00081E 00               [12]  578 	nop
                                    579 ;	./src/WS2812.c:45: clrb(LED_PORT, LED_PIN);
      00081F 53 80 BF         [24]  580 	anl	_p0,#0xbf
                                    581 ;	./src/WS2812.c:46: }
      000822 22               [24]  582 	ret
                                    583 ;------------------------------------------------------------
                                    584 ;Allocation info for local variables in function 'LED__SendByte_'
                                    585 ;------------------------------------------------------------
                                    586 ;dat                       Allocated to registers r7 
                                    587 ;------------------------------------------------------------
                                    588 ;	./src/WS2812.c:47: void LED__SendByte_(uint8_t dat)
                                    589 ;	-----------------------------------------
                                    590 ;	 function LED__SendByte_
                                    591 ;	-----------------------------------------
      000823                        592 _LED__SendByte_:
                                    593 ;	./src/WS2812.c:49: if (dat & 0x80)
      000823 E5 82            [12]  594 	mov	a,dpl
      000825 FF               [12]  595 	mov	r7,a
      000826 30 E7 09         [24]  596 	jnb	acc.7,00102$
                                    597 ;	./src/WS2812.c:50: LED__SendOne_();
      000829 C0 07            [24]  598 	push	ar7
      00082B 12 08 15         [24]  599 	lcall	_LED__SendOne_
      00082E D0 07            [24]  600 	pop	ar7
      000830 80 07            [24]  601 	sjmp	00103$
      000832                        602 00102$:
                                    603 ;	./src/WS2812.c:52: LED__SendZero_();
      000832 C0 07            [24]  604 	push	ar7
      000834 12 08 08         [24]  605 	lcall	_LED__SendZero_
      000837 D0 07            [24]  606 	pop	ar7
      000839                        607 00103$:
                                    608 ;	./src/WS2812.c:53: if (dat & 0x40)
      000839 EF               [12]  609 	mov	a,r7
      00083A 30 E6 09         [24]  610 	jnb	acc.6,00105$
                                    611 ;	./src/WS2812.c:54: LED__SendOne_();
      00083D C0 07            [24]  612 	push	ar7
      00083F 12 08 15         [24]  613 	lcall	_LED__SendOne_
      000842 D0 07            [24]  614 	pop	ar7
      000844 80 07            [24]  615 	sjmp	00106$
      000846                        616 00105$:
                                    617 ;	./src/WS2812.c:56: LED__SendZero_();
      000846 C0 07            [24]  618 	push	ar7
      000848 12 08 08         [24]  619 	lcall	_LED__SendZero_
      00084B D0 07            [24]  620 	pop	ar7
      00084D                        621 00106$:
                                    622 ;	./src/WS2812.c:57: if (dat & 0x20)
      00084D EF               [12]  623 	mov	a,r7
      00084E 30 E5 09         [24]  624 	jnb	acc.5,00108$
                                    625 ;	./src/WS2812.c:58: LED__SendOne_();
      000851 C0 07            [24]  626 	push	ar7
      000853 12 08 15         [24]  627 	lcall	_LED__SendOne_
      000856 D0 07            [24]  628 	pop	ar7
      000858 80 07            [24]  629 	sjmp	00109$
      00085A                        630 00108$:
                                    631 ;	./src/WS2812.c:60: LED__SendZero_();
      00085A C0 07            [24]  632 	push	ar7
      00085C 12 08 08         [24]  633 	lcall	_LED__SendZero_
      00085F D0 07            [24]  634 	pop	ar7
      000861                        635 00109$:
                                    636 ;	./src/WS2812.c:61: if (dat & 0x10)
      000861 EF               [12]  637 	mov	a,r7
      000862 30 E4 09         [24]  638 	jnb	acc.4,00111$
                                    639 ;	./src/WS2812.c:62: LED__SendOne_();
      000865 C0 07            [24]  640 	push	ar7
      000867 12 08 15         [24]  641 	lcall	_LED__SendOne_
      00086A D0 07            [24]  642 	pop	ar7
      00086C 80 07            [24]  643 	sjmp	00112$
      00086E                        644 00111$:
                                    645 ;	./src/WS2812.c:64: LED__SendZero_();
      00086E C0 07            [24]  646 	push	ar7
      000870 12 08 08         [24]  647 	lcall	_LED__SendZero_
      000873 D0 07            [24]  648 	pop	ar7
      000875                        649 00112$:
                                    650 ;	./src/WS2812.c:65: if (dat & 0x08)
      000875 EF               [12]  651 	mov	a,r7
      000876 30 E3 09         [24]  652 	jnb	acc.3,00114$
                                    653 ;	./src/WS2812.c:66: LED__SendOne_();
      000879 C0 07            [24]  654 	push	ar7
      00087B 12 08 15         [24]  655 	lcall	_LED__SendOne_
      00087E D0 07            [24]  656 	pop	ar7
      000880 80 07            [24]  657 	sjmp	00115$
      000882                        658 00114$:
                                    659 ;	./src/WS2812.c:68: LED__SendZero_();
      000882 C0 07            [24]  660 	push	ar7
      000884 12 08 08         [24]  661 	lcall	_LED__SendZero_
      000887 D0 07            [24]  662 	pop	ar7
      000889                        663 00115$:
                                    664 ;	./src/WS2812.c:69: if (dat & 0x04)
      000889 EF               [12]  665 	mov	a,r7
      00088A 30 E2 09         [24]  666 	jnb	acc.2,00117$
                                    667 ;	./src/WS2812.c:70: LED__SendOne_();
      00088D C0 07            [24]  668 	push	ar7
      00088F 12 08 15         [24]  669 	lcall	_LED__SendOne_
      000892 D0 07            [24]  670 	pop	ar7
      000894 80 07            [24]  671 	sjmp	00118$
      000896                        672 00117$:
                                    673 ;	./src/WS2812.c:72: LED__SendZero_();
      000896 C0 07            [24]  674 	push	ar7
      000898 12 08 08         [24]  675 	lcall	_LED__SendZero_
      00089B D0 07            [24]  676 	pop	ar7
      00089D                        677 00118$:
                                    678 ;	./src/WS2812.c:73: if (dat & 0x02)
      00089D EF               [12]  679 	mov	a,r7
      00089E 30 E1 09         [24]  680 	jnb	acc.1,00120$
                                    681 ;	./src/WS2812.c:74: LED__SendOne_();
      0008A1 C0 07            [24]  682 	push	ar7
      0008A3 12 08 15         [24]  683 	lcall	_LED__SendOne_
      0008A6 D0 07            [24]  684 	pop	ar7
      0008A8 80 07            [24]  685 	sjmp	00121$
      0008AA                        686 00120$:
                                    687 ;	./src/WS2812.c:76: LED__SendZero_();
      0008AA C0 07            [24]  688 	push	ar7
      0008AC 12 08 08         [24]  689 	lcall	_LED__SendZero_
      0008AF D0 07            [24]  690 	pop	ar7
      0008B1                        691 00121$:
                                    692 ;	./src/WS2812.c:77: if (dat & 0x01)
      0008B1 EF               [12]  693 	mov	a,r7
      0008B2 30 E0 03         [24]  694 	jnb	acc.0,00123$
                                    695 ;	./src/WS2812.c:78: LED__SendOne_();
      0008B5 02 08 15         [24]  696 	ljmp	_LED__SendOne_
      0008B8                        697 00123$:
                                    698 ;	./src/WS2812.c:80: LED__SendZero_();
                                    699 ;	./src/WS2812.c:81: }
      0008B8 02 08 08         [24]  700 	ljmp	_LED__SendZero_
                                    701 ;------------------------------------------------------------
                                    702 ;Allocation info for local variables in function 'clearAll'
                                    703 ;------------------------------------------------------------
                                    704 ;i                         Allocated to registers r6 r7 
                                    705 ;------------------------------------------------------------
                                    706 ;	./src/WS2812.c:83: void clearAll()
                                    707 ;	-----------------------------------------
                                    708 ;	 function clearAll
                                    709 ;	-----------------------------------------
      0008BB                        710 _clearAll:
                                    711 ;	./src/WS2812.c:86: for (i = 0; i < 300; i++)
      0008BB 7E 00            [12]  712 	mov	r6,#0x00
      0008BD 7F 00            [12]  713 	mov	r7,#0x00
      0008BF                        714 00102$:
                                    715 ;	./src/WS2812.c:88: LED__SendByte_(0);
      0008BF 75 82 00         [24]  716 	mov	dpl,#0x00
      0008C2 C0 07            [24]  717 	push	ar7
      0008C4 C0 06            [24]  718 	push	ar6
      0008C6 12 08 23         [24]  719 	lcall	_LED__SendByte_
                                    720 ;	./src/WS2812.c:89: LED__SendByte_(0);
      0008C9 75 82 00         [24]  721 	mov	dpl,#0x00
      0008CC 12 08 23         [24]  722 	lcall	_LED__SendByte_
                                    723 ;	./src/WS2812.c:90: LED__SendByte_(0);
      0008CF 75 82 00         [24]  724 	mov	dpl,#0x00
      0008D2 12 08 23         [24]  725 	lcall	_LED__SendByte_
      0008D5 D0 06            [24]  726 	pop	ar6
      0008D7 D0 07            [24]  727 	pop	ar7
                                    728 ;	./src/WS2812.c:86: for (i = 0; i < 300; i++)
      0008D9 0E               [12]  729 	inc	r6
      0008DA BE 00 01         [24]  730 	cjne	r6,#0x00,00111$
      0008DD 0F               [12]  731 	inc	r7
      0008DE                        732 00111$:
      0008DE 8E 04            [24]  733 	mov	ar4,r6
      0008E0 8F 05            [24]  734 	mov	ar5,r7
      0008E2 C3               [12]  735 	clr	c
      0008E3 EC               [12]  736 	mov	a,r4
      0008E4 94 2C            [12]  737 	subb	a,#0x2c
      0008E6 ED               [12]  738 	mov	a,r5
      0008E7 94 01            [12]  739 	subb	a,#0x01
      0008E9 40 D4            [24]  740 	jc	00102$
                                    741 ;	./src/WS2812.c:92: }
      0008EB 22               [24]  742 	ret
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'showStrip'
                                    745 ;------------------------------------------------------------
                                    746 ;i                         Allocated to registers r7 
                                    747 ;------------------------------------------------------------
                                    748 ;	./src/WS2812.c:94: void showStrip()
                                    749 ;	-----------------------------------------
                                    750 ;	 function showStrip
                                    751 ;	-----------------------------------------
      0008EC                        752 _showStrip:
                                    753 ;	./src/WS2812.c:97: for (i = 0; i < NUM_LEDS; ++i)
      0008EC 7F 00            [12]  754 	mov	r7,#0x00
      0008EE                        755 00103$:
      0008EE 8F 05            [24]  756 	mov	ar5,r7
      0008F0 7E 00            [12]  757 	mov	r6,#0x00
      0008F2 C3               [12]  758 	clr	c
      0008F3 ED               [12]  759 	mov	a,r5
      0008F4 95 08            [12]  760 	subb	a,_NUM_LEDS
      0008F6 EE               [12]  761 	mov	a,r6
      0008F7 95 09            [12]  762 	subb	a,(_NUM_LEDS + 1)
      0008F9 50 64            [24]  763 	jnc	00105$
                                    764 ;	./src/WS2812.c:99: LED__SendByte_(leds[i * 3]);
      0008FB 8F 16            [24]  765 	mov	__mulint_PARM_2,r7
      0008FD 75 17 00         [24]  766 	mov	(__mulint_PARM_2 + 1),#0x00
      000900 90 00 03         [24]  767 	mov	dptr,#0x0003
      000903 C0 07            [24]  768 	push	ar7
      000905 12 1E E5         [24]  769 	lcall	__mulint
      000908 AD 82            [24]  770 	mov	r5,dpl
      00090A AE 83            [24]  771 	mov	r6,dph
      00090C ED               [12]  772 	mov	a,r5
      00090D 24 01            [12]  773 	add	a,#_leds
      00090F F5 82            [12]  774 	mov	dpl,a
      000911 EE               [12]  775 	mov	a,r6
      000912 34 00            [12]  776 	addc	a,#(_leds >> 8)
      000914 F5 83            [12]  777 	mov	dph,a
      000916 E0               [24]  778 	movx	a,@dptr
      000917 F5 82            [12]  779 	mov	dpl,a
      000919 C0 06            [24]  780 	push	ar6
      00091B C0 05            [24]  781 	push	ar5
      00091D 12 08 23         [24]  782 	lcall	_LED__SendByte_
      000920 D0 05            [24]  783 	pop	ar5
      000922 D0 06            [24]  784 	pop	ar6
                                    785 ;	./src/WS2812.c:100: LED__SendByte_(leds[i * 3 + 1]);
      000924 74 01            [12]  786 	mov	a,#0x01
      000926 2D               [12]  787 	add	a,r5
      000927 FB               [12]  788 	mov	r3,a
      000928 E4               [12]  789 	clr	a
      000929 3E               [12]  790 	addc	a,r6
      00092A FC               [12]  791 	mov	r4,a
      00092B EB               [12]  792 	mov	a,r3
      00092C 24 01            [12]  793 	add	a,#_leds
      00092E F5 82            [12]  794 	mov	dpl,a
      000930 EC               [12]  795 	mov	a,r4
      000931 34 00            [12]  796 	addc	a,#(_leds >> 8)
      000933 F5 83            [12]  797 	mov	dph,a
      000935 E0               [24]  798 	movx	a,@dptr
      000936 F5 82            [12]  799 	mov	dpl,a
      000938 C0 06            [24]  800 	push	ar6
      00093A C0 05            [24]  801 	push	ar5
      00093C 12 08 23         [24]  802 	lcall	_LED__SendByte_
      00093F D0 05            [24]  803 	pop	ar5
      000941 D0 06            [24]  804 	pop	ar6
                                    805 ;	./src/WS2812.c:101: LED__SendByte_(leds[i * 3 + 2]);
      000943 74 02            [12]  806 	mov	a,#0x02
      000945 2D               [12]  807 	add	a,r5
      000946 FD               [12]  808 	mov	r5,a
      000947 E4               [12]  809 	clr	a
      000948 3E               [12]  810 	addc	a,r6
      000949 FE               [12]  811 	mov	r6,a
      00094A ED               [12]  812 	mov	a,r5
      00094B 24 01            [12]  813 	add	a,#_leds
      00094D F5 82            [12]  814 	mov	dpl,a
      00094F EE               [12]  815 	mov	a,r6
      000950 34 00            [12]  816 	addc	a,#(_leds >> 8)
      000952 F5 83            [12]  817 	mov	dph,a
      000954 E0               [24]  818 	movx	a,@dptr
      000955 F5 82            [12]  819 	mov	dpl,a
      000957 12 08 23         [24]  820 	lcall	_LED__SendByte_
      00095A D0 07            [24]  821 	pop	ar7
                                    822 ;	./src/WS2812.c:97: for (i = 0; i < NUM_LEDS; ++i)
      00095C 0F               [12]  823 	inc	r7
      00095D 80 8F            [24]  824 	sjmp	00103$
      00095F                        825 00105$:
                                    826 ;	./src/WS2812.c:103: }
      00095F 22               [24]  827 	ret
                                    828 ;------------------------------------------------------------
                                    829 ;Allocation info for local variables in function 'setPixel'
                                    830 ;------------------------------------------------------------
                                    831 ;green                     Allocated with name '_setPixel_PARM_2'
                                    832 ;red                       Allocated with name '_setPixel_PARM_3'
                                    833 ;blue                      Allocated with name '_setPixel_PARM_4'
                                    834 ;Pixel                     Allocated to registers r6 r7 
                                    835 ;------------------------------------------------------------
                                    836 ;	./src/WS2812.c:106: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                    837 ;	-----------------------------------------
                                    838 ;	 function setPixel
                                    839 ;	-----------------------------------------
      000960                        840 _setPixel:
      000960 AE 82            [24]  841 	mov	r6,dpl
      000962 AF 83            [24]  842 	mov	r7,dph
                                    843 ;	./src/WS2812.c:108: leds[Pixel * 3] = green;
      000964 8E 16            [24]  844 	mov	__mulint_PARM_2,r6
      000966 8F 17            [24]  845 	mov	(__mulint_PARM_2 + 1),r7
      000968 90 00 03         [24]  846 	mov	dptr,#0x0003
      00096B 12 1E E5         [24]  847 	lcall	__mulint
      00096E AE 82            [24]  848 	mov	r6,dpl
      000970 AF 83            [24]  849 	mov	r7,dph
      000972 EE               [12]  850 	mov	a,r6
      000973 24 01            [12]  851 	add	a,#_leds
      000975 F5 82            [12]  852 	mov	dpl,a
      000977 EF               [12]  853 	mov	a,r7
      000978 34 00            [12]  854 	addc	a,#(_leds >> 8)
      00097A F5 83            [12]  855 	mov	dph,a
      00097C E5 24            [12]  856 	mov	a,_setPixel_PARM_2
      00097E F0               [24]  857 	movx	@dptr,a
                                    858 ;	./src/WS2812.c:109: leds[Pixel * 3 + 1] = red;
      00097F 74 01            [12]  859 	mov	a,#0x01
      000981 2E               [12]  860 	add	a,r6
      000982 FC               [12]  861 	mov	r4,a
      000983 E4               [12]  862 	clr	a
      000984 3F               [12]  863 	addc	a,r7
      000985 FD               [12]  864 	mov	r5,a
      000986 EC               [12]  865 	mov	a,r4
      000987 24 01            [12]  866 	add	a,#_leds
      000989 F5 82            [12]  867 	mov	dpl,a
      00098B ED               [12]  868 	mov	a,r5
      00098C 34 00            [12]  869 	addc	a,#(_leds >> 8)
      00098E F5 83            [12]  870 	mov	dph,a
      000990 E5 25            [12]  871 	mov	a,_setPixel_PARM_3
      000992 F0               [24]  872 	movx	@dptr,a
                                    873 ;	./src/WS2812.c:110: leds[Pixel * 3 + 2] = blue;
      000993 74 02            [12]  874 	mov	a,#0x02
      000995 2E               [12]  875 	add	a,r6
      000996 FE               [12]  876 	mov	r6,a
      000997 E4               [12]  877 	clr	a
      000998 3F               [12]  878 	addc	a,r7
      000999 FF               [12]  879 	mov	r7,a
      00099A EE               [12]  880 	mov	a,r6
      00099B 24 01            [12]  881 	add	a,#_leds
      00099D F5 82            [12]  882 	mov	dpl,a
      00099F EF               [12]  883 	mov	a,r7
      0009A0 34 00            [12]  884 	addc	a,#(_leds >> 8)
      0009A2 F5 83            [12]  885 	mov	dph,a
      0009A4 E5 26            [12]  886 	mov	a,_setPixel_PARM_4
      0009A6 F0               [24]  887 	movx	@dptr,a
                                    888 ;	./src/WS2812.c:111: }
      0009A7 22               [24]  889 	ret
                                    890 ;------------------------------------------------------------
                                    891 ;Allocation info for local variables in function 'setAll'
                                    892 ;------------------------------------------------------------
                                    893 ;red                       Allocated with name '_setAll_PARM_2'
                                    894 ;blue                      Allocated with name '_setAll_PARM_3'
                                    895 ;green                     Allocated to registers r7 
                                    896 ;i                         Allocated to registers r6 
                                    897 ;------------------------------------------------------------
                                    898 ;	./src/WS2812.c:114: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                    899 ;	-----------------------------------------
                                    900 ;	 function setAll
                                    901 ;	-----------------------------------------
      0009A8                        902 _setAll:
      0009A8 AF 82            [24]  903 	mov	r7,dpl
                                    904 ;	./src/WS2812.c:117: for (i = 0; i < NUM_LEDS; ++i)
      0009AA 7E 00            [12]  905 	mov	r6,#0x00
      0009AC                        906 00103$:
      0009AC 8E 04            [24]  907 	mov	ar4,r6
      0009AE 7D 00            [12]  908 	mov	r5,#0x00
      0009B0 C3               [12]  909 	clr	c
      0009B1 EC               [12]  910 	mov	a,r4
      0009B2 95 08            [12]  911 	subb	a,_NUM_LEDS
      0009B4 ED               [12]  912 	mov	a,r5
      0009B5 95 09            [12]  913 	subb	a,(_NUM_LEDS + 1)
      0009B7 50 1A            [24]  914 	jnc	00105$
                                    915 ;	./src/WS2812.c:119: setPixel(i, green, red, blue);
      0009B9 8F 24            [24]  916 	mov	_setPixel_PARM_2,r7
      0009BB 85 27 25         [24]  917 	mov	_setPixel_PARM_3,_setAll_PARM_2
      0009BE 85 28 26         [24]  918 	mov	_setPixel_PARM_4,_setAll_PARM_3
      0009C1 8C 82            [24]  919 	mov	dpl,r4
      0009C3 8D 83            [24]  920 	mov	dph,r5
      0009C5 C0 07            [24]  921 	push	ar7
      0009C7 C0 06            [24]  922 	push	ar6
      0009C9 12 09 60         [24]  923 	lcall	_setPixel
      0009CC D0 06            [24]  924 	pop	ar6
      0009CE D0 07            [24]  925 	pop	ar7
                                    926 ;	./src/WS2812.c:117: for (i = 0; i < NUM_LEDS; ++i)
      0009D0 0E               [12]  927 	inc	r6
      0009D1 80 D9            [24]  928 	sjmp	00103$
      0009D3                        929 00105$:
                                    930 ;	./src/WS2812.c:121: }
      0009D3 22               [24]  931 	ret
                                    932 ;------------------------------------------------------------
                                    933 ;Allocation info for local variables in function 'FadeInOut'
                                    934 ;------------------------------------------------------------
                                    935 ;red                       Allocated with name '_FadeInOut_PARM_2'
                                    936 ;blue                      Allocated with name '_FadeInOut_PARM_3'
                                    937 ;green                     Allocated with name '_FadeInOut_green_65536_80'
                                    938 ;i                         Allocated to registers r4 
                                    939 ;g                         Allocated with name '_FadeInOut_g_65536_81'
                                    940 ;r                         Allocated with name '_FadeInOut_r_65536_81'
                                    941 ;b                         Allocated to registers 
                                    942 ;curEffect                 Allocated with name '_FadeInOut_curEffect_65536_81'
                                    943 ;curColor                  Allocated with name '_FadeInOut_curColor_65536_81'
                                    944 ;k                         Allocated with name '_FadeInOut_k_131072_85'
                                    945 ;------------------------------------------------------------
                                    946 ;	./src/WS2812.c:123: void FadeInOut(uint8_t green, uint8_t red, uint8_t blue)
                                    947 ;	-----------------------------------------
                                    948 ;	 function FadeInOut
                                    949 ;	-----------------------------------------
      0009D4                        950 _FadeInOut:
      0009D4 85 82 2B         [24]  951 	mov	_FadeInOut_green_65536_80,dpl
                                    952 ;	./src/WS2812.c:127: uint8_t curEffect = effect;
      0009D7 85 0C 2E         [24]  953 	mov	_FadeInOut_curEffect_65536_81,_effect
                                    954 ;	./src/WS2812.c:128: uint8_t curColor = _color;
      0009DA 85 0F 2F         [24]  955 	mov	_FadeInOut_curColor_65536_81,__color
                                    956 ;	./src/WS2812.c:130: for (i = 0; i < 255; i = i + NUM_LEDS / 50)
      0009DD 7C 00            [12]  957 	mov	r4,#0x00
      0009DF                        958 00109$:
                                    959 ;	./src/WS2812.c:132: CHECK_EFF;
      0009DF E5 0C            [12]  960 	mov	a,_effect
      0009E1 B5 2E 07         [24]  961 	cjne	a,_FadeInOut_curEffect_65536_81,00101$
      0009E4 E5 0F            [12]  962 	mov	a,__color
      0009E6 B5 2F 02         [24]  963 	cjne	a,_FadeInOut_curColor_65536_81,00148$
      0009E9 80 04            [24]  964 	sjmp	00102$
      0009EB                        965 00148$:
      0009EB                        966 00101$:
      0009EB 75 0D 12         [24]  967 	mov	__status,#0x12
      0009EE 22               [24]  968 	ret
      0009EF                        969 00102$:
                                    970 ;	./src/WS2812.c:134: r = i * red / 256;
      0009EF 8C F0            [24]  971 	mov	b,r4
      0009F1 E5 29            [12]  972 	mov	a,_FadeInOut_PARM_2
      0009F3 A4               [48]  973 	mul	ab
      0009F4 F5 82            [12]  974 	mov	dpl,a
      0009F6 85 F0 83         [24]  975 	mov	dph,b
      0009F9 75 16 00         [24]  976 	mov	__divsint_PARM_2,#0x00
      0009FC 75 17 01         [24]  977 	mov	(__divsint_PARM_2 + 1),#0x01
      0009FF C0 04            [24]  978 	push	ar4
      000A01 12 22 BC         [24]  979 	lcall	__divsint
      000A04 AA 82            [24]  980 	mov	r2,dpl
      000A06 D0 04            [24]  981 	pop	ar4
                                    982 ;	./src/WS2812.c:135: g = i * green / 256;
      000A08 8C F0            [24]  983 	mov	b,r4
      000A0A E5 2B            [12]  984 	mov	a,_FadeInOut_green_65536_80
      000A0C A4               [48]  985 	mul	ab
      000A0D F5 82            [12]  986 	mov	dpl,a
      000A0F 85 F0 83         [24]  987 	mov	dph,b
      000A12 75 16 00         [24]  988 	mov	__divsint_PARM_2,#0x00
      000A15 75 17 01         [24]  989 	mov	(__divsint_PARM_2 + 1),#0x01
      000A18 C0 04            [24]  990 	push	ar4
      000A1A C0 02            [24]  991 	push	ar2
      000A1C 12 22 BC         [24]  992 	lcall	__divsint
      000A1F A9 82            [24]  993 	mov	r1,dpl
      000A21 D0 02            [24]  994 	pop	ar2
      000A23 D0 04            [24]  995 	pop	ar4
                                    996 ;	./src/WS2812.c:136: b = i * blue / 256;
      000A25 8C F0            [24]  997 	mov	b,r4
      000A27 E5 2A            [12]  998 	mov	a,_FadeInOut_PARM_3
      000A29 A4               [48]  999 	mul	ab
      000A2A F5 82            [12] 1000 	mov	dpl,a
      000A2C 85 F0 83         [24] 1001 	mov	dph,b
      000A2F 75 16 00         [24] 1002 	mov	__divsint_PARM_2,#0x00
      000A32 75 17 01         [24] 1003 	mov	(__divsint_PARM_2 + 1),#0x01
      000A35 C0 04            [24] 1004 	push	ar4
      000A37 C0 02            [24] 1005 	push	ar2
      000A39 C0 01            [24] 1006 	push	ar1
      000A3B 12 22 BC         [24] 1007 	lcall	__divsint
      000A3E A8 82            [24] 1008 	mov	r0,dpl
      000A40 D0 01            [24] 1009 	pop	ar1
      000A42 D0 02            [24] 1010 	pop	ar2
      000A44 88 28            [24] 1011 	mov	_setAll_PARM_3,r0
                                   1012 ;	./src/WS2812.c:137: setAll(g, r, b);
      000A46 8A 27            [24] 1013 	mov	_setAll_PARM_2,r2
      000A48 89 82            [24] 1014 	mov	dpl,r1
      000A4A 12 09 A8         [24] 1015 	lcall	_setAll
                                   1016 ;	./src/WS2812.c:138: showStrip();
      000A4D 12 08 EC         [24] 1017 	lcall	_showStrip
                                   1018 ;	./src/WS2812.c:139: _delay_ms(DELAY2);
      000A50 85 08 16         [24] 1019 	mov	__divuint_PARM_2,_NUM_LEDS
      000A53 85 09 17         [24] 1020 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000A56 90 00 C8         [24] 1021 	mov	dptr,#0x00c8
      000A59 12 19 29         [24] 1022 	lcall	__divuint
      000A5C 85 0A 16         [24] 1023 	mov	__mulint_PARM_2,__delay
      000A5F 85 0B 17         [24] 1024 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000A62 12 1E E5         [24] 1025 	lcall	__mulint
      000A65 75 16 64         [24] 1026 	mov	__divuint_PARM_2,#0x64
      000A68 75 17 00         [24] 1027 	mov	(__divuint_PARM_2 + 1),#0x00
      000A6B 12 19 29         [24] 1028 	lcall	__divuint
      000A6E E5 82            [12] 1029 	mov	a,dpl
      000A70 85 83 F0         [24] 1030 	mov	b,dph
      000A73 24 01            [12] 1031 	add	a,#0x01
      000A75 FA               [12] 1032 	mov	r2,a
      000A76 E4               [12] 1033 	clr	a
      000A77 35 F0            [12] 1034 	addc	a,b
      000A79 FB               [12] 1035 	mov	r3,a
      000A7A 8A 00            [24] 1036 	mov	ar0,r2
      000A7C 8B 01            [24] 1037 	mov	ar1,r3
      000A7E 7A 00            [12] 1038 	mov	r2,#0x00
      000A80 7B 00            [12] 1039 	mov	r3,#0x00
      000A82 88 82            [24] 1040 	mov	dpl,r0
      000A84 89 83            [24] 1041 	mov	dph,r1
      000A86 8A F0            [24] 1042 	mov	b,r2
      000A88 EB               [12] 1043 	mov	a,r3
      000A89 12 06 B6         [24] 1044 	lcall	__delay_ms
                                   1045 ;	./src/WS2812.c:130: for (i = 0; i < 255; i = i + NUM_LEDS / 50)
      000A8C 85 08 82         [24] 1046 	mov	dpl,_NUM_LEDS
      000A8F 85 09 83         [24] 1047 	mov	dph,(_NUM_LEDS + 1)
      000A92 75 16 32         [24] 1048 	mov	__divuint_PARM_2,#0x32
      000A95 75 17 00         [24] 1049 	mov	(__divuint_PARM_2 + 1),#0x00
      000A98 12 19 29         [24] 1050 	lcall	__divuint
      000A9B AA 82            [24] 1051 	mov	r2,dpl
      000A9D AB 83            [24] 1052 	mov	r3,dph
      000A9F D0 04            [24] 1053 	pop	ar4
      000AA1 EA               [12] 1054 	mov	a,r2
      000AA2 2C               [12] 1055 	add	a,r4
      000AA3 FC               [12] 1056 	mov	r4,a
      000AA4 BC FF 00         [24] 1057 	cjne	r4,#0xff,00149$
      000AA7                       1058 00149$:
      000AA7 50 03            [24] 1059 	jnc	00150$
      000AA9 02 09 DF         [24] 1060 	ljmp	00109$
      000AAC                       1061 00150$:
                                   1062 ;	./src/WS2812.c:142: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      000AAC 75 30 FF         [24] 1063 	mov	_FadeInOut_k_131072_85,#0xff
      000AAF 75 31 00         [24] 1064 	mov	(_FadeInOut_k_131072_85 + 1),#0x00
      000AB2                       1065 00112$:
      000AB2 A9 30            [24] 1066 	mov	r1,_FadeInOut_k_131072_85
      000AB4 AA 31            [24] 1067 	mov	r2,(_FadeInOut_k_131072_85 + 1)
      000AB6 C3               [12] 1068 	clr	c
      000AB7 E4               [12] 1069 	clr	a
      000AB8 99               [12] 1070 	subb	a,r1
      000AB9 74 80            [12] 1071 	mov	a,#(0x00 ^ 0x80)
      000ABB 8A F0            [24] 1072 	mov	b,r2
      000ABD 63 F0 80         [24] 1073 	xrl	b,#0x80
      000AC0 95 F0            [12] 1074 	subb	a,b
      000AC2 40 01            [24] 1075 	jc	00151$
      000AC4 22               [24] 1076 	ret
      000AC5                       1077 00151$:
                                   1078 ;	./src/WS2812.c:144: CHECK_EFF;
      000AC5 E5 0C            [12] 1079 	mov	a,_effect
      000AC7 B5 2E 07         [24] 1080 	cjne	a,_FadeInOut_curEffect_65536_81,00105$
      000ACA E5 0F            [12] 1081 	mov	a,__color
      000ACC B5 2F 02         [24] 1082 	cjne	a,_FadeInOut_curColor_65536_81,00154$
      000ACF 80 04            [24] 1083 	sjmp	00106$
      000AD1                       1084 00154$:
      000AD1                       1085 00105$:
      000AD1 75 0D 12         [24] 1086 	mov	__status,#0x12
      000AD4 22               [24] 1087 	ret
      000AD5                       1088 00106$:
                                   1089 ;	./src/WS2812.c:145: r = (k / 256.0) * red;
      000AD5 85 30 82         [24] 1090 	mov	dpl,_FadeInOut_k_131072_85
      000AD8 85 31 83         [24] 1091 	mov	dph,(_FadeInOut_k_131072_85 + 1)
      000ADB 12 20 EE         [24] 1092 	lcall	___sint2fs
      000ADE A8 82            [24] 1093 	mov	r0,dpl
      000AE0 A9 83            [24] 1094 	mov	r1,dph
      000AE2 AA F0            [24] 1095 	mov	r2,b
      000AE4 FD               [12] 1096 	mov	r5,a
      000AE5 E4               [12] 1097 	clr	a
      000AE6 C0 E0            [24] 1098 	push	acc
      000AE8 C0 E0            [24] 1099 	push	acc
      000AEA 74 80            [12] 1100 	mov	a,#0x80
      000AEC C0 E0            [24] 1101 	push	acc
      000AEE 74 43            [12] 1102 	mov	a,#0x43
      000AF0 C0 E0            [24] 1103 	push	acc
      000AF2 88 82            [24] 1104 	mov	dpl,r0
      000AF4 89 83            [24] 1105 	mov	dph,r1
      000AF6 8A F0            [24] 1106 	mov	b,r2
      000AF8 ED               [12] 1107 	mov	a,r5
      000AF9 12 21 70         [24] 1108 	lcall	___fsdiv
      000AFC A8 82            [24] 1109 	mov	r0,dpl
      000AFE A9 83            [24] 1110 	mov	r1,dph
      000B00 AA F0            [24] 1111 	mov	r2,b
      000B02 FD               [12] 1112 	mov	r5,a
      000B03 E5 81            [12] 1113 	mov	a,sp
      000B05 24 FC            [12] 1114 	add	a,#0xfc
      000B07 F5 81            [12] 1115 	mov	sp,a
      000B09 85 29 82         [24] 1116 	mov	dpl,_FadeInOut_PARM_2
      000B0C C0 05            [24] 1117 	push	ar5
      000B0E C0 02            [24] 1118 	push	ar2
      000B10 C0 01            [24] 1119 	push	ar1
      000B12 C0 00            [24] 1120 	push	ar0
      000B14 12 22 33         [24] 1121 	lcall	___uchar2fs
      000B17 AB 82            [24] 1122 	mov	r3,dpl
      000B19 AC 83            [24] 1123 	mov	r4,dph
      000B1B AE F0            [24] 1124 	mov	r6,b
      000B1D FF               [12] 1125 	mov	r7,a
      000B1E D0 00            [24] 1126 	pop	ar0
      000B20 D0 01            [24] 1127 	pop	ar1
      000B22 D0 02            [24] 1128 	pop	ar2
      000B24 D0 05            [24] 1129 	pop	ar5
      000B26 C0 05            [24] 1130 	push	ar5
      000B28 C0 02            [24] 1131 	push	ar2
      000B2A C0 01            [24] 1132 	push	ar1
      000B2C C0 00            [24] 1133 	push	ar0
      000B2E C0 03            [24] 1134 	push	ar3
      000B30 C0 04            [24] 1135 	push	ar4
      000B32 C0 06            [24] 1136 	push	ar6
      000B34 C0 07            [24] 1137 	push	ar7
      000B36 88 82            [24] 1138 	mov	dpl,r0
      000B38 89 83            [24] 1139 	mov	dph,r1
      000B3A 8A F0            [24] 1140 	mov	b,r2
      000B3C ED               [12] 1141 	mov	a,r5
      000B3D 12 19 52         [24] 1142 	lcall	___fsmul
      000B40 AB 82            [24] 1143 	mov	r3,dpl
      000B42 AC 83            [24] 1144 	mov	r4,dph
      000B44 AE F0            [24] 1145 	mov	r6,b
      000B46 FF               [12] 1146 	mov	r7,a
      000B47 E5 81            [12] 1147 	mov	a,sp
      000B49 24 FC            [12] 1148 	add	a,#0xfc
      000B4B F5 81            [12] 1149 	mov	sp,a
      000B4D 8B 82            [24] 1150 	mov	dpl,r3
      000B4F 8C 83            [24] 1151 	mov	dph,r4
      000B51 8E F0            [24] 1152 	mov	b,r6
      000B53 EF               [12] 1153 	mov	a,r7
      000B54 12 22 3E         [24] 1154 	lcall	___fs2uchar
      000B57 85 82 2D         [24] 1155 	mov	_FadeInOut_r_65536_81,dpl
                                   1156 ;	./src/WS2812.c:146: g = (k / 256.0) * green;
      000B5A 85 2B 82         [24] 1157 	mov	dpl,_FadeInOut_green_65536_80
      000B5D 12 22 33         [24] 1158 	lcall	___uchar2fs
      000B60 AB 82            [24] 1159 	mov	r3,dpl
      000B62 AC 83            [24] 1160 	mov	r4,dph
      000B64 AE F0            [24] 1161 	mov	r6,b
      000B66 FF               [12] 1162 	mov	r7,a
      000B67 D0 00            [24] 1163 	pop	ar0
      000B69 D0 01            [24] 1164 	pop	ar1
      000B6B D0 02            [24] 1165 	pop	ar2
      000B6D D0 05            [24] 1166 	pop	ar5
      000B6F C0 05            [24] 1167 	push	ar5
      000B71 C0 02            [24] 1168 	push	ar2
      000B73 C0 01            [24] 1169 	push	ar1
      000B75 C0 00            [24] 1170 	push	ar0
      000B77 C0 03            [24] 1171 	push	ar3
      000B79 C0 04            [24] 1172 	push	ar4
      000B7B C0 06            [24] 1173 	push	ar6
      000B7D C0 07            [24] 1174 	push	ar7
      000B7F 88 82            [24] 1175 	mov	dpl,r0
      000B81 89 83            [24] 1176 	mov	dph,r1
      000B83 8A F0            [24] 1177 	mov	b,r2
      000B85 ED               [12] 1178 	mov	a,r5
      000B86 12 19 52         [24] 1179 	lcall	___fsmul
      000B89 AB 82            [24] 1180 	mov	r3,dpl
      000B8B AC 83            [24] 1181 	mov	r4,dph
      000B8D AE F0            [24] 1182 	mov	r6,b
      000B8F FF               [12] 1183 	mov	r7,a
      000B90 E5 81            [12] 1184 	mov	a,sp
      000B92 24 FC            [12] 1185 	add	a,#0xfc
      000B94 F5 81            [12] 1186 	mov	sp,a
      000B96 8B 82            [24] 1187 	mov	dpl,r3
      000B98 8C 83            [24] 1188 	mov	dph,r4
      000B9A 8E F0            [24] 1189 	mov	b,r6
      000B9C EF               [12] 1190 	mov	a,r7
      000B9D 12 22 3E         [24] 1191 	lcall	___fs2uchar
      000BA0 85 82 2C         [24] 1192 	mov	_FadeInOut_g_65536_81,dpl
                                   1193 ;	./src/WS2812.c:147: b = (k / 256.0) * blue;
      000BA3 85 2A 82         [24] 1194 	mov	dpl,_FadeInOut_PARM_3
      000BA6 12 22 33         [24] 1195 	lcall	___uchar2fs
      000BA9 AB 82            [24] 1196 	mov	r3,dpl
      000BAB AC 83            [24] 1197 	mov	r4,dph
      000BAD AE F0            [24] 1198 	mov	r6,b
      000BAF FF               [12] 1199 	mov	r7,a
      000BB0 D0 00            [24] 1200 	pop	ar0
      000BB2 D0 01            [24] 1201 	pop	ar1
      000BB4 D0 02            [24] 1202 	pop	ar2
      000BB6 D0 05            [24] 1203 	pop	ar5
      000BB8 C0 03            [24] 1204 	push	ar3
      000BBA C0 04            [24] 1205 	push	ar4
      000BBC C0 06            [24] 1206 	push	ar6
      000BBE C0 07            [24] 1207 	push	ar7
      000BC0 88 82            [24] 1208 	mov	dpl,r0
      000BC2 89 83            [24] 1209 	mov	dph,r1
      000BC4 8A F0            [24] 1210 	mov	b,r2
      000BC6 ED               [12] 1211 	mov	a,r5
      000BC7 12 19 52         [24] 1212 	lcall	___fsmul
      000BCA AC 82            [24] 1213 	mov	r4,dpl
      000BCC AD 83            [24] 1214 	mov	r5,dph
      000BCE AE F0            [24] 1215 	mov	r6,b
      000BD0 FF               [12] 1216 	mov	r7,a
      000BD1 E5 81            [12] 1217 	mov	a,sp
      000BD3 24 FC            [12] 1218 	add	a,#0xfc
      000BD5 F5 81            [12] 1219 	mov	sp,a
      000BD7 8C 82            [24] 1220 	mov	dpl,r4
      000BD9 8D 83            [24] 1221 	mov	dph,r5
      000BDB 8E F0            [24] 1222 	mov	b,r6
      000BDD EF               [12] 1223 	mov	a,r7
      000BDE 12 22 3E         [24] 1224 	lcall	___fs2uchar
      000BE1 85 82 28         [24] 1225 	mov	_setAll_PARM_3,dpl
                                   1226 ;	./src/WS2812.c:148: setAll(g, r, b);
      000BE4 85 2D 27         [24] 1227 	mov	_setAll_PARM_2,_FadeInOut_r_65536_81
      000BE7 85 2C 82         [24] 1228 	mov	dpl,_FadeInOut_g_65536_81
      000BEA 12 09 A8         [24] 1229 	lcall	_setAll
                                   1230 ;	./src/WS2812.c:149: showStrip();
      000BED 12 08 EC         [24] 1231 	lcall	_showStrip
                                   1232 ;	./src/WS2812.c:150: _delay_ms(DELAY2);
      000BF0 85 08 16         [24] 1233 	mov	__divuint_PARM_2,_NUM_LEDS
      000BF3 85 09 17         [24] 1234 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000BF6 90 00 C8         [24] 1235 	mov	dptr,#0x00c8
      000BF9 12 19 29         [24] 1236 	lcall	__divuint
      000BFC 85 0A 16         [24] 1237 	mov	__mulint_PARM_2,__delay
      000BFF 85 0B 17         [24] 1238 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000C02 12 1E E5         [24] 1239 	lcall	__mulint
      000C05 75 16 64         [24] 1240 	mov	__divuint_PARM_2,#0x64
      000C08 75 17 00         [24] 1241 	mov	(__divuint_PARM_2 + 1),#0x00
      000C0B 12 19 29         [24] 1242 	lcall	__divuint
      000C0E E5 82            [12] 1243 	mov	a,dpl
      000C10 85 83 F0         [24] 1244 	mov	b,dph
      000C13 24 01            [12] 1245 	add	a,#0x01
      000C15 FE               [12] 1246 	mov	r6,a
      000C16 E4               [12] 1247 	clr	a
      000C17 35 F0            [12] 1248 	addc	a,b
      000C19 FF               [12] 1249 	mov	r7,a
      000C1A 7D 00            [12] 1250 	mov	r5,#0x00
      000C1C 7C 00            [12] 1251 	mov	r4,#0x00
      000C1E 8E 82            [24] 1252 	mov	dpl,r6
      000C20 8F 83            [24] 1253 	mov	dph,r7
      000C22 8D F0            [24] 1254 	mov	b,r5
      000C24 EC               [12] 1255 	mov	a,r4
      000C25 12 06 B6         [24] 1256 	lcall	__delay_ms
                                   1257 ;	./src/WS2812.c:142: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      000C28 85 08 82         [24] 1258 	mov	dpl,_NUM_LEDS
      000C2B 85 09 83         [24] 1259 	mov	dph,(_NUM_LEDS + 1)
      000C2E 75 16 19         [24] 1260 	mov	__divuint_PARM_2,#0x19
      000C31 75 17 00         [24] 1261 	mov	(__divuint_PARM_2 + 1),#0x00
      000C34 12 19 29         [24] 1262 	lcall	__divuint
      000C37 AE 82            [24] 1263 	mov	r6,dpl
      000C39 AF 83            [24] 1264 	mov	r7,dph
      000C3B AB 30            [24] 1265 	mov	r3,_FadeInOut_k_131072_85
      000C3D AC 31            [24] 1266 	mov	r4,(_FadeInOut_k_131072_85 + 1)
      000C3F EB               [12] 1267 	mov	a,r3
      000C40 C3               [12] 1268 	clr	c
      000C41 9E               [12] 1269 	subb	a,r6
      000C42 FE               [12] 1270 	mov	r6,a
      000C43 EC               [12] 1271 	mov	a,r4
      000C44 9F               [12] 1272 	subb	a,r7
      000C45 FF               [12] 1273 	mov	r7,a
      000C46 8E 30            [24] 1274 	mov	_FadeInOut_k_131072_85,r6
      000C48 8F 31            [24] 1275 	mov	(_FadeInOut_k_131072_85 + 1),r7
                                   1276 ;	./src/WS2812.c:152: }
      000C4A 02 0A B2         [24] 1277 	ljmp	00112$
                                   1278 ;------------------------------------------------------------
                                   1279 ;Allocation info for local variables in function 'CylonBounce'
                                   1280 ;------------------------------------------------------------
                                   1281 ;red                       Allocated with name '_CylonBounce_PARM_2'
                                   1282 ;blue                      Allocated with name '_CylonBounce_PARM_3'
                                   1283 ;EyeSize                   Allocated with name '_CylonBounce_PARM_4'
                                   1284 ;ReturnDelay               Allocated with name '_CylonBounce_PARM_5'
                                   1285 ;green                     Allocated with name '_CylonBounce_green_65536_88'
                                   1286 ;i                         Allocated with name '_CylonBounce_i_65537_90'
                                   1287 ;j                         Allocated with name '_CylonBounce_j_65537_90'
                                   1288 ;k                         Allocated to registers 
                                   1289 ;sloc0                     Allocated with name '_CylonBounce_sloc0_1_0'
                                   1290 ;sloc1                     Allocated with name '_CylonBounce_sloc1_1_0'
                                   1291 ;------------------------------------------------------------
                                   1292 ;	./src/WS2812.c:154: void CylonBounce(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t ReturnDelay)
                                   1293 ;	-----------------------------------------
                                   1294 ;	 function CylonBounce
                                   1295 ;	-----------------------------------------
      000C4D                       1296 _CylonBounce:
      000C4D 85 82 38         [24] 1297 	mov	_CylonBounce_green_65536_88,dpl
                                   1298 ;	./src/WS2812.c:156: curEffect = effect;
      000C50 85 0C 23         [24] 1299 	mov	_curEffect,_effect
                                   1300 ;	./src/WS2812.c:157: curColor = _color;
      000C53 85 0F 22         [24] 1301 	mov	_curColor,__color
                                   1302 ;	./src/WS2812.c:159: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      000C56 75 39 00         [24] 1303 	mov	_CylonBounce_i_65537_90,#0x00
      000C59                       1304 00115$:
      000C59 AC 34            [24] 1305 	mov	r4,_CylonBounce_PARM_4
      000C5B AD 35            [24] 1306 	mov	r5,(_CylonBounce_PARM_4 + 1)
      000C5D E5 08            [12] 1307 	mov	a,_NUM_LEDS
      000C5F C3               [12] 1308 	clr	c
      000C60 9C               [12] 1309 	subb	a,r4
      000C61 FA               [12] 1310 	mov	r2,a
      000C62 E5 09            [12] 1311 	mov	a,(_NUM_LEDS + 1)
      000C64 9D               [12] 1312 	subb	a,r5
      000C65 FB               [12] 1313 	mov	r3,a
      000C66 EA               [12] 1314 	mov	a,r2
      000C67 24 FE            [12] 1315 	add	a,#0xfe
      000C69 FA               [12] 1316 	mov	r2,a
      000C6A EB               [12] 1317 	mov	a,r3
      000C6B 34 FF            [12] 1318 	addc	a,#0xff
      000C6D FB               [12] 1319 	mov	r3,a
      000C6E A8 39            [24] 1320 	mov	r0,_CylonBounce_i_65537_90
      000C70 79 00            [12] 1321 	mov	r1,#0x00
      000C72 C3               [12] 1322 	clr	c
      000C73 E8               [12] 1323 	mov	a,r0
      000C74 9A               [12] 1324 	subb	a,r2
      000C75 E9               [12] 1325 	mov	a,r1
      000C76 9B               [12] 1326 	subb	a,r3
      000C77 40 03            [24] 1327 	jc	00165$
      000C79 02 0D A7         [24] 1328 	ljmp	00105$
      000C7C                       1329 00165$:
                                   1330 ;	./src/WS2812.c:161: setAll(0, 0, 0);
      000C7C 75 27 00         [24] 1331 	mov	_setAll_PARM_2,#0x00
      000C7F 75 28 00         [24] 1332 	mov	_setAll_PARM_3,#0x00
      000C82 75 82 00         [24] 1333 	mov	dpl,#0x00
      000C85 12 09 A8         [24] 1334 	lcall	_setAll
                                   1335 ;	./src/WS2812.c:162: setPixel(i, red / 10, green / 10, blue / 10);
      000C88 AA 39            [24] 1336 	mov	r2,_CylonBounce_i_65537_90
      000C8A 7B 00            [12] 1337 	mov	r3,#0x00
      000C8C A8 32            [24] 1338 	mov	r0,_CylonBounce_PARM_2
      000C8E 79 00            [12] 1339 	mov	r1,#0x00
      000C90 75 16 0A         [24] 1340 	mov	__divsint_PARM_2,#0x0a
                                   1341 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000C93 8B 17            [24] 1342 	mov	(__divsint_PARM_2 + 1),r3
      000C95 88 82            [24] 1343 	mov	dpl,r0
      000C97 89 83            [24] 1344 	mov	dph,r1
      000C99 C0 03            [24] 1345 	push	ar3
      000C9B C0 02            [24] 1346 	push	ar2
      000C9D 12 22 BC         [24] 1347 	lcall	__divsint
      000CA0 A8 82            [24] 1348 	mov	r0,dpl
      000CA2 A9 38            [24] 1349 	mov	r1,_CylonBounce_green_65536_88
      000CA4 7F 00            [12] 1350 	mov	r7,#0x00
      000CA6 75 16 0A         [24] 1351 	mov	__divsint_PARM_2,#0x0a
                                   1352 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000CA9 8F 17            [24] 1353 	mov	(__divsint_PARM_2 + 1),r7
      000CAB 89 82            [24] 1354 	mov	dpl,r1
      000CAD 8F 83            [24] 1355 	mov	dph,r7
      000CAF C0 00            [24] 1356 	push	ar0
      000CB1 12 22 BC         [24] 1357 	lcall	__divsint
      000CB4 A9 82            [24] 1358 	mov	r1,dpl
      000CB6 D0 00            [24] 1359 	pop	ar0
      000CB8 AE 33            [24] 1360 	mov	r6,_CylonBounce_PARM_3
      000CBA 7F 00            [12] 1361 	mov	r7,#0x00
      000CBC 75 16 0A         [24] 1362 	mov	__divsint_PARM_2,#0x0a
                                   1363 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000CBF 8F 17            [24] 1364 	mov	(__divsint_PARM_2 + 1),r7
      000CC1 8E 82            [24] 1365 	mov	dpl,r6
      000CC3 8F 83            [24] 1366 	mov	dph,r7
      000CC5 C0 01            [24] 1367 	push	ar1
      000CC7 C0 00            [24] 1368 	push	ar0
      000CC9 12 22 BC         [24] 1369 	lcall	__divsint
      000CCC AE 82            [24] 1370 	mov	r6,dpl
      000CCE D0 00            [24] 1371 	pop	ar0
      000CD0 D0 01            [24] 1372 	pop	ar1
      000CD2 D0 02            [24] 1373 	pop	ar2
      000CD4 D0 03            [24] 1374 	pop	ar3
      000CD6 88 24            [24] 1375 	mov	_setPixel_PARM_2,r0
      000CD8 89 25            [24] 1376 	mov	_setPixel_PARM_3,r1
      000CDA 8E 26            [24] 1377 	mov	_setPixel_PARM_4,r6
      000CDC 8A 82            [24] 1378 	mov	dpl,r2
      000CDE 8B 83            [24] 1379 	mov	dph,r3
      000CE0 C0 06            [24] 1380 	push	ar6
      000CE2 C0 01            [24] 1381 	push	ar1
      000CE4 C0 00            [24] 1382 	push	ar0
      000CE6 12 09 60         [24] 1383 	lcall	_setPixel
      000CE9 D0 00            [24] 1384 	pop	ar0
      000CEB D0 01            [24] 1385 	pop	ar1
      000CED D0 06            [24] 1386 	pop	ar6
                                   1387 ;	./src/WS2812.c:163: for (j = 1; j <= EyeSize; j++)
      000CEF 75 3A 01         [24] 1388 	mov	_CylonBounce_j_65537_90,#0x01
      000CF2                       1389 00112$:
      000CF2 AA 3A            [24] 1390 	mov	r2,_CylonBounce_j_65537_90
      000CF4 7B 00            [12] 1391 	mov	r3,#0x00
      000CF6 C3               [12] 1392 	clr	c
      000CF7 E5 34            [12] 1393 	mov	a,_CylonBounce_PARM_4
      000CF9 9A               [12] 1394 	subb	a,r2
      000CFA E5 35            [12] 1395 	mov	a,(_CylonBounce_PARM_4 + 1)
      000CFC 64 80            [12] 1396 	xrl	a,#0x80
      000CFE 8B F0            [24] 1397 	mov	b,r3
      000D00 63 F0 80         [24] 1398 	xrl	b,#0x80
      000D03 95 F0            [12] 1399 	subb	a,b
      000D05 40 42            [24] 1400 	jc	00104$
                                   1401 ;	./src/WS2812.c:165: CHECK_EFF;
      000D07 E5 0C            [12] 1402 	mov	a,_effect
      000D09 B5 23 07         [24] 1403 	cjne	a,_curEffect,00101$
      000D0C E5 0F            [12] 1404 	mov	a,__color
      000D0E B5 22 02         [24] 1405 	cjne	a,_curColor,00169$
      000D11 80 04            [24] 1406 	sjmp	00102$
      000D13                       1407 00169$:
      000D13                       1408 00101$:
      000D13 75 0D 12         [24] 1409 	mov	__status,#0x12
      000D16 22               [24] 1410 	ret
      000D17                       1411 00102$:
                                   1412 ;	./src/WS2812.c:166: setPixel(i + j, green, red, blue);
      000D17 C0 06            [24] 1413 	push	ar6
      000D19 AA 39            [24] 1414 	mov	r2,_CylonBounce_i_65537_90
      000D1B 7B 00            [12] 1415 	mov	r3,#0x00
      000D1D AE 3A            [24] 1416 	mov	r6,_CylonBounce_j_65537_90
      000D1F 7F 00            [12] 1417 	mov	r7,#0x00
      000D21 EE               [12] 1418 	mov	a,r6
      000D22 2A               [12] 1419 	add	a,r2
      000D23 FA               [12] 1420 	mov	r2,a
      000D24 EF               [12] 1421 	mov	a,r7
      000D25 3B               [12] 1422 	addc	a,r3
      000D26 FB               [12] 1423 	mov	r3,a
      000D27 8A 82            [24] 1424 	mov	dpl,r2
      000D29 8B 83            [24] 1425 	mov	dph,r3
      000D2B 85 38 24         [24] 1426 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_88
      000D2E 85 32 25         [24] 1427 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000D31 85 33 26         [24] 1428 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000D34 C0 06            [24] 1429 	push	ar6
      000D36 C0 01            [24] 1430 	push	ar1
      000D38 C0 00            [24] 1431 	push	ar0
      000D3A 12 09 60         [24] 1432 	lcall	_setPixel
      000D3D D0 00            [24] 1433 	pop	ar0
      000D3F D0 01            [24] 1434 	pop	ar1
      000D41 D0 06            [24] 1435 	pop	ar6
                                   1436 ;	./src/WS2812.c:163: for (j = 1; j <= EyeSize; j++)
      000D43 05 3A            [12] 1437 	inc	_CylonBounce_j_65537_90
      000D45 D0 06            [24] 1438 	pop	ar6
      000D47 80 A9            [24] 1439 	sjmp	00112$
      000D49                       1440 00104$:
                                   1441 ;	./src/WS2812.c:168: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      000D49 AB 39            [24] 1442 	mov	r3,_CylonBounce_i_65537_90
      000D4B 7F 00            [12] 1443 	mov	r7,#0x00
      000D4D E5 34            [12] 1444 	mov	a,_CylonBounce_PARM_4
      000D4F 2B               [12] 1445 	add	a,r3
      000D50 FB               [12] 1446 	mov	r3,a
      000D51 E5 35            [12] 1447 	mov	a,(_CylonBounce_PARM_4 + 1)
      000D53 3F               [12] 1448 	addc	a,r7
      000D54 FF               [12] 1449 	mov	r7,a
      000D55 0B               [12] 1450 	inc	r3
      000D56 BB 00 01         [24] 1451 	cjne	r3,#0x00,00170$
      000D59 0F               [12] 1452 	inc	r7
      000D5A                       1453 00170$:
      000D5A 8B 82            [24] 1454 	mov	dpl,r3
      000D5C 8F 83            [24] 1455 	mov	dph,r7
      000D5E 88 24            [24] 1456 	mov	_setPixel_PARM_2,r0
      000D60 89 25            [24] 1457 	mov	_setPixel_PARM_3,r1
      000D62 8E 26            [24] 1458 	mov	_setPixel_PARM_4,r6
      000D64 12 09 60         [24] 1459 	lcall	_setPixel
                                   1460 ;	./src/WS2812.c:169: showStrip();
      000D67 12 08 EC         [24] 1461 	lcall	_showStrip
                                   1462 ;	./src/WS2812.c:170: _delay_ms(DELAY2);
      000D6A 85 08 16         [24] 1463 	mov	__divuint_PARM_2,_NUM_LEDS
      000D6D 85 09 17         [24] 1464 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000D70 90 00 C8         [24] 1465 	mov	dptr,#0x00c8
      000D73 12 19 29         [24] 1466 	lcall	__divuint
      000D76 85 0A 16         [24] 1467 	mov	__mulint_PARM_2,__delay
      000D79 85 0B 17         [24] 1468 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000D7C 12 1E E5         [24] 1469 	lcall	__mulint
      000D7F 75 16 64         [24] 1470 	mov	__divuint_PARM_2,#0x64
      000D82 75 17 00         [24] 1471 	mov	(__divuint_PARM_2 + 1),#0x00
      000D85 12 19 29         [24] 1472 	lcall	__divuint
      000D88 E5 82            [12] 1473 	mov	a,dpl
      000D8A 85 83 F0         [24] 1474 	mov	b,dph
      000D8D 24 01            [12] 1475 	add	a,#0x01
      000D8F FE               [12] 1476 	mov	r6,a
      000D90 E4               [12] 1477 	clr	a
      000D91 35 F0            [12] 1478 	addc	a,b
      000D93 FF               [12] 1479 	mov	r7,a
      000D94 7B 00            [12] 1480 	mov	r3,#0x00
      000D96 7A 00            [12] 1481 	mov	r2,#0x00
      000D98 8E 82            [24] 1482 	mov	dpl,r6
      000D9A 8F 83            [24] 1483 	mov	dph,r7
      000D9C 8B F0            [24] 1484 	mov	b,r3
      000D9E EA               [12] 1485 	mov	a,r2
      000D9F 12 06 B6         [24] 1486 	lcall	__delay_ms
                                   1487 ;	./src/WS2812.c:159: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      000DA2 05 39            [12] 1488 	inc	_CylonBounce_i_65537_90
      000DA4 02 0C 59         [24] 1489 	ljmp	00115$
      000DA7                       1490 00105$:
                                   1491 ;	./src/WS2812.c:173: _delay_ms(ReturnDelay);
      000DA7 AA 36            [24] 1492 	mov	r2,_CylonBounce_PARM_5
      000DA9 E5 37            [12] 1493 	mov	a,(_CylonBounce_PARM_5 + 1)
      000DAB FB               [12] 1494 	mov	r3,a
      000DAC 33               [12] 1495 	rlc	a
      000DAD 95 E0            [12] 1496 	subb	a,acc
      000DAF FE               [12] 1497 	mov	r6,a
      000DB0 FF               [12] 1498 	mov	r7,a
      000DB1 8A 82            [24] 1499 	mov	dpl,r2
      000DB3 8B 83            [24] 1500 	mov	dph,r3
      000DB5 8E F0            [24] 1501 	mov	b,r6
      000DB7 C0 07            [24] 1502 	push	ar7
      000DB9 C0 06            [24] 1503 	push	ar6
      000DBB C0 05            [24] 1504 	push	ar5
      000DBD C0 04            [24] 1505 	push	ar4
      000DBF C0 03            [24] 1506 	push	ar3
      000DC1 C0 02            [24] 1507 	push	ar2
      000DC3 12 06 B6         [24] 1508 	lcall	__delay_ms
      000DC6 D0 02            [24] 1509 	pop	ar2
      000DC8 D0 03            [24] 1510 	pop	ar3
      000DCA D0 04            [24] 1511 	pop	ar4
      000DCC D0 05            [24] 1512 	pop	ar5
      000DCE D0 06            [24] 1513 	pop	ar6
      000DD0 D0 07            [24] 1514 	pop	ar7
                                   1515 ;	./src/WS2812.c:175: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      000DD2 E5 08            [12] 1516 	mov	a,_NUM_LEDS
      000DD4 C3               [12] 1517 	clr	c
      000DD5 9C               [12] 1518 	subb	a,r4
      000DD6 FC               [12] 1519 	mov	r4,a
      000DD7 E5 09            [12] 1520 	mov	a,(_NUM_LEDS + 1)
      000DD9 9D               [12] 1521 	subb	a,r5
      000DDA FD               [12] 1522 	mov	r5,a
      000DDB EC               [12] 1523 	mov	a,r4
      000DDC 24 FE            [12] 1524 	add	a,#0xfe
      000DDE FC               [12] 1525 	mov	r4,a
      000DDF ED               [12] 1526 	mov	a,r5
      000DE0 34 FF            [12] 1527 	addc	a,#0xff
      000DE2 FD               [12] 1528 	mov	r5,a
      000DE3                       1529 00121$:
      000DE3 8C 00            [24] 1530 	mov	ar0,r4
      000DE5 8D 01            [24] 1531 	mov	ar1,r5
      000DE7 C3               [12] 1532 	clr	c
      000DE8 E4               [12] 1533 	clr	a
      000DE9 98               [12] 1534 	subb	a,r0
      000DEA 74 80            [12] 1535 	mov	a,#(0x00 ^ 0x80)
      000DEC 89 F0            [24] 1536 	mov	b,r1
      000DEE 63 F0 80         [24] 1537 	xrl	b,#0x80
      000DF1 95 F0            [12] 1538 	subb	a,b
      000DF3 40 03            [24] 1539 	jc	00171$
      000DF5 02 0F FD         [24] 1540 	ljmp	00110$
      000DF8                       1541 00171$:
                                   1542 ;	./src/WS2812.c:177: setAll(0, 0, 0);
      000DF8 C0 02            [24] 1543 	push	ar2
      000DFA C0 03            [24] 1544 	push	ar3
      000DFC C0 06            [24] 1545 	push	ar6
      000DFE C0 07            [24] 1546 	push	ar7
      000E00 75 27 00         [24] 1547 	mov	_setAll_PARM_2,#0x00
      000E03 75 28 00         [24] 1548 	mov	_setAll_PARM_3,#0x00
      000E06 75 82 00         [24] 1549 	mov	dpl,#0x00
      000E09 C0 07            [24] 1550 	push	ar7
      000E0B C0 06            [24] 1551 	push	ar6
      000E0D C0 05            [24] 1552 	push	ar5
      000E0F C0 04            [24] 1553 	push	ar4
      000E11 C0 03            [24] 1554 	push	ar3
      000E13 C0 02            [24] 1555 	push	ar2
      000E15 12 09 A8         [24] 1556 	lcall	_setAll
                                   1557 ;	./src/WS2812.c:178: setPixel(k, red / 10, green / 10, blue / 10);
      000E18 A8 32            [24] 1558 	mov	r0,_CylonBounce_PARM_2
      000E1A 79 00            [12] 1559 	mov	r1,#0x00
      000E1C 75 16 0A         [24] 1560 	mov	__divsint_PARM_2,#0x0a
                                   1561 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000E1F 89 17            [24] 1562 	mov	(__divsint_PARM_2 + 1),r1
      000E21 88 82            [24] 1563 	mov	dpl,r0
      000E23 89 83            [24] 1564 	mov	dph,r1
      000E25 12 22 BC         [24] 1565 	lcall	__divsint
      000E28 A8 82            [24] 1566 	mov	r0,dpl
      000E2A D0 02            [24] 1567 	pop	ar2
      000E2C D0 03            [24] 1568 	pop	ar3
      000E2E D0 04            [24] 1569 	pop	ar4
      000E30 D0 05            [24] 1570 	pop	ar5
      000E32 D0 06            [24] 1571 	pop	ar6
      000E34 D0 07            [24] 1572 	pop	ar7
      000E36 A9 38            [24] 1573 	mov	r1,_CylonBounce_green_65536_88
      000E38 7F 00            [12] 1574 	mov	r7,#0x00
      000E3A 75 16 0A         [24] 1575 	mov	__divsint_PARM_2,#0x0a
                                   1576 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000E3D 8F 17            [24] 1577 	mov	(__divsint_PARM_2 + 1),r7
      000E3F 89 82            [24] 1578 	mov	dpl,r1
      000E41 8F 83            [24] 1579 	mov	dph,r7
      000E43 C0 05            [24] 1580 	push	ar5
      000E45 C0 04            [24] 1581 	push	ar4
      000E47 C0 03            [24] 1582 	push	ar3
      000E49 C0 02            [24] 1583 	push	ar2
      000E4B C0 00            [24] 1584 	push	ar0
      000E4D 12 22 BC         [24] 1585 	lcall	__divsint
      000E50 AE 82            [24] 1586 	mov	r6,dpl
      000E52 8E 3B            [24] 1587 	mov	_CylonBounce_sloc0_1_0,r6
      000E54 AE 33            [24] 1588 	mov	r6,_CylonBounce_PARM_3
      000E56 7F 00            [12] 1589 	mov	r7,#0x00
      000E58 75 16 0A         [24] 1590 	mov	__divsint_PARM_2,#0x0a
                                   1591 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000E5B 8F 17            [24] 1592 	mov	(__divsint_PARM_2 + 1),r7
      000E5D 8E 82            [24] 1593 	mov	dpl,r6
      000E5F 8F 83            [24] 1594 	mov	dph,r7
      000E61 12 22 BC         [24] 1595 	lcall	__divsint
      000E64 AE 82            [24] 1596 	mov	r6,dpl
      000E66 AF 83            [24] 1597 	mov	r7,dph
      000E68 D0 00            [24] 1598 	pop	ar0
      000E6A D0 02            [24] 1599 	pop	ar2
      000E6C D0 03            [24] 1600 	pop	ar3
      000E6E D0 04            [24] 1601 	pop	ar4
      000E70 D0 05            [24] 1602 	pop	ar5
      000E72 8E 3C            [24] 1603 	mov	_CylonBounce_sloc1_1_0,r6
      000E74 88 24            [24] 1604 	mov	_setPixel_PARM_2,r0
      000E76 85 3B 25         [24] 1605 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000E79 85 3C 26         [24] 1606 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000E7C 8C 82            [24] 1607 	mov	dpl,r4
      000E7E 8D 83            [24] 1608 	mov	dph,r5
      000E80 C0 07            [24] 1609 	push	ar7
      000E82 C0 06            [24] 1610 	push	ar6
      000E84 C0 05            [24] 1611 	push	ar5
      000E86 C0 04            [24] 1612 	push	ar4
      000E88 C0 03            [24] 1613 	push	ar3
      000E8A C0 02            [24] 1614 	push	ar2
      000E8C C0 00            [24] 1615 	push	ar0
      000E8E 12 09 60         [24] 1616 	lcall	_setPixel
      000E91 D0 00            [24] 1617 	pop	ar0
      000E93 D0 02            [24] 1618 	pop	ar2
      000E95 D0 03            [24] 1619 	pop	ar3
      000E97 D0 04            [24] 1620 	pop	ar4
      000E99 D0 05            [24] 1621 	pop	ar5
      000E9B D0 06            [24] 1622 	pop	ar6
      000E9D D0 07            [24] 1623 	pop	ar7
                                   1624 ;	./src/WS2812.c:179: for (j = 1; j <= EyeSize; j++)
      000E9F 75 3A 01         [24] 1625 	mov	_CylonBounce_j_65537_90,#0x01
                                   1626 ;	./src/WS2812.c:189: _delay_ms(ReturnDelay);
      000EA2 D0 07            [24] 1627 	pop	ar7
      000EA4 D0 06            [24] 1628 	pop	ar6
      000EA6 D0 03            [24] 1629 	pop	ar3
      000EA8 D0 02            [24] 1630 	pop	ar2
                                   1631 ;	./src/WS2812.c:179: for (j = 1; j <= EyeSize; j++)
      000EAA                       1632 00118$:
      000EAA C0 02            [24] 1633 	push	ar2
      000EAC C0 03            [24] 1634 	push	ar3
      000EAE C0 06            [24] 1635 	push	ar6
      000EB0 C0 07            [24] 1636 	push	ar7
      000EB2 A9 3A            [24] 1637 	mov	r1,_CylonBounce_j_65537_90
      000EB4 7F 00            [12] 1638 	mov	r7,#0x00
      000EB6 C3               [12] 1639 	clr	c
      000EB7 E5 34            [12] 1640 	mov	a,_CylonBounce_PARM_4
      000EB9 99               [12] 1641 	subb	a,r1
      000EBA E5 35            [12] 1642 	mov	a,(_CylonBounce_PARM_4 + 1)
      000EBC 64 80            [12] 1643 	xrl	a,#0x80
      000EBE 8F F0            [24] 1644 	mov	b,r7
      000EC0 63 F0 80         [24] 1645 	xrl	b,#0x80
      000EC3 95 F0            [12] 1646 	subb	a,b
      000EC5 D0 07            [24] 1647 	pop	ar7
      000EC7 D0 06            [24] 1648 	pop	ar6
      000EC9 D0 03            [24] 1649 	pop	ar3
      000ECB D0 02            [24] 1650 	pop	ar2
      000ECD 40 5F            [24] 1651 	jc	00109$
                                   1652 ;	./src/WS2812.c:181: CHECK_EFF;
      000ECF E5 0C            [12] 1653 	mov	a,_effect
      000ED1 B5 23 07         [24] 1654 	cjne	a,_curEffect,00106$
      000ED4 E5 0F            [12] 1655 	mov	a,__color
      000ED6 B5 22 02         [24] 1656 	cjne	a,_curColor,00175$
      000ED9 80 04            [24] 1657 	sjmp	00107$
      000EDB                       1658 00175$:
      000EDB                       1659 00106$:
      000EDB 75 0D 12         [24] 1660 	mov	__status,#0x12
      000EDE 22               [24] 1661 	ret
      000EDF                       1662 00107$:
                                   1663 ;	./src/WS2812.c:182: setPixel(k + j, green, red, blue);
      000EDF C0 02            [24] 1664 	push	ar2
      000EE1 C0 03            [24] 1665 	push	ar3
      000EE3 C0 06            [24] 1666 	push	ar6
      000EE5 C0 07            [24] 1667 	push	ar7
      000EE7 A9 3A            [24] 1668 	mov	r1,_CylonBounce_j_65537_90
      000EE9 7F 00            [12] 1669 	mov	r7,#0x00
      000EEB 8C 03            [24] 1670 	mov	ar3,r4
      000EED 8D 06            [24] 1671 	mov	ar6,r5
      000EEF E9               [12] 1672 	mov	a,r1
      000EF0 2B               [12] 1673 	add	a,r3
      000EF1 F9               [12] 1674 	mov	r1,a
      000EF2 EF               [12] 1675 	mov	a,r7
      000EF3 3E               [12] 1676 	addc	a,r6
      000EF4 FF               [12] 1677 	mov	r7,a
      000EF5 89 82            [24] 1678 	mov	dpl,r1
      000EF7 8F 83            [24] 1679 	mov	dph,r7
      000EF9 85 38 24         [24] 1680 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_88
      000EFC 85 32 25         [24] 1681 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000EFF 85 33 26         [24] 1682 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000F02 C0 07            [24] 1683 	push	ar7
      000F04 C0 06            [24] 1684 	push	ar6
      000F06 C0 05            [24] 1685 	push	ar5
      000F08 C0 04            [24] 1686 	push	ar4
      000F0A C0 03            [24] 1687 	push	ar3
      000F0C C0 02            [24] 1688 	push	ar2
      000F0E C0 00            [24] 1689 	push	ar0
      000F10 12 09 60         [24] 1690 	lcall	_setPixel
      000F13 D0 00            [24] 1691 	pop	ar0
      000F15 D0 02            [24] 1692 	pop	ar2
      000F17 D0 03            [24] 1693 	pop	ar3
      000F19 D0 04            [24] 1694 	pop	ar4
      000F1B D0 05            [24] 1695 	pop	ar5
      000F1D D0 06            [24] 1696 	pop	ar6
      000F1F D0 07            [24] 1697 	pop	ar7
                                   1698 ;	./src/WS2812.c:179: for (j = 1; j <= EyeSize; j++)
      000F21 05 3A            [12] 1699 	inc	_CylonBounce_j_65537_90
      000F23 D0 07            [24] 1700 	pop	ar7
      000F25 D0 06            [24] 1701 	pop	ar6
      000F27 D0 03            [24] 1702 	pop	ar3
      000F29 D0 02            [24] 1703 	pop	ar2
      000F2B 02 0E AA         [24] 1704 	ljmp	00118$
      000F2E                       1705 00109$:
                                   1706 ;	./src/WS2812.c:184: setPixel(k + EyeSize + 1, red / 10, green / 10, blue / 10);
      000F2E C0 02            [24] 1707 	push	ar2
      000F30 C0 03            [24] 1708 	push	ar3
      000F32 C0 06            [24] 1709 	push	ar6
      000F34 C0 07            [24] 1710 	push	ar7
      000F36 E5 34            [12] 1711 	mov	a,_CylonBounce_PARM_4
      000F38 2C               [12] 1712 	add	a,r4
      000F39 F9               [12] 1713 	mov	r1,a
      000F3A E5 35            [12] 1714 	mov	a,(_CylonBounce_PARM_4 + 1)
      000F3C 3D               [12] 1715 	addc	a,r5
      000F3D FF               [12] 1716 	mov	r7,a
      000F3E 09               [12] 1717 	inc	r1
      000F3F B9 00 01         [24] 1718 	cjne	r1,#0x00,00176$
      000F42 0F               [12] 1719 	inc	r7
      000F43                       1720 00176$:
      000F43 89 82            [24] 1721 	mov	dpl,r1
      000F45 8F 83            [24] 1722 	mov	dph,r7
      000F47 88 24            [24] 1723 	mov	_setPixel_PARM_2,r0
      000F49 85 3B 25         [24] 1724 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000F4C 85 3C 26         [24] 1725 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000F4F C0 07            [24] 1726 	push	ar7
      000F51 C0 06            [24] 1727 	push	ar6
      000F53 C0 05            [24] 1728 	push	ar5
      000F55 C0 04            [24] 1729 	push	ar4
      000F57 C0 03            [24] 1730 	push	ar3
      000F59 C0 02            [24] 1731 	push	ar2
      000F5B 12 09 60         [24] 1732 	lcall	_setPixel
                                   1733 ;	./src/WS2812.c:185: showStrip();
      000F5E 12 08 EC         [24] 1734 	lcall	_showStrip
                                   1735 ;	./src/WS2812.c:186: _delay_ms(DELAY2);
      000F61 85 08 16         [24] 1736 	mov	__divuint_PARM_2,_NUM_LEDS
      000F64 85 09 17         [24] 1737 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000F67 90 00 C8         [24] 1738 	mov	dptr,#0x00c8
      000F6A 12 19 29         [24] 1739 	lcall	__divuint
      000F6D D0 02            [24] 1740 	pop	ar2
      000F6F D0 03            [24] 1741 	pop	ar3
      000F71 D0 04            [24] 1742 	pop	ar4
      000F73 D0 05            [24] 1743 	pop	ar5
      000F75 D0 06            [24] 1744 	pop	ar6
      000F77 D0 07            [24] 1745 	pop	ar7
      000F79 85 0A 16         [24] 1746 	mov	__mulint_PARM_2,__delay
      000F7C 85 0B 17         [24] 1747 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000F7F C0 05            [24] 1748 	push	ar5
      000F81 C0 04            [24] 1749 	push	ar4
      000F83 C0 03            [24] 1750 	push	ar3
      000F85 C0 02            [24] 1751 	push	ar2
      000F87 12 1E E5         [24] 1752 	lcall	__mulint
      000F8A AE 82            [24] 1753 	mov	r6,dpl
      000F8C AF 83            [24] 1754 	mov	r7,dph
      000F8E D0 02            [24] 1755 	pop	ar2
      000F90 D0 03            [24] 1756 	pop	ar3
      000F92 D0 04            [24] 1757 	pop	ar4
      000F94 D0 05            [24] 1758 	pop	ar5
      000F96 8E 82            [24] 1759 	mov	dpl,r6
      000F98 8F 83            [24] 1760 	mov	dph,r7
      000F9A 75 16 64         [24] 1761 	mov	__divuint_PARM_2,#0x64
      000F9D 75 17 00         [24] 1762 	mov	(__divuint_PARM_2 + 1),#0x00
      000FA0 C0 07            [24] 1763 	push	ar7
      000FA2 C0 06            [24] 1764 	push	ar6
      000FA4 C0 05            [24] 1765 	push	ar5
      000FA6 C0 04            [24] 1766 	push	ar4
      000FA8 C0 03            [24] 1767 	push	ar3
      000FAA C0 02            [24] 1768 	push	ar2
      000FAC 12 19 29         [24] 1769 	lcall	__divuint
      000FAF E5 82            [12] 1770 	mov	a,dpl
      000FB1 85 83 F0         [24] 1771 	mov	b,dph
      000FB4 D0 02            [24] 1772 	pop	ar2
      000FB6 D0 03            [24] 1773 	pop	ar3
      000FB8 D0 04            [24] 1774 	pop	ar4
      000FBA D0 05            [24] 1775 	pop	ar5
      000FBC D0 06            [24] 1776 	pop	ar6
      000FBE D0 07            [24] 1777 	pop	ar7
      000FC0 24 01            [12] 1778 	add	a,#0x01
      000FC2 FE               [12] 1779 	mov	r6,a
      000FC3 E4               [12] 1780 	clr	a
      000FC4 35 F0            [12] 1781 	addc	a,b
      000FC6 FF               [12] 1782 	mov	r7,a
      000FC7 7B 00            [12] 1783 	mov	r3,#0x00
      000FC9 7A 00            [12] 1784 	mov	r2,#0x00
      000FCB 8E 82            [24] 1785 	mov	dpl,r6
      000FCD 8F 83            [24] 1786 	mov	dph,r7
      000FCF 8B F0            [24] 1787 	mov	b,r3
      000FD1 EA               [12] 1788 	mov	a,r2
      000FD2 C0 07            [24] 1789 	push	ar7
      000FD4 C0 06            [24] 1790 	push	ar6
      000FD6 C0 05            [24] 1791 	push	ar5
      000FD8 C0 04            [24] 1792 	push	ar4
      000FDA C0 03            [24] 1793 	push	ar3
      000FDC C0 02            [24] 1794 	push	ar2
      000FDE 12 06 B6         [24] 1795 	lcall	__delay_ms
      000FE1 D0 02            [24] 1796 	pop	ar2
      000FE3 D0 03            [24] 1797 	pop	ar3
      000FE5 D0 04            [24] 1798 	pop	ar4
      000FE7 D0 05            [24] 1799 	pop	ar5
      000FE9 D0 06            [24] 1800 	pop	ar6
      000FEB D0 07            [24] 1801 	pop	ar7
                                   1802 ;	./src/WS2812.c:175: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      000FED 1C               [12] 1803 	dec	r4
      000FEE BC FF 01         [24] 1804 	cjne	r4,#0xff,00177$
      000FF1 1D               [12] 1805 	dec	r5
      000FF2                       1806 00177$:
      000FF2 D0 07            [24] 1807 	pop	ar7
      000FF4 D0 06            [24] 1808 	pop	ar6
      000FF6 D0 03            [24] 1809 	pop	ar3
      000FF8 D0 02            [24] 1810 	pop	ar2
      000FFA 02 0D E3         [24] 1811 	ljmp	00121$
      000FFD                       1812 00110$:
                                   1813 ;	./src/WS2812.c:189: _delay_ms(ReturnDelay);
      000FFD 8A 82            [24] 1814 	mov	dpl,r2
      000FFF 8B 83            [24] 1815 	mov	dph,r3
      001001 8E F0            [24] 1816 	mov	b,r6
      001003 EF               [12] 1817 	mov	a,r7
                                   1818 ;	./src/WS2812.c:190: }
      001004 02 06 B6         [24] 1819 	ljmp	__delay_ms
                                   1820 ;------------------------------------------------------------
                                   1821 ;Allocation info for local variables in function 'CylonBounceI'
                                   1822 ;------------------------------------------------------------
                                   1823 ;red                       Allocated with name '_CylonBounceI_PARM_2'
                                   1824 ;blue                      Allocated with name '_CylonBounceI_PARM_3'
                                   1825 ;EyeSize                   Allocated with name '_CylonBounceI_PARM_4'
                                   1826 ;ReturnDelay               Allocated with name '_CylonBounceI_PARM_5'
                                   1827 ;green                     Allocated with name '_CylonBounceI_green_65536_101'
                                   1828 ;i                         Allocated to registers r6 
                                   1829 ;j                         Allocated with name '_CylonBounceI_j_65537_103'
                                   1830 ;k                         Allocated to registers 
                                   1831 ;sloc0                     Allocated with name '_CylonBounceI_sloc0_1_0'
                                   1832 ;------------------------------------------------------------
                                   1833 ;	./src/WS2812.c:191: void CylonBounceI(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t ReturnDelay)
                                   1834 ;	-----------------------------------------
                                   1835 ;	 function CylonBounceI
                                   1836 ;	-----------------------------------------
      001007                       1837 _CylonBounceI:
      001007 85 82 43         [24] 1838 	mov	_CylonBounceI_green_65536_101,dpl
                                   1839 ;	./src/WS2812.c:193: curEffect = effect;
      00100A 85 0C 23         [24] 1840 	mov	_curEffect,_effect
                                   1841 ;	./src/WS2812.c:194: curColor = _color;
      00100D 85 0F 22         [24] 1842 	mov	_curColor,__color
                                   1843 ;	./src/WS2812.c:196: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      001010 7E 00            [12] 1844 	mov	r6,#0x00
      001012                       1845 00115$:
      001012 AC 3F            [24] 1846 	mov	r4,_CylonBounceI_PARM_4
      001014 AD 40            [24] 1847 	mov	r5,(_CylonBounceI_PARM_4 + 1)
      001016 E5 08            [12] 1848 	mov	a,_NUM_LEDS
      001018 C3               [12] 1849 	clr	c
      001019 9C               [12] 1850 	subb	a,r4
      00101A FA               [12] 1851 	mov	r2,a
      00101B E5 09            [12] 1852 	mov	a,(_NUM_LEDS + 1)
      00101D 9D               [12] 1853 	subb	a,r5
      00101E FB               [12] 1854 	mov	r3,a
      00101F EA               [12] 1855 	mov	a,r2
      001020 24 FE            [12] 1856 	add	a,#0xfe
      001022 FA               [12] 1857 	mov	r2,a
      001023 EB               [12] 1858 	mov	a,r3
      001024 34 FF            [12] 1859 	addc	a,#0xff
      001026 FB               [12] 1860 	mov	r3,a
      001027 8E 00            [24] 1861 	mov	ar0,r6
      001029 79 00            [12] 1862 	mov	r1,#0x00
      00102B C3               [12] 1863 	clr	c
      00102C E8               [12] 1864 	mov	a,r0
      00102D 9A               [12] 1865 	subb	a,r2
      00102E E9               [12] 1866 	mov	a,r1
      00102F 9B               [12] 1867 	subb	a,r3
      001030 40 03            [24] 1868 	jc	00165$
      001032 02 10 E4         [24] 1869 	ljmp	00105$
      001035                       1870 00165$:
                                   1871 ;	./src/WS2812.c:198: setAll(green, red, blue);
      001035 85 3D 27         [24] 1872 	mov	_setAll_PARM_2,_CylonBounceI_PARM_2
      001038 85 3E 28         [24] 1873 	mov	_setAll_PARM_3,_CylonBounceI_PARM_3
      00103B 85 43 82         [24] 1874 	mov	dpl,_CylonBounceI_green_65536_101
      00103E C0 06            [24] 1875 	push	ar6
      001040 12 09 A8         [24] 1876 	lcall	_setAll
      001043 D0 06            [24] 1877 	pop	ar6
                                   1878 ;	./src/WS2812.c:199: for (j = 0; j <= EyeSize + 1; j++)
      001045 7B 00            [12] 1879 	mov	r3,#0x00
      001047                       1880 00112$:
      001047 A9 3F            [24] 1881 	mov	r1,_CylonBounceI_PARM_4
      001049 AA 40            [24] 1882 	mov	r2,(_CylonBounceI_PARM_4 + 1)
      00104B 09               [12] 1883 	inc	r1
      00104C B9 00 01         [24] 1884 	cjne	r1,#0x00,00166$
      00104F 0A               [12] 1885 	inc	r2
      001050                       1886 00166$:
      001050 8B 45            [24] 1887 	mov	_CylonBounceI_sloc0_1_0,r3
      001052 75 46 00         [24] 1888 	mov	(_CylonBounceI_sloc0_1_0 + 1),#0x00
      001055 C3               [12] 1889 	clr	c
      001056 E9               [12] 1890 	mov	a,r1
      001057 95 45            [12] 1891 	subb	a,_CylonBounceI_sloc0_1_0
      001059 EA               [12] 1892 	mov	a,r2
      00105A 64 80            [12] 1893 	xrl	a,#0x80
      00105C 85 46 F0         [24] 1894 	mov	b,(_CylonBounceI_sloc0_1_0 + 1)
      00105F 63 F0 80         [24] 1895 	xrl	b,#0x80
      001062 95 F0            [12] 1896 	subb	a,b
      001064 40 37            [24] 1897 	jc	00104$
                                   1898 ;	./src/WS2812.c:201: CHECK_EFF;
      001066 E5 0C            [12] 1899 	mov	a,_effect
      001068 B5 23 07         [24] 1900 	cjne	a,_curEffect,00101$
      00106B E5 0F            [12] 1901 	mov	a,__color
      00106D B5 22 02         [24] 1902 	cjne	a,_curColor,00170$
      001070 80 04            [24] 1903 	sjmp	00102$
      001072                       1904 00170$:
      001072                       1905 00101$:
      001072 75 0D 12         [24] 1906 	mov	__status,#0x12
      001075 22               [24] 1907 	ret
      001076                       1908 00102$:
                                   1909 ;	./src/WS2812.c:202: setPixel(i + j, 0, 0, 0);
      001076 8E 01            [24] 1910 	mov	ar1,r6
      001078 7A 00            [12] 1911 	mov	r2,#0x00
      00107A E5 45            [12] 1912 	mov	a,_CylonBounceI_sloc0_1_0
      00107C 29               [12] 1913 	add	a,r1
      00107D F9               [12] 1914 	mov	r1,a
      00107E E5 46            [12] 1915 	mov	a,(_CylonBounceI_sloc0_1_0 + 1)
      001080 3A               [12] 1916 	addc	a,r2
      001081 FA               [12] 1917 	mov	r2,a
      001082 89 82            [24] 1918 	mov	dpl,r1
      001084 8A 83            [24] 1919 	mov	dph,r2
      001086 75 24 00         [24] 1920 	mov	_setPixel_PARM_2,#0x00
      001089 75 25 00         [24] 1921 	mov	_setPixel_PARM_3,#0x00
      00108C 75 26 00         [24] 1922 	mov	_setPixel_PARM_4,#0x00
      00108F C0 06            [24] 1923 	push	ar6
      001091 C0 03            [24] 1924 	push	ar3
      001093 12 09 60         [24] 1925 	lcall	_setPixel
      001096 D0 03            [24] 1926 	pop	ar3
      001098 D0 06            [24] 1927 	pop	ar6
                                   1928 ;	./src/WS2812.c:199: for (j = 0; j <= EyeSize + 1; j++)
      00109A 0B               [12] 1929 	inc	r3
      00109B 80 AA            [24] 1930 	sjmp	00112$
      00109D                       1931 00104$:
                                   1932 ;	./src/WS2812.c:204: showStrip();
      00109D C0 06            [24] 1933 	push	ar6
      00109F 12 08 EC         [24] 1934 	lcall	_showStrip
                                   1935 ;	./src/WS2812.c:205: _delay_ms(DELAY2);
      0010A2 85 08 16         [24] 1936 	mov	__divuint_PARM_2,_NUM_LEDS
      0010A5 85 09 17         [24] 1937 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0010A8 90 00 C8         [24] 1938 	mov	dptr,#0x00c8
      0010AB 12 19 29         [24] 1939 	lcall	__divuint
      0010AE 85 0A 16         [24] 1940 	mov	__mulint_PARM_2,__delay
      0010B1 85 0B 17         [24] 1941 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0010B4 12 1E E5         [24] 1942 	lcall	__mulint
      0010B7 75 16 64         [24] 1943 	mov	__divuint_PARM_2,#0x64
      0010BA 75 17 00         [24] 1944 	mov	(__divuint_PARM_2 + 1),#0x00
      0010BD 12 19 29         [24] 1945 	lcall	__divuint
      0010C0 E5 82            [12] 1946 	mov	a,dpl
      0010C2 85 83 F0         [24] 1947 	mov	b,dph
      0010C5 24 01            [12] 1948 	add	a,#0x01
      0010C7 FA               [12] 1949 	mov	r2,a
      0010C8 E4               [12] 1950 	clr	a
      0010C9 35 F0            [12] 1951 	addc	a,b
      0010CB FB               [12] 1952 	mov	r3,a
      0010CC 8A 00            [24] 1953 	mov	ar0,r2
      0010CE 8B 01            [24] 1954 	mov	ar1,r3
      0010D0 7A 00            [12] 1955 	mov	r2,#0x00
      0010D2 7B 00            [12] 1956 	mov	r3,#0x00
      0010D4 88 82            [24] 1957 	mov	dpl,r0
      0010D6 89 83            [24] 1958 	mov	dph,r1
      0010D8 8A F0            [24] 1959 	mov	b,r2
      0010DA EB               [12] 1960 	mov	a,r3
      0010DB 12 06 B6         [24] 1961 	lcall	__delay_ms
      0010DE D0 06            [24] 1962 	pop	ar6
                                   1963 ;	./src/WS2812.c:196: for (i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      0010E0 0E               [12] 1964 	inc	r6
      0010E1 02 10 12         [24] 1965 	ljmp	00115$
      0010E4                       1966 00105$:
                                   1967 ;	./src/WS2812.c:208: _delay_ms(ReturnDelay);
      0010E4 A9 41            [24] 1968 	mov	r1,_CylonBounceI_PARM_5
      0010E6 E5 42            [12] 1969 	mov	a,(_CylonBounceI_PARM_5 + 1)
      0010E8 FA               [12] 1970 	mov	r2,a
      0010E9 33               [12] 1971 	rlc	a
      0010EA 95 E0            [12] 1972 	subb	a,acc
      0010EC FB               [12] 1973 	mov	r3,a
      0010ED FE               [12] 1974 	mov	r6,a
      0010EE 89 82            [24] 1975 	mov	dpl,r1
      0010F0 8A 83            [24] 1976 	mov	dph,r2
      0010F2 8B F0            [24] 1977 	mov	b,r3
      0010F4 C0 06            [24] 1978 	push	ar6
      0010F6 C0 05            [24] 1979 	push	ar5
      0010F8 C0 04            [24] 1980 	push	ar4
      0010FA C0 03            [24] 1981 	push	ar3
      0010FC C0 02            [24] 1982 	push	ar2
      0010FE C0 01            [24] 1983 	push	ar1
      001100 12 06 B6         [24] 1984 	lcall	__delay_ms
      001103 D0 01            [24] 1985 	pop	ar1
      001105 D0 02            [24] 1986 	pop	ar2
      001107 D0 03            [24] 1987 	pop	ar3
      001109 D0 04            [24] 1988 	pop	ar4
      00110B D0 05            [24] 1989 	pop	ar5
      00110D D0 06            [24] 1990 	pop	ar6
                                   1991 ;	./src/WS2812.c:210: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      00110F E5 08            [12] 1992 	mov	a,_NUM_LEDS
      001111 C3               [12] 1993 	clr	c
      001112 9C               [12] 1994 	subb	a,r4
      001113 FC               [12] 1995 	mov	r4,a
      001114 E5 09            [12] 1996 	mov	a,(_NUM_LEDS + 1)
      001116 9D               [12] 1997 	subb	a,r5
      001117 FD               [12] 1998 	mov	r5,a
      001118 EC               [12] 1999 	mov	a,r4
      001119 24 FE            [12] 2000 	add	a,#0xfe
      00111B FC               [12] 2001 	mov	r4,a
      00111C ED               [12] 2002 	mov	a,r5
      00111D 34 FF            [12] 2003 	addc	a,#0xff
      00111F FD               [12] 2004 	mov	r5,a
      001120                       2005 00121$:
      001120 8C 00            [24] 2006 	mov	ar0,r4
      001122 8D 07            [24] 2007 	mov	ar7,r5
      001124 C3               [12] 2008 	clr	c
      001125 E4               [12] 2009 	clr	a
      001126 98               [12] 2010 	subb	a,r0
      001127 74 80            [12] 2011 	mov	a,#(0x00 ^ 0x80)
      001129 8F F0            [24] 2012 	mov	b,r7
      00112B 63 F0 80         [24] 2013 	xrl	b,#0x80
      00112E 95 F0            [12] 2014 	subb	a,b
      001130 40 03            [24] 2015 	jc	00171$
      001132 02 12 47         [24] 2016 	ljmp	00110$
      001135                       2017 00171$:
                                   2018 ;	./src/WS2812.c:212: setAll(green, red, blue);
      001135 85 3D 27         [24] 2019 	mov	_setAll_PARM_2,_CylonBounceI_PARM_2
      001138 85 3E 28         [24] 2020 	mov	_setAll_PARM_3,_CylonBounceI_PARM_3
      00113B 85 43 82         [24] 2021 	mov	dpl,_CylonBounceI_green_65536_101
      00113E C0 06            [24] 2022 	push	ar6
      001140 C0 05            [24] 2023 	push	ar5
      001142 C0 04            [24] 2024 	push	ar4
      001144 C0 03            [24] 2025 	push	ar3
      001146 C0 02            [24] 2026 	push	ar2
      001148 C0 01            [24] 2027 	push	ar1
      00114A 12 09 A8         [24] 2028 	lcall	_setAll
      00114D D0 01            [24] 2029 	pop	ar1
      00114F D0 02            [24] 2030 	pop	ar2
      001151 D0 03            [24] 2031 	pop	ar3
      001153 D0 04            [24] 2032 	pop	ar4
      001155 D0 05            [24] 2033 	pop	ar5
      001157 D0 06            [24] 2034 	pop	ar6
                                   2035 ;	./src/WS2812.c:213: for (j = 0; j <= EyeSize + 1; j++)
      001159 75 44 00         [24] 2036 	mov	_CylonBounceI_j_65537_103,#0x00
      00115C                       2037 00118$:
      00115C A8 3F            [24] 2038 	mov	r0,_CylonBounceI_PARM_4
      00115E AF 40            [24] 2039 	mov	r7,(_CylonBounceI_PARM_4 + 1)
      001160 08               [12] 2040 	inc	r0
      001161 B8 00 01         [24] 2041 	cjne	r0,#0x00,00172$
      001164 0F               [12] 2042 	inc	r7
      001165                       2043 00172$:
      001165 85 44 45         [24] 2044 	mov	_CylonBounceI_sloc0_1_0,_CylonBounceI_j_65537_103
      001168 75 46 00         [24] 2045 	mov	(_CylonBounceI_sloc0_1_0 + 1),#0x00
      00116B C3               [12] 2046 	clr	c
      00116C E8               [12] 2047 	mov	a,r0
      00116D 95 45            [12] 2048 	subb	a,_CylonBounceI_sloc0_1_0
      00116F EF               [12] 2049 	mov	a,r7
      001170 64 80            [12] 2050 	xrl	a,#0x80
      001172 85 46 F0         [24] 2051 	mov	b,(_CylonBounceI_sloc0_1_0 + 1)
      001175 63 F0 80         [24] 2052 	xrl	b,#0x80
      001178 95 F0            [12] 2053 	subb	a,b
      00117A 40 48            [24] 2054 	jc	00109$
                                   2055 ;	./src/WS2812.c:215: CHECK_EFF;
      00117C E5 0C            [12] 2056 	mov	a,_effect
      00117E B5 23 07         [24] 2057 	cjne	a,_curEffect,00106$
      001181 E5 0F            [12] 2058 	mov	a,__color
      001183 B5 22 02         [24] 2059 	cjne	a,_curColor,00176$
      001186 80 04            [24] 2060 	sjmp	00107$
      001188                       2061 00176$:
      001188                       2062 00106$:
      001188 75 0D 12         [24] 2063 	mov	__status,#0x12
      00118B 22               [24] 2064 	ret
      00118C                       2065 00107$:
                                   2066 ;	./src/WS2812.c:216: setPixel(k + j, 0, 0, 0);
      00118C 8C 00            [24] 2067 	mov	ar0,r4
      00118E 8D 07            [24] 2068 	mov	ar7,r5
      001190 E5 45            [12] 2069 	mov	a,_CylonBounceI_sloc0_1_0
      001192 28               [12] 2070 	add	a,r0
      001193 F8               [12] 2071 	mov	r0,a
      001194 E5 46            [12] 2072 	mov	a,(_CylonBounceI_sloc0_1_0 + 1)
      001196 3F               [12] 2073 	addc	a,r7
      001197 FF               [12] 2074 	mov	r7,a
      001198 88 82            [24] 2075 	mov	dpl,r0
      00119A 8F 83            [24] 2076 	mov	dph,r7
      00119C 75 24 00         [24] 2077 	mov	_setPixel_PARM_2,#0x00
      00119F 75 25 00         [24] 2078 	mov	_setPixel_PARM_3,#0x00
      0011A2 75 26 00         [24] 2079 	mov	_setPixel_PARM_4,#0x00
      0011A5 C0 06            [24] 2080 	push	ar6
      0011A7 C0 05            [24] 2081 	push	ar5
      0011A9 C0 04            [24] 2082 	push	ar4
      0011AB C0 03            [24] 2083 	push	ar3
      0011AD C0 02            [24] 2084 	push	ar2
      0011AF C0 01            [24] 2085 	push	ar1
      0011B1 12 09 60         [24] 2086 	lcall	_setPixel
      0011B4 D0 01            [24] 2087 	pop	ar1
      0011B6 D0 02            [24] 2088 	pop	ar2
      0011B8 D0 03            [24] 2089 	pop	ar3
      0011BA D0 04            [24] 2090 	pop	ar4
      0011BC D0 05            [24] 2091 	pop	ar5
      0011BE D0 06            [24] 2092 	pop	ar6
                                   2093 ;	./src/WS2812.c:213: for (j = 0; j <= EyeSize + 1; j++)
      0011C0 05 44            [12] 2094 	inc	_CylonBounceI_j_65537_103
      0011C2 80 98            [24] 2095 	sjmp	00118$
      0011C4                       2096 00109$:
                                   2097 ;	./src/WS2812.c:218: showStrip();
      0011C4 C0 01            [24] 2098 	push	ar1
      0011C6 C0 02            [24] 2099 	push	ar2
      0011C8 C0 03            [24] 2100 	push	ar3
      0011CA C0 06            [24] 2101 	push	ar6
      0011CC C0 06            [24] 2102 	push	ar6
      0011CE C0 05            [24] 2103 	push	ar5
      0011D0 C0 04            [24] 2104 	push	ar4
      0011D2 C0 03            [24] 2105 	push	ar3
      0011D4 C0 02            [24] 2106 	push	ar2
      0011D6 C0 01            [24] 2107 	push	ar1
      0011D8 12 08 EC         [24] 2108 	lcall	_showStrip
                                   2109 ;	./src/WS2812.c:219: _delay_ms(DELAY2);
      0011DB 85 08 16         [24] 2110 	mov	__divuint_PARM_2,_NUM_LEDS
      0011DE 85 09 17         [24] 2111 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0011E1 90 00 C8         [24] 2112 	mov	dptr,#0x00c8
      0011E4 12 19 29         [24] 2113 	lcall	__divuint
      0011E7 85 0A 16         [24] 2114 	mov	__mulint_PARM_2,__delay
      0011EA 85 0B 17         [24] 2115 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0011ED 12 1E E5         [24] 2116 	lcall	__mulint
      0011F0 75 16 64         [24] 2117 	mov	__divuint_PARM_2,#0x64
      0011F3 75 17 00         [24] 2118 	mov	(__divuint_PARM_2 + 1),#0x00
      0011F6 12 19 29         [24] 2119 	lcall	__divuint
      0011F9 E5 82            [12] 2120 	mov	a,dpl
      0011FB 85 83 F0         [24] 2121 	mov	b,dph
      0011FE D0 01            [24] 2122 	pop	ar1
      001200 D0 02            [24] 2123 	pop	ar2
      001202 D0 03            [24] 2124 	pop	ar3
      001204 D0 04            [24] 2125 	pop	ar4
      001206 D0 05            [24] 2126 	pop	ar5
      001208 D0 06            [24] 2127 	pop	ar6
      00120A 24 01            [12] 2128 	add	a,#0x01
      00120C F8               [12] 2129 	mov	r0,a
      00120D E4               [12] 2130 	clr	a
      00120E 35 F0            [12] 2131 	addc	a,b
      001210 FB               [12] 2132 	mov	r3,a
      001211 7E 00            [12] 2133 	mov	r6,#0x00
      001213 7F 00            [12] 2134 	mov	r7,#0x00
      001215 88 82            [24] 2135 	mov	dpl,r0
      001217 8B 83            [24] 2136 	mov	dph,r3
      001219 8E F0            [24] 2137 	mov	b,r6
      00121B EF               [12] 2138 	mov	a,r7
      00121C C0 06            [24] 2139 	push	ar6
      00121E C0 05            [24] 2140 	push	ar5
      001220 C0 04            [24] 2141 	push	ar4
      001222 C0 03            [24] 2142 	push	ar3
      001224 C0 02            [24] 2143 	push	ar2
      001226 C0 01            [24] 2144 	push	ar1
      001228 12 06 B6         [24] 2145 	lcall	__delay_ms
      00122B D0 01            [24] 2146 	pop	ar1
      00122D D0 02            [24] 2147 	pop	ar2
      00122F D0 03            [24] 2148 	pop	ar3
      001231 D0 04            [24] 2149 	pop	ar4
      001233 D0 05            [24] 2150 	pop	ar5
      001235 D0 06            [24] 2151 	pop	ar6
                                   2152 ;	./src/WS2812.c:210: for (int16_t k = NUM_LEDS - EyeSize - 2; k > 0; k--)
      001237 1C               [12] 2153 	dec	r4
      001238 BC FF 01         [24] 2154 	cjne	r4,#0xff,00177$
      00123B 1D               [12] 2155 	dec	r5
      00123C                       2156 00177$:
      00123C D0 06            [24] 2157 	pop	ar6
      00123E D0 03            [24] 2158 	pop	ar3
      001240 D0 02            [24] 2159 	pop	ar2
      001242 D0 01            [24] 2160 	pop	ar1
      001244 02 11 20         [24] 2161 	ljmp	00121$
      001247                       2162 00110$:
                                   2163 ;	./src/WS2812.c:222: _delay_ms(ReturnDelay);
      001247 89 82            [24] 2164 	mov	dpl,r1
      001249 8A 83            [24] 2165 	mov	dph,r2
      00124B 8B F0            [24] 2166 	mov	b,r3
      00124D EE               [12] 2167 	mov	a,r6
                                   2168 ;	./src/WS2812.c:223: }
      00124E 02 06 B6         [24] 2169 	ljmp	__delay_ms
                                   2170 ;------------------------------------------------------------
                                   2171 ;Allocation info for local variables in function 'colorWipe'
                                   2172 ;------------------------------------------------------------
                                   2173 ;red                       Allocated with name '_colorWipe_PARM_2'
                                   2174 ;blue                      Allocated with name '_colorWipe_PARM_3'
                                   2175 ;orient                    Allocated with name '_colorWipe_PARM_4'
                                   2176 ;green                     Allocated to registers r7 
                                   2177 ;i                         Allocated to registers r6 
                                   2178 ;------------------------------------------------------------
                                   2179 ;	./src/WS2812.c:224: void colorWipe(uint8_t green, uint8_t red, uint8_t blue, uint8_t orient)
                                   2180 ;	-----------------------------------------
                                   2181 ;	 function colorWipe
                                   2182 ;	-----------------------------------------
      001251                       2183 _colorWipe:
      001251 AF 82            [24] 2184 	mov	r7,dpl
                                   2185 ;	./src/WS2812.c:227: curEffect = effect;
      001253 85 0C 23         [24] 2186 	mov	_curEffect,_effect
                                   2187 ;	./src/WS2812.c:228: curColor = _color;
      001256 85 0F 22         [24] 2188 	mov	_curColor,__color
                                   2189 ;	./src/WS2812.c:229: for (i = 0; i < NUM_LEDS; i++)
      001259 7E 00            [12] 2190 	mov	r6,#0x00
      00125B                       2191 00106$:
      00125B 8E 04            [24] 2192 	mov	ar4,r6
      00125D 7D 00            [12] 2193 	mov	r5,#0x00
      00125F C3               [12] 2194 	clr	c
      001260 EC               [12] 2195 	mov	a,r4
      001261 95 08            [12] 2196 	subb	a,_NUM_LEDS
      001263 ED               [12] 2197 	mov	a,r5
      001264 95 09            [12] 2198 	subb	a,(_NUM_LEDS + 1)
      001266 40 01            [24] 2199 	jc	00128$
      001268 22               [24] 2200 	ret
      001269                       2201 00128$:
                                   2202 ;	./src/WS2812.c:231: CHECK_EFF;
      001269 E5 0C            [12] 2203 	mov	a,_effect
      00126B B5 23 07         [24] 2204 	cjne	a,_curEffect,00101$
      00126E E5 0F            [12] 2205 	mov	a,__color
      001270 B5 22 02         [24] 2206 	cjne	a,_curColor,00131$
      001273 80 04            [24] 2207 	sjmp	00102$
      001275                       2208 00131$:
      001275                       2209 00101$:
      001275 75 0D 12         [24] 2210 	mov	__status,#0x12
      001278 22               [24] 2211 	ret
      001279                       2212 00102$:
                                   2213 ;	./src/WS2812.c:232: setPixel(orient == 0 ? i : NUM_LEDS - i - 1, green, red, blue);
      001279 E5 49            [12] 2214 	mov	a,_colorWipe_PARM_4
      00127B 70 05            [24] 2215 	jnz	00110$
      00127D 8E 04            [24] 2216 	mov	ar4,r6
      00127F FD               [12] 2217 	mov	r5,a
      001280 80 17            [24] 2218 	sjmp	00111$
      001282                       2219 00110$:
      001282 8E 02            [24] 2220 	mov	ar2,r6
      001284 7B 00            [12] 2221 	mov	r3,#0x00
      001286 A8 08            [24] 2222 	mov	r0,_NUM_LEDS
      001288 A9 09            [24] 2223 	mov	r1,(_NUM_LEDS + 1)
      00128A E8               [12] 2224 	mov	a,r0
      00128B C3               [12] 2225 	clr	c
      00128C 9A               [12] 2226 	subb	a,r2
      00128D F8               [12] 2227 	mov	r0,a
      00128E E9               [12] 2228 	mov	a,r1
      00128F 9B               [12] 2229 	subb	a,r3
      001290 F9               [12] 2230 	mov	r1,a
      001291 E8               [12] 2231 	mov	a,r0
      001292 24 FF            [12] 2232 	add	a,#0xff
      001294 FC               [12] 2233 	mov	r4,a
      001295 E9               [12] 2234 	mov	a,r1
      001296 34 FF            [12] 2235 	addc	a,#0xff
      001298 FD               [12] 2236 	mov	r5,a
      001299                       2237 00111$:
      001299 8C 82            [24] 2238 	mov	dpl,r4
      00129B 8D 83            [24] 2239 	mov	dph,r5
      00129D 8F 24            [24] 2240 	mov	_setPixel_PARM_2,r7
      00129F 85 47 25         [24] 2241 	mov	_setPixel_PARM_3,_colorWipe_PARM_2
      0012A2 85 48 26         [24] 2242 	mov	_setPixel_PARM_4,_colorWipe_PARM_3
      0012A5 C0 07            [24] 2243 	push	ar7
      0012A7 C0 06            [24] 2244 	push	ar6
      0012A9 12 09 60         [24] 2245 	lcall	_setPixel
                                   2246 ;	./src/WS2812.c:233: showStrip();
      0012AC 12 08 EC         [24] 2247 	lcall	_showStrip
                                   2248 ;	./src/WS2812.c:234: _delay_ms(DELAY2 + 1);
      0012AF 85 08 16         [24] 2249 	mov	__divuint_PARM_2,_NUM_LEDS
      0012B2 85 09 17         [24] 2250 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0012B5 90 00 C8         [24] 2251 	mov	dptr,#0x00c8
      0012B8 12 19 29         [24] 2252 	lcall	__divuint
      0012BB 85 0A 16         [24] 2253 	mov	__mulint_PARM_2,__delay
      0012BE 85 0B 17         [24] 2254 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0012C1 12 1E E5         [24] 2255 	lcall	__mulint
      0012C4 75 16 64         [24] 2256 	mov	__divuint_PARM_2,#0x64
      0012C7 75 17 00         [24] 2257 	mov	(__divuint_PARM_2 + 1),#0x00
      0012CA 12 19 29         [24] 2258 	lcall	__divuint
      0012CD E5 82            [12] 2259 	mov	a,dpl
      0012CF 85 83 F0         [24] 2260 	mov	b,dph
      0012D2 24 02            [12] 2261 	add	a,#0x02
      0012D4 FC               [12] 2262 	mov	r4,a
      0012D5 E4               [12] 2263 	clr	a
      0012D6 35 F0            [12] 2264 	addc	a,b
      0012D8 FD               [12] 2265 	mov	r5,a
      0012D9 7B 00            [12] 2266 	mov	r3,#0x00
      0012DB 7A 00            [12] 2267 	mov	r2,#0x00
      0012DD 8C 82            [24] 2268 	mov	dpl,r4
      0012DF 8D 83            [24] 2269 	mov	dph,r5
      0012E1 8B F0            [24] 2270 	mov	b,r3
      0012E3 EA               [12] 2271 	mov	a,r2
      0012E4 12 06 B6         [24] 2272 	lcall	__delay_ms
      0012E7 D0 06            [24] 2273 	pop	ar6
      0012E9 D0 07            [24] 2274 	pop	ar7
                                   2275 ;	./src/WS2812.c:229: for (i = 0; i < NUM_LEDS; i++)
      0012EB 0E               [12] 2276 	inc	r6
                                   2277 ;	./src/WS2812.c:236: }
      0012EC 02 12 5B         [24] 2278 	ljmp	00106$
                                   2279 ;------------------------------------------------------------
                                   2280 ;Allocation info for local variables in function 'rainbowCycle'
                                   2281 ;------------------------------------------------------------
                                   2282 ;i                         Allocated to registers r5 
                                   2283 ;r                         Allocated to registers r2 
                                   2284 ;g                         Allocated to registers r3 
                                   2285 ;b                         Allocated to registers r1 
                                   2286 ;WheelPos                  Allocated with name '_rainbowCycle_WheelPos_65537_120'
                                   2287 ;j                         Allocated to registers r6 r7 
                                   2288 ;------------------------------------------------------------
                                   2289 ;	./src/WS2812.c:238: void rainbowCycle()
                                   2290 ;	-----------------------------------------
                                   2291 ;	 function rainbowCycle
                                   2292 ;	-----------------------------------------
      0012EF                       2293 _rainbowCycle:
                                   2294 ;	./src/WS2812.c:242: curEffect = effect;
      0012EF 85 0C 23         [24] 2295 	mov	_curEffect,_effect
                                   2296 ;	./src/WS2812.c:243: curColor = _color;
      0012F2 85 0F 22         [24] 2297 	mov	_curColor,__color
                                   2298 ;	./src/WS2812.c:246: for (uint16_t j = 0; j < 256 * 5; j++)
      0012F5 7E 00            [12] 2299 	mov	r6,#0x00
      0012F7 7F 00            [12] 2300 	mov	r7,#0x00
      0012F9                       2301 00116$:
      0012F9 8E 04            [24] 2302 	mov	ar4,r6
      0012FB 8F 05            [24] 2303 	mov	ar5,r7
      0012FD 74 FB            [12] 2304 	mov	a,#0x100 - 0x05
      0012FF 2D               [12] 2305 	add	a,r5
      001300 50 01            [24] 2306 	jnc	00155$
      001302 22               [24] 2307 	ret
      001303                       2308 00155$:
                                   2309 ;	./src/WS2812.c:248: for (i = 0; i < NUM_LEDS; i++)
      001303 7D 00            [12] 2310 	mov	r5,#0x00
      001305                       2311 00113$:
      001305 8D 03            [24] 2312 	mov	ar3,r5
      001307 7C 00            [12] 2313 	mov	r4,#0x00
      001309 C3               [12] 2314 	clr	c
      00130A EB               [12] 2315 	mov	a,r3
      00130B 95 08            [12] 2316 	subb	a,_NUM_LEDS
      00130D EC               [12] 2317 	mov	a,r4
      00130E 95 09            [12] 2318 	subb	a,(_NUM_LEDS + 1)
      001310 40 03            [24] 2319 	jc	00156$
      001312 02 13 BD         [24] 2320 	ljmp	00110$
      001315                       2321 00156$:
                                   2322 ;	./src/WS2812.c:250: CHECK_EFF;
      001315 E5 0C            [12] 2323 	mov	a,_effect
      001317 B5 23 07         [24] 2324 	cjne	a,_curEffect,00101$
      00131A E5 0F            [12] 2325 	mov	a,__color
      00131C B5 22 02         [24] 2326 	cjne	a,_curColor,00159$
      00131F 80 04            [24] 2327 	sjmp	00102$
      001321                       2328 00159$:
      001321                       2329 00101$:
      001321 75 0D 12         [24] 2330 	mov	__status,#0x12
      001324 22               [24] 2331 	ret
      001325                       2332 00102$:
                                   2333 ;	./src/WS2812.c:251: WheelPos = (((i * 256 / NUM_LEDS) + j) & 255);
      001325 8D 03            [24] 2334 	mov	ar3,r5
      001327 8B 04            [24] 2335 	mov	ar4,r3
      001329 7B 00            [12] 2336 	mov	r3,#0x00
      00132B 8B 82            [24] 2337 	mov	dpl,r3
      00132D 8C 83            [24] 2338 	mov	dph,r4
      00132F 85 08 16         [24] 2339 	mov	__divuint_PARM_2,_NUM_LEDS
      001332 85 09 17         [24] 2340 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      001335 C0 07            [24] 2341 	push	ar7
      001337 C0 06            [24] 2342 	push	ar6
      001339 C0 05            [24] 2343 	push	ar5
      00133B 12 19 29         [24] 2344 	lcall	__divuint
      00133E AB 82            [24] 2345 	mov	r3,dpl
      001340 D0 05            [24] 2346 	pop	ar5
      001342 D0 06            [24] 2347 	pop	ar6
      001344 D0 07            [24] 2348 	pop	ar7
      001346 8E 04            [24] 2349 	mov	ar4,r6
      001348 EC               [12] 2350 	mov	a,r4
      001349 2B               [12] 2351 	add	a,r3
      00134A FC               [12] 2352 	mov	r4,a
                                   2353 ;	./src/WS2812.c:253: if (WheelPos < 85)
      00134B BC 55 00         [24] 2354 	cjne	r4,#0x55,00160$
      00134E                       2355 00160$:
      00134E 50 16            [24] 2356 	jnc	00108$
                                   2357 ;	./src/WS2812.c:255: g = WheelPos * 3;
      001350 EC               [12] 2358 	mov	a,r4
      001351 75 F0 03         [24] 2359 	mov	b,#0x03
      001354 A4               [48] 2360 	mul	ab
      001355 FB               [12] 2361 	mov	r3,a
                                   2362 ;	./src/WS2812.c:256: r = 255 - WheelPos * 3;
      001356 8C 02            [24] 2363 	mov	ar2,r4
      001358 EA               [12] 2364 	mov	a,r2
      001359 75 F0 03         [24] 2365 	mov	b,#0x03
      00135C A4               [48] 2366 	mul	ab
      00135D D3               [12] 2367 	setb	c
      00135E 94 FF            [12] 2368 	subb	a,#0xff
      001360 F4               [12] 2369 	cpl	a
      001361 FA               [12] 2370 	mov	r2,a
                                   2371 ;	./src/WS2812.c:257: b = 0;
      001362 79 00            [12] 2372 	mov	r1,#0x00
      001364 80 36            [24] 2373 	sjmp	00109$
      001366                       2374 00108$:
                                   2375 ;	./src/WS2812.c:259: else if (WheelPos < 170)
      001366 BC AA 00         [24] 2376 	cjne	r4,#0xaa,00162$
      001369                       2377 00162$:
      001369 50 1C            [24] 2378 	jnc	00105$
                                   2379 ;	./src/WS2812.c:261: WheelPos -= 85;
      00136B 8C 00            [24] 2380 	mov	ar0,r4
      00136D E8               [12] 2381 	mov	a,r0
      00136E 24 AB            [12] 2382 	add	a,#0xab
                                   2383 ;	./src/WS2812.c:262: g = 255 - WheelPos * 3;
      001370 F5 4A            [12] 2384 	mov	_rainbowCycle_WheelPos_65537_120,a
      001372 F8               [12] 2385 	mov	r0,a
      001373 75 F0 03         [24] 2386 	mov	b,#0x03
      001376 A4               [48] 2387 	mul	ab
      001377 D3               [12] 2388 	setb	c
      001378 94 FF            [12] 2389 	subb	a,#0xff
      00137A F4               [12] 2390 	cpl	a
      00137B FB               [12] 2391 	mov	r3,a
                                   2392 ;	./src/WS2812.c:263: r = 0;
      00137C 7A 00            [12] 2393 	mov	r2,#0x00
                                   2394 ;	./src/WS2812.c:264: b = WheelPos * 3;
      00137E E5 4A            [12] 2395 	mov	a,_rainbowCycle_WheelPos_65537_120
      001380 75 F0 03         [24] 2396 	mov	b,#0x03
      001383 A4               [48] 2397 	mul	ab
      001384 F9               [12] 2398 	mov	r1,a
      001385 80 15            [24] 2399 	sjmp	00109$
      001387                       2400 00105$:
                                   2401 ;	./src/WS2812.c:268: WheelPos -= 170;
      001387 EC               [12] 2402 	mov	a,r4
      001388 24 56            [12] 2403 	add	a,#0x56
                                   2404 ;	./src/WS2812.c:269: g = 0;
                                   2405 ;	./src/WS2812.c:270: r = WheelPos * 3;
      00138A FC               [12] 2406 	mov	r4,a
      00138B 7B 00            [12] 2407 	mov	r3,#0x00
      00138D 75 F0 03         [24] 2408 	mov	b,#0x03
      001390 A4               [48] 2409 	mul	ab
      001391 FA               [12] 2410 	mov	r2,a
                                   2411 ;	./src/WS2812.c:271: b = 255 - WheelPos * 3;
      001392 EC               [12] 2412 	mov	a,r4
      001393 75 F0 03         [24] 2413 	mov	b,#0x03
      001396 A4               [48] 2414 	mul	ab
      001397 D3               [12] 2415 	setb	c
      001398 94 FF            [12] 2416 	subb	a,#0xff
      00139A F4               [12] 2417 	cpl	a
      00139B F9               [12] 2418 	mov	r1,a
      00139C                       2419 00109$:
                                   2420 ;	./src/WS2812.c:274: setPixel(i, g, r, b);
      00139C 8D 00            [24] 2421 	mov	ar0,r5
      00139E 7C 00            [12] 2422 	mov	r4,#0x00
      0013A0 8B 24            [24] 2423 	mov	_setPixel_PARM_2,r3
      0013A2 8A 25            [24] 2424 	mov	_setPixel_PARM_3,r2
      0013A4 89 26            [24] 2425 	mov	_setPixel_PARM_4,r1
      0013A6 88 82            [24] 2426 	mov	dpl,r0
      0013A8 8C 83            [24] 2427 	mov	dph,r4
      0013AA C0 07            [24] 2428 	push	ar7
      0013AC C0 06            [24] 2429 	push	ar6
      0013AE C0 05            [24] 2430 	push	ar5
      0013B0 12 09 60         [24] 2431 	lcall	_setPixel
      0013B3 D0 05            [24] 2432 	pop	ar5
      0013B5 D0 06            [24] 2433 	pop	ar6
      0013B7 D0 07            [24] 2434 	pop	ar7
                                   2435 ;	./src/WS2812.c:248: for (i = 0; i < NUM_LEDS; i++)
      0013B9 0D               [12] 2436 	inc	r5
      0013BA 02 13 05         [24] 2437 	ljmp	00113$
      0013BD                       2438 00110$:
                                   2439 ;	./src/WS2812.c:276: showStrip();
      0013BD C0 07            [24] 2440 	push	ar7
      0013BF C0 06            [24] 2441 	push	ar6
      0013C1 12 08 EC         [24] 2442 	lcall	_showStrip
                                   2443 ;	./src/WS2812.c:277: _delay_ms(DELAY);
      0013C4 85 08 16         [24] 2444 	mov	__divuint_PARM_2,_NUM_LEDS
      0013C7 85 09 17         [24] 2445 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0013CA 90 00 C8         [24] 2446 	mov	dptr,#0x00c8
      0013CD 12 19 29         [24] 2447 	lcall	__divuint
      0013D0 85 0A 16         [24] 2448 	mov	__mulint_PARM_2,__delay
      0013D3 85 0B 17         [24] 2449 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0013D6 12 1E E5         [24] 2450 	lcall	__mulint
      0013D9 75 16 0A         [24] 2451 	mov	__divuint_PARM_2,#0x0a
      0013DC 75 17 00         [24] 2452 	mov	(__divuint_PARM_2 + 1),#0x00
      0013DF 12 19 29         [24] 2453 	lcall	__divuint
      0013E2 E5 82            [12] 2454 	mov	a,dpl
      0013E4 85 83 F0         [24] 2455 	mov	b,dph
      0013E7 24 01            [12] 2456 	add	a,#0x01
      0013E9 FC               [12] 2457 	mov	r4,a
      0013EA E4               [12] 2458 	clr	a
      0013EB 35 F0            [12] 2459 	addc	a,b
      0013ED FD               [12] 2460 	mov	r5,a
      0013EE 7B 00            [12] 2461 	mov	r3,#0x00
      0013F0 7A 00            [12] 2462 	mov	r2,#0x00
      0013F2 8C 82            [24] 2463 	mov	dpl,r4
      0013F4 8D 83            [24] 2464 	mov	dph,r5
      0013F6 8B F0            [24] 2465 	mov	b,r3
      0013F8 EA               [12] 2466 	mov	a,r2
      0013F9 12 06 B6         [24] 2467 	lcall	__delay_ms
      0013FC D0 06            [24] 2468 	pop	ar6
      0013FE D0 07            [24] 2469 	pop	ar7
                                   2470 ;	./src/WS2812.c:246: for (uint16_t j = 0; j < 256 * 5; j++)
      001400 0E               [12] 2471 	inc	r6
      001401 BE 00 01         [24] 2472 	cjne	r6,#0x00,00164$
      001404 0F               [12] 2473 	inc	r7
      001405                       2474 00164$:
                                   2475 ;	./src/WS2812.c:279: }
      001405 02 12 F9         [24] 2476 	ljmp	00116$
                                   2477 ;------------------------------------------------------------
                                   2478 ;Allocation info for local variables in function 'Pattern3'
                                   2479 ;------------------------------------------------------------
                                   2480 ;r                         Allocated with name '_Pattern3_PARM_2'
                                   2481 ;b                         Allocated with name '_Pattern3_PARM_3'
                                   2482 ;orient                    Allocated with name '_Pattern3_PARM_4'
                                   2483 ;g                         Allocated to registers r7 
                                   2484 ;i                         Allocated with name '_Pattern3_i_65536_130'
                                   2485 ;i                         Allocated to registers r5 r6 
                                   2486 ;sloc0                     Allocated with name '_Pattern3_sloc0_1_0'
                                   2487 ;------------------------------------------------------------
                                   2488 ;	./src/WS2812.c:280: void Pattern3(uint8_t g, uint8_t r, uint8_t b, uint8_t orient)
                                   2489 ;	-----------------------------------------
                                   2490 ;	 function Pattern3
                                   2491 ;	-----------------------------------------
      001408                       2492 _Pattern3:
      001408 AF 82            [24] 2493 	mov	r7,dpl
                                   2494 ;	./src/WS2812.c:283: curEffect = effect;
      00140A 85 0C 23         [24] 2495 	mov	_curEffect,_effect
                                   2496 ;	./src/WS2812.c:284: curColor = _color;
      00140D 85 0F 22         [24] 2497 	mov	_curColor,__color
                                   2498 ;	./src/WS2812.c:285: for (int i = 0; i < (NUM_LEDS / 2); i++)
      001410 7D 00            [12] 2499 	mov	r5,#0x00
      001412 7E 00            [12] 2500 	mov	r6,#0x00
      001414                       2501 00106$:
      001414 AB 08            [24] 2502 	mov	r3,_NUM_LEDS
      001416 AC 09            [24] 2503 	mov	r4,(_NUM_LEDS + 1)
      001418 8B 01            [24] 2504 	mov	ar1,r3
      00141A EC               [12] 2505 	mov	a,r4
      00141B C3               [12] 2506 	clr	c
      00141C 13               [12] 2507 	rrc	a
      00141D C9               [12] 2508 	xch	a,r1
      00141E 13               [12] 2509 	rrc	a
      00141F C9               [12] 2510 	xch	a,r1
      001420 FA               [12] 2511 	mov	r2,a
      001421 8D 4E            [24] 2512 	mov	_Pattern3_sloc0_1_0,r5
      001423 8E 4F            [24] 2513 	mov	(_Pattern3_sloc0_1_0 + 1),r6
      001425 C3               [12] 2514 	clr	c
      001426 E5 4E            [12] 2515 	mov	a,_Pattern3_sloc0_1_0
      001428 99               [12] 2516 	subb	a,r1
      001429 E5 4F            [12] 2517 	mov	a,(_Pattern3_sloc0_1_0 + 1)
      00142B 9A               [12] 2518 	subb	a,r2
      00142C 40 03            [24] 2519 	jc	00134$
      00142E 02 14 FE         [24] 2520 	ljmp	00104$
      001431                       2521 00134$:
                                   2522 ;	./src/WS2812.c:287: CHECK_EFF;
      001431 E5 0C            [12] 2523 	mov	a,_effect
      001433 B5 23 07         [24] 2524 	cjne	a,_curEffect,00101$
      001436 E5 0F            [12] 2525 	mov	a,__color
      001438 B5 22 02         [24] 2526 	cjne	a,_curColor,00137$
      00143B 80 04            [24] 2527 	sjmp	00102$
      00143D                       2528 00137$:
      00143D                       2529 00101$:
      00143D 75 0D 12         [24] 2530 	mov	__status,#0x12
      001440 22               [24] 2531 	ret
      001441                       2532 00102$:
                                   2533 ;	./src/WS2812.c:288: setPixel(orient ? (NUM_LEDS / 2) + i : NUM_LEDS - 1 - i, g, r, b);
      001441 E5 4D            [12] 2534 	mov	a,_Pattern3_PARM_4
      001443 60 0A            [24] 2535 	jz	00110$
      001445 E5 4E            [12] 2536 	mov	a,_Pattern3_sloc0_1_0
      001447 29               [12] 2537 	add	a,r1
      001448 F9               [12] 2538 	mov	r1,a
      001449 E5 4F            [12] 2539 	mov	a,(_Pattern3_sloc0_1_0 + 1)
      00144B 3A               [12] 2540 	addc	a,r2
      00144C FA               [12] 2541 	mov	r2,a
      00144D 80 0E            [24] 2542 	sjmp	00111$
      00144F                       2543 00110$:
      00144F 1B               [12] 2544 	dec	r3
      001450 BB FF 01         [24] 2545 	cjne	r3,#0xff,00139$
      001453 1C               [12] 2546 	dec	r4
      001454                       2547 00139$:
      001454 EB               [12] 2548 	mov	a,r3
      001455 C3               [12] 2549 	clr	c
      001456 95 4E            [12] 2550 	subb	a,_Pattern3_sloc0_1_0
      001458 F9               [12] 2551 	mov	r1,a
      001459 EC               [12] 2552 	mov	a,r4
      00145A 95 4F            [12] 2553 	subb	a,(_Pattern3_sloc0_1_0 + 1)
      00145C FA               [12] 2554 	mov	r2,a
      00145D                       2555 00111$:
      00145D 89 82            [24] 2556 	mov	dpl,r1
      00145F 8A 83            [24] 2557 	mov	dph,r2
      001461 8F 24            [24] 2558 	mov	_setPixel_PARM_2,r7
      001463 85 4B 25         [24] 2559 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      001466 85 4C 26         [24] 2560 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      001469 C0 07            [24] 2561 	push	ar7
      00146B C0 06            [24] 2562 	push	ar6
      00146D C0 05            [24] 2563 	push	ar5
      00146F 12 09 60         [24] 2564 	lcall	_setPixel
      001472 D0 05            [24] 2565 	pop	ar5
      001474 D0 06            [24] 2566 	pop	ar6
      001476 D0 07            [24] 2567 	pop	ar7
                                   2568 ;	./src/WS2812.c:289: setPixel(orient ? ((NUM_LEDS / 2) - 1) - i : i, g, r, b);
      001478 E5 4D            [12] 2569 	mov	a,_Pattern3_PARM_4
      00147A 60 1C            [24] 2570 	jz	00112$
      00147C AB 08            [24] 2571 	mov	r3,_NUM_LEDS
      00147E E5 09            [12] 2572 	mov	a,(_NUM_LEDS + 1)
      001480 C3               [12] 2573 	clr	c
      001481 13               [12] 2574 	rrc	a
      001482 CB               [12] 2575 	xch	a,r3
      001483 13               [12] 2576 	rrc	a
      001484 CB               [12] 2577 	xch	a,r3
      001485 FC               [12] 2578 	mov	r4,a
      001486 1B               [12] 2579 	dec	r3
      001487 BB FF 01         [24] 2580 	cjne	r3,#0xff,00141$
      00148A 1C               [12] 2581 	dec	r4
      00148B                       2582 00141$:
      00148B 8D 01            [24] 2583 	mov	ar1,r5
      00148D 8E 02            [24] 2584 	mov	ar2,r6
      00148F EB               [12] 2585 	mov	a,r3
      001490 C3               [12] 2586 	clr	c
      001491 99               [12] 2587 	subb	a,r1
      001492 FB               [12] 2588 	mov	r3,a
      001493 EC               [12] 2589 	mov	a,r4
      001494 9A               [12] 2590 	subb	a,r2
      001495 FC               [12] 2591 	mov	r4,a
      001496 80 04            [24] 2592 	sjmp	00113$
      001498                       2593 00112$:
      001498 8D 03            [24] 2594 	mov	ar3,r5
      00149A 8E 04            [24] 2595 	mov	ar4,r6
      00149C                       2596 00113$:
      00149C 8B 82            [24] 2597 	mov	dpl,r3
      00149E 8C 83            [24] 2598 	mov	dph,r4
      0014A0 8F 24            [24] 2599 	mov	_setPixel_PARM_2,r7
      0014A2 85 4B 25         [24] 2600 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      0014A5 85 4C 26         [24] 2601 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      0014A8 C0 07            [24] 2602 	push	ar7
      0014AA C0 06            [24] 2603 	push	ar6
      0014AC C0 05            [24] 2604 	push	ar5
      0014AE 12 09 60         [24] 2605 	lcall	_setPixel
                                   2606 ;	./src/WS2812.c:290: showStrip();
      0014B1 12 08 EC         [24] 2607 	lcall	_showStrip
                                   2608 ;	./src/WS2812.c:291: _delay_ms(DELAY2);
      0014B4 85 08 16         [24] 2609 	mov	__divuint_PARM_2,_NUM_LEDS
      0014B7 85 09 17         [24] 2610 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0014BA 90 00 C8         [24] 2611 	mov	dptr,#0x00c8
      0014BD 12 19 29         [24] 2612 	lcall	__divuint
      0014C0 85 0A 16         [24] 2613 	mov	__mulint_PARM_2,__delay
      0014C3 85 0B 17         [24] 2614 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0014C6 12 1E E5         [24] 2615 	lcall	__mulint
      0014C9 75 16 64         [24] 2616 	mov	__divuint_PARM_2,#0x64
      0014CC 75 17 00         [24] 2617 	mov	(__divuint_PARM_2 + 1),#0x00
      0014CF 12 19 29         [24] 2618 	lcall	__divuint
      0014D2 E5 82            [12] 2619 	mov	a,dpl
      0014D4 85 83 F0         [24] 2620 	mov	b,dph
      0014D7 24 01            [12] 2621 	add	a,#0x01
      0014D9 FB               [12] 2622 	mov	r3,a
      0014DA E4               [12] 2623 	clr	a
      0014DB 35 F0            [12] 2624 	addc	a,b
      0014DD FC               [12] 2625 	mov	r4,a
      0014DE 8B 01            [24] 2626 	mov	ar1,r3
      0014E0 8C 02            [24] 2627 	mov	ar2,r4
      0014E2 7B 00            [12] 2628 	mov	r3,#0x00
      0014E4 7C 00            [12] 2629 	mov	r4,#0x00
      0014E6 89 82            [24] 2630 	mov	dpl,r1
      0014E8 8A 83            [24] 2631 	mov	dph,r2
      0014EA 8B F0            [24] 2632 	mov	b,r3
      0014EC EC               [12] 2633 	mov	a,r4
      0014ED 12 06 B6         [24] 2634 	lcall	__delay_ms
      0014F0 D0 05            [24] 2635 	pop	ar5
      0014F2 D0 06            [24] 2636 	pop	ar6
      0014F4 D0 07            [24] 2637 	pop	ar7
                                   2638 ;	./src/WS2812.c:285: for (int i = 0; i < (NUM_LEDS / 2); i++)
      0014F6 0D               [12] 2639 	inc	r5
      0014F7 BD 00 01         [24] 2640 	cjne	r5,#0x00,00142$
      0014FA 0E               [12] 2641 	inc	r6
      0014FB                       2642 00142$:
      0014FB 02 14 14         [24] 2643 	ljmp	00106$
      0014FE                       2644 00104$:
                                   2645 ;	./src/WS2812.c:293: _delay_ms(300);
      0014FE 90 01 2C         [24] 2646 	mov	dptr,#0x012c
      001501 E4               [12] 2647 	clr	a
      001502 F5 F0            [12] 2648 	mov	b,a
                                   2649 ;	./src/WS2812.c:294: }
      001504 02 06 B6         [24] 2650 	ljmp	__delay_ms
                                   2651 ;------------------------------------------------------------
                                   2652 ;Allocation info for local variables in function 'fadeToBlackBy'
                                   2653 ;------------------------------------------------------------
                                   2654 ;fadeBy                    Allocated with name '_fadeToBlackBy_PARM_2'
                                   2655 ;pixel                     Allocated with name '_fadeToBlackBy_pixel_65536_134'
                                   2656 ;r1                        Allocated to registers r1 
                                   2657 ;g1                        Allocated to registers r6 
                                   2658 ;b1                        Allocated to registers 
                                   2659 ;------------------------------------------------------------
                                   2660 ;	./src/WS2812.c:296: void fadeToBlackBy(uint16_t pixel, uint8_t fadeBy)
                                   2661 ;	-----------------------------------------
                                   2662 ;	 function fadeToBlackBy
                                   2663 ;	-----------------------------------------
      001507                       2664 _fadeToBlackBy:
      001507 85 82 51         [24] 2665 	mov	_fadeToBlackBy_pixel_65536_134,dpl
      00150A 85 83 52         [24] 2666 	mov	(_fadeToBlackBy_pixel_65536_134 + 1),dph
                                   2667 ;	./src/WS2812.c:301: r1 = leds[3 * pixel + 1];
      00150D 85 51 16         [24] 2668 	mov	__mulint_PARM_2,_fadeToBlackBy_pixel_65536_134
      001510 85 52 17         [24] 2669 	mov	(__mulint_PARM_2 + 1),(_fadeToBlackBy_pixel_65536_134 + 1)
      001513 90 00 03         [24] 2670 	mov	dptr,#0x0003
      001516 12 1E E5         [24] 2671 	lcall	__mulint
      001519 AC 82            [24] 2672 	mov	r4,dpl
      00151B AD 83            [24] 2673 	mov	r5,dph
      00151D 74 01            [12] 2674 	mov	a,#0x01
      00151F 2C               [12] 2675 	add	a,r4
      001520 FA               [12] 2676 	mov	r2,a
      001521 E4               [12] 2677 	clr	a
      001522 3D               [12] 2678 	addc	a,r5
      001523 FB               [12] 2679 	mov	r3,a
      001524 EA               [12] 2680 	mov	a,r2
      001525 24 01            [12] 2681 	add	a,#_leds
      001527 F5 82            [12] 2682 	mov	dpl,a
      001529 EB               [12] 2683 	mov	a,r3
      00152A 34 00            [12] 2684 	addc	a,#(_leds >> 8)
      00152C F5 83            [12] 2685 	mov	dph,a
      00152E E0               [24] 2686 	movx	a,@dptr
      00152F FB               [12] 2687 	mov	r3,a
                                   2688 ;	./src/WS2812.c:302: g1 = leds[3 * pixel];
      001530 EC               [12] 2689 	mov	a,r4
      001531 24 01            [12] 2690 	add	a,#_leds
      001533 F5 82            [12] 2691 	mov	dpl,a
      001535 ED               [12] 2692 	mov	a,r5
      001536 34 00            [12] 2693 	addc	a,#(_leds >> 8)
      001538 F5 83            [12] 2694 	mov	dph,a
      00153A E0               [24] 2695 	movx	a,@dptr
      00153B FA               [12] 2696 	mov	r2,a
                                   2697 ;	./src/WS2812.c:303: b1 = leds[3 * pixel + 2];
      00153C 74 02            [12] 2698 	mov	a,#0x02
      00153E 2C               [12] 2699 	add	a,r4
      00153F FC               [12] 2700 	mov	r4,a
      001540 E4               [12] 2701 	clr	a
      001541 3D               [12] 2702 	addc	a,r5
      001542 FD               [12] 2703 	mov	r5,a
      001543 EC               [12] 2704 	mov	a,r4
      001544 24 01            [12] 2705 	add	a,#_leds
      001546 F5 82            [12] 2706 	mov	dpl,a
      001548 ED               [12] 2707 	mov	a,r5
      001549 34 00            [12] 2708 	addc	a,#(_leds >> 8)
      00154B F5 83            [12] 2709 	mov	dph,a
      00154D E0               [24] 2710 	movx	a,@dptr
      00154E FD               [12] 2711 	mov	r5,a
                                   2712 ;	./src/WS2812.c:305: r1 = (r1 <= 12) ? 0 : (int)r1 - (r1 * fadeBy / 256);
      00154F EB               [12] 2713 	mov	a,r3
      001550 24 F3            [12] 2714 	add	a,#0xff - 0x0c
      001552 92 00            [24] 2715 	mov	_fadeToBlackBy_sloc0_1_0,c
      001554 40 06            [24] 2716 	jc	00103$
      001556 79 00            [12] 2717 	mov	r1,#0x00
      001558 7C 00            [12] 2718 	mov	r4,#0x00
      00155A 80 2E            [24] 2719 	sjmp	00104$
      00155C                       2720 00103$:
      00155C 8B 00            [24] 2721 	mov	ar0,r3
      00155E 8B F0            [24] 2722 	mov	b,r3
      001560 E5 50            [12] 2723 	mov	a,_fadeToBlackBy_PARM_2
      001562 A4               [48] 2724 	mul	ab
      001563 F5 82            [12] 2725 	mov	dpl,a
      001565 85 F0 83         [24] 2726 	mov	dph,b
      001568 75 16 00         [24] 2727 	mov	__divsint_PARM_2,#0x00
      00156B 75 17 01         [24] 2728 	mov	(__divsint_PARM_2 + 1),#0x01
      00156E C0 05            [24] 2729 	push	ar5
      001570 C0 02            [24] 2730 	push	ar2
      001572 C0 00            [24] 2731 	push	ar0
      001574 12 22 BC         [24] 2732 	lcall	__divsint
      001577 AB 82            [24] 2733 	mov	r3,dpl
      001579 AF 83            [24] 2734 	mov	r7,dph
      00157B D0 00            [24] 2735 	pop	ar0
      00157D D0 02            [24] 2736 	pop	ar2
      00157F D0 05            [24] 2737 	pop	ar5
      001581 E8               [12] 2738 	mov	a,r0
      001582 C3               [12] 2739 	clr	c
      001583 9B               [12] 2740 	subb	a,r3
      001584 F8               [12] 2741 	mov	r0,a
      001585 F9               [12] 2742 	mov	r1,a
      001586 33               [12] 2743 	rlc	a
      001587 95 E0            [12] 2744 	subb	a,acc
      001589 FC               [12] 2745 	mov	r4,a
      00158A                       2746 00104$:
                                   2747 ;	./src/WS2812.c:306: g1 = (g1 <= 12) ? 0 : (int)g1 - (g1 * fadeBy / 256);
      00158A EA               [12] 2748 	mov	a,r2
      00158B 24 F3            [12] 2749 	add	a,#0xff - 0x0c
      00158D 92 00            [24] 2750 	mov	_fadeToBlackBy_sloc0_1_0,c
      00158F 40 06            [24] 2751 	jc	00105$
      001591 7E 00            [12] 2752 	mov	r6,#0x00
      001593 7F 00            [12] 2753 	mov	r7,#0x00
      001595 80 2E            [24] 2754 	sjmp	00106$
      001597                       2755 00105$:
      001597 8A 04            [24] 2756 	mov	ar4,r2
      001599 8A F0            [24] 2757 	mov	b,r2
      00159B E5 50            [12] 2758 	mov	a,_fadeToBlackBy_PARM_2
      00159D A4               [48] 2759 	mul	ab
      00159E F5 82            [12] 2760 	mov	dpl,a
      0015A0 85 F0 83         [24] 2761 	mov	dph,b
      0015A3 75 16 00         [24] 2762 	mov	__divsint_PARM_2,#0x00
      0015A6 75 17 01         [24] 2763 	mov	(__divsint_PARM_2 + 1),#0x01
      0015A9 C0 05            [24] 2764 	push	ar5
      0015AB C0 04            [24] 2765 	push	ar4
      0015AD C0 01            [24] 2766 	push	ar1
      0015AF 12 22 BC         [24] 2767 	lcall	__divsint
      0015B2 AA 82            [24] 2768 	mov	r2,dpl
      0015B4 AB 83            [24] 2769 	mov	r3,dph
      0015B6 D0 01            [24] 2770 	pop	ar1
      0015B8 D0 04            [24] 2771 	pop	ar4
      0015BA D0 05            [24] 2772 	pop	ar5
      0015BC EC               [12] 2773 	mov	a,r4
      0015BD C3               [12] 2774 	clr	c
      0015BE 9A               [12] 2775 	subb	a,r2
      0015BF FC               [12] 2776 	mov	r4,a
      0015C0 FE               [12] 2777 	mov	r6,a
      0015C1 33               [12] 2778 	rlc	a
      0015C2 95 E0            [12] 2779 	subb	a,acc
      0015C4 FF               [12] 2780 	mov	r7,a
      0015C5                       2781 00106$:
                                   2782 ;	./src/WS2812.c:307: b1 = (b1 <= 12) ? 0 : (int)b1 - (b1 * fadeBy / 256);
      0015C5 ED               [12] 2783 	mov	a,r5
      0015C6 24 F3            [12] 2784 	add	a,#0xff - 0x0c
      0015C8 92 00            [24] 2785 	mov	_fadeToBlackBy_sloc0_1_0,c
      0015CA 40 06            [24] 2786 	jc	00107$
      0015CC 7C 00            [12] 2787 	mov	r4,#0x00
      0015CE 7F 00            [12] 2788 	mov	r7,#0x00
      0015D0 80 2E            [24] 2789 	sjmp	00108$
      0015D2                       2790 00107$:
      0015D2 8D 03            [24] 2791 	mov	ar3,r5
      0015D4 8D F0            [24] 2792 	mov	b,r5
      0015D6 E5 50            [12] 2793 	mov	a,_fadeToBlackBy_PARM_2
      0015D8 A4               [48] 2794 	mul	ab
      0015D9 F5 82            [12] 2795 	mov	dpl,a
      0015DB 85 F0 83         [24] 2796 	mov	dph,b
      0015DE 75 16 00         [24] 2797 	mov	__divsint_PARM_2,#0x00
      0015E1 75 17 01         [24] 2798 	mov	(__divsint_PARM_2 + 1),#0x01
      0015E4 C0 06            [24] 2799 	push	ar6
      0015E6 C0 03            [24] 2800 	push	ar3
      0015E8 C0 01            [24] 2801 	push	ar1
      0015EA 12 22 BC         [24] 2802 	lcall	__divsint
      0015ED AA 82            [24] 2803 	mov	r2,dpl
      0015EF AD 83            [24] 2804 	mov	r5,dph
      0015F1 D0 01            [24] 2805 	pop	ar1
      0015F3 D0 03            [24] 2806 	pop	ar3
      0015F5 D0 06            [24] 2807 	pop	ar6
      0015F7 EB               [12] 2808 	mov	a,r3
      0015F8 C3               [12] 2809 	clr	c
      0015F9 9A               [12] 2810 	subb	a,r2
      0015FA FB               [12] 2811 	mov	r3,a
      0015FB FC               [12] 2812 	mov	r4,a
      0015FC 33               [12] 2813 	rlc	a
      0015FD 95 E0            [12] 2814 	subb	a,acc
      0015FF FF               [12] 2815 	mov	r7,a
      001600                       2816 00108$:
      001600 8C 26            [24] 2817 	mov	_setPixel_PARM_4,r4
                                   2818 ;	./src/WS2812.c:309: setPixel(pixel, g1, r1, b1);
      001602 8E 24            [24] 2819 	mov	_setPixel_PARM_2,r6
      001604 89 25            [24] 2820 	mov	_setPixel_PARM_3,r1
      001606 85 51 82         [24] 2821 	mov	dpl,_fadeToBlackBy_pixel_65536_134
      001609 85 52 83         [24] 2822 	mov	dph,(_fadeToBlackBy_pixel_65536_134 + 1)
                                   2823 ;	./src/WS2812.c:310: }
      00160C 02 09 60         [24] 2824 	ljmp	_setPixel
                                   2825 ;------------------------------------------------------------
                                   2826 ;Allocation info for local variables in function 'Pattern1'
                                   2827 ;------------------------------------------------------------
                                   2828 ;r                         Allocated with name '_Pattern1_PARM_2'
                                   2829 ;b                         Allocated with name '_Pattern1_PARM_3'
                                   2830 ;g                         Allocated with name '_Pattern1_g_65536_136'
                                   2831 ;j                         Allocated to registers r2 
                                   2832 ;pixel                     Allocated to registers r7 
                                   2833 ;i                         Allocated with name '_Pattern1_i_65537_138'
                                   2834 ;------------------------------------------------------------
                                   2835 ;	./src/WS2812.c:312: void Pattern1(uint8_t g, uint8_t r, uint8_t b)
                                   2836 ;	-----------------------------------------
                                   2837 ;	 function Pattern1
                                   2838 ;	-----------------------------------------
      00160F                       2839 _Pattern1:
      00160F 85 82 55         [24] 2840 	mov	_Pattern1_g_65536_136,dpl
                                   2841 ;	./src/WS2812.c:316: curEffect = effect;
      001612 85 0C 23         [24] 2842 	mov	_curEffect,_effect
                                   2843 ;	./src/WS2812.c:317: curColor = _color;
      001615 85 0F 22         [24] 2844 	mov	_curColor,__color
                                   2845 ;	./src/WS2812.c:318: float i = 0;
      001618 E4               [12] 2846 	clr	a
      001619 F5 56            [12] 2847 	mov	_Pattern1_i_65537_138,a
      00161B F5 57            [12] 2848 	mov	(_Pattern1_i_65537_138 + 1),a
      00161D F5 58            [12] 2849 	mov	(_Pattern1_i_65537_138 + 2),a
      00161F F5 59            [12] 2850 	mov	(_Pattern1_i_65537_138 + 3),a
                                   2851 ;	./src/WS2812.c:319: while (i <= 2 * PI)
      001621                       2852 00105$:
      001621 C0 56            [24] 2853 	push	_Pattern1_i_65537_138
      001623 C0 57            [24] 2854 	push	(_Pattern1_i_65537_138 + 1)
      001625 C0 58            [24] 2855 	push	(_Pattern1_i_65537_138 + 2)
      001627 C0 59            [24] 2856 	push	(_Pattern1_i_65537_138 + 3)
      001629 90 0F DB         [24] 2857 	mov	dptr,#0x0fdb
      00162C 75 F0 C9         [24] 2858 	mov	b,#0xc9
      00162F 74 40            [12] 2859 	mov	a,#0x40
      001631 12 1E B5         [24] 2860 	lcall	___fslt
      001634 E5 81            [12] 2861 	mov	a,sp
      001636 24 FC            [12] 2862 	add	a,#0xfc
      001638 F5 81            [12] 2863 	mov	sp,a
      00163A E5 82            [12] 2864 	mov	a,dpl
      00163C 24 FF            [12] 2865 	add	a,#0xff
      00163E 92 01            [24] 2866 	mov	_Pattern1_sloc0_1_0,c
      001640 50 01            [24] 2867 	jnc	00134$
      001642 22               [24] 2868 	ret
      001643                       2869 00134$:
                                   2870 ;	./src/WS2812.c:322: for (j = 0; j < NUM_LEDS; j++)
      001643 7A 00            [12] 2871 	mov	r2,#0x00
      001645                       2872 00109$:
      001645 8A 00            [24] 2873 	mov	ar0,r2
      001647 79 00            [12] 2874 	mov	r1,#0x00
      001649 C3               [12] 2875 	clr	c
      00164A E8               [12] 2876 	mov	a,r0
      00164B 95 08            [12] 2877 	subb	a,_NUM_LEDS
      00164D E9               [12] 2878 	mov	a,r1
      00164E 95 09            [12] 2879 	subb	a,(_NUM_LEDS + 1)
      001650 50 11            [24] 2880 	jnc	00101$
                                   2881 ;	./src/WS2812.c:324: fadeToBlackBy(j, 20);
      001652 75 50 14         [24] 2882 	mov	_fadeToBlackBy_PARM_2,#0x14
      001655 88 82            [24] 2883 	mov	dpl,r0
      001657 89 83            [24] 2884 	mov	dph,r1
      001659 C0 02            [24] 2885 	push	ar2
      00165B 12 15 07         [24] 2886 	lcall	_fadeToBlackBy
      00165E D0 02            [24] 2887 	pop	ar2
                                   2888 ;	./src/WS2812.c:322: for (j = 0; j < NUM_LEDS; j++)
      001660 0A               [12] 2889 	inc	r2
      001661 80 E2            [24] 2890 	sjmp	00109$
      001663                       2891 00101$:
                                   2892 ;	./src/WS2812.c:326: pixel = (uint8_t)(NUM_LEDS / 2 * (cosf(i) + 1));
      001663 A9 08            [24] 2893 	mov	r1,_NUM_LEDS
      001665 E5 09            [12] 2894 	mov	a,(_NUM_LEDS + 1)
      001667 C3               [12] 2895 	clr	c
      001668 13               [12] 2896 	rrc	a
      001669 C9               [12] 2897 	xch	a,r1
      00166A 13               [12] 2898 	rrc	a
      00166B C9               [12] 2899 	xch	a,r1
      00166C FA               [12] 2900 	mov	r2,a
      00166D 85 56 82         [24] 2901 	mov	dpl,_Pattern1_i_65537_138
      001670 85 57 83         [24] 2902 	mov	dph,(_Pattern1_i_65537_138 + 1)
      001673 85 58 F0         [24] 2903 	mov	b,(_Pattern1_i_65537_138 + 2)
      001676 E5 59            [12] 2904 	mov	a,(_Pattern1_i_65537_138 + 3)
      001678 C0 02            [24] 2905 	push	ar2
      00167A C0 01            [24] 2906 	push	ar1
      00167C 12 1A 56         [24] 2907 	lcall	_cosf
      00167F A8 82            [24] 2908 	mov	r0,dpl
      001681 AD 83            [24] 2909 	mov	r5,dph
      001683 AE F0            [24] 2910 	mov	r6,b
      001685 FF               [12] 2911 	mov	r7,a
      001686 E4               [12] 2912 	clr	a
      001687 C0 E0            [24] 2913 	push	acc
      001689 C0 E0            [24] 2914 	push	acc
      00168B 74 80            [12] 2915 	mov	a,#0x80
      00168D C0 E0            [24] 2916 	push	acc
      00168F 74 3F            [12] 2917 	mov	a,#0x3f
      001691 C0 E0            [24] 2918 	push	acc
      001693 88 82            [24] 2919 	mov	dpl,r0
      001695 8D 83            [24] 2920 	mov	dph,r5
      001697 8E F0            [24] 2921 	mov	b,r6
      001699 EF               [12] 2922 	mov	a,r7
      00169A 12 1F BD         [24] 2923 	lcall	___fsadd
      00169D AC 82            [24] 2924 	mov	r4,dpl
      00169F AD 83            [24] 2925 	mov	r5,dph
      0016A1 AE F0            [24] 2926 	mov	r6,b
      0016A3 FF               [12] 2927 	mov	r7,a
      0016A4 E5 81            [12] 2928 	mov	a,sp
      0016A6 24 FC            [12] 2929 	add	a,#0xfc
      0016A8 F5 81            [12] 2930 	mov	sp,a
      0016AA D0 01            [24] 2931 	pop	ar1
      0016AC D0 02            [24] 2932 	pop	ar2
      0016AE 89 82            [24] 2933 	mov	dpl,r1
      0016B0 8A 83            [24] 2934 	mov	dph,r2
      0016B2 C0 07            [24] 2935 	push	ar7
      0016B4 C0 06            [24] 2936 	push	ar6
      0016B6 C0 05            [24] 2937 	push	ar5
      0016B8 C0 04            [24] 2938 	push	ar4
      0016BA 12 20 FB         [24] 2939 	lcall	___uint2fs
      0016BD A8 82            [24] 2940 	mov	r0,dpl
      0016BF A9 83            [24] 2941 	mov	r1,dph
      0016C1 AA F0            [24] 2942 	mov	r2,b
      0016C3 FB               [12] 2943 	mov	r3,a
      0016C4 D0 04            [24] 2944 	pop	ar4
      0016C6 D0 05            [24] 2945 	pop	ar5
      0016C8 D0 06            [24] 2946 	pop	ar6
      0016CA D0 07            [24] 2947 	pop	ar7
      0016CC C0 04            [24] 2948 	push	ar4
      0016CE C0 05            [24] 2949 	push	ar5
      0016D0 C0 06            [24] 2950 	push	ar6
      0016D2 C0 07            [24] 2951 	push	ar7
      0016D4 88 82            [24] 2952 	mov	dpl,r0
      0016D6 89 83            [24] 2953 	mov	dph,r1
      0016D8 8A F0            [24] 2954 	mov	b,r2
      0016DA EB               [12] 2955 	mov	a,r3
      0016DB 12 19 52         [24] 2956 	lcall	___fsmul
      0016DE AC 82            [24] 2957 	mov	r4,dpl
      0016E0 AD 83            [24] 2958 	mov	r5,dph
      0016E2 AE F0            [24] 2959 	mov	r6,b
      0016E4 FF               [12] 2960 	mov	r7,a
      0016E5 E5 81            [12] 2961 	mov	a,sp
      0016E7 24 FC            [12] 2962 	add	a,#0xfc
      0016E9 F5 81            [12] 2963 	mov	sp,a
      0016EB 8C 82            [24] 2964 	mov	dpl,r4
      0016ED 8D 83            [24] 2965 	mov	dph,r5
      0016EF 8E F0            [24] 2966 	mov	b,r6
      0016F1 EF               [12] 2967 	mov	a,r7
      0016F2 12 22 3E         [24] 2968 	lcall	___fs2uchar
      0016F5 AF 82            [24] 2969 	mov	r7,dpl
                                   2970 ;	./src/WS2812.c:327: i += 0.01;
      0016F7 C0 07            [24] 2971 	push	ar7
      0016F9 74 0A            [12] 2972 	mov	a,#0x0a
      0016FB C0 E0            [24] 2973 	push	acc
      0016FD 74 D7            [12] 2974 	mov	a,#0xd7
      0016FF C0 E0            [24] 2975 	push	acc
      001701 74 23            [12] 2976 	mov	a,#0x23
      001703 C0 E0            [24] 2977 	push	acc
      001705 74 3C            [12] 2978 	mov	a,#0x3c
      001707 C0 E0            [24] 2979 	push	acc
      001709 85 56 82         [24] 2980 	mov	dpl,_Pattern1_i_65537_138
      00170C 85 57 83         [24] 2981 	mov	dph,(_Pattern1_i_65537_138 + 1)
      00170F 85 58 F0         [24] 2982 	mov	b,(_Pattern1_i_65537_138 + 2)
      001712 E5 59            [12] 2983 	mov	a,(_Pattern1_i_65537_138 + 3)
      001714 12 1F BD         [24] 2984 	lcall	___fsadd
      001717 85 82 56         [24] 2985 	mov	_Pattern1_i_65537_138,dpl
      00171A 85 83 57         [24] 2986 	mov	(_Pattern1_i_65537_138 + 1),dph
      00171D 85 F0 58         [24] 2987 	mov	(_Pattern1_i_65537_138 + 2),b
      001720 F5 59            [12] 2988 	mov	(_Pattern1_i_65537_138 + 3),a
      001722 E5 81            [12] 2989 	mov	a,sp
      001724 24 FC            [12] 2990 	add	a,#0xfc
      001726 F5 81            [12] 2991 	mov	sp,a
                                   2992 ;	./src/WS2812.c:328: _delay_us(DELAY);
      001728 85 08 16         [24] 2993 	mov	__divuint_PARM_2,_NUM_LEDS
      00172B 85 09 17         [24] 2994 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00172E 90 00 C8         [24] 2995 	mov	dptr,#0x00c8
      001731 12 19 29         [24] 2996 	lcall	__divuint
      001734 85 0A 16         [24] 2997 	mov	__mulint_PARM_2,__delay
      001737 85 0B 17         [24] 2998 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00173A 12 1E E5         [24] 2999 	lcall	__mulint
      00173D 75 16 0A         [24] 3000 	mov	__divuint_PARM_2,#0x0a
      001740 75 17 00         [24] 3001 	mov	(__divuint_PARM_2 + 1),#0x00
      001743 12 19 29         [24] 3002 	lcall	__divuint
      001746 E5 82            [12] 3003 	mov	a,dpl
      001748 85 83 F0         [24] 3004 	mov	b,dph
      00174B 24 01            [12] 3005 	add	a,#0x01
      00174D FD               [12] 3006 	mov	r5,a
      00174E E4               [12] 3007 	clr	a
      00174F 35 F0            [12] 3008 	addc	a,b
      001751 FE               [12] 3009 	mov	r6,a
      001752 7C 00            [12] 3010 	mov	r4,#0x00
      001754 7B 00            [12] 3011 	mov	r3,#0x00
      001756 8D 82            [24] 3012 	mov	dpl,r5
      001758 8E 83            [24] 3013 	mov	dph,r6
      00175A 8C F0            [24] 3014 	mov	b,r4
      00175C EB               [12] 3015 	mov	a,r3
      00175D 12 06 F0         [24] 3016 	lcall	__delay_us
      001760 D0 07            [24] 3017 	pop	ar7
                                   3018 ;	./src/WS2812.c:330: setPixel(pixel, g, r, b);
      001762 7E 00            [12] 3019 	mov	r6,#0x00
      001764 85 55 24         [24] 3020 	mov	_setPixel_PARM_2,_Pattern1_g_65536_136
      001767 85 53 25         [24] 3021 	mov	_setPixel_PARM_3,_Pattern1_PARM_2
      00176A 85 54 26         [24] 3022 	mov	_setPixel_PARM_4,_Pattern1_PARM_3
      00176D 8F 82            [24] 3023 	mov	dpl,r7
      00176F 8E 83            [24] 3024 	mov	dph,r6
      001771 12 09 60         [24] 3025 	lcall	_setPixel
                                   3026 ;	./src/WS2812.c:332: showStrip();
      001774 12 08 EC         [24] 3027 	lcall	_showStrip
                                   3028 ;	./src/WS2812.c:333: CHECK_EFF;
      001777 E5 0C            [12] 3029 	mov	a,_effect
      001779 B5 23 08         [24] 3030 	cjne	a,_curEffect,00102$
      00177C E5 0F            [12] 3031 	mov	a,__color
      00177E B5 22 03         [24] 3032 	cjne	a,_curColor,00138$
      001781 02 16 21         [24] 3033 	ljmp	00105$
      001784                       3034 00138$:
      001784                       3035 00102$:
      001784 75 0D 12         [24] 3036 	mov	__status,#0x12
                                   3037 ;	./src/WS2812.c:335: }
      001787 22               [24] 3038 	ret
                                   3039 ;------------------------------------------------------------
                                   3040 ;Allocation info for local variables in function 'Pattern2'
                                   3041 ;------------------------------------------------------------
                                   3042 ;r                         Allocated with name '_Pattern2_PARM_2'
                                   3043 ;b                         Allocated with name '_Pattern2_PARM_3'
                                   3044 ;g2                        Allocated with name '_Pattern2_PARM_4'
                                   3045 ;r2                        Allocated with name '_Pattern2_PARM_5'
                                   3046 ;b2                        Allocated with name '_Pattern2_PARM_6'
                                   3047 ;g                         Allocated with name '_Pattern2_g_65536_143'
                                   3048 ;j                         Allocated to registers r2 
                                   3049 ;pixel                     Allocated to registers r7 
                                   3050 ;i                         Allocated with name '_Pattern2_i_65537_145'
                                   3051 ;------------------------------------------------------------
                                   3052 ;	./src/WS2812.c:336: void Pattern2(uint8_t g, uint8_t r, uint8_t b, uint8_t g2, uint8_t r2, uint8_t b2)
                                   3053 ;	-----------------------------------------
                                   3054 ;	 function Pattern2
                                   3055 ;	-----------------------------------------
      001788                       3056 _Pattern2:
      001788 85 82 5F         [24] 3057 	mov	_Pattern2_g_65536_143,dpl
                                   3058 ;	./src/WS2812.c:340: curEffect = effect;
      00178B 85 0C 23         [24] 3059 	mov	_curEffect,_effect
                                   3060 ;	./src/WS2812.c:341: curColor = _color;
      00178E 85 0F 22         [24] 3061 	mov	_curColor,__color
                                   3062 ;	./src/WS2812.c:342: float i = 0;
      001791 E4               [12] 3063 	clr	a
      001792 F5 60            [12] 3064 	mov	_Pattern2_i_65537_145,a
      001794 F5 61            [12] 3065 	mov	(_Pattern2_i_65537_145 + 1),a
      001796 F5 62            [12] 3066 	mov	(_Pattern2_i_65537_145 + 2),a
      001798 F5 63            [12] 3067 	mov	(_Pattern2_i_65537_145 + 3),a
                                   3068 ;	./src/WS2812.c:343: while (i <= 2 * PI)
      00179A                       3069 00105$:
      00179A C0 60            [24] 3070 	push	_Pattern2_i_65537_145
      00179C C0 61            [24] 3071 	push	(_Pattern2_i_65537_145 + 1)
      00179E C0 62            [24] 3072 	push	(_Pattern2_i_65537_145 + 2)
      0017A0 C0 63            [24] 3073 	push	(_Pattern2_i_65537_145 + 3)
      0017A2 90 0F DB         [24] 3074 	mov	dptr,#0x0fdb
      0017A5 75 F0 C9         [24] 3075 	mov	b,#0xc9
      0017A8 74 40            [12] 3076 	mov	a,#0x40
      0017AA 12 1E B5         [24] 3077 	lcall	___fslt
      0017AD E5 81            [12] 3078 	mov	a,sp
      0017AF 24 FC            [12] 3079 	add	a,#0xfc
      0017B1 F5 81            [12] 3080 	mov	sp,a
      0017B3 E5 82            [12] 3081 	mov	a,dpl
      0017B5 24 FF            [12] 3082 	add	a,#0xff
      0017B7 92 02            [24] 3083 	mov	_Pattern2_sloc0_1_0,c
      0017B9 50 01            [24] 3084 	jnc	00134$
      0017BB 22               [24] 3085 	ret
      0017BC                       3086 00134$:
                                   3087 ;	./src/WS2812.c:346: for (j = 0; j < NUM_LEDS; j++)
      0017BC 7A 00            [12] 3088 	mov	r2,#0x00
      0017BE                       3089 00109$:
      0017BE 8A 00            [24] 3090 	mov	ar0,r2
      0017C0 79 00            [12] 3091 	mov	r1,#0x00
      0017C2 C3               [12] 3092 	clr	c
      0017C3 E8               [12] 3093 	mov	a,r0
      0017C4 95 08            [12] 3094 	subb	a,_NUM_LEDS
      0017C6 E9               [12] 3095 	mov	a,r1
      0017C7 95 09            [12] 3096 	subb	a,(_NUM_LEDS + 1)
      0017C9 50 11            [24] 3097 	jnc	00101$
                                   3098 ;	./src/WS2812.c:348: fadeToBlackBy(j, 20);
      0017CB 75 50 14         [24] 3099 	mov	_fadeToBlackBy_PARM_2,#0x14
      0017CE 88 82            [24] 3100 	mov	dpl,r0
      0017D0 89 83            [24] 3101 	mov	dph,r1
      0017D2 C0 02            [24] 3102 	push	ar2
      0017D4 12 15 07         [24] 3103 	lcall	_fadeToBlackBy
      0017D7 D0 02            [24] 3104 	pop	ar2
                                   3105 ;	./src/WS2812.c:346: for (j = 0; j < NUM_LEDS; j++)
      0017D9 0A               [12] 3106 	inc	r2
      0017DA 80 E2            [24] 3107 	sjmp	00109$
      0017DC                       3108 00101$:
                                   3109 ;	./src/WS2812.c:350: pixel = (uint8_t)(NUM_LEDS / 2 * (cosf(i) + 1));
      0017DC A9 08            [24] 3110 	mov	r1,_NUM_LEDS
      0017DE E5 09            [12] 3111 	mov	a,(_NUM_LEDS + 1)
      0017E0 C3               [12] 3112 	clr	c
      0017E1 13               [12] 3113 	rrc	a
      0017E2 C9               [12] 3114 	xch	a,r1
      0017E3 13               [12] 3115 	rrc	a
      0017E4 C9               [12] 3116 	xch	a,r1
      0017E5 FA               [12] 3117 	mov	r2,a
      0017E6 85 60 82         [24] 3118 	mov	dpl,_Pattern2_i_65537_145
      0017E9 85 61 83         [24] 3119 	mov	dph,(_Pattern2_i_65537_145 + 1)
      0017EC 85 62 F0         [24] 3120 	mov	b,(_Pattern2_i_65537_145 + 2)
      0017EF E5 63            [12] 3121 	mov	a,(_Pattern2_i_65537_145 + 3)
      0017F1 C0 02            [24] 3122 	push	ar2
      0017F3 C0 01            [24] 3123 	push	ar1
      0017F5 12 1A 56         [24] 3124 	lcall	_cosf
      0017F8 A8 82            [24] 3125 	mov	r0,dpl
      0017FA AD 83            [24] 3126 	mov	r5,dph
      0017FC AE F0            [24] 3127 	mov	r6,b
      0017FE FF               [12] 3128 	mov	r7,a
      0017FF E4               [12] 3129 	clr	a
      001800 C0 E0            [24] 3130 	push	acc
      001802 C0 E0            [24] 3131 	push	acc
      001804 74 80            [12] 3132 	mov	a,#0x80
      001806 C0 E0            [24] 3133 	push	acc
      001808 74 3F            [12] 3134 	mov	a,#0x3f
      00180A C0 E0            [24] 3135 	push	acc
      00180C 88 82            [24] 3136 	mov	dpl,r0
      00180E 8D 83            [24] 3137 	mov	dph,r5
      001810 8E F0            [24] 3138 	mov	b,r6
      001812 EF               [12] 3139 	mov	a,r7
      001813 12 1F BD         [24] 3140 	lcall	___fsadd
      001816 AC 82            [24] 3141 	mov	r4,dpl
      001818 AD 83            [24] 3142 	mov	r5,dph
      00181A AE F0            [24] 3143 	mov	r6,b
      00181C FF               [12] 3144 	mov	r7,a
      00181D E5 81            [12] 3145 	mov	a,sp
      00181F 24 FC            [12] 3146 	add	a,#0xfc
      001821 F5 81            [12] 3147 	mov	sp,a
      001823 D0 01            [24] 3148 	pop	ar1
      001825 D0 02            [24] 3149 	pop	ar2
      001827 89 82            [24] 3150 	mov	dpl,r1
      001829 8A 83            [24] 3151 	mov	dph,r2
      00182B C0 07            [24] 3152 	push	ar7
      00182D C0 06            [24] 3153 	push	ar6
      00182F C0 05            [24] 3154 	push	ar5
      001831 C0 04            [24] 3155 	push	ar4
      001833 12 20 FB         [24] 3156 	lcall	___uint2fs
      001836 A8 82            [24] 3157 	mov	r0,dpl
      001838 A9 83            [24] 3158 	mov	r1,dph
      00183A AA F0            [24] 3159 	mov	r2,b
      00183C FB               [12] 3160 	mov	r3,a
      00183D D0 04            [24] 3161 	pop	ar4
      00183F D0 05            [24] 3162 	pop	ar5
      001841 D0 06            [24] 3163 	pop	ar6
      001843 D0 07            [24] 3164 	pop	ar7
      001845 C0 04            [24] 3165 	push	ar4
      001847 C0 05            [24] 3166 	push	ar5
      001849 C0 06            [24] 3167 	push	ar6
      00184B C0 07            [24] 3168 	push	ar7
      00184D 88 82            [24] 3169 	mov	dpl,r0
      00184F 89 83            [24] 3170 	mov	dph,r1
      001851 8A F0            [24] 3171 	mov	b,r2
      001853 EB               [12] 3172 	mov	a,r3
      001854 12 19 52         [24] 3173 	lcall	___fsmul
      001857 AC 82            [24] 3174 	mov	r4,dpl
      001859 AD 83            [24] 3175 	mov	r5,dph
      00185B AE F0            [24] 3176 	mov	r6,b
      00185D FF               [12] 3177 	mov	r7,a
      00185E E5 81            [12] 3178 	mov	a,sp
      001860 24 FC            [12] 3179 	add	a,#0xfc
      001862 F5 81            [12] 3180 	mov	sp,a
      001864 8C 82            [24] 3181 	mov	dpl,r4
      001866 8D 83            [24] 3182 	mov	dph,r5
      001868 8E F0            [24] 3183 	mov	b,r6
      00186A EF               [12] 3184 	mov	a,r7
      00186B 12 22 3E         [24] 3185 	lcall	___fs2uchar
      00186E AF 82            [24] 3186 	mov	r7,dpl
                                   3187 ;	./src/WS2812.c:351: i += 0.01;
      001870 C0 07            [24] 3188 	push	ar7
      001872 74 0A            [12] 3189 	mov	a,#0x0a
      001874 C0 E0            [24] 3190 	push	acc
      001876 74 D7            [12] 3191 	mov	a,#0xd7
      001878 C0 E0            [24] 3192 	push	acc
      00187A 74 23            [12] 3193 	mov	a,#0x23
      00187C C0 E0            [24] 3194 	push	acc
      00187E 74 3C            [12] 3195 	mov	a,#0x3c
      001880 C0 E0            [24] 3196 	push	acc
      001882 85 60 82         [24] 3197 	mov	dpl,_Pattern2_i_65537_145
      001885 85 61 83         [24] 3198 	mov	dph,(_Pattern2_i_65537_145 + 1)
      001888 85 62 F0         [24] 3199 	mov	b,(_Pattern2_i_65537_145 + 2)
      00188B E5 63            [12] 3200 	mov	a,(_Pattern2_i_65537_145 + 3)
      00188D 12 1F BD         [24] 3201 	lcall	___fsadd
      001890 85 82 60         [24] 3202 	mov	_Pattern2_i_65537_145,dpl
      001893 85 83 61         [24] 3203 	mov	(_Pattern2_i_65537_145 + 1),dph
      001896 85 F0 62         [24] 3204 	mov	(_Pattern2_i_65537_145 + 2),b
      001899 F5 63            [12] 3205 	mov	(_Pattern2_i_65537_145 + 3),a
      00189B E5 81            [12] 3206 	mov	a,sp
      00189D 24 FC            [12] 3207 	add	a,#0xfc
      00189F F5 81            [12] 3208 	mov	sp,a
                                   3209 ;	./src/WS2812.c:352: _delay_ms(DELAY);
      0018A1 85 08 16         [24] 3210 	mov	__divuint_PARM_2,_NUM_LEDS
      0018A4 85 09 17         [24] 3211 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0018A7 90 00 C8         [24] 3212 	mov	dptr,#0x00c8
      0018AA 12 19 29         [24] 3213 	lcall	__divuint
      0018AD 85 0A 16         [24] 3214 	mov	__mulint_PARM_2,__delay
      0018B0 85 0B 17         [24] 3215 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0018B3 12 1E E5         [24] 3216 	lcall	__mulint
      0018B6 75 16 0A         [24] 3217 	mov	__divuint_PARM_2,#0x0a
      0018B9 75 17 00         [24] 3218 	mov	(__divuint_PARM_2 + 1),#0x00
      0018BC 12 19 29         [24] 3219 	lcall	__divuint
      0018BF E5 82            [12] 3220 	mov	a,dpl
      0018C1 85 83 F0         [24] 3221 	mov	b,dph
      0018C4 24 01            [12] 3222 	add	a,#0x01
      0018C6 FD               [12] 3223 	mov	r5,a
      0018C7 E4               [12] 3224 	clr	a
      0018C8 35 F0            [12] 3225 	addc	a,b
      0018CA FE               [12] 3226 	mov	r6,a
      0018CB 7C 00            [12] 3227 	mov	r4,#0x00
      0018CD 7B 00            [12] 3228 	mov	r3,#0x00
      0018CF 8D 82            [24] 3229 	mov	dpl,r5
      0018D1 8E 83            [24] 3230 	mov	dph,r6
      0018D3 8C F0            [24] 3231 	mov	b,r4
      0018D5 EB               [12] 3232 	mov	a,r3
      0018D6 12 06 B6         [24] 3233 	lcall	__delay_ms
      0018D9 D0 07            [24] 3234 	pop	ar7
                                   3235 ;	./src/WS2812.c:354: setPixel(pixel, g, r, b);
      0018DB 8F 05            [24] 3236 	mov	ar5,r7
      0018DD 7E 00            [12] 3237 	mov	r6,#0x00
      0018DF 85 5F 24         [24] 3238 	mov	_setPixel_PARM_2,_Pattern2_g_65536_143
      0018E2 85 5A 25         [24] 3239 	mov	_setPixel_PARM_3,_Pattern2_PARM_2
      0018E5 85 5B 26         [24] 3240 	mov	_setPixel_PARM_4,_Pattern2_PARM_3
      0018E8 8D 82            [24] 3241 	mov	dpl,r5
      0018EA 8E 83            [24] 3242 	mov	dph,r6
      0018EC C0 07            [24] 3243 	push	ar7
      0018EE 12 09 60         [24] 3244 	lcall	_setPixel
      0018F1 D0 07            [24] 3245 	pop	ar7
                                   3246 ;	./src/WS2812.c:355: setPixel(NUM_LEDS - 1 - pixel, g2, r2, b2);
      0018F3 AD 08            [24] 3247 	mov	r5,_NUM_LEDS
      0018F5 AE 09            [24] 3248 	mov	r6,(_NUM_LEDS + 1)
      0018F7 1D               [12] 3249 	dec	r5
      0018F8 BD FF 01         [24] 3250 	cjne	r5,#0xff,00136$
      0018FB 1E               [12] 3251 	dec	r6
      0018FC                       3252 00136$:
      0018FC 7C 00            [12] 3253 	mov	r4,#0x00
      0018FE ED               [12] 3254 	mov	a,r5
      0018FF C3               [12] 3255 	clr	c
      001900 9F               [12] 3256 	subb	a,r7
      001901 FD               [12] 3257 	mov	r5,a
      001902 EE               [12] 3258 	mov	a,r6
      001903 9C               [12] 3259 	subb	a,r4
      001904 FE               [12] 3260 	mov	r6,a
      001905 8D 82            [24] 3261 	mov	dpl,r5
      001907 8E 83            [24] 3262 	mov	dph,r6
      001909 85 5C 24         [24] 3263 	mov	_setPixel_PARM_2,_Pattern2_PARM_4
      00190C 85 5D 25         [24] 3264 	mov	_setPixel_PARM_3,_Pattern2_PARM_5
      00190F 85 5E 26         [24] 3265 	mov	_setPixel_PARM_4,_Pattern2_PARM_6
      001912 12 09 60         [24] 3266 	lcall	_setPixel
                                   3267 ;	./src/WS2812.c:356: showStrip();
      001915 12 08 EC         [24] 3268 	lcall	_showStrip
                                   3269 ;	./src/WS2812.c:357: CHECK_EFF;
      001918 E5 0C            [12] 3270 	mov	a,_effect
      00191A B5 23 08         [24] 3271 	cjne	a,_curEffect,00102$
      00191D E5 0F            [12] 3272 	mov	a,__color
      00191F B5 22 03         [24] 3273 	cjne	a,_curColor,00139$
      001922 02 17 9A         [24] 3274 	ljmp	00105$
      001925                       3275 00139$:
      001925                       3276 00102$:
      001925 75 0D 12         [24] 3277 	mov	__status,#0x12
                                   3278 ;	./src/WS2812.c:359: }
      001928 22               [24] 3279 	ret
                                   3280 	.area CSEG    (CODE)
                                   3281 	.area CONST   (CODE)
                                   3282 	.area XINIT   (CODE)
                                   3283 	.area CABS    (ABS,CODE)
