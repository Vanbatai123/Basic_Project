                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module WS2812
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LED__SendByte_
                                     12 	.globl _LED__SendOne_
                                     13 	.globl _LED__SendZero_
                                     14 	.globl _eiph1
                                     15 	.globl _eip1
                                     16 	.globl _pmd
                                     17 	.globl _pmen
                                     18 	.globl _pdtcnt
                                     19 	.globl _pdten
                                     20 	.globl _scon_1
                                     21 	.globl _eiph
                                     22 	.globl _aindids
                                     23 	.globl _spdr
                                     24 	.globl _spsr
                                     25 	.globl _spcr2
                                     26 	.globl _spcr
                                     27 	.globl _capcon4
                                     28 	.globl _capcon3
                                     29 	.globl _b
                                     30 	.globl _eip
                                     31 	.globl _c2h
                                     32 	.globl _c2l
                                     33 	.globl _pif
                                     34 	.globl _pipen
                                     35 	.globl _pinen
                                     36 	.globl _picon
                                     37 	.globl _adccon0
                                     38 	.globl _c1h
                                     39 	.globl _c1l
                                     40 	.globl _c0h
                                     41 	.globl _c0l
                                     42 	.globl _adcdly
                                     43 	.globl _adccon2
                                     44 	.globl _adccon1
                                     45 	.globl _acc
                                     46 	.globl _pwmcon1
                                     47 	.globl _piocon0
                                     48 	.globl _pwm3l
                                     49 	.globl _pwm2l
                                     50 	.globl _pwm1l
                                     51 	.globl _pwm0l
                                     52 	.globl _pwmpl
                                     53 	.globl _pwmcon0
                                     54 	.globl _fbd
                                     55 	.globl _pnp
                                     56 	.globl _pwm3h
                                     57 	.globl _pwm2h
                                     58 	.globl _pwm1h
                                     59 	.globl _pwm0h
                                     60 	.globl _pwmph
                                     61 	.globl _psw
                                     62 	.globl _adcmph
                                     63 	.globl _adcmpl
                                     64 	.globl _pwm5l
                                     65 	.globl _th2
                                     66 	.globl _pwm4l
                                     67 	.globl _tl2
                                     68 	.globl _rcmp2h
                                     69 	.globl _rcmp2l
                                     70 	.globl _t2mod
                                     71 	.globl _t2con
                                     72 	.globl _ta
                                     73 	.globl _piocon1
                                     74 	.globl _rh3
                                     75 	.globl _pwm5h
                                     76 	.globl _rl3
                                     77 	.globl _pwm4h
                                     78 	.globl _t3con
                                     79 	.globl _adcrh
                                     80 	.globl _adcrl
                                     81 	.globl _i2addr
                                     82 	.globl _i2con
                                     83 	.globl _i2toc
                                     84 	.globl _i2clk
                                     85 	.globl _i2stat
                                     86 	.globl _i2dat
                                     87 	.globl _saddr_1
                                     88 	.globl _saden_1
                                     89 	.globl _saden
                                     90 	.globl _ip
                                     91 	.globl _pwmintc
                                     92 	.globl _iph
                                     93 	.globl _p2s
                                     94 	.globl _p1sr
                                     95 	.globl _p1m2
                                     96 	.globl _p1s
                                     97 	.globl _p1m1
                                     98 	.globl _p0sr
                                     99 	.globl _p0m2
                                    100 	.globl _p0s
                                    101 	.globl _p0m1
                                    102 	.globl _p3
                                    103 	.globl _iapcn
                                    104 	.globl _iapfd
                                    105 	.globl _p3sr
                                    106 	.globl _p3m2
                                    107 	.globl _p3s
                                    108 	.globl _p3m1
                                    109 	.globl _bodcon1
                                    110 	.globl _wdcon
                                    111 	.globl _saddr
                                    112 	.globl _ie
                                    113 	.globl _iapah
                                    114 	.globl _iapal
                                    115 	.globl _iapuen
                                    116 	.globl _iaptrg
                                    117 	.globl _bodcon0
                                    118 	.globl _auxr1
                                    119 	.globl _p2
                                    120 	.globl _chpcon
                                    121 	.globl _eie1
                                    122 	.globl _eie
                                    123 	.globl _sbuf_1
                                    124 	.globl _sbuf
                                    125 	.globl _scon
                                    126 	.globl _cken
                                    127 	.globl _ckswt
                                    128 	.globl _ckdiv
                                    129 	.globl _capcon2
                                    130 	.globl _capcon1
                                    131 	.globl _capcon0
                                    132 	.globl _sfrs
                                    133 	.globl _p1
                                    134 	.globl _wkcon
                                    135 	.globl _ckcon
                                    136 	.globl _th1
                                    137 	.globl _th0
                                    138 	.globl _tl1
                                    139 	.globl _tl0
                                    140 	.globl _tmod
                                    141 	.globl _tcon
                                    142 	.globl _pcon
                                    143 	.globl _rwk
                                    144 	.globl _rctrim1
                                    145 	.globl _rctrim0
                                    146 	.globl _dph
                                    147 	.globl _dpl
                                    148 	.globl _sp
                                    149 	.globl _p0
                                    150 	.globl _setAll_PARM_3
                                    151 	.globl _setAll_PARM_2
                                    152 	.globl _setPixel_PARM_4
                                    153 	.globl _setPixel_PARM_3
                                    154 	.globl _setPixel_PARM_2
                                    155 	.globl _curEffect
                                    156 	.globl _curColor
                                    157 	.globl _clearAll
                                    158 	.globl _showStrip
                                    159 	.globl _setPixel
                                    160 	.globl _setAll
                                    161 ;--------------------------------------------------------
                                    162 ; special function registers
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           000080   166 _p0	=	0x0080
                           000081   167 _sp	=	0x0081
                           000082   168 _dpl	=	0x0082
                           000083   169 _dph	=	0x0083
                           000084   170 _rctrim0	=	0x0084
                           000085   171 _rctrim1	=	0x0085
                           000086   172 _rwk	=	0x0086
                           000087   173 _pcon	=	0x0087
                           000088   174 _tcon	=	0x0088
                           000089   175 _tmod	=	0x0089
                           00008A   176 _tl0	=	0x008a
                           00008B   177 _tl1	=	0x008b
                           00008C   178 _th0	=	0x008c
                           00008D   179 _th1	=	0x008d
                           00008E   180 _ckcon	=	0x008e
                           00008F   181 _wkcon	=	0x008f
                           000090   182 _p1	=	0x0090
                           000091   183 _sfrs	=	0x0091
                           000092   184 _capcon0	=	0x0092
                           000093   185 _capcon1	=	0x0093
                           000094   186 _capcon2	=	0x0094
                           000095   187 _ckdiv	=	0x0095
                           000096   188 _ckswt	=	0x0096
                           000097   189 _cken	=	0x0097
                           000098   190 _scon	=	0x0098
                           000099   191 _sbuf	=	0x0099
                           00009A   192 _sbuf_1	=	0x009a
                           00009B   193 _eie	=	0x009b
                           00009C   194 _eie1	=	0x009c
                           00009F   195 _chpcon	=	0x009f
                           0000A0   196 _p2	=	0x00a0
                           0000A2   197 _auxr1	=	0x00a2
                           0000A3   198 _bodcon0	=	0x00a3
                           0000A4   199 _iaptrg	=	0x00a4
                           0000A5   200 _iapuen	=	0x00a5
                           0000A6   201 _iapal	=	0x00a6
                           0000A7   202 _iapah	=	0x00a7
                           0000A8   203 _ie	=	0x00a8
                           0000A9   204 _saddr	=	0x00a9
                           0000AA   205 _wdcon	=	0x00aa
                           0000AB   206 _bodcon1	=	0x00ab
                           0000AC   207 _p3m1	=	0x00ac
                           0000AC   208 _p3s	=	0x00ac
                           0000AD   209 _p3m2	=	0x00ad
                           0000AD   210 _p3sr	=	0x00ad
                           0000AE   211 _iapfd	=	0x00ae
                           0000AF   212 _iapcn	=	0x00af
                           0000B0   213 _p3	=	0x00b0
                           0000B1   214 _p0m1	=	0x00b1
                           0000B1   215 _p0s	=	0x00b1
                           0000B2   216 _p0m2	=	0x00b2
                           0000B2   217 _p0sr	=	0x00b2
                           0000B3   218 _p1m1	=	0x00b3
                           0000B3   219 _p1s	=	0x00b3
                           0000B4   220 _p1m2	=	0x00b4
                           0000B4   221 _p1sr	=	0x00b4
                           0000B5   222 _p2s	=	0x00b5
                           0000B7   223 _iph	=	0x00b7
                           0000B7   224 _pwmintc	=	0x00b7
                           0000B8   225 _ip	=	0x00b8
                           0000B9   226 _saden	=	0x00b9
                           0000BA   227 _saden_1	=	0x00ba
                           0000BB   228 _saddr_1	=	0x00bb
                           0000BC   229 _i2dat	=	0x00bc
                           0000BD   230 _i2stat	=	0x00bd
                           0000BE   231 _i2clk	=	0x00be
                           0000BF   232 _i2toc	=	0x00bf
                           0000C0   233 _i2con	=	0x00c0
                           0000C1   234 _i2addr	=	0x00c1
                           0000C2   235 _adcrl	=	0x00c2
                           0000C3   236 _adcrh	=	0x00c3
                           0000C4   237 _t3con	=	0x00c4
                           0000C4   238 _pwm4h	=	0x00c4
                           0000C5   239 _rl3	=	0x00c5
                           0000C5   240 _pwm5h	=	0x00c5
                           0000C6   241 _rh3	=	0x00c6
                           0000C6   242 _piocon1	=	0x00c6
                           0000C7   243 _ta	=	0x00c7
                           0000C8   244 _t2con	=	0x00c8
                           0000C9   245 _t2mod	=	0x00c9
                           0000CA   246 _rcmp2l	=	0x00ca
                           0000CB   247 _rcmp2h	=	0x00cb
                           0000CC   248 _tl2	=	0x00cc
                           0000CC   249 _pwm4l	=	0x00cc
                           0000CD   250 _th2	=	0x00cd
                           0000CD   251 _pwm5l	=	0x00cd
                           0000CE   252 _adcmpl	=	0x00ce
                           0000CF   253 _adcmph	=	0x00cf
                           0000D0   254 _psw	=	0x00d0
                           0000D1   255 _pwmph	=	0x00d1
                           0000D2   256 _pwm0h	=	0x00d2
                           0000D3   257 _pwm1h	=	0x00d3
                           0000D4   258 _pwm2h	=	0x00d4
                           0000D5   259 _pwm3h	=	0x00d5
                           0000D6   260 _pnp	=	0x00d6
                           0000D7   261 _fbd	=	0x00d7
                           0000D8   262 _pwmcon0	=	0x00d8
                           0000D9   263 _pwmpl	=	0x00d9
                           0000DA   264 _pwm0l	=	0x00da
                           0000DB   265 _pwm1l	=	0x00db
                           0000DC   266 _pwm2l	=	0x00dc
                           0000DD   267 _pwm3l	=	0x00dd
                           0000DE   268 _piocon0	=	0x00de
                           0000DF   269 _pwmcon1	=	0x00df
                           0000E0   270 _acc	=	0x00e0
                           0000E1   271 _adccon1	=	0x00e1
                           0000E2   272 _adccon2	=	0x00e2
                           0000E3   273 _adcdly	=	0x00e3
                           0000E4   274 _c0l	=	0x00e4
                           0000E5   275 _c0h	=	0x00e5
                           0000E6   276 _c1l	=	0x00e6
                           0000E7   277 _c1h	=	0x00e7
                           0000E8   278 _adccon0	=	0x00e8
                           0000E9   279 _picon	=	0x00e9
                           0000EA   280 _pinen	=	0x00ea
                           0000EB   281 _pipen	=	0x00eb
                           0000EC   282 _pif	=	0x00ec
                           0000ED   283 _c2l	=	0x00ed
                           0000EE   284 _c2h	=	0x00ee
                           0000EF   285 _eip	=	0x00ef
                           0000F0   286 _b	=	0x00f0
                           0000F1   287 _capcon3	=	0x00f1
                           0000F2   288 _capcon4	=	0x00f2
                           0000F3   289 _spcr	=	0x00f3
                           0000F3   290 _spcr2	=	0x00f3
                           0000F4   291 _spsr	=	0x00f4
                           0000F5   292 _spdr	=	0x00f5
                           0000F6   293 _aindids	=	0x00f6
                           0000F7   294 _eiph	=	0x00f7
                           0000F8   295 _scon_1	=	0x00f8
                           0000F9   296 _pdten	=	0x00f9
                           0000FA   297 _pdtcnt	=	0x00fa
                           0000FB   298 _pmen	=	0x00fb
                           0000FC   299 _pmd	=	0x00fc
                           0000FE   300 _eip1	=	0x00fe
                           0000FF   301 _eiph1	=	0x00ff
                                    302 ;--------------------------------------------------------
                                    303 ; special function bits
                                    304 ;--------------------------------------------------------
                                    305 	.area RSEG    (ABS,DATA)
      000000                        306 	.org 0x0000
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable register banks
                                    309 ;--------------------------------------------------------
                                    310 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        311 	.ds 8
                                    312 ;--------------------------------------------------------
                                    313 ; internal ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area DSEG    (DATA)
      000013                        316 _curColor::
      000013                        317 	.ds 1
      000014                        318 _curEffect::
      000014                        319 	.ds 1
      000015                        320 _setPixel_PARM_2:
      000015                        321 	.ds 1
      000016                        322 _setPixel_PARM_3:
      000016                        323 	.ds 1
      000017                        324 _setPixel_PARM_4:
      000017                        325 	.ds 1
      000018                        326 _setAll_PARM_2:
      000018                        327 	.ds 1
      000019                        328 _setAll_PARM_3:
      000019                        329 	.ds 1
                                    330 ;--------------------------------------------------------
                                    331 ; overlayable items in internal ram
                                    332 ;--------------------------------------------------------
                                    333 	.area	OSEG    (OVR,DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; indirectly addressable internal ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area ISEG    (DATA)
                                    338 ;--------------------------------------------------------
                                    339 ; absolute internal ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area IABS    (ABS,DATA)
                                    342 	.area IABS    (ABS,DATA)
                                    343 ;--------------------------------------------------------
                                    344 ; bit data
                                    345 ;--------------------------------------------------------
                                    346 	.area BSEG    (BIT)
                                    347 ;--------------------------------------------------------
                                    348 ; paged external ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area PSEG    (PAG,XDATA)
                                    351 ;--------------------------------------------------------
                                    352 ; external ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area XSEG    (XDATA)
                                    355 ;--------------------------------------------------------
                                    356 ; absolute external ram data
                                    357 ;--------------------------------------------------------
                                    358 	.area XABS    (ABS,XDATA)
                                    359 ;--------------------------------------------------------
                                    360 ; external initialized ram data
                                    361 ;--------------------------------------------------------
                                    362 	.area XISEG   (XDATA)
                                    363 	.area HOME    (CODE)
                                    364 	.area GSINIT0 (CODE)
                                    365 	.area GSINIT1 (CODE)
                                    366 	.area GSINIT2 (CODE)
                                    367 	.area GSINIT3 (CODE)
                                    368 	.area GSINIT4 (CODE)
                                    369 	.area GSINIT5 (CODE)
                                    370 	.area GSINIT  (CODE)
                                    371 	.area GSFINAL (CODE)
                                    372 	.area CSEG    (CODE)
                                    373 ;--------------------------------------------------------
                                    374 ; global & static initialisations
                                    375 ;--------------------------------------------------------
                                    376 	.area HOME    (CODE)
                                    377 	.area GSINIT  (CODE)
                                    378 	.area GSFINAL (CODE)
                                    379 	.area GSINIT  (CODE)
                                    380 ;--------------------------------------------------------
                                    381 ; Home
                                    382 ;--------------------------------------------------------
                                    383 	.area HOME    (CODE)
                                    384 	.area HOME    (CODE)
                                    385 ;--------------------------------------------------------
                                    386 ; code
                                    387 ;--------------------------------------------------------
                                    388 	.area CSEG    (CODE)
                                    389 ;------------------------------------------------------------
                                    390 ;Allocation info for local variables in function 'LED__SendZero_'
                                    391 ;------------------------------------------------------------
                                    392 ;	./src/WS2812.c:23: void LED__SendZero_()
                                    393 ;	-----------------------------------------
                                    394 ;	 function LED__SendZero_
                                    395 ;	-----------------------------------------
      00056D                        396 _LED__SendZero_:
                           000007   397 	ar7 = 0x07
                           000006   398 	ar6 = 0x06
                           000005   399 	ar5 = 0x05
                           000004   400 	ar4 = 0x04
                           000003   401 	ar3 = 0x03
                           000002   402 	ar2 = 0x02
                           000001   403 	ar1 = 0x01
                           000000   404 	ar0 = 0x00
                                    405 ;	./src/WS2812.c:25: setb(LED_PORT, LED_PIN);
      00056D 43 80 40         [24]  406 	orl	_p0,#0x40
                                    407 ;	./src/WS2812.c:26: _nop_();
      000570 00               [12]  408 	nop
                                    409 ;	./src/WS2812.c:27: _nop_();
      000571 00               [12]  410 	nop
                                    411 ;	./src/WS2812.c:28: clrb(LED_PORT, LED_PIN);
      000572 53 80 BF         [24]  412 	anl	_p0,#0xbf
                                    413 ;	./src/WS2812.c:29: _nop_();
      000575 00               [12]  414 	nop
                                    415 ;	./src/WS2812.c:30: _nop_();
      000576 00               [12]  416 	nop
                                    417 ;	./src/WS2812.c:31: _nop_();
      000577 00               [12]  418 	nop
                                    419 ;	./src/WS2812.c:32: _nop_();
      000578 00               [12]  420 	nop
                                    421 ;	./src/WS2812.c:33: }
      000579 22               [24]  422 	ret
                                    423 ;------------------------------------------------------------
                                    424 ;Allocation info for local variables in function 'LED__SendOne_'
                                    425 ;------------------------------------------------------------
                                    426 ;	./src/WS2812.c:34: void LED__SendOne_()
                                    427 ;	-----------------------------------------
                                    428 ;	 function LED__SendOne_
                                    429 ;	-----------------------------------------
      00057A                        430 _LED__SendOne_:
                                    431 ;	./src/WS2812.c:36: setb(LED_PORT, LED_PIN);
      00057A 43 80 40         [24]  432 	orl	_p0,#0x40
                                    433 ;	./src/WS2812.c:37: _nop_();
      00057D 00               [12]  434 	nop
                                    435 ;	./src/WS2812.c:38: _nop_();
      00057E 00               [12]  436 	nop
                                    437 ;	./src/WS2812.c:39: _nop_();
      00057F 00               [12]  438 	nop
                                    439 ;	./src/WS2812.c:40: _nop_();
      000580 00               [12]  440 	nop
                                    441 ;	./src/WS2812.c:41: _nop_();
      000581 00               [12]  442 	nop
                                    443 ;	./src/WS2812.c:42: _nop_();
      000582 00               [12]  444 	nop
                                    445 ;	./src/WS2812.c:43: _nop_();
      000583 00               [12]  446 	nop
                                    447 ;	./src/WS2812.c:44: clrb(LED_PORT, LED_PIN);
      000584 53 80 BF         [24]  448 	anl	_p0,#0xbf
                                    449 ;	./src/WS2812.c:45: }
      000587 22               [24]  450 	ret
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'LED__SendByte_'
                                    453 ;------------------------------------------------------------
                                    454 ;dat                       Allocated to registers r7 
                                    455 ;------------------------------------------------------------
                                    456 ;	./src/WS2812.c:46: void LED__SendByte_(uint8_t dat)
                                    457 ;	-----------------------------------------
                                    458 ;	 function LED__SendByte_
                                    459 ;	-----------------------------------------
      000588                        460 _LED__SendByte_:
                                    461 ;	./src/WS2812.c:48: if (dat & 0x80)
      000588 E5 82            [12]  462 	mov	a,dpl
      00058A FF               [12]  463 	mov	r7,a
      00058B 30 E7 09         [24]  464 	jnb	acc.7,00102$
                                    465 ;	./src/WS2812.c:49: LED__SendOne_();
      00058E C0 07            [24]  466 	push	ar7
      000590 12 05 7A         [24]  467 	lcall	_LED__SendOne_
      000593 D0 07            [24]  468 	pop	ar7
      000595 80 07            [24]  469 	sjmp	00103$
      000597                        470 00102$:
                                    471 ;	./src/WS2812.c:51: LED__SendZero_();
      000597 C0 07            [24]  472 	push	ar7
      000599 12 05 6D         [24]  473 	lcall	_LED__SendZero_
      00059C D0 07            [24]  474 	pop	ar7
      00059E                        475 00103$:
                                    476 ;	./src/WS2812.c:52: if (dat & 0x40)
      00059E EF               [12]  477 	mov	a,r7
      00059F 30 E6 09         [24]  478 	jnb	acc.6,00105$
                                    479 ;	./src/WS2812.c:53: LED__SendOne_();
      0005A2 C0 07            [24]  480 	push	ar7
      0005A4 12 05 7A         [24]  481 	lcall	_LED__SendOne_
      0005A7 D0 07            [24]  482 	pop	ar7
      0005A9 80 07            [24]  483 	sjmp	00106$
      0005AB                        484 00105$:
                                    485 ;	./src/WS2812.c:55: LED__SendZero_();
      0005AB C0 07            [24]  486 	push	ar7
      0005AD 12 05 6D         [24]  487 	lcall	_LED__SendZero_
      0005B0 D0 07            [24]  488 	pop	ar7
      0005B2                        489 00106$:
                                    490 ;	./src/WS2812.c:56: if (dat & 0x20)
      0005B2 EF               [12]  491 	mov	a,r7
      0005B3 30 E5 09         [24]  492 	jnb	acc.5,00108$
                                    493 ;	./src/WS2812.c:57: LED__SendOne_();
      0005B6 C0 07            [24]  494 	push	ar7
      0005B8 12 05 7A         [24]  495 	lcall	_LED__SendOne_
      0005BB D0 07            [24]  496 	pop	ar7
      0005BD 80 07            [24]  497 	sjmp	00109$
      0005BF                        498 00108$:
                                    499 ;	./src/WS2812.c:59: LED__SendZero_();
      0005BF C0 07            [24]  500 	push	ar7
      0005C1 12 05 6D         [24]  501 	lcall	_LED__SendZero_
      0005C4 D0 07            [24]  502 	pop	ar7
      0005C6                        503 00109$:
                                    504 ;	./src/WS2812.c:60: if (dat & 0x10)
      0005C6 EF               [12]  505 	mov	a,r7
      0005C7 30 E4 09         [24]  506 	jnb	acc.4,00111$
                                    507 ;	./src/WS2812.c:61: LED__SendOne_();
      0005CA C0 07            [24]  508 	push	ar7
      0005CC 12 05 7A         [24]  509 	lcall	_LED__SendOne_
      0005CF D0 07            [24]  510 	pop	ar7
      0005D1 80 07            [24]  511 	sjmp	00112$
      0005D3                        512 00111$:
                                    513 ;	./src/WS2812.c:63: LED__SendZero_();
      0005D3 C0 07            [24]  514 	push	ar7
      0005D5 12 05 6D         [24]  515 	lcall	_LED__SendZero_
      0005D8 D0 07            [24]  516 	pop	ar7
      0005DA                        517 00112$:
                                    518 ;	./src/WS2812.c:64: if (dat & 0x08)
      0005DA EF               [12]  519 	mov	a,r7
      0005DB 30 E3 09         [24]  520 	jnb	acc.3,00114$
                                    521 ;	./src/WS2812.c:65: LED__SendOne_();
      0005DE C0 07            [24]  522 	push	ar7
      0005E0 12 05 7A         [24]  523 	lcall	_LED__SendOne_
      0005E3 D0 07            [24]  524 	pop	ar7
      0005E5 80 07            [24]  525 	sjmp	00115$
      0005E7                        526 00114$:
                                    527 ;	./src/WS2812.c:67: LED__SendZero_();
      0005E7 C0 07            [24]  528 	push	ar7
      0005E9 12 05 6D         [24]  529 	lcall	_LED__SendZero_
      0005EC D0 07            [24]  530 	pop	ar7
      0005EE                        531 00115$:
                                    532 ;	./src/WS2812.c:68: if (dat & 0x04)
      0005EE EF               [12]  533 	mov	a,r7
      0005EF 30 E2 09         [24]  534 	jnb	acc.2,00117$
                                    535 ;	./src/WS2812.c:69: LED__SendOne_();
      0005F2 C0 07            [24]  536 	push	ar7
      0005F4 12 05 7A         [24]  537 	lcall	_LED__SendOne_
      0005F7 D0 07            [24]  538 	pop	ar7
      0005F9 80 07            [24]  539 	sjmp	00118$
      0005FB                        540 00117$:
                                    541 ;	./src/WS2812.c:71: LED__SendZero_();
      0005FB C0 07            [24]  542 	push	ar7
      0005FD 12 05 6D         [24]  543 	lcall	_LED__SendZero_
      000600 D0 07            [24]  544 	pop	ar7
      000602                        545 00118$:
                                    546 ;	./src/WS2812.c:72: if (dat & 0x02)
      000602 EF               [12]  547 	mov	a,r7
      000603 30 E1 09         [24]  548 	jnb	acc.1,00120$
                                    549 ;	./src/WS2812.c:73: LED__SendOne_();
      000606 C0 07            [24]  550 	push	ar7
      000608 12 05 7A         [24]  551 	lcall	_LED__SendOne_
      00060B D0 07            [24]  552 	pop	ar7
      00060D 80 07            [24]  553 	sjmp	00121$
      00060F                        554 00120$:
                                    555 ;	./src/WS2812.c:75: LED__SendZero_();
      00060F C0 07            [24]  556 	push	ar7
      000611 12 05 6D         [24]  557 	lcall	_LED__SendZero_
      000614 D0 07            [24]  558 	pop	ar7
      000616                        559 00121$:
                                    560 ;	./src/WS2812.c:76: if (dat & 0x01)
      000616 EF               [12]  561 	mov	a,r7
      000617 30 E0 03         [24]  562 	jnb	acc.0,00123$
                                    563 ;	./src/WS2812.c:77: LED__SendOne_();
      00061A 02 05 7A         [24]  564 	ljmp	_LED__SendOne_
      00061D                        565 00123$:
                                    566 ;	./src/WS2812.c:79: LED__SendZero_();
                                    567 ;	./src/WS2812.c:80: }
      00061D 02 05 6D         [24]  568 	ljmp	_LED__SendZero_
                                    569 ;------------------------------------------------------------
                                    570 ;Allocation info for local variables in function 'clearAll'
                                    571 ;------------------------------------------------------------
                                    572 ;i                         Allocated to registers r6 r7 
                                    573 ;------------------------------------------------------------
                                    574 ;	./src/WS2812.c:82: void clearAll()
                                    575 ;	-----------------------------------------
                                    576 ;	 function clearAll
                                    577 ;	-----------------------------------------
      000620                        578 _clearAll:
                                    579 ;	./src/WS2812.c:85: for (i = 0; i < 300; i++)
      000620 7E 00            [12]  580 	mov	r6,#0x00
      000622 7F 00            [12]  581 	mov	r7,#0x00
      000624                        582 00102$:
                                    583 ;	./src/WS2812.c:87: LED__SendByte_(0);
      000624 75 82 00         [24]  584 	mov	dpl,#0x00
      000627 C0 07            [24]  585 	push	ar7
      000629 C0 06            [24]  586 	push	ar6
      00062B 12 05 88         [24]  587 	lcall	_LED__SendByte_
                                    588 ;	./src/WS2812.c:88: LED__SendByte_(0);
      00062E 75 82 00         [24]  589 	mov	dpl,#0x00
      000631 12 05 88         [24]  590 	lcall	_LED__SendByte_
                                    591 ;	./src/WS2812.c:89: LED__SendByte_(0);
      000634 75 82 00         [24]  592 	mov	dpl,#0x00
      000637 12 05 88         [24]  593 	lcall	_LED__SendByte_
      00063A D0 06            [24]  594 	pop	ar6
      00063C D0 07            [24]  595 	pop	ar7
                                    596 ;	./src/WS2812.c:85: for (i = 0; i < 300; i++)
      00063E 0E               [12]  597 	inc	r6
      00063F BE 00 01         [24]  598 	cjne	r6,#0x00,00111$
      000642 0F               [12]  599 	inc	r7
      000643                        600 00111$:
      000643 8E 04            [24]  601 	mov	ar4,r6
      000645 8F 05            [24]  602 	mov	ar5,r7
      000647 C3               [12]  603 	clr	c
      000648 EC               [12]  604 	mov	a,r4
      000649 94 2C            [12]  605 	subb	a,#0x2c
      00064B ED               [12]  606 	mov	a,r5
      00064C 94 01            [12]  607 	subb	a,#0x01
      00064E 40 D4            [24]  608 	jc	00102$
                                    609 ;	./src/WS2812.c:91: }
      000650 22               [24]  610 	ret
                                    611 ;------------------------------------------------------------
                                    612 ;Allocation info for local variables in function 'showStrip'
                                    613 ;------------------------------------------------------------
                                    614 ;i                         Allocated to registers r7 
                                    615 ;------------------------------------------------------------
                                    616 ;	./src/WS2812.c:93: void showStrip()
                                    617 ;	-----------------------------------------
                                    618 ;	 function showStrip
                                    619 ;	-----------------------------------------
      000651                        620 _showStrip:
                                    621 ;	./src/WS2812.c:96: for (i = 0; i < NUM_LEDS; ++i)
      000651 7F 00            [12]  622 	mov	r7,#0x00
      000653                        623 00103$:
      000653 8F 05            [24]  624 	mov	ar5,r7
      000655 7E 00            [12]  625 	mov	r6,#0x00
      000657 C3               [12]  626 	clr	c
      000658 ED               [12]  627 	mov	a,r5
      000659 95 08            [12]  628 	subb	a,_NUM_LEDS
      00065B EE               [12]  629 	mov	a,r6
      00065C 95 09            [12]  630 	subb	a,(_NUM_LEDS + 1)
      00065E 50 64            [24]  631 	jnc	00105$
                                    632 ;	./src/WS2812.c:98: LED__SendByte_(leds[i * 3]);
      000660 8F 1A            [24]  633 	mov	__mulint_PARM_2,r7
      000662 75 1B 00         [24]  634 	mov	(__mulint_PARM_2 + 1),#0x00
      000665 90 00 03         [24]  635 	mov	dptr,#0x0003
      000668 C0 07            [24]  636 	push	ar7
      00066A 12 07 39         [24]  637 	lcall	__mulint
      00066D AD 82            [24]  638 	mov	r5,dpl
      00066F AE 83            [24]  639 	mov	r6,dph
      000671 ED               [12]  640 	mov	a,r5
      000672 24 01            [12]  641 	add	a,#_leds
      000674 F5 82            [12]  642 	mov	dpl,a
      000676 EE               [12]  643 	mov	a,r6
      000677 34 00            [12]  644 	addc	a,#(_leds >> 8)
      000679 F5 83            [12]  645 	mov	dph,a
      00067B E0               [24]  646 	movx	a,@dptr
      00067C F5 82            [12]  647 	mov	dpl,a
      00067E C0 06            [24]  648 	push	ar6
      000680 C0 05            [24]  649 	push	ar5
      000682 12 05 88         [24]  650 	lcall	_LED__SendByte_
      000685 D0 05            [24]  651 	pop	ar5
      000687 D0 06            [24]  652 	pop	ar6
                                    653 ;	./src/WS2812.c:99: LED__SendByte_(leds[i * 3 + 1]);
      000689 74 01            [12]  654 	mov	a,#0x01
      00068B 2D               [12]  655 	add	a,r5
      00068C FB               [12]  656 	mov	r3,a
      00068D E4               [12]  657 	clr	a
      00068E 3E               [12]  658 	addc	a,r6
      00068F FC               [12]  659 	mov	r4,a
      000690 EB               [12]  660 	mov	a,r3
      000691 24 01            [12]  661 	add	a,#_leds
      000693 F5 82            [12]  662 	mov	dpl,a
      000695 EC               [12]  663 	mov	a,r4
      000696 34 00            [12]  664 	addc	a,#(_leds >> 8)
      000698 F5 83            [12]  665 	mov	dph,a
      00069A E0               [24]  666 	movx	a,@dptr
      00069B F5 82            [12]  667 	mov	dpl,a
      00069D C0 06            [24]  668 	push	ar6
      00069F C0 05            [24]  669 	push	ar5
      0006A1 12 05 88         [24]  670 	lcall	_LED__SendByte_
      0006A4 D0 05            [24]  671 	pop	ar5
      0006A6 D0 06            [24]  672 	pop	ar6
                                    673 ;	./src/WS2812.c:100: LED__SendByte_(leds[i * 3 + 2]);
      0006A8 74 02            [12]  674 	mov	a,#0x02
      0006AA 2D               [12]  675 	add	a,r5
      0006AB FD               [12]  676 	mov	r5,a
      0006AC E4               [12]  677 	clr	a
      0006AD 3E               [12]  678 	addc	a,r6
      0006AE FE               [12]  679 	mov	r6,a
      0006AF ED               [12]  680 	mov	a,r5
      0006B0 24 01            [12]  681 	add	a,#_leds
      0006B2 F5 82            [12]  682 	mov	dpl,a
      0006B4 EE               [12]  683 	mov	a,r6
      0006B5 34 00            [12]  684 	addc	a,#(_leds >> 8)
      0006B7 F5 83            [12]  685 	mov	dph,a
      0006B9 E0               [24]  686 	movx	a,@dptr
      0006BA F5 82            [12]  687 	mov	dpl,a
      0006BC 12 05 88         [24]  688 	lcall	_LED__SendByte_
      0006BF D0 07            [24]  689 	pop	ar7
                                    690 ;	./src/WS2812.c:96: for (i = 0; i < NUM_LEDS; ++i)
      0006C1 0F               [12]  691 	inc	r7
      0006C2 80 8F            [24]  692 	sjmp	00103$
      0006C4                        693 00105$:
                                    694 ;	./src/WS2812.c:102: }
      0006C4 22               [24]  695 	ret
                                    696 ;------------------------------------------------------------
                                    697 ;Allocation info for local variables in function 'setPixel'
                                    698 ;------------------------------------------------------------
                                    699 ;green                     Allocated with name '_setPixel_PARM_2'
                                    700 ;red                       Allocated with name '_setPixel_PARM_3'
                                    701 ;blue                      Allocated with name '_setPixel_PARM_4'
                                    702 ;Pixel                     Allocated to registers r6 r7 
                                    703 ;------------------------------------------------------------
                                    704 ;	./src/WS2812.c:105: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                    705 ;	-----------------------------------------
                                    706 ;	 function setPixel
                                    707 ;	-----------------------------------------
      0006C5                        708 _setPixel:
      0006C5 AE 82            [24]  709 	mov	r6,dpl
      0006C7 AF 83            [24]  710 	mov	r7,dph
                                    711 ;	./src/WS2812.c:107: leds[Pixel * 3] = green;
      0006C9 8E 1A            [24]  712 	mov	__mulint_PARM_2,r6
      0006CB 8F 1B            [24]  713 	mov	(__mulint_PARM_2 + 1),r7
      0006CD 90 00 03         [24]  714 	mov	dptr,#0x0003
      0006D0 12 07 39         [24]  715 	lcall	__mulint
      0006D3 AE 82            [24]  716 	mov	r6,dpl
      0006D5 AF 83            [24]  717 	mov	r7,dph
      0006D7 EE               [12]  718 	mov	a,r6
      0006D8 24 01            [12]  719 	add	a,#_leds
      0006DA F5 82            [12]  720 	mov	dpl,a
      0006DC EF               [12]  721 	mov	a,r7
      0006DD 34 00            [12]  722 	addc	a,#(_leds >> 8)
      0006DF F5 83            [12]  723 	mov	dph,a
      0006E1 E5 15            [12]  724 	mov	a,_setPixel_PARM_2
      0006E3 F0               [24]  725 	movx	@dptr,a
                                    726 ;	./src/WS2812.c:108: leds[Pixel * 3 + 1] = red;
      0006E4 74 01            [12]  727 	mov	a,#0x01
      0006E6 2E               [12]  728 	add	a,r6
      0006E7 FC               [12]  729 	mov	r4,a
      0006E8 E4               [12]  730 	clr	a
      0006E9 3F               [12]  731 	addc	a,r7
      0006EA FD               [12]  732 	mov	r5,a
      0006EB EC               [12]  733 	mov	a,r4
      0006EC 24 01            [12]  734 	add	a,#_leds
      0006EE F5 82            [12]  735 	mov	dpl,a
      0006F0 ED               [12]  736 	mov	a,r5
      0006F1 34 00            [12]  737 	addc	a,#(_leds >> 8)
      0006F3 F5 83            [12]  738 	mov	dph,a
      0006F5 E5 16            [12]  739 	mov	a,_setPixel_PARM_3
      0006F7 F0               [24]  740 	movx	@dptr,a
                                    741 ;	./src/WS2812.c:109: leds[Pixel * 3 + 2] = blue;
      0006F8 74 02            [12]  742 	mov	a,#0x02
      0006FA 2E               [12]  743 	add	a,r6
      0006FB FE               [12]  744 	mov	r6,a
      0006FC E4               [12]  745 	clr	a
      0006FD 3F               [12]  746 	addc	a,r7
      0006FE FF               [12]  747 	mov	r7,a
      0006FF EE               [12]  748 	mov	a,r6
      000700 24 01            [12]  749 	add	a,#_leds
      000702 F5 82            [12]  750 	mov	dpl,a
      000704 EF               [12]  751 	mov	a,r7
      000705 34 00            [12]  752 	addc	a,#(_leds >> 8)
      000707 F5 83            [12]  753 	mov	dph,a
      000709 E5 17            [12]  754 	mov	a,_setPixel_PARM_4
      00070B F0               [24]  755 	movx	@dptr,a
                                    756 ;	./src/WS2812.c:110: }
      00070C 22               [24]  757 	ret
                                    758 ;------------------------------------------------------------
                                    759 ;Allocation info for local variables in function 'setAll'
                                    760 ;------------------------------------------------------------
                                    761 ;red                       Allocated with name '_setAll_PARM_2'
                                    762 ;blue                      Allocated with name '_setAll_PARM_3'
                                    763 ;green                     Allocated to registers r7 
                                    764 ;i                         Allocated to registers r6 
                                    765 ;------------------------------------------------------------
                                    766 ;	./src/WS2812.c:113: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                    767 ;	-----------------------------------------
                                    768 ;	 function setAll
                                    769 ;	-----------------------------------------
      00070D                        770 _setAll:
      00070D AF 82            [24]  771 	mov	r7,dpl
                                    772 ;	./src/WS2812.c:116: for (i = 0; i < NUM_LEDS; ++i)
      00070F 7E 00            [12]  773 	mov	r6,#0x00
      000711                        774 00103$:
      000711 8E 04            [24]  775 	mov	ar4,r6
      000713 7D 00            [12]  776 	mov	r5,#0x00
      000715 C3               [12]  777 	clr	c
      000716 EC               [12]  778 	mov	a,r4
      000717 95 08            [12]  779 	subb	a,_NUM_LEDS
      000719 ED               [12]  780 	mov	a,r5
      00071A 95 09            [12]  781 	subb	a,(_NUM_LEDS + 1)
      00071C 50 1A            [24]  782 	jnc	00105$
                                    783 ;	./src/WS2812.c:118: setPixel(i, green, red, blue);
      00071E 8F 15            [24]  784 	mov	_setPixel_PARM_2,r7
      000720 85 18 16         [24]  785 	mov	_setPixel_PARM_3,_setAll_PARM_2
      000723 85 19 17         [24]  786 	mov	_setPixel_PARM_4,_setAll_PARM_3
      000726 8C 82            [24]  787 	mov	dpl,r4
      000728 8D 83            [24]  788 	mov	dph,r5
      00072A C0 07            [24]  789 	push	ar7
      00072C C0 06            [24]  790 	push	ar6
      00072E 12 06 C5         [24]  791 	lcall	_setPixel
      000731 D0 06            [24]  792 	pop	ar6
      000733 D0 07            [24]  793 	pop	ar7
                                    794 ;	./src/WS2812.c:116: for (i = 0; i < NUM_LEDS; ++i)
      000735 0E               [12]  795 	inc	r6
      000736 80 D9            [24]  796 	sjmp	00103$
      000738                        797 00105$:
                                    798 ;	./src/WS2812.c:120: }
      000738 22               [24]  799 	ret
                                    800 	.area CSEG    (CODE)
                                    801 	.area CONST   (CODE)
                                    802 	.area XINIT   (CODE)
                                    803 	.area CABS    (ABS,CODE)
