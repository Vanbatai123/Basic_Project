                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module N76_UCS1903
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _TIM2_begin_PARM_2
                                     12 	.globl _writeXram_PARM_2
                                     13 	.globl _timer2
                                     14 	.globl _PIN_INT_FUCTION
                                     15 	.globl _ADC_INT_FUCTION
                                     16 	.globl _main
                                     17 	.globl _TIM2_begin
                                     18 	.globl _Twinkle
                                     19 	.globl _writeXram
                                     20 	.globl _readXram
                                     21 	.globl _clearAll
                                     22 	.globl _LED__SendByte_
                                     23 	.globl _LED__SendOne_
                                     24 	.globl _LED__SendZero_
                                     25 	.globl _random2
                                     26 	.globl _random
                                     27 	.globl _Erase_APROM
                                     28 	.globl _APROM_write_byte
                                     29 	.globl _APROM_read_byte
                                     30 	.globl __delay_us
                                     31 	.globl __delay_ms
                                     32 	.globl _rand
                                     33 	.globl _eiph1
                                     34 	.globl _eip1
                                     35 	.globl _pmd
                                     36 	.globl _pmen
                                     37 	.globl _pdtcnt
                                     38 	.globl _pdten
                                     39 	.globl _scon_1
                                     40 	.globl _eiph
                                     41 	.globl _aindids
                                     42 	.globl _spdr
                                     43 	.globl _spsr
                                     44 	.globl _spcr2
                                     45 	.globl _spcr
                                     46 	.globl _capcon4
                                     47 	.globl _capcon3
                                     48 	.globl _b
                                     49 	.globl _eip
                                     50 	.globl _c2h
                                     51 	.globl _c2l
                                     52 	.globl _pif
                                     53 	.globl _pipen
                                     54 	.globl _pinen
                                     55 	.globl _picon
                                     56 	.globl _adccon0
                                     57 	.globl _c1h
                                     58 	.globl _c1l
                                     59 	.globl _c0h
                                     60 	.globl _c0l
                                     61 	.globl _adcdly
                                     62 	.globl _adccon2
                                     63 	.globl _adccon1
                                     64 	.globl _acc
                                     65 	.globl _pwmcon1
                                     66 	.globl _piocon0
                                     67 	.globl _pwm3l
                                     68 	.globl _pwm2l
                                     69 	.globl _pwm1l
                                     70 	.globl _pwm0l
                                     71 	.globl _pwmpl
                                     72 	.globl _pwmcon0
                                     73 	.globl _fbd
                                     74 	.globl _pnp
                                     75 	.globl _pwm3h
                                     76 	.globl _pwm2h
                                     77 	.globl _pwm1h
                                     78 	.globl _pwm0h
                                     79 	.globl _pwmph
                                     80 	.globl _psw
                                     81 	.globl _adcmph
                                     82 	.globl _adcmpl
                                     83 	.globl _pwm5l
                                     84 	.globl _th2
                                     85 	.globl _pwm4l
                                     86 	.globl _tl2
                                     87 	.globl _rcmp2h
                                     88 	.globl _rcmp2l
                                     89 	.globl _t2mod
                                     90 	.globl _t2con
                                     91 	.globl _ta
                                     92 	.globl _piocon1
                                     93 	.globl _rh3
                                     94 	.globl _pwm5h
                                     95 	.globl _rl3
                                     96 	.globl _pwm4h
                                     97 	.globl _t3con
                                     98 	.globl _adcrh
                                     99 	.globl _adcrl
                                    100 	.globl _i2addr
                                    101 	.globl _i2con
                                    102 	.globl _i2toc
                                    103 	.globl _i2clk
                                    104 	.globl _i2stat
                                    105 	.globl _i2dat
                                    106 	.globl _saddr_1
                                    107 	.globl _saden_1
                                    108 	.globl _saden
                                    109 	.globl _ip
                                    110 	.globl _pwmintc
                                    111 	.globl _iph
                                    112 	.globl _p2s
                                    113 	.globl _p1sr
                                    114 	.globl _p1m2
                                    115 	.globl _p1s
                                    116 	.globl _p1m1
                                    117 	.globl _p0sr
                                    118 	.globl _p0m2
                                    119 	.globl _p0s
                                    120 	.globl _p0m1
                                    121 	.globl _p3
                                    122 	.globl _iapcn
                                    123 	.globl _iapfd
                                    124 	.globl _p3sr
                                    125 	.globl _p3m2
                                    126 	.globl _p3s
                                    127 	.globl _p3m1
                                    128 	.globl _bodcon1
                                    129 	.globl _wdcon
                                    130 	.globl _saddr
                                    131 	.globl _ie
                                    132 	.globl _iapah
                                    133 	.globl _iapal
                                    134 	.globl _iapuen
                                    135 	.globl _iaptrg
                                    136 	.globl _bodcon0
                                    137 	.globl _auxr1
                                    138 	.globl _p2
                                    139 	.globl _chpcon
                                    140 	.globl _eie1
                                    141 	.globl _eie
                                    142 	.globl _sbuf_1
                                    143 	.globl _sbuf
                                    144 	.globl _scon
                                    145 	.globl _cken
                                    146 	.globl _ckswt
                                    147 	.globl _ckdiv
                                    148 	.globl _capcon2
                                    149 	.globl _capcon1
                                    150 	.globl _capcon0
                                    151 	.globl _sfrs
                                    152 	.globl _p1
                                    153 	.globl _wkcon
                                    154 	.globl _ckcon
                                    155 	.globl _th1
                                    156 	.globl _th0
                                    157 	.globl _tl1
                                    158 	.globl _tl0
                                    159 	.globl _tmod
                                    160 	.globl _tcon
                                    161 	.globl _pcon
                                    162 	.globl _rwk
                                    163 	.globl _rctrim1
                                    164 	.globl _rctrim0
                                    165 	.globl _dph
                                    166 	.globl _dpl
                                    167 	.globl _sp
                                    168 	.globl _p0
                                    169 	.globl _theaterChase_PARM_4
                                    170 	.globl _theaterChase_PARM_3
                                    171 	.globl _theaterChase_PARM_2
                                    172 	.globl _colorWipe_PARM_4
                                    173 	.globl _colorWipe_PARM_3
                                    174 	.globl _colorWipe_PARM_2
                                    175 	.globl _SnowSparkle_PARM_5
                                    176 	.globl _SnowSparkle_PARM_4
                                    177 	.globl _SnowSparkle_PARM_3
                                    178 	.globl _SnowSparkle_PARM_2
                                    179 	.globl _Sparkle_PARM_4
                                    180 	.globl _Sparkle_PARM_3
                                    181 	.globl _Sparkle_PARM_2
                                    182 	.globl _TwinkleRandom_PARM_3
                                    183 	.globl _TwinkleRandom_PARM_2
                                    184 	.globl _Twinkle_PARM_6
                                    185 	.globl _Twinkle_PARM_5
                                    186 	.globl _Twinkle_PARM_4
                                    187 	.globl _Twinkle_PARM_3
                                    188 	.globl _Twinkle_PARM_2
                                    189 	.globl _CylonBounce_PARM_6
                                    190 	.globl _CylonBounce_PARM_5
                                    191 	.globl _CylonBounce_PARM_4
                                    192 	.globl _CylonBounce_PARM_3
                                    193 	.globl _CylonBounce_PARM_2
                                    194 	.globl _Strobe_PARM_6
                                    195 	.globl _Strobe_PARM_5
                                    196 	.globl _Strobe_PARM_4
                                    197 	.globl _Strobe_PARM_3
                                    198 	.globl _Strobe_PARM_2
                                    199 	.globl _FadeInOut_PARM_3
                                    200 	.globl _FadeInOut_PARM_2
                                    201 	.globl _setAll_PARM_3
                                    202 	.globl _setAll_PARM_2
                                    203 	.globl _setPixel_PARM_4
                                    204 	.globl _setPixel_PARM_3
                                    205 	.globl _setPixel_PARM_2
                                    206 	.globl _random2_PARM_2
                                    207 	.globl _cnt
                                    208 	.globl __status
                                    209 	.globl _effect
                                    210 	.globl __delay
                                    211 	.globl _NUM_LEDS
                                    212 	.globl _showStrip
                                    213 	.globl _setPixel
                                    214 	.globl _setAll
                                    215 	.globl _FadeInOut
                                    216 	.globl _Strobe
                                    217 	.globl _CylonBounce
                                    218 	.globl _TwinkleRandom
                                    219 	.globl _Sparkle
                                    220 	.globl _SnowSparkle
                                    221 	.globl _colorWipe
                                    222 	.globl _rainbowCycle
                                    223 	.globl _Wheel
                                    224 	.globl _theaterChase
                                    225 	.globl _theaterChaseRainbow
                                    226 ;--------------------------------------------------------
                                    227 ; special function registers
                                    228 ;--------------------------------------------------------
                                    229 	.area RSEG    (ABS,DATA)
      000000                        230 	.org 0x0000
                           000080   231 _p0	=	0x0080
                           000081   232 _sp	=	0x0081
                           000082   233 _dpl	=	0x0082
                           000083   234 _dph	=	0x0083
                           000084   235 _rctrim0	=	0x0084
                           000085   236 _rctrim1	=	0x0085
                           000086   237 _rwk	=	0x0086
                           000087   238 _pcon	=	0x0087
                           000088   239 _tcon	=	0x0088
                           000089   240 _tmod	=	0x0089
                           00008A   241 _tl0	=	0x008a
                           00008B   242 _tl1	=	0x008b
                           00008C   243 _th0	=	0x008c
                           00008D   244 _th1	=	0x008d
                           00008E   245 _ckcon	=	0x008e
                           00008F   246 _wkcon	=	0x008f
                           000090   247 _p1	=	0x0090
                           000091   248 _sfrs	=	0x0091
                           000092   249 _capcon0	=	0x0092
                           000093   250 _capcon1	=	0x0093
                           000094   251 _capcon2	=	0x0094
                           000095   252 _ckdiv	=	0x0095
                           000096   253 _ckswt	=	0x0096
                           000097   254 _cken	=	0x0097
                           000098   255 _scon	=	0x0098
                           000099   256 _sbuf	=	0x0099
                           00009A   257 _sbuf_1	=	0x009a
                           00009B   258 _eie	=	0x009b
                           00009C   259 _eie1	=	0x009c
                           00009F   260 _chpcon	=	0x009f
                           0000A0   261 _p2	=	0x00a0
                           0000A2   262 _auxr1	=	0x00a2
                           0000A3   263 _bodcon0	=	0x00a3
                           0000A4   264 _iaptrg	=	0x00a4
                           0000A5   265 _iapuen	=	0x00a5
                           0000A6   266 _iapal	=	0x00a6
                           0000A7   267 _iapah	=	0x00a7
                           0000A8   268 _ie	=	0x00a8
                           0000A9   269 _saddr	=	0x00a9
                           0000AA   270 _wdcon	=	0x00aa
                           0000AB   271 _bodcon1	=	0x00ab
                           0000AC   272 _p3m1	=	0x00ac
                           0000AC   273 _p3s	=	0x00ac
                           0000AD   274 _p3m2	=	0x00ad
                           0000AD   275 _p3sr	=	0x00ad
                           0000AE   276 _iapfd	=	0x00ae
                           0000AF   277 _iapcn	=	0x00af
                           0000B0   278 _p3	=	0x00b0
                           0000B1   279 _p0m1	=	0x00b1
                           0000B1   280 _p0s	=	0x00b1
                           0000B2   281 _p0m2	=	0x00b2
                           0000B2   282 _p0sr	=	0x00b2
                           0000B3   283 _p1m1	=	0x00b3
                           0000B3   284 _p1s	=	0x00b3
                           0000B4   285 _p1m2	=	0x00b4
                           0000B4   286 _p1sr	=	0x00b4
                           0000B5   287 _p2s	=	0x00b5
                           0000B7   288 _iph	=	0x00b7
                           0000B7   289 _pwmintc	=	0x00b7
                           0000B8   290 _ip	=	0x00b8
                           0000B9   291 _saden	=	0x00b9
                           0000BA   292 _saden_1	=	0x00ba
                           0000BB   293 _saddr_1	=	0x00bb
                           0000BC   294 _i2dat	=	0x00bc
                           0000BD   295 _i2stat	=	0x00bd
                           0000BE   296 _i2clk	=	0x00be
                           0000BF   297 _i2toc	=	0x00bf
                           0000C0   298 _i2con	=	0x00c0
                           0000C1   299 _i2addr	=	0x00c1
                           0000C2   300 _adcrl	=	0x00c2
                           0000C3   301 _adcrh	=	0x00c3
                           0000C4   302 _t3con	=	0x00c4
                           0000C4   303 _pwm4h	=	0x00c4
                           0000C5   304 _rl3	=	0x00c5
                           0000C5   305 _pwm5h	=	0x00c5
                           0000C6   306 _rh3	=	0x00c6
                           0000C6   307 _piocon1	=	0x00c6
                           0000C7   308 _ta	=	0x00c7
                           0000C8   309 _t2con	=	0x00c8
                           0000C9   310 _t2mod	=	0x00c9
                           0000CA   311 _rcmp2l	=	0x00ca
                           0000CB   312 _rcmp2h	=	0x00cb
                           0000CC   313 _tl2	=	0x00cc
                           0000CC   314 _pwm4l	=	0x00cc
                           0000CD   315 _th2	=	0x00cd
                           0000CD   316 _pwm5l	=	0x00cd
                           0000CE   317 _adcmpl	=	0x00ce
                           0000CF   318 _adcmph	=	0x00cf
                           0000D0   319 _psw	=	0x00d0
                           0000D1   320 _pwmph	=	0x00d1
                           0000D2   321 _pwm0h	=	0x00d2
                           0000D3   322 _pwm1h	=	0x00d3
                           0000D4   323 _pwm2h	=	0x00d4
                           0000D5   324 _pwm3h	=	0x00d5
                           0000D6   325 _pnp	=	0x00d6
                           0000D7   326 _fbd	=	0x00d7
                           0000D8   327 _pwmcon0	=	0x00d8
                           0000D9   328 _pwmpl	=	0x00d9
                           0000DA   329 _pwm0l	=	0x00da
                           0000DB   330 _pwm1l	=	0x00db
                           0000DC   331 _pwm2l	=	0x00dc
                           0000DD   332 _pwm3l	=	0x00dd
                           0000DE   333 _piocon0	=	0x00de
                           0000DF   334 _pwmcon1	=	0x00df
                           0000E0   335 _acc	=	0x00e0
                           0000E1   336 _adccon1	=	0x00e1
                           0000E2   337 _adccon2	=	0x00e2
                           0000E3   338 _adcdly	=	0x00e3
                           0000E4   339 _c0l	=	0x00e4
                           0000E5   340 _c0h	=	0x00e5
                           0000E6   341 _c1l	=	0x00e6
                           0000E7   342 _c1h	=	0x00e7
                           0000E8   343 _adccon0	=	0x00e8
                           0000E9   344 _picon	=	0x00e9
                           0000EA   345 _pinen	=	0x00ea
                           0000EB   346 _pipen	=	0x00eb
                           0000EC   347 _pif	=	0x00ec
                           0000ED   348 _c2l	=	0x00ed
                           0000EE   349 _c2h	=	0x00ee
                           0000EF   350 _eip	=	0x00ef
                           0000F0   351 _b	=	0x00f0
                           0000F1   352 _capcon3	=	0x00f1
                           0000F2   353 _capcon4	=	0x00f2
                           0000F3   354 _spcr	=	0x00f3
                           0000F3   355 _spcr2	=	0x00f3
                           0000F4   356 _spsr	=	0x00f4
                           0000F5   357 _spdr	=	0x00f5
                           0000F6   358 _aindids	=	0x00f6
                           0000F7   359 _eiph	=	0x00f7
                           0000F8   360 _scon_1	=	0x00f8
                           0000F9   361 _pdten	=	0x00f9
                           0000FA   362 _pdtcnt	=	0x00fa
                           0000FB   363 _pmen	=	0x00fb
                           0000FC   364 _pmd	=	0x00fc
                           0000FE   365 _eip1	=	0x00fe
                           0000FF   366 _eiph1	=	0x00ff
                                    367 ;--------------------------------------------------------
                                    368 ; special function bits
                                    369 ;--------------------------------------------------------
                                    370 	.area RSEG    (ABS,DATA)
      000000                        371 	.org 0x0000
                                    372 ;--------------------------------------------------------
                                    373 ; overlayable register banks
                                    374 ;--------------------------------------------------------
                                    375 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        376 	.ds 8
                                    377 ;--------------------------------------------------------
                                    378 ; overlayable bit register bank
                                    379 ;--------------------------------------------------------
                                    380 	.area BIT_BANK	(REL,OVR,DATA)
      000020                        381 bits:
      000020                        382 	.ds 1
                           008000   383 	b0 = bits[0]
                           008100   384 	b1 = bits[1]
                           008200   385 	b2 = bits[2]
                           008300   386 	b3 = bits[3]
                           008400   387 	b4 = bits[4]
                           008500   388 	b5 = bits[5]
                           008600   389 	b6 = bits[6]
                           008700   390 	b7 = bits[7]
                                    391 ;--------------------------------------------------------
                                    392 ; internal ram data
                                    393 ;--------------------------------------------------------
                                    394 	.area DSEG    (DATA)
      000021                        395 _NUM_LEDS::
      000021                        396 	.ds 2
      000023                        397 __delay::
      000023                        398 	.ds 2
      000025                        399 _effect::
      000025                        400 	.ds 1
      000026                        401 __status::
      000026                        402 	.ds 1
      000027                        403 _cnt::
      000027                        404 	.ds 1
      000028                        405 _random2_PARM_2:
      000028                        406 	.ds 2
      00002A                        407 _setPixel_PARM_2:
      00002A                        408 	.ds 1
      00002B                        409 _setPixel_PARM_3:
      00002B                        410 	.ds 1
      00002C                        411 _setPixel_PARM_4:
      00002C                        412 	.ds 1
      00002D                        413 _setAll_PARM_2:
      00002D                        414 	.ds 1
      00002E                        415 _setAll_PARM_3:
      00002E                        416 	.ds 1
      00002F                        417 _FadeInOut_PARM_2:
      00002F                        418 	.ds 1
      000030                        419 _FadeInOut_PARM_3:
      000030                        420 	.ds 1
      000031                        421 _FadeInOut_green_65536_99:
      000031                        422 	.ds 1
      000032                        423 _FadeInOut_g_65536_100:
      000032                        424 	.ds 1
      000033                        425 _FadeInOut_r_65536_100:
      000033                        426 	.ds 1
      000034                        427 _FadeInOut_curEffect_65536_100:
      000034                        428 	.ds 1
      000035                        429 _FadeInOut_k_131072_104:
      000035                        430 	.ds 2
      000037                        431 _Strobe_PARM_2:
      000037                        432 	.ds 1
      000038                        433 _Strobe_PARM_3:
      000038                        434 	.ds 1
      000039                        435 _Strobe_PARM_4:
      000039                        436 	.ds 2
      00003B                        437 _Strobe_PARM_5:
      00003B                        438 	.ds 2
      00003D                        439 _Strobe_PARM_6:
      00003D                        440 	.ds 2
      00003F                        441 _CylonBounce_PARM_2:
      00003F                        442 	.ds 1
      000040                        443 _CylonBounce_PARM_3:
      000040                        444 	.ds 1
      000041                        445 _CylonBounce_PARM_4:
      000041                        446 	.ds 2
      000043                        447 _CylonBounce_PARM_5:
      000043                        448 	.ds 2
      000045                        449 _CylonBounce_PARM_6:
      000045                        450 	.ds 2
      000047                        451 _CylonBounce_green_65536_112:
      000047                        452 	.ds 1
      000048                        453 _CylonBounce_curEffect_65536_113:
      000048                        454 	.ds 1
      000049                        455 _CylonBounce_i_131072_114:
      000049                        456 	.ds 2
      00004B                        457 _CylonBounce_j_262144_121:
      00004B                        458 	.ds 2
      00004D                        459 _CylonBounce_sloc0_1_0:
      00004D                        460 	.ds 1
      00004E                        461 _CylonBounce_sloc1_1_0:
      00004E                        462 	.ds 1
      00004F                        463 _Twinkle_PARM_2:
      00004F                        464 	.ds 1
      000050                        465 _Twinkle_PARM_3:
      000050                        466 	.ds 1
      000051                        467 _Twinkle_PARM_4:
      000051                        468 	.ds 2
      000053                        469 _Twinkle_PARM_5:
      000053                        470 	.ds 2
      000055                        471 _Twinkle_PARM_6:
      000055                        472 	.ds 1
      000056                        473 _TwinkleRandom_PARM_2:
      000056                        474 	.ds 2
      000058                        475 _TwinkleRandom_PARM_3:
      000058                        476 	.ds 1
      000059                        477 _TwinkleRandom_Count_65536_130:
      000059                        478 	.ds 2
      00005B                        479 _TwinkleRandom_curEffect_65536_131:
      00005B                        480 	.ds 1
      00005C                        481 _Sparkle_PARM_2:
      00005C                        482 	.ds 1
      00005D                        483 _Sparkle_PARM_3:
      00005D                        484 	.ds 1
      00005E                        485 _Sparkle_PARM_4:
      00005E                        486 	.ds 2
      000060                        487 _SnowSparkle_PARM_2:
      000060                        488 	.ds 1
      000061                        489 _SnowSparkle_PARM_3:
      000061                        490 	.ds 1
      000062                        491 _SnowSparkle_PARM_4:
      000062                        492 	.ds 2
      000064                        493 _SnowSparkle_PARM_5:
      000064                        494 	.ds 2
      000066                        495 _colorWipe_PARM_2:
      000066                        496 	.ds 1
      000067                        497 _colorWipe_PARM_3:
      000067                        498 	.ds 1
      000068                        499 _colorWipe_PARM_4:
      000068                        500 	.ds 2
      00006A                        501 _rainbowCycle_j_65536_147:
      00006A                        502 	.ds 2
      00006C                        503 _rainbowCycle_curEffect_65536_147:
      00006C                        504 	.ds 1
      00006D                        505 _Wheel_c_65536_154:
      00006D                        506 	.ds 3
      000070                        507 _theaterChase_PARM_2:
      000070                        508 	.ds 1
      000071                        509 _theaterChase_PARM_3:
      000071                        510 	.ds 1
      000072                        511 _theaterChase_PARM_4:
      000072                        512 	.ds 2
      000074                        513 _theaterChase_j_131072_160:
      000074                        514 	.ds 2
      000076                        515 _theaterChaseRainbow_c_65536_171:
      000076                        516 	.ds 3
      000079                        517 _theaterChaseRainbow_curEffect_65536_171:
      000079                        518 	.ds 1
      00007A                        519 _theaterChaseRainbow_j_131072_172:
      00007A                        520 	.ds 2
      00007C                        521 _theaterChaseRainbow_q_262144_174:
      00007C                        522 	.ds 2
                                    523 ;--------------------------------------------------------
                                    524 ; overlayable items in internal ram
                                    525 ;--------------------------------------------------------
                                    526 	.area	OSEG    (OVR,DATA)
                                    527 	.area	OSEG    (OVR,DATA)
      00000C                        528 _writeXram_PARM_2:
      00000C                        529 	.ds 1
                                    530 	.area	OSEG    (OVR,DATA)
                                    531 	.area	OSEG    (OVR,DATA)
      00000C                        532 _TIM2_begin_PARM_2:
      00000C                        533 	.ds 2
                                    534 ;--------------------------------------------------------
                                    535 ; Stack segment in internal ram
                                    536 ;--------------------------------------------------------
                                    537 	.area	SSEG
      00007E                        538 __start__stack:
      00007E                        539 	.ds	1
                                    540 
                                    541 ;--------------------------------------------------------
                                    542 ; indirectly addressable internal ram data
                                    543 ;--------------------------------------------------------
                                    544 	.area ISEG    (DATA)
                                    545 ;--------------------------------------------------------
                                    546 ; absolute internal ram data
                                    547 ;--------------------------------------------------------
                                    548 	.area IABS    (ABS,DATA)
                                    549 	.area IABS    (ABS,DATA)
                                    550 ;--------------------------------------------------------
                                    551 ; bit data
                                    552 ;--------------------------------------------------------
                                    553 	.area BSEG    (BIT)
                                    554 ;--------------------------------------------------------
                                    555 ; paged external ram data
                                    556 ;--------------------------------------------------------
                                    557 	.area PSEG    (PAG,XDATA)
                                    558 ;--------------------------------------------------------
                                    559 ; external ram data
                                    560 ;--------------------------------------------------------
                                    561 	.area XSEG    (XDATA)
                                    562 ;--------------------------------------------------------
                                    563 ; absolute external ram data
                                    564 ;--------------------------------------------------------
                                    565 	.area XABS    (ABS,XDATA)
                                    566 ;--------------------------------------------------------
                                    567 ; external initialized ram data
                                    568 ;--------------------------------------------------------
                                    569 	.area XISEG   (XDATA)
                                    570 	.area HOME    (CODE)
                                    571 	.area GSINIT0 (CODE)
                                    572 	.area GSINIT1 (CODE)
                                    573 	.area GSINIT2 (CODE)
                                    574 	.area GSINIT3 (CODE)
                                    575 	.area GSINIT4 (CODE)
                                    576 	.area GSINIT5 (CODE)
                                    577 	.area GSINIT  (CODE)
                                    578 	.area GSFINAL (CODE)
                                    579 	.area CSEG    (CODE)
                                    580 ;--------------------------------------------------------
                                    581 ; interrupt vector
                                    582 ;--------------------------------------------------------
                                    583 	.area HOME    (CODE)
      000000                        584 __interrupt_vect:
      000000 02 00 61         [24]  585 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  586 	reti
      000004                        587 	.ds	7
      00000B 32               [24]  588 	reti
      00000C                        589 	.ds	7
      000013 32               [24]  590 	reti
      000014                        591 	.ds	7
      00001B 32               [24]  592 	reti
      00001C                        593 	.ds	7
      000023 32               [24]  594 	reti
      000024                        595 	.ds	7
      00002B 02 15 02         [24]  596 	ljmp	_timer2
      00002E                        597 	.ds	5
      000033 32               [24]  598 	reti
      000034                        599 	.ds	7
      00003B 02 14 A6         [24]  600 	ljmp	_PIN_INT_FUCTION
      00003E                        601 	.ds	5
      000043 32               [24]  602 	reti
      000044                        603 	.ds	7
      00004B 32               [24]  604 	reti
      00004C                        605 	.ds	7
      000053 32               [24]  606 	reti
      000054                        607 	.ds	7
      00005B 02 14 69         [24]  608 	ljmp	_ADC_INT_FUCTION
                                    609 ;--------------------------------------------------------
                                    610 ; global & static initialisations
                                    611 ;--------------------------------------------------------
                                    612 	.area HOME    (CODE)
                                    613 	.area GSINIT  (CODE)
                                    614 	.area GSFINAL (CODE)
                                    615 	.area GSINIT  (CODE)
                                    616 	.globl __sdcc_gsinit_startup
                                    617 	.globl __sdcc_program_startup
                                    618 	.globl __start__stack
                                    619 	.globl __mcs51_genXINIT
                                    620 	.globl __mcs51_genXRAMCLEAR
                                    621 	.globl __mcs51_genRAMCLEAR
                                    622 ;	./N76_UCS1903.c:48: uint16_t NUM_LEDS =	10;
      0000BA 75 21 0A         [24]  623 	mov	_NUM_LEDS,#0x0a
      0000BD 75 22 00         [24]  624 	mov	(_NUM_LEDS + 1),#0x00
                                    625 ;	./N76_UCS1903.c:49: uint16_t _delay =	4096;
      0000C0 75 23 00         [24]  626 	mov	__delay,#0x00
      0000C3 75 24 10         [24]  627 	mov	(__delay + 1),#0x10
                                    628 ;	./N76_UCS1903.c:50: uint8_t effect=0;
      0000C6 75 25 00         [24]  629 	mov	_effect,#0x00
                                    630 ;	./N76_UCS1903.c:51: uint8_t _status=0;
      0000C9 75 26 00         [24]  631 	mov	__status,#0x00
                                    632 ;	./N76_UCS1903.c:52: uint8_t cnt=0;
      0000CC 75 27 00         [24]  633 	mov	_cnt,#0x00
                                    634 	.area GSFINAL (CODE)
      0000DA 02 00 5E         [24]  635 	ljmp	__sdcc_program_startup
                                    636 ;--------------------------------------------------------
                                    637 ; Home
                                    638 ;--------------------------------------------------------
                                    639 	.area HOME    (CODE)
                                    640 	.area HOME    (CODE)
      00005E                        641 __sdcc_program_startup:
      00005E 02 11 9A         [24]  642 	ljmp	_main
                                    643 ;	return from main will return to caller
                                    644 ;--------------------------------------------------------
                                    645 ; code
                                    646 ;--------------------------------------------------------
                                    647 	.area CSEG    (CODE)
                                    648 ;------------------------------------------------------------
                                    649 ;Allocation info for local variables in function 'random'
                                    650 ;------------------------------------------------------------
                                    651 ;howbig                    Allocated to registers r6 r7 
                                    652 ;------------------------------------------------------------
                                    653 ;	./N76_UCS1903.c:80: uint16_t random(uint16_t howbig)
                                    654 ;	-----------------------------------------
                                    655 ;	 function random
                                    656 ;	-----------------------------------------
      0000DD                        657 _random:
                           000007   658 	ar7 = 0x07
                           000006   659 	ar6 = 0x06
                           000005   660 	ar5 = 0x05
                           000004   661 	ar4 = 0x04
                           000003   662 	ar3 = 0x03
                           000002   663 	ar2 = 0x02
                           000001   664 	ar1 = 0x01
                           000000   665 	ar0 = 0x00
      0000DD AE 82            [24]  666 	mov	r6,dpl
      0000DF AF 83            [24]  667 	mov	r7,dph
                                    668 ;	./N76_UCS1903.c:82: if (howbig == 0)
      0000E1 EE               [12]  669 	mov	a,r6
      0000E2 4F               [12]  670 	orl	a,r7
      0000E3 70 04            [24]  671 	jnz	00102$
                                    672 ;	./N76_UCS1903.c:84: return 0;
      0000E5 90 00 00         [24]  673 	mov	dptr,#0x0000
      0000E8 22               [24]  674 	ret
      0000E9                        675 00102$:
                                    676 ;	./N76_UCS1903.c:86: return rand() % howbig;
      0000E9 C0 07            [24]  677 	push	ar7
      0000EB C0 06            [24]  678 	push	ar6
      0000ED 12 17 41         [24]  679 	lcall	_rand
      0000F0 AC 82            [24]  680 	mov	r4,dpl
      0000F2 AD 83            [24]  681 	mov	r5,dph
      0000F4 D0 06            [24]  682 	pop	ar6
      0000F6 D0 07            [24]  683 	pop	ar7
      0000F8 8C 82            [24]  684 	mov	dpl,r4
      0000FA 8D 83            [24]  685 	mov	dph,r5
      0000FC 8E 0C            [24]  686 	mov	__moduint_PARM_2,r6
      0000FE 8F 0D            [24]  687 	mov	(__moduint_PARM_2 + 1),r7
                                    688 ;	./N76_UCS1903.c:87: }
      000100 02 19 50         [24]  689 	ljmp	__moduint
                                    690 ;------------------------------------------------------------
                                    691 ;Allocation info for local variables in function 'random2'
                                    692 ;------------------------------------------------------------
                                    693 ;howbig                    Allocated with name '_random2_PARM_2'
                                    694 ;howsmall                  Allocated to registers r6 r7 
                                    695 ;diff                      Allocated to registers 
                                    696 ;------------------------------------------------------------
                                    697 ;	./N76_UCS1903.c:89: uint16_t random2(uint16_t howsmall, uint16_t howbig)
                                    698 ;	-----------------------------------------
                                    699 ;	 function random2
                                    700 ;	-----------------------------------------
      000103                        701 _random2:
      000103 AE 82            [24]  702 	mov	r6,dpl
      000105 AF 83            [24]  703 	mov	r7,dph
                                    704 ;	./N76_UCS1903.c:91: if (howsmall >= howbig)
      000107 C3               [12]  705 	clr	c
      000108 EE               [12]  706 	mov	a,r6
      000109 95 28            [12]  707 	subb	a,_random2_PARM_2
      00010B EF               [12]  708 	mov	a,r7
      00010C 95 29            [12]  709 	subb	a,(_random2_PARM_2 + 1)
      00010E 40 05            [24]  710 	jc	00102$
                                    711 ;	./N76_UCS1903.c:93: return howsmall;
      000110 8E 82            [24]  712 	mov	dpl,r6
      000112 8F 83            [24]  713 	mov	dph,r7
      000114 22               [24]  714 	ret
      000115                        715 00102$:
                                    716 ;	./N76_UCS1903.c:95: uint16_t diff = howbig - howsmall;
      000115 E5 28            [12]  717 	mov	a,_random2_PARM_2
      000117 C3               [12]  718 	clr	c
      000118 9E               [12]  719 	subb	a,r6
      000119 F5 82            [12]  720 	mov	dpl,a
      00011B E5 29            [12]  721 	mov	a,(_random2_PARM_2 + 1)
      00011D 9F               [12]  722 	subb	a,r7
      00011E F5 83            [12]  723 	mov	dph,a
                                    724 ;	./N76_UCS1903.c:96: return random(diff) + howsmall;
      000120 C0 07            [24]  725 	push	ar7
      000122 C0 06            [24]  726 	push	ar6
      000124 12 00 DD         [24]  727 	lcall	_random
      000127 E5 82            [12]  728 	mov	a,dpl
      000129 85 83 F0         [24]  729 	mov	b,dph
      00012C D0 06            [24]  730 	pop	ar6
      00012E D0 07            [24]  731 	pop	ar7
      000130 2E               [12]  732 	add	a,r6
      000131 F5 82            [12]  733 	mov	dpl,a
      000133 EF               [12]  734 	mov	a,r7
      000134 35 F0            [12]  735 	addc	a,b
      000136 F5 83            [12]  736 	mov	dph,a
                                    737 ;	./N76_UCS1903.c:97: }
      000138 22               [24]  738 	ret
                                    739 ;------------------------------------------------------------
                                    740 ;Allocation info for local variables in function 'LED__SendZero_'
                                    741 ;------------------------------------------------------------
                                    742 ;	./N76_UCS1903.c:99: void LED__SendZero_()
                                    743 ;	-----------------------------------------
                                    744 ;	 function LED__SendZero_
                                    745 ;	-----------------------------------------
      000139                        746 _LED__SendZero_:
                                    747 ;	./N76_UCS1903.c:101: setb(LED_PORT, LED_PIN);
      000139 43 80 40         [24]  748 	orl	_p0,#0x40
                                    749 ;	./N76_UCS1903.c:102: _nop_();
      00013C 00               [12]  750 	nop
                                    751 ;	./N76_UCS1903.c:103: _nop_();
      00013D 00               [12]  752 	nop
                                    753 ;	./N76_UCS1903.c:104: clrb(LED_PORT, LED_PIN);
      00013E 53 80 BF         [24]  754 	anl	_p0,#0xbf
                                    755 ;	./N76_UCS1903.c:105: _nop_();
      000141 00               [12]  756 	nop
                                    757 ;	./N76_UCS1903.c:106: _nop_();
      000142 00               [12]  758 	nop
                                    759 ;	./N76_UCS1903.c:107: _nop_();
      000143 00               [12]  760 	nop
                                    761 ;	./N76_UCS1903.c:108: _nop_();
      000144 00               [12]  762 	nop
                                    763 ;	./N76_UCS1903.c:109: }
      000145 22               [24]  764 	ret
                                    765 ;------------------------------------------------------------
                                    766 ;Allocation info for local variables in function 'LED__SendOne_'
                                    767 ;------------------------------------------------------------
                                    768 ;	./N76_UCS1903.c:110: void LED__SendOne_()
                                    769 ;	-----------------------------------------
                                    770 ;	 function LED__SendOne_
                                    771 ;	-----------------------------------------
      000146                        772 _LED__SendOne_:
                                    773 ;	./N76_UCS1903.c:112: setb(LED_PORT, LED_PIN);
      000146 43 80 40         [24]  774 	orl	_p0,#0x40
                                    775 ;	./N76_UCS1903.c:113: _nop_();
      000149 00               [12]  776 	nop
                                    777 ;	./N76_UCS1903.c:114: _nop_();
      00014A 00               [12]  778 	nop
                                    779 ;	./N76_UCS1903.c:115: _nop_();
      00014B 00               [12]  780 	nop
                                    781 ;	./N76_UCS1903.c:116: _nop_();
      00014C 00               [12]  782 	nop
                                    783 ;	./N76_UCS1903.c:117: _nop_();
      00014D 00               [12]  784 	nop
                                    785 ;	./N76_UCS1903.c:118: _nop_();
      00014E 00               [12]  786 	nop
                                    787 ;	./N76_UCS1903.c:119: _nop_();
      00014F 00               [12]  788 	nop
                                    789 ;	./N76_UCS1903.c:120: clrb(LED_PORT, LED_PIN);
      000150 53 80 BF         [24]  790 	anl	_p0,#0xbf
                                    791 ;	./N76_UCS1903.c:121: }
      000153 22               [24]  792 	ret
                                    793 ;------------------------------------------------------------
                                    794 ;Allocation info for local variables in function 'LED__SendByte_'
                                    795 ;------------------------------------------------------------
                                    796 ;dat                       Allocated to registers r7 
                                    797 ;------------------------------------------------------------
                                    798 ;	./N76_UCS1903.c:122: void LED__SendByte_(uint8_t dat)
                                    799 ;	-----------------------------------------
                                    800 ;	 function LED__SendByte_
                                    801 ;	-----------------------------------------
      000154                        802 _LED__SendByte_:
                                    803 ;	./N76_UCS1903.c:124: if (dat & 0x80)
      000154 E5 82            [12]  804 	mov	a,dpl
      000156 FF               [12]  805 	mov	r7,a
      000157 30 E7 09         [24]  806 	jnb	acc.7,00102$
                                    807 ;	./N76_UCS1903.c:125: LED__SendOne_();
      00015A C0 07            [24]  808 	push	ar7
      00015C 12 01 46         [24]  809 	lcall	_LED__SendOne_
      00015F D0 07            [24]  810 	pop	ar7
      000161 80 07            [24]  811 	sjmp	00103$
      000163                        812 00102$:
                                    813 ;	./N76_UCS1903.c:127: LED__SendZero_();
      000163 C0 07            [24]  814 	push	ar7
      000165 12 01 39         [24]  815 	lcall	_LED__SendZero_
      000168 D0 07            [24]  816 	pop	ar7
      00016A                        817 00103$:
                                    818 ;	./N76_UCS1903.c:128: if (dat & 0x40)
      00016A EF               [12]  819 	mov	a,r7
      00016B 30 E6 09         [24]  820 	jnb	acc.6,00105$
                                    821 ;	./N76_UCS1903.c:129: LED__SendOne_();
      00016E C0 07            [24]  822 	push	ar7
      000170 12 01 46         [24]  823 	lcall	_LED__SendOne_
      000173 D0 07            [24]  824 	pop	ar7
      000175 80 07            [24]  825 	sjmp	00106$
      000177                        826 00105$:
                                    827 ;	./N76_UCS1903.c:131: LED__SendZero_();
      000177 C0 07            [24]  828 	push	ar7
      000179 12 01 39         [24]  829 	lcall	_LED__SendZero_
      00017C D0 07            [24]  830 	pop	ar7
      00017E                        831 00106$:
                                    832 ;	./N76_UCS1903.c:132: if (dat & 0x20)
      00017E EF               [12]  833 	mov	a,r7
      00017F 30 E5 09         [24]  834 	jnb	acc.5,00108$
                                    835 ;	./N76_UCS1903.c:133: LED__SendOne_();
      000182 C0 07            [24]  836 	push	ar7
      000184 12 01 46         [24]  837 	lcall	_LED__SendOne_
      000187 D0 07            [24]  838 	pop	ar7
      000189 80 07            [24]  839 	sjmp	00109$
      00018B                        840 00108$:
                                    841 ;	./N76_UCS1903.c:135: LED__SendZero_();
      00018B C0 07            [24]  842 	push	ar7
      00018D 12 01 39         [24]  843 	lcall	_LED__SendZero_
      000190 D0 07            [24]  844 	pop	ar7
      000192                        845 00109$:
                                    846 ;	./N76_UCS1903.c:136: if (dat & 0x10)
      000192 EF               [12]  847 	mov	a,r7
      000193 30 E4 09         [24]  848 	jnb	acc.4,00111$
                                    849 ;	./N76_UCS1903.c:137: LED__SendOne_();
      000196 C0 07            [24]  850 	push	ar7
      000198 12 01 46         [24]  851 	lcall	_LED__SendOne_
      00019B D0 07            [24]  852 	pop	ar7
      00019D 80 07            [24]  853 	sjmp	00112$
      00019F                        854 00111$:
                                    855 ;	./N76_UCS1903.c:139: LED__SendZero_();
      00019F C0 07            [24]  856 	push	ar7
      0001A1 12 01 39         [24]  857 	lcall	_LED__SendZero_
      0001A4 D0 07            [24]  858 	pop	ar7
      0001A6                        859 00112$:
                                    860 ;	./N76_UCS1903.c:140: if (dat & 0x08)
      0001A6 EF               [12]  861 	mov	a,r7
      0001A7 30 E3 09         [24]  862 	jnb	acc.3,00114$
                                    863 ;	./N76_UCS1903.c:141: LED__SendOne_();
      0001AA C0 07            [24]  864 	push	ar7
      0001AC 12 01 46         [24]  865 	lcall	_LED__SendOne_
      0001AF D0 07            [24]  866 	pop	ar7
      0001B1 80 07            [24]  867 	sjmp	00115$
      0001B3                        868 00114$:
                                    869 ;	./N76_UCS1903.c:143: LED__SendZero_();
      0001B3 C0 07            [24]  870 	push	ar7
      0001B5 12 01 39         [24]  871 	lcall	_LED__SendZero_
      0001B8 D0 07            [24]  872 	pop	ar7
      0001BA                        873 00115$:
                                    874 ;	./N76_UCS1903.c:144: if (dat & 0x04)
      0001BA EF               [12]  875 	mov	a,r7
      0001BB 30 E2 09         [24]  876 	jnb	acc.2,00117$
                                    877 ;	./N76_UCS1903.c:145: LED__SendOne_();
      0001BE C0 07            [24]  878 	push	ar7
      0001C0 12 01 46         [24]  879 	lcall	_LED__SendOne_
      0001C3 D0 07            [24]  880 	pop	ar7
      0001C5 80 07            [24]  881 	sjmp	00118$
      0001C7                        882 00117$:
                                    883 ;	./N76_UCS1903.c:147: LED__SendZero_();
      0001C7 C0 07            [24]  884 	push	ar7
      0001C9 12 01 39         [24]  885 	lcall	_LED__SendZero_
      0001CC D0 07            [24]  886 	pop	ar7
      0001CE                        887 00118$:
                                    888 ;	./N76_UCS1903.c:148: if (dat & 0x02)
      0001CE EF               [12]  889 	mov	a,r7
      0001CF 30 E1 09         [24]  890 	jnb	acc.1,00120$
                                    891 ;	./N76_UCS1903.c:149: LED__SendOne_();
      0001D2 C0 07            [24]  892 	push	ar7
      0001D4 12 01 46         [24]  893 	lcall	_LED__SendOne_
      0001D7 D0 07            [24]  894 	pop	ar7
      0001D9 80 07            [24]  895 	sjmp	00121$
      0001DB                        896 00120$:
                                    897 ;	./N76_UCS1903.c:151: LED__SendZero_();
      0001DB C0 07            [24]  898 	push	ar7
      0001DD 12 01 39         [24]  899 	lcall	_LED__SendZero_
      0001E0 D0 07            [24]  900 	pop	ar7
      0001E2                        901 00121$:
                                    902 ;	./N76_UCS1903.c:152: if (dat & 0x01)
      0001E2 EF               [12]  903 	mov	a,r7
      0001E3 30 E0 03         [24]  904 	jnb	acc.0,00123$
                                    905 ;	./N76_UCS1903.c:153: LED__SendOne_();
      0001E6 02 01 46         [24]  906 	ljmp	_LED__SendOne_
      0001E9                        907 00123$:
                                    908 ;	./N76_UCS1903.c:155: LED__SendZero_();
                                    909 ;	./N76_UCS1903.c:156: }
      0001E9 02 01 39         [24]  910 	ljmp	_LED__SendZero_
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function 'clearAll'
                                    913 ;------------------------------------------------------------
                                    914 ;i                         Allocated to registers r6 r7 
                                    915 ;------------------------------------------------------------
                                    916 ;	./N76_UCS1903.c:158: void clearAll()
                                    917 ;	-----------------------------------------
                                    918 ;	 function clearAll
                                    919 ;	-----------------------------------------
      0001EC                        920 _clearAll:
                                    921 ;	./N76_UCS1903.c:160: for (uint16_t i = 0; i < 300; i++)
      0001EC 7E 00            [12]  922 	mov	r6,#0x00
      0001EE 7F 00            [12]  923 	mov	r7,#0x00
      0001F0                        924 00103$:
      0001F0 8E 04            [24]  925 	mov	ar4,r6
      0001F2 8F 05            [24]  926 	mov	ar5,r7
      0001F4 C3               [12]  927 	clr	c
      0001F5 EC               [12]  928 	mov	a,r4
      0001F6 94 2C            [12]  929 	subb	a,#0x2c
      0001F8 ED               [12]  930 	mov	a,r5
      0001F9 94 01            [12]  931 	subb	a,#0x01
      0001FB 50 21            [24]  932 	jnc	00105$
                                    933 ;	./N76_UCS1903.c:162: LED__SendByte_(0);
      0001FD 75 82 00         [24]  934 	mov	dpl,#0x00
      000200 C0 07            [24]  935 	push	ar7
      000202 C0 06            [24]  936 	push	ar6
      000204 12 01 54         [24]  937 	lcall	_LED__SendByte_
                                    938 ;	./N76_UCS1903.c:163: LED__SendByte_(0);
      000207 75 82 00         [24]  939 	mov	dpl,#0x00
      00020A 12 01 54         [24]  940 	lcall	_LED__SendByte_
                                    941 ;	./N76_UCS1903.c:164: LED__SendByte_(0);
      00020D 75 82 00         [24]  942 	mov	dpl,#0x00
      000210 12 01 54         [24]  943 	lcall	_LED__SendByte_
      000213 D0 06            [24]  944 	pop	ar6
      000215 D0 07            [24]  945 	pop	ar7
                                    946 ;	./N76_UCS1903.c:160: for (uint16_t i = 0; i < 300; i++)
      000217 0E               [12]  947 	inc	r6
      000218 BE 00 D5         [24]  948 	cjne	r6,#0x00,00103$
      00021B 0F               [12]  949 	inc	r7
      00021C 80 D2            [24]  950 	sjmp	00103$
      00021E                        951 00105$:
                                    952 ;	./N76_UCS1903.c:166: }
      00021E 22               [24]  953 	ret
                                    954 ;------------------------------------------------------------
                                    955 ;Allocation info for local variables in function 'readXram'
                                    956 ;------------------------------------------------------------
                                    957 ;addr                      Allocated to registers 
                                    958 ;------------------------------------------------------------
                                    959 ;	./N76_UCS1903.c:168: uint8_t readXram(uint16_t addr)
                                    960 ;	-----------------------------------------
                                    961 ;	 function readXram
                                    962 ;	-----------------------------------------
      00021F                        963 _readXram:
                                    964 ;	./N76_UCS1903.c:170: __asm__("MOVX A,@DPTR");
      00021F E0               [24]  965 	MOVX	A,@DPTR
                                    966 ;	./N76_UCS1903.c:171: __asm__("MOV DPL,A");
      000220 F5 82            [12]  967 	MOV	DPL,A
                                    968 ;	./N76_UCS1903.c:172: }
      000222 22               [24]  969 	ret
                                    970 ;------------------------------------------------------------
                                    971 ;Allocation info for local variables in function 'writeXram'
                                    972 ;------------------------------------------------------------
                                    973 ;value                     Allocated with name '_writeXram_PARM_2'
                                    974 ;addr                      Allocated to registers 
                                    975 ;------------------------------------------------------------
                                    976 ;	./N76_UCS1903.c:173: void writeXram(uint16_t addr, uint8_t value)
                                    977 ;	-----------------------------------------
                                    978 ;	 function writeXram
                                    979 ;	-----------------------------------------
      000223                        980 _writeXram:
                                    981 ;	./N76_UCS1903.c:175: __asm__("MOV A,_writeXram_PARM_2");
      000223 E5 0C            [12]  982 	MOV	A,_writeXram_PARM_2
                                    983 ;	./N76_UCS1903.c:176: __asm__("MOVX @DPTR,A");
      000225 F0               [24]  984 	MOVX	@DPTR,A
                                    985 ;	./N76_UCS1903.c:177: }
      000226 22               [24]  986 	ret
                                    987 ;------------------------------------------------------------
                                    988 ;Allocation info for local variables in function 'showStrip'
                                    989 ;------------------------------------------------------------
                                    990 ;i                         Allocated to registers r7 
                                    991 ;g                         Allocated to registers r4 
                                    992 ;r                         Allocated to registers r3 
                                    993 ;b                         Allocated to registers r6 
                                    994 ;------------------------------------------------------------
                                    995 ;	./N76_UCS1903.c:179: void showStrip()
                                    996 ;	-----------------------------------------
                                    997 ;	 function showStrip
                                    998 ;	-----------------------------------------
      000227                        999 _showStrip:
                                   1000 ;	./N76_UCS1903.c:181: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      000227 7F 00            [12] 1001 	mov	r7,#0x00
      000229                       1002 00103$:
      000229 8F 05            [24] 1003 	mov	ar5,r7
      00022B 7E 00            [12] 1004 	mov	r6,#0x00
      00022D C3               [12] 1005 	clr	c
      00022E ED               [12] 1006 	mov	a,r5
      00022F 95 21            [12] 1007 	subb	a,_NUM_LEDS
      000231 EE               [12] 1008 	mov	a,r6
      000232 95 22            [12] 1009 	subb	a,(_NUM_LEDS + 1)
      000234 40 01            [24] 1010 	jc	00116$
      000236 22               [24] 1011 	ret
      000237                       1012 00116$:
                                   1013 ;	./N76_UCS1903.c:184: g = readXram(i * 3);
      000237 8F 0C            [24] 1014 	mov	__mulint_PARM_2,r7
      000239 75 0D 00         [24] 1015 	mov	(__mulint_PARM_2 + 1),#0x00
      00023C 90 00 03         [24] 1016 	mov	dptr,#0x0003
      00023F C0 07            [24] 1017 	push	ar7
      000241 12 18 C5         [24] 1018 	lcall	__mulint
      000244 AD 82            [24] 1019 	mov	r5,dpl
      000246 AE 83            [24] 1020 	mov  r6,dph
      000248 C0 06            [24] 1021 	push	ar6
      00024A C0 05            [24] 1022 	push	ar5
      00024C 12 02 1F         [24] 1023 	lcall	_readXram
      00024F AC 82            [24] 1024 	mov	r4,dpl
      000251 D0 05            [24] 1025 	pop	ar5
      000253 D0 06            [24] 1026 	pop	ar6
                                   1027 ;	./N76_UCS1903.c:185: r = readXram(i * 3 + 1);
      000255 74 01            [12] 1028 	mov	a,#0x01
      000257 2D               [12] 1029 	add	a,r5
      000258 FA               [12] 1030 	mov	r2,a
      000259 E4               [12] 1031 	clr	a
      00025A 3E               [12] 1032 	addc	a,r6
      00025B FB               [12] 1033 	mov	r3,a
      00025C 8A 82            [24] 1034 	mov	dpl,r2
      00025E 8B 83            [24] 1035 	mov	dph,r3
      000260 C0 06            [24] 1036 	push	ar6
      000262 C0 05            [24] 1037 	push	ar5
      000264 C0 04            [24] 1038 	push	ar4
      000266 12 02 1F         [24] 1039 	lcall	_readXram
      000269 AB 82            [24] 1040 	mov	r3,dpl
      00026B D0 04            [24] 1041 	pop	ar4
      00026D D0 05            [24] 1042 	pop	ar5
      00026F D0 06            [24] 1043 	pop	ar6
                                   1044 ;	./N76_UCS1903.c:186: b = readXram(i * 3 + 2);
      000271 74 02            [12] 1045 	mov	a,#0x02
      000273 2D               [12] 1046 	add	a,r5
      000274 FD               [12] 1047 	mov	r5,a
      000275 E4               [12] 1048 	clr	a
      000276 3E               [12] 1049 	addc	a,r6
      000277 FE               [12] 1050 	mov	r6,a
      000278 8D 82            [24] 1051 	mov	dpl,r5
      00027A 8E 83            [24] 1052 	mov	dph,r6
      00027C C0 04            [24] 1053 	push	ar4
      00027E C0 03            [24] 1054 	push	ar3
      000280 12 02 1F         [24] 1055 	lcall	_readXram
      000283 AE 82            [24] 1056 	mov	r6,dpl
      000285 D0 03            [24] 1057 	pop	ar3
      000287 D0 04            [24] 1058 	pop	ar4
                                   1059 ;	./N76_UCS1903.c:188: LED__SendByte_(g);
      000289 8C 82            [24] 1060 	mov	dpl,r4
      00028B C0 06            [24] 1061 	push	ar6
      00028D C0 03            [24] 1062 	push	ar3
      00028F 12 01 54         [24] 1063 	lcall	_LED__SendByte_
      000292 D0 03            [24] 1064 	pop	ar3
                                   1065 ;	./N76_UCS1903.c:189: LED__SendByte_(r);
      000294 8B 82            [24] 1066 	mov	dpl,r3
      000296 12 01 54         [24] 1067 	lcall	_LED__SendByte_
      000299 D0 06            [24] 1068 	pop	ar6
                                   1069 ;	./N76_UCS1903.c:190: LED__SendByte_(b);
      00029B 8E 82            [24] 1070 	mov	dpl,r6
      00029D 12 01 54         [24] 1071 	lcall	_LED__SendByte_
      0002A0 D0 07            [24] 1072 	pop	ar7
                                   1073 ;	./N76_UCS1903.c:181: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      0002A2 0F               [12] 1074 	inc	r7
                                   1075 ;	./N76_UCS1903.c:192: }
      0002A3 02 02 29         [24] 1076 	ljmp	00103$
                                   1077 ;------------------------------------------------------------
                                   1078 ;Allocation info for local variables in function 'setPixel'
                                   1079 ;------------------------------------------------------------
                                   1080 ;green                     Allocated with name '_setPixel_PARM_2'
                                   1081 ;red                       Allocated with name '_setPixel_PARM_3'
                                   1082 ;blue                      Allocated with name '_setPixel_PARM_4'
                                   1083 ;Pixel                     Allocated to registers r6 r7 
                                   1084 ;------------------------------------------------------------
                                   1085 ;	./N76_UCS1903.c:195: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                   1086 ;	-----------------------------------------
                                   1087 ;	 function setPixel
                                   1088 ;	-----------------------------------------
      0002A6                       1089 _setPixel:
      0002A6 AE 82            [24] 1090 	mov	r6,dpl
      0002A8 AF 83            [24] 1091 	mov	r7,dph
                                   1092 ;	./N76_UCS1903.c:197: writeXram(Pixel * 3, green);
      0002AA 8E 0C            [24] 1093 	mov	__mulint_PARM_2,r6
      0002AC 8F 0D            [24] 1094 	mov	(__mulint_PARM_2 + 1),r7
      0002AE 90 00 03         [24] 1095 	mov	dptr,#0x0003
      0002B1 12 18 C5         [24] 1096 	lcall	__mulint
      0002B4 AE 82            [24] 1097 	mov	r6,dpl
      0002B6 AF 83            [24] 1098 	mov  r7,dph
      0002B8 85 2A 0C         [24] 1099 	mov	_writeXram_PARM_2,_setPixel_PARM_2
      0002BB C0 07            [24] 1100 	push	ar7
      0002BD C0 06            [24] 1101 	push	ar6
      0002BF 12 02 23         [24] 1102 	lcall	_writeXram
      0002C2 D0 06            [24] 1103 	pop	ar6
      0002C4 D0 07            [24] 1104 	pop	ar7
                                   1105 ;	./N76_UCS1903.c:198: writeXram(Pixel * 3 + 1, red);
      0002C6 74 01            [12] 1106 	mov	a,#0x01
      0002C8 2E               [12] 1107 	add	a,r6
      0002C9 FC               [12] 1108 	mov	r4,a
      0002CA E4               [12] 1109 	clr	a
      0002CB 3F               [12] 1110 	addc	a,r7
      0002CC FD               [12] 1111 	mov	r5,a
      0002CD 8C 82            [24] 1112 	mov	dpl,r4
      0002CF 8D 83            [24] 1113 	mov	dph,r5
      0002D1 85 2B 0C         [24] 1114 	mov	_writeXram_PARM_2,_setPixel_PARM_3
      0002D4 C0 07            [24] 1115 	push	ar7
      0002D6 C0 06            [24] 1116 	push	ar6
      0002D8 12 02 23         [24] 1117 	lcall	_writeXram
      0002DB D0 06            [24] 1118 	pop	ar6
      0002DD D0 07            [24] 1119 	pop	ar7
                                   1120 ;	./N76_UCS1903.c:199: writeXram(Pixel * 3 + 2, blue);
      0002DF 74 02            [12] 1121 	mov	a,#0x02
      0002E1 2E               [12] 1122 	add	a,r6
      0002E2 FE               [12] 1123 	mov	r6,a
      0002E3 E4               [12] 1124 	clr	a
      0002E4 3F               [12] 1125 	addc	a,r7
      0002E5 FF               [12] 1126 	mov	r7,a
      0002E6 8E 82            [24] 1127 	mov	dpl,r6
      0002E8 8F 83            [24] 1128 	mov	dph,r7
      0002EA 85 2C 0C         [24] 1129 	mov	_writeXram_PARM_2,_setPixel_PARM_4
                                   1130 ;	./N76_UCS1903.c:200: }
      0002ED 02 02 23         [24] 1131 	ljmp	_writeXram
                                   1132 ;------------------------------------------------------------
                                   1133 ;Allocation info for local variables in function 'setAll'
                                   1134 ;------------------------------------------------------------
                                   1135 ;red                       Allocated with name '_setAll_PARM_2'
                                   1136 ;blue                      Allocated with name '_setAll_PARM_3'
                                   1137 ;green                     Allocated to registers r7 
                                   1138 ;i                         Allocated to registers r5 r6 
                                   1139 ;------------------------------------------------------------
                                   1140 ;	./N76_UCS1903.c:203: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                   1141 ;	-----------------------------------------
                                   1142 ;	 function setAll
                                   1143 ;	-----------------------------------------
      0002F0                       1144 _setAll:
      0002F0 AF 82            [24] 1145 	mov	r7,dpl
                                   1146 ;	./N76_UCS1903.c:205: for (int16_t i = 0; i < NUM_LEDS; ++i)
      0002F2 7D 00            [12] 1147 	mov	r5,#0x00
      0002F4 7E 00            [12] 1148 	mov	r6,#0x00
      0002F6                       1149 00103$:
      0002F6 8D 03            [24] 1150 	mov	ar3,r5
      0002F8 8E 04            [24] 1151 	mov	ar4,r6
      0002FA C3               [12] 1152 	clr	c
      0002FB EB               [12] 1153 	mov	a,r3
      0002FC 95 21            [12] 1154 	subb	a,_NUM_LEDS
      0002FE EC               [12] 1155 	mov	a,r4
      0002FF 95 22            [12] 1156 	subb	a,(_NUM_LEDS + 1)
      000301 50 22            [24] 1157 	jnc	00105$
                                   1158 ;	./N76_UCS1903.c:207: setPixel(i, green, red, blue);
      000303 8F 2A            [24] 1159 	mov	_setPixel_PARM_2,r7
      000305 85 2D 2B         [24] 1160 	mov	_setPixel_PARM_3,_setAll_PARM_2
      000308 85 2E 2C         [24] 1161 	mov	_setPixel_PARM_4,_setAll_PARM_3
      00030B 8D 82            [24] 1162 	mov	dpl,r5
      00030D 8E 83            [24] 1163 	mov	dph,r6
      00030F C0 07            [24] 1164 	push	ar7
      000311 C0 06            [24] 1165 	push	ar6
      000313 C0 05            [24] 1166 	push	ar5
      000315 12 02 A6         [24] 1167 	lcall	_setPixel
      000318 D0 05            [24] 1168 	pop	ar5
      00031A D0 06            [24] 1169 	pop	ar6
      00031C D0 07            [24] 1170 	pop	ar7
                                   1171 ;	./N76_UCS1903.c:205: for (int16_t i = 0; i < NUM_LEDS; ++i)
      00031E 0D               [12] 1172 	inc	r5
      00031F BD 00 D4         [24] 1173 	cjne	r5,#0x00,00103$
      000322 0E               [12] 1174 	inc	r6
      000323 80 D1            [24] 1175 	sjmp	00103$
      000325                       1176 00105$:
                                   1177 ;	./N76_UCS1903.c:209: }
      000325 22               [24] 1178 	ret
                                   1179 ;------------------------------------------------------------
                                   1180 ;Allocation info for local variables in function 'FadeInOut'
                                   1181 ;------------------------------------------------------------
                                   1182 ;red                       Allocated with name '_FadeInOut_PARM_2'
                                   1183 ;blue                      Allocated with name '_FadeInOut_PARM_3'
                                   1184 ;green                     Allocated with name '_FadeInOut_green_65536_99'
                                   1185 ;g                         Allocated with name '_FadeInOut_g_65536_100'
                                   1186 ;r                         Allocated with name '_FadeInOut_r_65536_100'
                                   1187 ;b                         Allocated to registers 
                                   1188 ;curEffect                 Allocated with name '_FadeInOut_curEffect_65536_100'
                                   1189 ;k                         Allocated to registers r4 r5 
                                   1190 ;k                         Allocated with name '_FadeInOut_k_131072_104'
                                   1191 ;------------------------------------------------------------
                                   1192 ;	./N76_UCS1903.c:210: void FadeInOut(uint8_t green, uint8_t red, uint8_t blue)
                                   1193 ;	-----------------------------------------
                                   1194 ;	 function FadeInOut
                                   1195 ;	-----------------------------------------
      000326                       1196 _FadeInOut:
      000326 85 82 31         [24] 1197 	mov	_FadeInOut_green_65536_99,dpl
                                   1198 ;	./N76_UCS1903.c:213: uint8_t curEffect = effect;
      000329 85 25 34         [24] 1199 	mov	_FadeInOut_curEffect_65536_100,_effect
                                   1200 ;	./N76_UCS1903.c:215: for (int16_t k = 0; k < 255; k = k + NUM_LEDS/50)
      00032C 7C 00            [12] 1201 	mov	r4,#0x00
      00032E 7D 00            [12] 1202 	mov	r5,#0x00
      000330                       1203 00108$:
      000330 8C 02            [24] 1204 	mov	ar2,r4
      000332 8D 03            [24] 1205 	mov	ar3,r5
      000334 C3               [12] 1206 	clr	c
      000335 EA               [12] 1207 	mov	a,r2
      000336 94 FF            [12] 1208 	subb	a,#0xff
      000338 EB               [12] 1209 	mov	a,r3
      000339 64 80            [12] 1210 	xrl	a,#0x80
      00033B 94 80            [12] 1211 	subb	a,#0x80
      00033D 40 03            [24] 1212 	jc	00145$
      00033F 02 04 25         [24] 1213 	ljmp	00103$
      000342                       1214 00145$:
                                   1215 ;	./N76_UCS1903.c:217: if (curEffect != effect) {_status=STT_NEW;return;}
      000342 E5 25            [12] 1216 	mov	a,_effect
      000344 B5 34 02         [24] 1217 	cjne	a,_FadeInOut_curEffect_65536_100,00146$
      000347 80 04            [24] 1218 	sjmp	00102$
      000349                       1219 00146$:
      000349 75 26 12         [24] 1220 	mov	__status,#0x12
      00034C 22               [24] 1221 	ret
      00034D                       1222 00102$:
                                   1223 ;	./N76_UCS1903.c:219: r = k * red / 256;
      00034D 85 2F 0C         [24] 1224 	mov	__mulint_PARM_2,_FadeInOut_PARM_2
      000350 75 0D 00         [24] 1225 	mov	(__mulint_PARM_2 + 1),#0x00
      000353 8C 82            [24] 1226 	mov	dpl,r4
      000355 8D 83            [24] 1227 	mov	dph,r5
      000357 C0 05            [24] 1228 	push	ar5
      000359 C0 04            [24] 1229 	push	ar4
      00035B 12 18 C5         [24] 1230 	lcall	__mulint
      00035E 75 0C 00         [24] 1231 	mov	__divsint_PARM_2,#0x00
      000361 75 0D 01         [24] 1232 	mov	(__divsint_PARM_2 + 1),#0x01
      000364 12 1B 61         [24] 1233 	lcall	__divsint
      000367 AA 82            [24] 1234 	mov	r2,dpl
      000369 D0 04            [24] 1235 	pop	ar4
      00036B D0 05            [24] 1236 	pop	ar5
                                   1237 ;	./N76_UCS1903.c:220: g = k * green / 256;
      00036D 85 31 0C         [24] 1238 	mov	__mulint_PARM_2,_FadeInOut_green_65536_99
      000370 75 0D 00         [24] 1239 	mov	(__mulint_PARM_2 + 1),#0x00
      000373 8C 82            [24] 1240 	mov	dpl,r4
      000375 8D 83            [24] 1241 	mov	dph,r5
      000377 C0 05            [24] 1242 	push	ar5
      000379 C0 04            [24] 1243 	push	ar4
      00037B C0 02            [24] 1244 	push	ar2
      00037D 12 18 C5         [24] 1245 	lcall	__mulint
      000380 75 0C 00         [24] 1246 	mov	__divsint_PARM_2,#0x00
      000383 75 0D 01         [24] 1247 	mov	(__divsint_PARM_2 + 1),#0x01
      000386 12 1B 61         [24] 1248 	lcall	__divsint
      000389 A9 82            [24] 1249 	mov	r1,dpl
      00038B D0 02            [24] 1250 	pop	ar2
      00038D D0 04            [24] 1251 	pop	ar4
      00038F D0 05            [24] 1252 	pop	ar5
                                   1253 ;	./N76_UCS1903.c:221: b = k * blue / 256;
      000391 85 30 0C         [24] 1254 	mov	__mulint_PARM_2,_FadeInOut_PARM_3
      000394 75 0D 00         [24] 1255 	mov	(__mulint_PARM_2 + 1),#0x00
      000397 8C 82            [24] 1256 	mov	dpl,r4
      000399 8D 83            [24] 1257 	mov	dph,r5
      00039B C0 05            [24] 1258 	push	ar5
      00039D C0 04            [24] 1259 	push	ar4
      00039F C0 02            [24] 1260 	push	ar2
      0003A1 C0 01            [24] 1261 	push	ar1
      0003A3 12 18 C5         [24] 1262 	lcall	__mulint
      0003A6 75 0C 00         [24] 1263 	mov	__divsint_PARM_2,#0x00
      0003A9 75 0D 01         [24] 1264 	mov	(__divsint_PARM_2 + 1),#0x01
      0003AC 12 1B 61         [24] 1265 	lcall	__divsint
      0003AF A8 82            [24] 1266 	mov	r0,dpl
      0003B1 D0 01            [24] 1267 	pop	ar1
      0003B3 D0 02            [24] 1268 	pop	ar2
      0003B5 88 2E            [24] 1269 	mov	_setAll_PARM_3,r0
                                   1270 ;	./N76_UCS1903.c:222: setAll(g, r, b);
      0003B7 8A 2D            [24] 1271 	mov	_setAll_PARM_2,r2
      0003B9 89 82            [24] 1272 	mov	dpl,r1
      0003BB 12 02 F0         [24] 1273 	lcall	_setAll
                                   1274 ;	./N76_UCS1903.c:223: showStrip();
      0003BE 12 02 27         [24] 1275 	lcall	_showStrip
                                   1276 ;	./N76_UCS1903.c:224: _delay_ms(DELAY2);
      0003C1 85 21 0C         [24] 1277 	mov	__divuint_PARM_2,_NUM_LEDS
      0003C4 85 22 0D         [24] 1278 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0003C7 90 00 C8         [24] 1279 	mov	dptr,#0x00c8
      0003CA 12 17 18         [24] 1280 	lcall	__divuint
      0003CD 85 23 0C         [24] 1281 	mov	__mulint_PARM_2,__delay
      0003D0 85 24 0D         [24] 1282 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0003D3 12 18 C5         [24] 1283 	lcall	__mulint
      0003D6 75 0C 64         [24] 1284 	mov	__divuint_PARM_2,#0x64
      0003D9 75 0D 00         [24] 1285 	mov	(__divuint_PARM_2 + 1),#0x00
      0003DC 12 17 18         [24] 1286 	lcall	__divuint
      0003DF E5 82            [12] 1287 	mov	a,dpl
      0003E1 85 83 F0         [24] 1288 	mov	b,dph
      0003E4 24 01            [12] 1289 	add	a,#0x01
      0003E6 FA               [12] 1290 	mov	r2,a
      0003E7 E4               [12] 1291 	clr	a
      0003E8 35 F0            [12] 1292 	addc	a,b
      0003EA FB               [12] 1293 	mov	r3,a
      0003EB 8A 00            [24] 1294 	mov	ar0,r2
      0003ED 8B 01            [24] 1295 	mov	ar1,r3
      0003EF 7A 00            [12] 1296 	mov	r2,#0x00
      0003F1 7B 00            [12] 1297 	mov	r3,#0x00
      0003F3 88 82            [24] 1298 	mov	dpl,r0
      0003F5 89 83            [24] 1299 	mov	dph,r1
      0003F7 8A F0            [24] 1300 	mov	b,r2
      0003F9 EB               [12] 1301 	mov	a,r3
      0003FA 12 16 8A         [24] 1302 	lcall	__delay_ms
                                   1303 ;	./N76_UCS1903.c:215: for (int16_t k = 0; k < 255; k = k + NUM_LEDS/50)
      0003FD 85 21 82         [24] 1304 	mov	dpl,_NUM_LEDS
      000400 85 22 83         [24] 1305 	mov	dph,(_NUM_LEDS + 1)
      000403 75 0C 32         [24] 1306 	mov	__divuint_PARM_2,#0x32
      000406 75 0D 00         [24] 1307 	mov	(__divuint_PARM_2 + 1),#0x00
      000409 12 17 18         [24] 1308 	lcall	__divuint
      00040C AA 82            [24] 1309 	mov	r2,dpl
      00040E AB 83            [24] 1310 	mov	r3,dph
      000410 D0 04            [24] 1311 	pop	ar4
      000412 D0 05            [24] 1312 	pop	ar5
      000414 8C 00            [24] 1313 	mov	ar0,r4
      000416 8D 01            [24] 1314 	mov	ar1,r5
      000418 EA               [12] 1315 	mov	a,r2
      000419 28               [12] 1316 	add	a,r0
      00041A FA               [12] 1317 	mov	r2,a
      00041B EB               [12] 1318 	mov	a,r3
      00041C 39               [12] 1319 	addc	a,r1
      00041D FB               [12] 1320 	mov	r3,a
      00041E 8A 04            [24] 1321 	mov	ar4,r2
      000420 8B 05            [24] 1322 	mov	ar5,r3
      000422 02 03 30         [24] 1323 	ljmp	00108$
      000425                       1324 00103$:
                                   1325 ;	./N76_UCS1903.c:227: for (int16_t k = 255; k > 0; k = k - NUM_LEDS/25)
      000425 75 35 FF         [24] 1326 	mov	_FadeInOut_k_131072_104,#0xff
      000428 75 36 00         [24] 1327 	mov	(_FadeInOut_k_131072_104 + 1),#0x00
      00042B                       1328 00111$:
      00042B AA 35            [24] 1329 	mov	r2,_FadeInOut_k_131072_104
      00042D AB 36            [24] 1330 	mov	r3,(_FadeInOut_k_131072_104 + 1)
      00042F C3               [12] 1331 	clr	c
      000430 E4               [12] 1332 	clr	a
      000431 9A               [12] 1333 	subb	a,r2
      000432 74 80            [12] 1334 	mov	a,#(0x00 ^ 0x80)
      000434 8B F0            [24] 1335 	mov	b,r3
      000436 63 F0 80         [24] 1336 	xrl	b,#0x80
      000439 95 F0            [12] 1337 	subb	a,b
      00043B 40 01            [24] 1338 	jc	00147$
      00043D 22               [24] 1339 	ret
      00043E                       1340 00147$:
                                   1341 ;	./N76_UCS1903.c:229: if (curEffect != effect) {_status=STT_NEW;return;}
      00043E E5 25            [12] 1342 	mov	a,_effect
      000440 B5 34 02         [24] 1343 	cjne	a,_FadeInOut_curEffect_65536_100,00148$
      000443 80 04            [24] 1344 	sjmp	00105$
      000445                       1345 00148$:
      000445 75 26 12         [24] 1346 	mov	__status,#0x12
      000448 22               [24] 1347 	ret
      000449                       1348 00105$:
                                   1349 ;	./N76_UCS1903.c:230: r = (k / 256.0) * red;
      000449 85 35 82         [24] 1350 	mov	dpl,_FadeInOut_k_131072_104
      00044C 85 36 83         [24] 1351 	mov	dph,(_FadeInOut_k_131072_104 + 1)
      00044F 12 19 9D         [24] 1352 	lcall	___sint2fs
      000452 A8 82            [24] 1353 	mov	r0,dpl
      000454 A9 83            [24] 1354 	mov	r1,dph
      000456 AA F0            [24] 1355 	mov	r2,b
      000458 FB               [12] 1356 	mov	r3,a
      000459 E4               [12] 1357 	clr	a
      00045A C0 E0            [24] 1358 	push	acc
      00045C C0 E0            [24] 1359 	push	acc
      00045E 74 80            [12] 1360 	mov	a,#0x80
      000460 C0 E0            [24] 1361 	push	acc
      000462 74 43            [12] 1362 	mov	a,#0x43
      000464 C0 E0            [24] 1363 	push	acc
      000466 88 82            [24] 1364 	mov	dpl,r0
      000468 89 83            [24] 1365 	mov	dph,r1
      00046A 8A F0            [24] 1366 	mov	b,r2
      00046C EB               [12] 1367 	mov	a,r3
      00046D 12 19 F9         [24] 1368 	lcall	___fsdiv
      000470 A8 82            [24] 1369 	mov	r0,dpl
      000472 A9 83            [24] 1370 	mov	r1,dph
      000474 AA F0            [24] 1371 	mov	r2,b
      000476 FB               [12] 1372 	mov	r3,a
      000477 E5 81            [12] 1373 	mov	a,sp
      000479 24 FC            [12] 1374 	add	a,#0xfc
      00047B F5 81            [12] 1375 	mov	sp,a
      00047D 85 2F 82         [24] 1376 	mov	dpl,_FadeInOut_PARM_2
      000480 C0 03            [24] 1377 	push	ar3
      000482 C0 02            [24] 1378 	push	ar2
      000484 C0 01            [24] 1379 	push	ar1
      000486 C0 00            [24] 1380 	push	ar0
      000488 12 1A BC         [24] 1381 	lcall	___uchar2fs
      00048B AC 82            [24] 1382 	mov	r4,dpl
      00048D AD 83            [24] 1383 	mov	r5,dph
      00048F AE F0            [24] 1384 	mov	r6,b
      000491 FF               [12] 1385 	mov	r7,a
      000492 D0 00            [24] 1386 	pop	ar0
      000494 D0 01            [24] 1387 	pop	ar1
      000496 D0 02            [24] 1388 	pop	ar2
      000498 D0 03            [24] 1389 	pop	ar3
      00049A C0 03            [24] 1390 	push	ar3
      00049C C0 02            [24] 1391 	push	ar2
      00049E C0 01            [24] 1392 	push	ar1
      0004A0 C0 00            [24] 1393 	push	ar0
      0004A2 C0 04            [24] 1394 	push	ar4
      0004A4 C0 05            [24] 1395 	push	ar5
      0004A6 C0 06            [24] 1396 	push	ar6
      0004A8 C0 07            [24] 1397 	push	ar7
      0004AA 88 82            [24] 1398 	mov	dpl,r0
      0004AC 89 83            [24] 1399 	mov	dph,r1
      0004AE 8A F0            [24] 1400 	mov	b,r2
      0004B0 EB               [12] 1401 	mov	a,r3
      0004B1 12 17 C1         [24] 1402 	lcall	___fsmul
      0004B4 AC 82            [24] 1403 	mov	r4,dpl
      0004B6 AD 83            [24] 1404 	mov	r5,dph
      0004B8 AE F0            [24] 1405 	mov	r6,b
      0004BA FF               [12] 1406 	mov	r7,a
      0004BB E5 81            [12] 1407 	mov	a,sp
      0004BD 24 FC            [12] 1408 	add	a,#0xfc
      0004BF F5 81            [12] 1409 	mov	sp,a
      0004C1 8C 82            [24] 1410 	mov	dpl,r4
      0004C3 8D 83            [24] 1411 	mov	dph,r5
      0004C5 8E F0            [24] 1412 	mov	b,r6
      0004C7 EF               [12] 1413 	mov	a,r7
      0004C8 12 1A C7         [24] 1414 	lcall	___fs2uchar
      0004CB 85 82 33         [24] 1415 	mov	_FadeInOut_r_65536_100,dpl
                                   1416 ;	./N76_UCS1903.c:231: g = (k / 256.0) * green;
      0004CE 85 31 82         [24] 1417 	mov	dpl,_FadeInOut_green_65536_99
      0004D1 12 1A BC         [24] 1418 	lcall	___uchar2fs
      0004D4 AC 82            [24] 1419 	mov	r4,dpl
      0004D6 AD 83            [24] 1420 	mov	r5,dph
      0004D8 AE F0            [24] 1421 	mov	r6,b
      0004DA FF               [12] 1422 	mov	r7,a
      0004DB D0 00            [24] 1423 	pop	ar0
      0004DD D0 01            [24] 1424 	pop	ar1
      0004DF D0 02            [24] 1425 	pop	ar2
      0004E1 D0 03            [24] 1426 	pop	ar3
      0004E3 C0 03            [24] 1427 	push	ar3
      0004E5 C0 02            [24] 1428 	push	ar2
      0004E7 C0 01            [24] 1429 	push	ar1
      0004E9 C0 00            [24] 1430 	push	ar0
      0004EB C0 04            [24] 1431 	push	ar4
      0004ED C0 05            [24] 1432 	push	ar5
      0004EF C0 06            [24] 1433 	push	ar6
      0004F1 C0 07            [24] 1434 	push	ar7
      0004F3 88 82            [24] 1435 	mov	dpl,r0
      0004F5 89 83            [24] 1436 	mov	dph,r1
      0004F7 8A F0            [24] 1437 	mov	b,r2
      0004F9 EB               [12] 1438 	mov	a,r3
      0004FA 12 17 C1         [24] 1439 	lcall	___fsmul
      0004FD AC 82            [24] 1440 	mov	r4,dpl
      0004FF AD 83            [24] 1441 	mov	r5,dph
      000501 AE F0            [24] 1442 	mov	r6,b
      000503 FF               [12] 1443 	mov	r7,a
      000504 E5 81            [12] 1444 	mov	a,sp
      000506 24 FC            [12] 1445 	add	a,#0xfc
      000508 F5 81            [12] 1446 	mov	sp,a
      00050A 8C 82            [24] 1447 	mov	dpl,r4
      00050C 8D 83            [24] 1448 	mov	dph,r5
      00050E 8E F0            [24] 1449 	mov	b,r6
      000510 EF               [12] 1450 	mov	a,r7
      000511 12 1A C7         [24] 1451 	lcall	___fs2uchar
      000514 85 82 32         [24] 1452 	mov	_FadeInOut_g_65536_100,dpl
                                   1453 ;	./N76_UCS1903.c:232: b = (k / 256.0) * blue;
      000517 85 30 82         [24] 1454 	mov	dpl,_FadeInOut_PARM_3
      00051A 12 1A BC         [24] 1455 	lcall	___uchar2fs
      00051D AC 82            [24] 1456 	mov	r4,dpl
      00051F AD 83            [24] 1457 	mov	r5,dph
      000521 AE F0            [24] 1458 	mov	r6,b
      000523 FF               [12] 1459 	mov	r7,a
      000524 D0 00            [24] 1460 	pop	ar0
      000526 D0 01            [24] 1461 	pop	ar1
      000528 D0 02            [24] 1462 	pop	ar2
      00052A D0 03            [24] 1463 	pop	ar3
      00052C C0 04            [24] 1464 	push	ar4
      00052E C0 05            [24] 1465 	push	ar5
      000530 C0 06            [24] 1466 	push	ar6
      000532 C0 07            [24] 1467 	push	ar7
      000534 88 82            [24] 1468 	mov	dpl,r0
      000536 89 83            [24] 1469 	mov	dph,r1
      000538 8A F0            [24] 1470 	mov	b,r2
      00053A EB               [12] 1471 	mov	a,r3
      00053B 12 17 C1         [24] 1472 	lcall	___fsmul
      00053E AC 82            [24] 1473 	mov	r4,dpl
      000540 AD 83            [24] 1474 	mov	r5,dph
      000542 AE F0            [24] 1475 	mov	r6,b
      000544 FF               [12] 1476 	mov	r7,a
      000545 E5 81            [12] 1477 	mov	a,sp
      000547 24 FC            [12] 1478 	add	a,#0xfc
      000549 F5 81            [12] 1479 	mov	sp,a
      00054B 8C 82            [24] 1480 	mov	dpl,r4
      00054D 8D 83            [24] 1481 	mov	dph,r5
      00054F 8E F0            [24] 1482 	mov	b,r6
      000551 EF               [12] 1483 	mov	a,r7
      000552 12 1A C7         [24] 1484 	lcall	___fs2uchar
      000555 85 82 2E         [24] 1485 	mov	_setAll_PARM_3,dpl
                                   1486 ;	./N76_UCS1903.c:233: setAll(g, r, b);
      000558 85 33 2D         [24] 1487 	mov	_setAll_PARM_2,_FadeInOut_r_65536_100
      00055B 85 32 82         [24] 1488 	mov	dpl,_FadeInOut_g_65536_100
      00055E 12 02 F0         [24] 1489 	lcall	_setAll
                                   1490 ;	./N76_UCS1903.c:234: showStrip();
      000561 12 02 27         [24] 1491 	lcall	_showStrip
                                   1492 ;	./N76_UCS1903.c:235: _delay_ms(DELAY2);
      000564 85 21 0C         [24] 1493 	mov	__divuint_PARM_2,_NUM_LEDS
      000567 85 22 0D         [24] 1494 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00056A 90 00 C8         [24] 1495 	mov	dptr,#0x00c8
      00056D 12 17 18         [24] 1496 	lcall	__divuint
      000570 85 23 0C         [24] 1497 	mov	__mulint_PARM_2,__delay
      000573 85 24 0D         [24] 1498 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000576 12 18 C5         [24] 1499 	lcall	__mulint
      000579 75 0C 64         [24] 1500 	mov	__divuint_PARM_2,#0x64
      00057C 75 0D 00         [24] 1501 	mov	(__divuint_PARM_2 + 1),#0x00
      00057F 12 17 18         [24] 1502 	lcall	__divuint
      000582 E5 82            [12] 1503 	mov	a,dpl
      000584 85 83 F0         [24] 1504 	mov	b,dph
      000587 24 01            [12] 1505 	add	a,#0x01
      000589 FE               [12] 1506 	mov	r6,a
      00058A E4               [12] 1507 	clr	a
      00058B 35 F0            [12] 1508 	addc	a,b
      00058D FF               [12] 1509 	mov	r7,a
      00058E 7D 00            [12] 1510 	mov	r5,#0x00
      000590 7C 00            [12] 1511 	mov	r4,#0x00
      000592 8E 82            [24] 1512 	mov	dpl,r6
      000594 8F 83            [24] 1513 	mov	dph,r7
      000596 8D F0            [24] 1514 	mov	b,r5
      000598 EC               [12] 1515 	mov	a,r4
      000599 12 16 8A         [24] 1516 	lcall	__delay_ms
                                   1517 ;	./N76_UCS1903.c:227: for (int16_t k = 255; k > 0; k = k - NUM_LEDS/25)
      00059C 85 21 82         [24] 1518 	mov	dpl,_NUM_LEDS
      00059F 85 22 83         [24] 1519 	mov	dph,(_NUM_LEDS + 1)
      0005A2 75 0C 19         [24] 1520 	mov	__divuint_PARM_2,#0x19
      0005A5 75 0D 00         [24] 1521 	mov	(__divuint_PARM_2 + 1),#0x00
      0005A8 12 17 18         [24] 1522 	lcall	__divuint
      0005AB AE 82            [24] 1523 	mov	r6,dpl
      0005AD AF 83            [24] 1524 	mov	r7,dph
      0005AF AC 35            [24] 1525 	mov	r4,_FadeInOut_k_131072_104
      0005B1 AD 36            [24] 1526 	mov	r5,(_FadeInOut_k_131072_104 + 1)
      0005B3 EC               [12] 1527 	mov	a,r4
      0005B4 C3               [12] 1528 	clr	c
      0005B5 9E               [12] 1529 	subb	a,r6
      0005B6 FE               [12] 1530 	mov	r6,a
      0005B7 ED               [12] 1531 	mov	a,r5
      0005B8 9F               [12] 1532 	subb	a,r7
      0005B9 FF               [12] 1533 	mov	r7,a
      0005BA 8E 35            [24] 1534 	mov	_FadeInOut_k_131072_104,r6
      0005BC 8F 36            [24] 1535 	mov	(_FadeInOut_k_131072_104 + 1),r7
                                   1536 ;	./N76_UCS1903.c:237: }
      0005BE 02 04 2B         [24] 1537 	ljmp	00111$
                                   1538 ;------------------------------------------------------------
                                   1539 ;Allocation info for local variables in function 'Strobe'
                                   1540 ;------------------------------------------------------------
                                   1541 ;red                       Allocated with name '_Strobe_PARM_2'
                                   1542 ;blue                      Allocated with name '_Strobe_PARM_3'
                                   1543 ;StrobeCount               Allocated with name '_Strobe_PARM_4'
                                   1544 ;FlashDelay                Allocated with name '_Strobe_PARM_5'
                                   1545 ;EndPause                  Allocated with name '_Strobe_PARM_6'
                                   1546 ;green                     Allocated to registers r7 
                                   1547 ;curEffect                 Allocated to registers r6 
                                   1548 ;j                         Allocated to registers r4 r5 
                                   1549 ;------------------------------------------------------------
                                   1550 ;	./N76_UCS1903.c:239: void Strobe(uint8_t green, uint8_t red, uint8_t blue, int16_t StrobeCount, int16_t FlashDelay, int16_t EndPause)
                                   1551 ;	-----------------------------------------
                                   1552 ;	 function Strobe
                                   1553 ;	-----------------------------------------
      0005C1                       1554 _Strobe:
      0005C1 AF 82            [24] 1555 	mov	r7,dpl
                                   1556 ;	./N76_UCS1903.c:241: uint8_t curEffect = effect;
      0005C3 AE 25            [24] 1557 	mov	r6,_effect
                                   1558 ;	./N76_UCS1903.c:242: for (int16_t j = 0; j < StrobeCount; j++)
      0005C5 7C 00            [12] 1559 	mov	r4,#0x00
      0005C7 7D 00            [12] 1560 	mov	r5,#0x00
      0005C9                       1561 00105$:
      0005C9 C3               [12] 1562 	clr	c
      0005CA EC               [12] 1563 	mov	a,r4
      0005CB 95 39            [12] 1564 	subb	a,_Strobe_PARM_4
      0005CD ED               [12] 1565 	mov	a,r5
      0005CE 64 80            [12] 1566 	xrl	a,#0x80
      0005D0 85 3A F0         [24] 1567 	mov	b,(_Strobe_PARM_4 + 1)
      0005D3 63 F0 80         [24] 1568 	xrl	b,#0x80
      0005D6 95 F0            [12] 1569 	subb	a,b
      0005D8 40 03            [24] 1570 	jc	00121$
      0005DA 02 06 94         [24] 1571 	ljmp	00103$
      0005DD                       1572 00121$:
                                   1573 ;	./N76_UCS1903.c:244: if (curEffect != effect) {_status=STT_NEW;return;}
      0005DD EE               [12] 1574 	mov	a,r6
      0005DE B5 25 02         [24] 1575 	cjne	a,_effect,00122$
      0005E1 80 04            [24] 1576 	sjmp	00102$
      0005E3                       1577 00122$:
      0005E3 75 26 12         [24] 1578 	mov	__status,#0x12
      0005E6 22               [24] 1579 	ret
      0005E7                       1580 00102$:
                                   1581 ;	./N76_UCS1903.c:245: setAll(green, red, blue);
      0005E7 85 37 2D         [24] 1582 	mov	_setAll_PARM_2,_Strobe_PARM_2
      0005EA 85 38 2E         [24] 1583 	mov	_setAll_PARM_3,_Strobe_PARM_3
      0005ED 8F 82            [24] 1584 	mov	dpl,r7
      0005EF C0 07            [24] 1585 	push	ar7
      0005F1 C0 06            [24] 1586 	push	ar6
      0005F3 C0 05            [24] 1587 	push	ar5
      0005F5 C0 04            [24] 1588 	push	ar4
      0005F7 12 02 F0         [24] 1589 	lcall	_setAll
                                   1590 ;	./N76_UCS1903.c:246: showStrip();
      0005FA 12 02 27         [24] 1591 	lcall	_showStrip
                                   1592 ;	./N76_UCS1903.c:247: _delay_ms(DELAY2);
      0005FD 85 21 0C         [24] 1593 	mov	__divuint_PARM_2,_NUM_LEDS
      000600 85 22 0D         [24] 1594 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000603 90 00 C8         [24] 1595 	mov	dptr,#0x00c8
      000606 12 17 18         [24] 1596 	lcall	__divuint
      000609 85 23 0C         [24] 1597 	mov	__mulint_PARM_2,__delay
      00060C 85 24 0D         [24] 1598 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00060F 12 18 C5         [24] 1599 	lcall	__mulint
      000612 75 0C 64         [24] 1600 	mov	__divuint_PARM_2,#0x64
      000615 75 0D 00         [24] 1601 	mov	(__divuint_PARM_2 + 1),#0x00
      000618 12 17 18         [24] 1602 	lcall	__divuint
      00061B E5 82            [12] 1603 	mov	a,dpl
      00061D 85 83 F0         [24] 1604 	mov	b,dph
      000620 24 01            [12] 1605 	add	a,#0x01
      000622 FA               [12] 1606 	mov	r2,a
      000623 E4               [12] 1607 	clr	a
      000624 35 F0            [12] 1608 	addc	a,b
      000626 FB               [12] 1609 	mov	r3,a
      000627 8A 00            [24] 1610 	mov	ar0,r2
      000629 8B 01            [24] 1611 	mov	ar1,r3
      00062B 7A 00            [12] 1612 	mov	r2,#0x00
      00062D 7B 00            [12] 1613 	mov	r3,#0x00
      00062F 88 82            [24] 1614 	mov	dpl,r0
      000631 89 83            [24] 1615 	mov	dph,r1
      000633 8A F0            [24] 1616 	mov	b,r2
      000635 EB               [12] 1617 	mov	a,r3
      000636 12 16 8A         [24] 1618 	lcall	__delay_ms
                                   1619 ;	./N76_UCS1903.c:248: setAll(0, 0, 0);
      000639 75 2D 00         [24] 1620 	mov	_setAll_PARM_2,#0x00
      00063C 75 2E 00         [24] 1621 	mov	_setAll_PARM_3,#0x00
      00063F 75 82 00         [24] 1622 	mov	dpl,#0x00
      000642 12 02 F0         [24] 1623 	lcall	_setAll
                                   1624 ;	./N76_UCS1903.c:249: showStrip();
      000645 12 02 27         [24] 1625 	lcall	_showStrip
                                   1626 ;	./N76_UCS1903.c:250: _delay_ms(DELAY2);
      000648 85 21 0C         [24] 1627 	mov	__divuint_PARM_2,_NUM_LEDS
      00064B 85 22 0D         [24] 1628 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00064E 90 00 C8         [24] 1629 	mov	dptr,#0x00c8
      000651 12 17 18         [24] 1630 	lcall	__divuint
      000654 85 23 0C         [24] 1631 	mov	__mulint_PARM_2,__delay
      000657 85 24 0D         [24] 1632 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00065A 12 18 C5         [24] 1633 	lcall	__mulint
      00065D 75 0C 64         [24] 1634 	mov	__divuint_PARM_2,#0x64
      000660 75 0D 00         [24] 1635 	mov	(__divuint_PARM_2 + 1),#0x00
      000663 12 17 18         [24] 1636 	lcall	__divuint
      000666 E5 82            [12] 1637 	mov	a,dpl
      000668 85 83 F0         [24] 1638 	mov	b,dph
      00066B 24 01            [12] 1639 	add	a,#0x01
      00066D FA               [12] 1640 	mov	r2,a
      00066E E4               [12] 1641 	clr	a
      00066F 35 F0            [12] 1642 	addc	a,b
      000671 FB               [12] 1643 	mov	r3,a
      000672 8A 00            [24] 1644 	mov	ar0,r2
      000674 8B 01            [24] 1645 	mov	ar1,r3
      000676 7A 00            [12] 1646 	mov	r2,#0x00
      000678 7B 00            [12] 1647 	mov	r3,#0x00
      00067A 88 82            [24] 1648 	mov	dpl,r0
      00067C 89 83            [24] 1649 	mov	dph,r1
      00067E 8A F0            [24] 1650 	mov	b,r2
      000680 EB               [12] 1651 	mov	a,r3
      000681 12 16 8A         [24] 1652 	lcall	__delay_ms
      000684 D0 04            [24] 1653 	pop	ar4
      000686 D0 05            [24] 1654 	pop	ar5
      000688 D0 06            [24] 1655 	pop	ar6
      00068A D0 07            [24] 1656 	pop	ar7
                                   1657 ;	./N76_UCS1903.c:242: for (int16_t j = 0; j < StrobeCount; j++)
      00068C 0C               [12] 1658 	inc	r4
      00068D BC 00 01         [24] 1659 	cjne	r4,#0x00,00123$
      000690 0D               [12] 1660 	inc	r5
      000691                       1661 00123$:
      000691 02 05 C9         [24] 1662 	ljmp	00105$
      000694                       1663 00103$:
                                   1664 ;	./N76_UCS1903.c:252: _delay_ms(EndPause);
      000694 AC 3D            [24] 1665 	mov	r4,_Strobe_PARM_6
      000696 E5 3E            [12] 1666 	mov	a,(_Strobe_PARM_6 + 1)
      000698 FD               [12] 1667 	mov	r5,a
      000699 33               [12] 1668 	rlc	a
      00069A 95 E0            [12] 1669 	subb	a,acc
      00069C FE               [12] 1670 	mov	r6,a
      00069D 8C 82            [24] 1671 	mov	dpl,r4
      00069F 8D 83            [24] 1672 	mov	dph,r5
      0006A1 8E F0            [24] 1673 	mov	b,r6
                                   1674 ;	./N76_UCS1903.c:253: }
      0006A3 02 16 8A         [24] 1675 	ljmp	__delay_ms
                                   1676 ;------------------------------------------------------------
                                   1677 ;Allocation info for local variables in function 'CylonBounce'
                                   1678 ;------------------------------------------------------------
                                   1679 ;red                       Allocated with name '_CylonBounce_PARM_2'
                                   1680 ;blue                      Allocated with name '_CylonBounce_PARM_3'
                                   1681 ;EyeSize                   Allocated with name '_CylonBounce_PARM_4'
                                   1682 ;SpeedDelay                Allocated with name '_CylonBounce_PARM_5'
                                   1683 ;ReturnDelay               Allocated with name '_CylonBounce_PARM_6'
                                   1684 ;green                     Allocated with name '_CylonBounce_green_65536_112'
                                   1685 ;curEffect                 Allocated with name '_CylonBounce_curEffect_65536_113'
                                   1686 ;i                         Allocated with name '_CylonBounce_i_131072_114'
                                   1687 ;j                         Allocated to registers r5 r7 
                                   1688 ;i                         Allocated to registers 
                                   1689 ;j                         Allocated with name '_CylonBounce_j_262144_121'
                                   1690 ;sloc0                     Allocated with name '_CylonBounce_sloc0_1_0'
                                   1691 ;sloc1                     Allocated with name '_CylonBounce_sloc1_1_0'
                                   1692 ;------------------------------------------------------------
                                   1693 ;	./N76_UCS1903.c:255: void CylonBounce(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t SpeedDelay, int16_t ReturnDelay)
                                   1694 ;	-----------------------------------------
                                   1695 ;	 function CylonBounce
                                   1696 ;	-----------------------------------------
      0006A6                       1697 _CylonBounce:
      0006A6 85 82 47         [24] 1698 	mov	_CylonBounce_green_65536_112,dpl
                                   1699 ;	./N76_UCS1903.c:257: uint8_t curEffect = effect;
      0006A9 85 25 48         [24] 1700 	mov	_CylonBounce_curEffect_65536_113,_effect
                                   1701 ;	./N76_UCS1903.c:258: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      0006AC E4               [12] 1702 	clr	a
      0006AD F5 49            [12] 1703 	mov	_CylonBounce_i_131072_114,a
      0006AF F5 4A            [12] 1704 	mov	(_CylonBounce_i_131072_114 + 1),a
      0006B1                       1705 00113$:
      0006B1 AA 41            [24] 1706 	mov	r2,_CylonBounce_PARM_4
      0006B3 AB 42            [24] 1707 	mov	r3,(_CylonBounce_PARM_4 + 1)
      0006B5 E5 21            [12] 1708 	mov	a,_NUM_LEDS
      0006B7 C3               [12] 1709 	clr	c
      0006B8 9A               [12] 1710 	subb	a,r2
      0006B9 F8               [12] 1711 	mov	r0,a
      0006BA E5 22            [12] 1712 	mov	a,(_NUM_LEDS + 1)
      0006BC 9B               [12] 1713 	subb	a,r3
      0006BD F9               [12] 1714 	mov	r1,a
      0006BE E8               [12] 1715 	mov	a,r0
      0006BF 24 FE            [12] 1716 	add	a,#0xfe
      0006C1 F8               [12] 1717 	mov	r0,a
      0006C2 E9               [12] 1718 	mov	a,r1
      0006C3 34 FF            [12] 1719 	addc	a,#0xff
      0006C5 F9               [12] 1720 	mov	r1,a
      0006C6 AE 49            [24] 1721 	mov	r6,_CylonBounce_i_131072_114
      0006C8 AF 4A            [24] 1722 	mov	r7,(_CylonBounce_i_131072_114 + 1)
      0006CA C3               [12] 1723 	clr	c
      0006CB EE               [12] 1724 	mov	a,r6
      0006CC 98               [12] 1725 	subb	a,r0
      0006CD EF               [12] 1726 	mov	a,r7
      0006CE 99               [12] 1727 	subb	a,r1
      0006CF 40 03            [24] 1728 	jc	00163$
      0006D1 02 07 EC         [24] 1729 	ljmp	00104$
      0006D4                       1730 00163$:
                                   1731 ;	./N76_UCS1903.c:260: setAll(0, 0, 0);
      0006D4 75 2D 00         [24] 1732 	mov	_setAll_PARM_2,#0x00
      0006D7 75 2E 00         [24] 1733 	mov	_setAll_PARM_3,#0x00
      0006DA 75 82 00         [24] 1734 	mov	dpl,#0x00
      0006DD 12 02 F0         [24] 1735 	lcall	_setAll
                                   1736 ;	./N76_UCS1903.c:261: setPixel(i, red / 10, green / 10, blue / 10);
      0006E0 AE 3F            [24] 1737 	mov	r6,_CylonBounce_PARM_2
      0006E2 7F 00            [12] 1738 	mov	r7,#0x00
      0006E4 75 0C 0A         [24] 1739 	mov	__divsint_PARM_2,#0x0a
                                   1740 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0006E7 8F 0D            [24] 1741 	mov	(__divsint_PARM_2 + 1),r7
      0006E9 8E 82            [24] 1742 	mov	dpl,r6
      0006EB 8F 83            [24] 1743 	mov	dph,r7
      0006ED 12 1B 61         [24] 1744 	lcall	__divsint
      0006F0 AE 82            [24] 1745 	mov	r6,dpl
      0006F2 A9 47            [24] 1746 	mov	r1,_CylonBounce_green_65536_112
      0006F4 7F 00            [12] 1747 	mov	r7,#0x00
      0006F6 75 0C 0A         [24] 1748 	mov	__divsint_PARM_2,#0x0a
                                   1749 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0006F9 8F 0D            [24] 1750 	mov	(__divsint_PARM_2 + 1),r7
      0006FB 89 82            [24] 1751 	mov	dpl,r1
      0006FD 8F 83            [24] 1752 	mov	dph,r7
      0006FF C0 06            [24] 1753 	push	ar6
      000701 12 1B 61         [24] 1754 	lcall	__divsint
      000704 A9 82            [24] 1755 	mov	r1,dpl
      000706 A8 40            [24] 1756 	mov	r0,_CylonBounce_PARM_3
      000708 7F 00            [12] 1757 	mov	r7,#0x00
      00070A 75 0C 0A         [24] 1758 	mov	__divsint_PARM_2,#0x0a
                                   1759 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00070D 8F 0D            [24] 1760 	mov	(__divsint_PARM_2 + 1),r7
      00070F 88 82            [24] 1761 	mov	dpl,r0
      000711 8F 83            [24] 1762 	mov	dph,r7
      000713 C0 01            [24] 1763 	push	ar1
      000715 12 1B 61         [24] 1764 	lcall	__divsint
      000718 A8 82            [24] 1765 	mov	r0,dpl
      00071A D0 01            [24] 1766 	pop	ar1
      00071C D0 06            [24] 1767 	pop	ar6
      00071E 8E 2A            [24] 1768 	mov	_setPixel_PARM_2,r6
      000720 89 2B            [24] 1769 	mov	_setPixel_PARM_3,r1
      000722 88 2C            [24] 1770 	mov	_setPixel_PARM_4,r0
      000724 85 49 82         [24] 1771 	mov	dpl,_CylonBounce_i_131072_114
      000727 85 4A 83         [24] 1772 	mov	dph,(_CylonBounce_i_131072_114 + 1)
      00072A C0 06            [24] 1773 	push	ar6
      00072C C0 01            [24] 1774 	push	ar1
      00072E C0 00            [24] 1775 	push	ar0
      000730 12 02 A6         [24] 1776 	lcall	_setPixel
      000733 D0 00            [24] 1777 	pop	ar0
      000735 D0 01            [24] 1778 	pop	ar1
      000737 D0 06            [24] 1779 	pop	ar6
                                   1780 ;	./N76_UCS1903.c:262: for (int16_t j = 1; j <= EyeSize; j++)
      000739 7D 01            [12] 1781 	mov	r5,#0x01
      00073B 7F 00            [12] 1782 	mov	r7,#0x00
      00073D                       1783 00110$:
      00073D C3               [12] 1784 	clr	c
      00073E E5 41            [12] 1785 	mov	a,_CylonBounce_PARM_4
      000740 9D               [12] 1786 	subb	a,r5
      000741 E5 42            [12] 1787 	mov	a,(_CylonBounce_PARM_4 + 1)
      000743 64 80            [12] 1788 	xrl	a,#0x80
      000745 8F F0            [24] 1789 	mov	b,r7
      000747 63 F0 80         [24] 1790 	xrl	b,#0x80
      00074A 95 F0            [12] 1791 	subb	a,b
      00074C 40 3C            [24] 1792 	jc	00103$
                                   1793 ;	./N76_UCS1903.c:264: if (curEffect != effect) {_status=STT_NEW;return;}
      00074E E5 25            [12] 1794 	mov	a,_effect
      000750 B5 48 02         [24] 1795 	cjne	a,_CylonBounce_curEffect_65536_113,00165$
      000753 80 04            [24] 1796 	sjmp	00102$
      000755                       1797 00165$:
      000755 75 26 12         [24] 1798 	mov	__status,#0x12
      000758 22               [24] 1799 	ret
      000759                       1800 00102$:
                                   1801 ;	./N76_UCS1903.c:265: setPixel(i + j, green, red, blue);
      000759 ED               [12] 1802 	mov	a,r5
      00075A 25 49            [12] 1803 	add	a,_CylonBounce_i_131072_114
      00075C F5 82            [12] 1804 	mov	dpl,a
      00075E EF               [12] 1805 	mov	a,r7
      00075F 35 4A            [12] 1806 	addc	a,(_CylonBounce_i_131072_114 + 1)
      000761 F5 83            [12] 1807 	mov	dph,a
      000763 85 47 2A         [24] 1808 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_112
      000766 85 3F 2B         [24] 1809 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000769 85 40 2C         [24] 1810 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      00076C C0 07            [24] 1811 	push	ar7
      00076E C0 06            [24] 1812 	push	ar6
      000770 C0 05            [24] 1813 	push	ar5
      000772 C0 01            [24] 1814 	push	ar1
      000774 C0 00            [24] 1815 	push	ar0
      000776 12 02 A6         [24] 1816 	lcall	_setPixel
      000779 D0 00            [24] 1817 	pop	ar0
      00077B D0 01            [24] 1818 	pop	ar1
      00077D D0 05            [24] 1819 	pop	ar5
      00077F D0 06            [24] 1820 	pop	ar6
      000781 D0 07            [24] 1821 	pop	ar7
                                   1822 ;	./N76_UCS1903.c:262: for (int16_t j = 1; j <= EyeSize; j++)
      000783 0D               [12] 1823 	inc	r5
      000784 BD 00 B6         [24] 1824 	cjne	r5,#0x00,00110$
      000787 0F               [12] 1825 	inc	r7
      000788 80 B3            [24] 1826 	sjmp	00110$
      00078A                       1827 00103$:
                                   1828 ;	./N76_UCS1903.c:267: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      00078A E5 41            [12] 1829 	mov	a,_CylonBounce_PARM_4
      00078C 25 49            [12] 1830 	add	a,_CylonBounce_i_131072_114
      00078E FD               [12] 1831 	mov	r5,a
      00078F E5 42            [12] 1832 	mov	a,(_CylonBounce_PARM_4 + 1)
      000791 35 4A            [12] 1833 	addc	a,(_CylonBounce_i_131072_114 + 1)
      000793 FF               [12] 1834 	mov	r7,a
      000794 0D               [12] 1835 	inc	r5
      000795 BD 00 01         [24] 1836 	cjne	r5,#0x00,00167$
      000798 0F               [12] 1837 	inc	r7
      000799                       1838 00167$:
      000799 8D 82            [24] 1839 	mov	dpl,r5
      00079B 8F 83            [24] 1840 	mov	dph,r7
      00079D 8E 2A            [24] 1841 	mov	_setPixel_PARM_2,r6
      00079F 89 2B            [24] 1842 	mov	_setPixel_PARM_3,r1
      0007A1 88 2C            [24] 1843 	mov	_setPixel_PARM_4,r0
      0007A3 12 02 A6         [24] 1844 	lcall	_setPixel
                                   1845 ;	./N76_UCS1903.c:268: showStrip();
      0007A6 12 02 27         [24] 1846 	lcall	_showStrip
                                   1847 ;	./N76_UCS1903.c:269: _delay_ms(DELAY2);
      0007A9 85 21 0C         [24] 1848 	mov	__divuint_PARM_2,_NUM_LEDS
      0007AC 85 22 0D         [24] 1849 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0007AF 90 00 C8         [24] 1850 	mov	dptr,#0x00c8
      0007B2 12 17 18         [24] 1851 	lcall	__divuint
      0007B5 85 23 0C         [24] 1852 	mov	__mulint_PARM_2,__delay
      0007B8 85 24 0D         [24] 1853 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0007BB 12 18 C5         [24] 1854 	lcall	__mulint
      0007BE 75 0C 64         [24] 1855 	mov	__divuint_PARM_2,#0x64
      0007C1 75 0D 00         [24] 1856 	mov	(__divuint_PARM_2 + 1),#0x00
      0007C4 12 17 18         [24] 1857 	lcall	__divuint
      0007C7 E5 82            [12] 1858 	mov	a,dpl
      0007C9 85 83 F0         [24] 1859 	mov	b,dph
      0007CC 24 01            [12] 1860 	add	a,#0x01
      0007CE FE               [12] 1861 	mov	r6,a
      0007CF E4               [12] 1862 	clr	a
      0007D0 35 F0            [12] 1863 	addc	a,b
      0007D2 FF               [12] 1864 	mov	r7,a
      0007D3 7D 00            [12] 1865 	mov	r5,#0x00
      0007D5 7C 00            [12] 1866 	mov	r4,#0x00
      0007D7 8E 82            [24] 1867 	mov	dpl,r6
      0007D9 8F 83            [24] 1868 	mov	dph,r7
      0007DB 8D F0            [24] 1869 	mov	b,r5
      0007DD EC               [12] 1870 	mov	a,r4
      0007DE 12 16 8A         [24] 1871 	lcall	__delay_ms
                                   1872 ;	./N76_UCS1903.c:258: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      0007E1 05 49            [12] 1873 	inc	_CylonBounce_i_131072_114
      0007E3 E4               [12] 1874 	clr	a
      0007E4 B5 49 02         [24] 1875 	cjne	a,_CylonBounce_i_131072_114,00168$
      0007E7 05 4A            [12] 1876 	inc	(_CylonBounce_i_131072_114 + 1)
      0007E9                       1877 00168$:
      0007E9 02 06 B1         [24] 1878 	ljmp	00113$
      0007EC                       1879 00104$:
                                   1880 ;	./N76_UCS1903.c:272: _delay_ms(ReturnDelay);
      0007EC AC 45            [24] 1881 	mov	r4,_CylonBounce_PARM_6
      0007EE E5 46            [12] 1882 	mov	a,(_CylonBounce_PARM_6 + 1)
      0007F0 FD               [12] 1883 	mov	r5,a
      0007F1 33               [12] 1884 	rlc	a
      0007F2 95 E0            [12] 1885 	subb	a,acc
      0007F4 FE               [12] 1886 	mov	r6,a
      0007F5 FF               [12] 1887 	mov	r7,a
      0007F6 8C 82            [24] 1888 	mov	dpl,r4
      0007F8 8D 83            [24] 1889 	mov	dph,r5
      0007FA 8E F0            [24] 1890 	mov	b,r6
      0007FC C0 07            [24] 1891 	push	ar7
      0007FE C0 06            [24] 1892 	push	ar6
      000800 C0 05            [24] 1893 	push	ar5
      000802 C0 04            [24] 1894 	push	ar4
      000804 C0 03            [24] 1895 	push	ar3
      000806 C0 02            [24] 1896 	push	ar2
      000808 12 16 8A         [24] 1897 	lcall	__delay_ms
      00080B D0 02            [24] 1898 	pop	ar2
      00080D D0 03            [24] 1899 	pop	ar3
      00080F D0 04            [24] 1900 	pop	ar4
      000811 D0 05            [24] 1901 	pop	ar5
      000813 D0 06            [24] 1902 	pop	ar6
      000815 D0 07            [24] 1903 	pop	ar7
                                   1904 ;	./N76_UCS1903.c:274: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      000817 E5 21            [12] 1905 	mov	a,_NUM_LEDS
      000819 C3               [12] 1906 	clr	c
      00081A 9A               [12] 1907 	subb	a,r2
      00081B FA               [12] 1908 	mov	r2,a
      00081C E5 22            [12] 1909 	mov	a,(_NUM_LEDS + 1)
      00081E 9B               [12] 1910 	subb	a,r3
      00081F FB               [12] 1911 	mov	r3,a
      000820 EA               [12] 1912 	mov	a,r2
      000821 24 FE            [12] 1913 	add	a,#0xfe
      000823 FA               [12] 1914 	mov	r2,a
      000824 EB               [12] 1915 	mov	a,r3
      000825 34 FF            [12] 1916 	addc	a,#0xff
      000827 FB               [12] 1917 	mov	r3,a
      000828                       1918 00119$:
      000828 8A 00            [24] 1919 	mov	ar0,r2
      00082A 8B 01            [24] 1920 	mov	ar1,r3
      00082C C3               [12] 1921 	clr	c
      00082D E4               [12] 1922 	clr	a
      00082E 98               [12] 1923 	subb	a,r0
      00082F 74 80            [12] 1924 	mov	a,#(0x00 ^ 0x80)
      000831 89 F0            [24] 1925 	mov	b,r1
      000833 63 F0 80         [24] 1926 	xrl	b,#0x80
      000836 95 F0            [12] 1927 	subb	a,b
      000838 40 03            [24] 1928 	jc	00169$
      00083A 02 0A 1B         [24] 1929 	ljmp	00108$
      00083D                       1930 00169$:
                                   1931 ;	./N76_UCS1903.c:276: setAll(0, 0, 0);
      00083D C0 04            [24] 1932 	push	ar4
      00083F C0 05            [24] 1933 	push	ar5
      000841 C0 06            [24] 1934 	push	ar6
      000843 C0 07            [24] 1935 	push	ar7
      000845 75 2D 00         [24] 1936 	mov	_setAll_PARM_2,#0x00
      000848 75 2E 00         [24] 1937 	mov	_setAll_PARM_3,#0x00
      00084B 75 82 00         [24] 1938 	mov	dpl,#0x00
      00084E C0 07            [24] 1939 	push	ar7
      000850 C0 06            [24] 1940 	push	ar6
      000852 C0 05            [24] 1941 	push	ar5
      000854 C0 04            [24] 1942 	push	ar4
      000856 C0 03            [24] 1943 	push	ar3
      000858 C0 02            [24] 1944 	push	ar2
      00085A 12 02 F0         [24] 1945 	lcall	_setAll
                                   1946 ;	./N76_UCS1903.c:277: setPixel(i, red / 10, green / 10, blue / 10);
      00085D A8 3F            [24] 1947 	mov	r0,_CylonBounce_PARM_2
      00085F 79 00            [12] 1948 	mov	r1,#0x00
      000861 75 0C 0A         [24] 1949 	mov	__divsint_PARM_2,#0x0a
                                   1950 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000864 89 0D            [24] 1951 	mov	(__divsint_PARM_2 + 1),r1
      000866 88 82            [24] 1952 	mov	dpl,r0
      000868 89 83            [24] 1953 	mov	dph,r1
      00086A 12 1B 61         [24] 1954 	lcall	__divsint
      00086D A8 82            [24] 1955 	mov	r0,dpl
      00086F D0 02            [24] 1956 	pop	ar2
      000871 D0 03            [24] 1957 	pop	ar3
      000873 D0 04            [24] 1958 	pop	ar4
      000875 D0 05            [24] 1959 	pop	ar5
      000877 D0 06            [24] 1960 	pop	ar6
      000879 D0 07            [24] 1961 	pop	ar7
      00087B A9 47            [24] 1962 	mov	r1,_CylonBounce_green_65536_112
      00087D 7F 00            [12] 1963 	mov	r7,#0x00
      00087F 75 0C 0A         [24] 1964 	mov	__divsint_PARM_2,#0x0a
                                   1965 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000882 8F 0D            [24] 1966 	mov	(__divsint_PARM_2 + 1),r7
      000884 89 82            [24] 1967 	mov	dpl,r1
      000886 8F 83            [24] 1968 	mov	dph,r7
      000888 C0 05            [24] 1969 	push	ar5
      00088A C0 04            [24] 1970 	push	ar4
      00088C C0 03            [24] 1971 	push	ar3
      00088E C0 02            [24] 1972 	push	ar2
      000890 C0 00            [24] 1973 	push	ar0
      000892 12 1B 61         [24] 1974 	lcall	__divsint
      000895 AE 82            [24] 1975 	mov	r6,dpl
      000897 8E 4D            [24] 1976 	mov	_CylonBounce_sloc0_1_0,r6
      000899 AE 40            [24] 1977 	mov	r6,_CylonBounce_PARM_3
      00089B 7F 00            [12] 1978 	mov	r7,#0x00
      00089D 75 0C 0A         [24] 1979 	mov	__divsint_PARM_2,#0x0a
                                   1980 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0008A0 8F 0D            [24] 1981 	mov	(__divsint_PARM_2 + 1),r7
      0008A2 8E 82            [24] 1982 	mov	dpl,r6
      0008A4 8F 83            [24] 1983 	mov	dph,r7
      0008A6 12 1B 61         [24] 1984 	lcall	__divsint
      0008A9 AE 82            [24] 1985 	mov	r6,dpl
      0008AB AF 83            [24] 1986 	mov	r7,dph
      0008AD D0 00            [24] 1987 	pop	ar0
      0008AF D0 02            [24] 1988 	pop	ar2
      0008B1 D0 03            [24] 1989 	pop	ar3
      0008B3 D0 04            [24] 1990 	pop	ar4
      0008B5 D0 05            [24] 1991 	pop	ar5
      0008B7 8E 4E            [24] 1992 	mov	_CylonBounce_sloc1_1_0,r6
      0008B9 88 2A            [24] 1993 	mov	_setPixel_PARM_2,r0
      0008BB 85 4D 2B         [24] 1994 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      0008BE 85 4E 2C         [24] 1995 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      0008C1 8A 82            [24] 1996 	mov	dpl,r2
      0008C3 8B 83            [24] 1997 	mov	dph,r3
      0008C5 C0 07            [24] 1998 	push	ar7
      0008C7 C0 06            [24] 1999 	push	ar6
      0008C9 C0 05            [24] 2000 	push	ar5
      0008CB C0 04            [24] 2001 	push	ar4
      0008CD C0 03            [24] 2002 	push	ar3
      0008CF C0 02            [24] 2003 	push	ar2
      0008D1 C0 00            [24] 2004 	push	ar0
      0008D3 12 02 A6         [24] 2005 	lcall	_setPixel
      0008D6 D0 00            [24] 2006 	pop	ar0
      0008D8 D0 02            [24] 2007 	pop	ar2
      0008DA D0 03            [24] 2008 	pop	ar3
      0008DC D0 04            [24] 2009 	pop	ar4
      0008DE D0 05            [24] 2010 	pop	ar5
      0008E0 D0 06            [24] 2011 	pop	ar6
      0008E2 D0 07            [24] 2012 	pop	ar7
                                   2013 ;	./N76_UCS1903.c:278: for (int16_t j = 1; j <= EyeSize; j++)
      0008E4 75 4B 01         [24] 2014 	mov	_CylonBounce_j_262144_121,#0x01
      0008E7 75 4C 00         [24] 2015 	mov	(_CylonBounce_j_262144_121 + 1),#0x00
                                   2016 ;	./N76_UCS1903.c:288: _delay_ms(ReturnDelay);
      0008EA D0 07            [24] 2017 	pop	ar7
      0008EC D0 06            [24] 2018 	pop	ar6
      0008EE D0 05            [24] 2019 	pop	ar5
      0008F0 D0 04            [24] 2020 	pop	ar4
                                   2021 ;	./N76_UCS1903.c:278: for (int16_t j = 1; j <= EyeSize; j++)
      0008F2                       2022 00116$:
      0008F2 C3               [12] 2023 	clr	c
      0008F3 E5 41            [12] 2024 	mov	a,_CylonBounce_PARM_4
      0008F5 95 4B            [12] 2025 	subb	a,_CylonBounce_j_262144_121
      0008F7 E5 42            [12] 2026 	mov	a,(_CylonBounce_PARM_4 + 1)
      0008F9 64 80            [12] 2027 	xrl	a,#0x80
      0008FB 85 4C F0         [24] 2028 	mov	b,(_CylonBounce_j_262144_121 + 1)
      0008FE 63 F0 80         [24] 2029 	xrl	b,#0x80
      000901 95 F0            [12] 2030 	subb	a,b
      000903 40 47            [24] 2031 	jc	00107$
                                   2032 ;	./N76_UCS1903.c:280: if (curEffect != effect) {_status=STT_NEW;return;}
      000905 E5 25            [12] 2033 	mov	a,_effect
      000907 B5 48 02         [24] 2034 	cjne	a,_CylonBounce_curEffect_65536_113,00171$
      00090A 80 04            [24] 2035 	sjmp	00106$
      00090C                       2036 00171$:
      00090C 75 26 12         [24] 2037 	mov	__status,#0x12
      00090F 22               [24] 2038 	ret
      000910                       2039 00106$:
                                   2040 ;	./N76_UCS1903.c:281: setPixel(i + j, green, red, blue);
      000910 E5 4B            [12] 2041 	mov	a,_CylonBounce_j_262144_121
      000912 2A               [12] 2042 	add	a,r2
      000913 F5 82            [12] 2043 	mov	dpl,a
      000915 E5 4C            [12] 2044 	mov	a,(_CylonBounce_j_262144_121 + 1)
      000917 3B               [12] 2045 	addc	a,r3
      000918 F5 83            [12] 2046 	mov	dph,a
      00091A 85 47 2A         [24] 2047 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_112
      00091D 85 3F 2B         [24] 2048 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000920 85 40 2C         [24] 2049 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000923 C0 07            [24] 2050 	push	ar7
      000925 C0 06            [24] 2051 	push	ar6
      000927 C0 05            [24] 2052 	push	ar5
      000929 C0 04            [24] 2053 	push	ar4
      00092B C0 03            [24] 2054 	push	ar3
      00092D C0 02            [24] 2055 	push	ar2
      00092F C0 00            [24] 2056 	push	ar0
      000931 12 02 A6         [24] 2057 	lcall	_setPixel
      000934 D0 00            [24] 2058 	pop	ar0
      000936 D0 02            [24] 2059 	pop	ar2
      000938 D0 03            [24] 2060 	pop	ar3
      00093A D0 04            [24] 2061 	pop	ar4
      00093C D0 05            [24] 2062 	pop	ar5
      00093E D0 06            [24] 2063 	pop	ar6
      000940 D0 07            [24] 2064 	pop	ar7
                                   2065 ;	./N76_UCS1903.c:278: for (int16_t j = 1; j <= EyeSize; j++)
      000942 05 4B            [12] 2066 	inc	_CylonBounce_j_262144_121
      000944 E4               [12] 2067 	clr	a
      000945 B5 4B AA         [24] 2068 	cjne	a,_CylonBounce_j_262144_121,00116$
      000948 05 4C            [12] 2069 	inc	(_CylonBounce_j_262144_121 + 1)
      00094A 80 A6            [24] 2070 	sjmp	00116$
      00094C                       2071 00107$:
                                   2072 ;	./N76_UCS1903.c:283: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      00094C C0 04            [24] 2073 	push	ar4
      00094E C0 05            [24] 2074 	push	ar5
      000950 C0 06            [24] 2075 	push	ar6
      000952 C0 07            [24] 2076 	push	ar7
      000954 E5 41            [12] 2077 	mov	a,_CylonBounce_PARM_4
      000956 2A               [12] 2078 	add	a,r2
      000957 F9               [12] 2079 	mov	r1,a
      000958 E5 42            [12] 2080 	mov	a,(_CylonBounce_PARM_4 + 1)
      00095A 3B               [12] 2081 	addc	a,r3
      00095B FF               [12] 2082 	mov	r7,a
      00095C 09               [12] 2083 	inc	r1
      00095D B9 00 01         [24] 2084 	cjne	r1,#0x00,00173$
      000960 0F               [12] 2085 	inc	r7
      000961                       2086 00173$:
      000961 89 82            [24] 2087 	mov	dpl,r1
      000963 8F 83            [24] 2088 	mov	dph,r7
      000965 88 2A            [24] 2089 	mov	_setPixel_PARM_2,r0
      000967 85 4D 2B         [24] 2090 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      00096A 85 4E 2C         [24] 2091 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      00096D C0 07            [24] 2092 	push	ar7
      00096F C0 06            [24] 2093 	push	ar6
      000971 C0 05            [24] 2094 	push	ar5
      000973 C0 04            [24] 2095 	push	ar4
      000975 C0 03            [24] 2096 	push	ar3
      000977 C0 02            [24] 2097 	push	ar2
      000979 12 02 A6         [24] 2098 	lcall	_setPixel
                                   2099 ;	./N76_UCS1903.c:284: showStrip();
      00097C 12 02 27         [24] 2100 	lcall	_showStrip
                                   2101 ;	./N76_UCS1903.c:285: _delay_ms(DELAY2);
      00097F 85 21 0C         [24] 2102 	mov	__divuint_PARM_2,_NUM_LEDS
      000982 85 22 0D         [24] 2103 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000985 90 00 C8         [24] 2104 	mov	dptr,#0x00c8
      000988 12 17 18         [24] 2105 	lcall	__divuint
      00098B D0 02            [24] 2106 	pop	ar2
      00098D D0 03            [24] 2107 	pop	ar3
      00098F D0 04            [24] 2108 	pop	ar4
      000991 D0 05            [24] 2109 	pop	ar5
      000993 D0 06            [24] 2110 	pop	ar6
      000995 D0 07            [24] 2111 	pop	ar7
      000997 85 23 0C         [24] 2112 	mov	__mulint_PARM_2,__delay
      00099A 85 24 0D         [24] 2113 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00099D C0 05            [24] 2114 	push	ar5
      00099F C0 04            [24] 2115 	push	ar4
      0009A1 C0 03            [24] 2116 	push	ar3
      0009A3 C0 02            [24] 2117 	push	ar2
      0009A5 12 18 C5         [24] 2118 	lcall	__mulint
      0009A8 AE 82            [24] 2119 	mov	r6,dpl
      0009AA AF 83            [24] 2120 	mov	r7,dph
      0009AC D0 02            [24] 2121 	pop	ar2
      0009AE D0 03            [24] 2122 	pop	ar3
      0009B0 D0 04            [24] 2123 	pop	ar4
      0009B2 D0 05            [24] 2124 	pop	ar5
      0009B4 8E 82            [24] 2125 	mov	dpl,r6
      0009B6 8F 83            [24] 2126 	mov	dph,r7
      0009B8 75 0C 64         [24] 2127 	mov	__divuint_PARM_2,#0x64
      0009BB 75 0D 00         [24] 2128 	mov	(__divuint_PARM_2 + 1),#0x00
      0009BE C0 07            [24] 2129 	push	ar7
      0009C0 C0 06            [24] 2130 	push	ar6
      0009C2 C0 05            [24] 2131 	push	ar5
      0009C4 C0 04            [24] 2132 	push	ar4
      0009C6 C0 03            [24] 2133 	push	ar3
      0009C8 C0 02            [24] 2134 	push	ar2
      0009CA 12 17 18         [24] 2135 	lcall	__divuint
      0009CD E5 82            [12] 2136 	mov	a,dpl
      0009CF 85 83 F0         [24] 2137 	mov	b,dph
      0009D2 D0 02            [24] 2138 	pop	ar2
      0009D4 D0 03            [24] 2139 	pop	ar3
      0009D6 D0 04            [24] 2140 	pop	ar4
      0009D8 D0 05            [24] 2141 	pop	ar5
      0009DA D0 06            [24] 2142 	pop	ar6
      0009DC D0 07            [24] 2143 	pop	ar7
      0009DE 24 01            [12] 2144 	add	a,#0x01
      0009E0 FE               [12] 2145 	mov	r6,a
      0009E1 E4               [12] 2146 	clr	a
      0009E2 35 F0            [12] 2147 	addc	a,b
      0009E4 FF               [12] 2148 	mov	r7,a
      0009E5 7D 00            [12] 2149 	mov	r5,#0x00
      0009E7 7C 00            [12] 2150 	mov	r4,#0x00
      0009E9 8E 82            [24] 2151 	mov	dpl,r6
      0009EB 8F 83            [24] 2152 	mov	dph,r7
      0009ED 8D F0            [24] 2153 	mov	b,r5
      0009EF EC               [12] 2154 	mov	a,r4
      0009F0 C0 07            [24] 2155 	push	ar7
      0009F2 C0 06            [24] 2156 	push	ar6
      0009F4 C0 05            [24] 2157 	push	ar5
      0009F6 C0 04            [24] 2158 	push	ar4
      0009F8 C0 03            [24] 2159 	push	ar3
      0009FA C0 02            [24] 2160 	push	ar2
      0009FC 12 16 8A         [24] 2161 	lcall	__delay_ms
      0009FF D0 02            [24] 2162 	pop	ar2
      000A01 D0 03            [24] 2163 	pop	ar3
      000A03 D0 04            [24] 2164 	pop	ar4
      000A05 D0 05            [24] 2165 	pop	ar5
      000A07 D0 06            [24] 2166 	pop	ar6
      000A09 D0 07            [24] 2167 	pop	ar7
                                   2168 ;	./N76_UCS1903.c:274: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      000A0B 1A               [12] 2169 	dec	r2
      000A0C BA FF 01         [24] 2170 	cjne	r2,#0xff,00174$
      000A0F 1B               [12] 2171 	dec	r3
      000A10                       2172 00174$:
      000A10 D0 07            [24] 2173 	pop	ar7
      000A12 D0 06            [24] 2174 	pop	ar6
      000A14 D0 05            [24] 2175 	pop	ar5
      000A16 D0 04            [24] 2176 	pop	ar4
      000A18 02 08 28         [24] 2177 	ljmp	00119$
      000A1B                       2178 00108$:
                                   2179 ;	./N76_UCS1903.c:288: _delay_ms(ReturnDelay);
      000A1B 8C 82            [24] 2180 	mov	dpl,r4
      000A1D 8D 83            [24] 2181 	mov	dph,r5
      000A1F 8E F0            [24] 2182 	mov	b,r6
      000A21 EF               [12] 2183 	mov	a,r7
                                   2184 ;	./N76_UCS1903.c:289: }
      000A22 02 16 8A         [24] 2185 	ljmp	__delay_ms
                                   2186 ;------------------------------------------------------------
                                   2187 ;Allocation info for local variables in function 'Twinkle'
                                   2188 ;------------------------------------------------------------
                                   2189 ;red                       Allocated with name '_Twinkle_PARM_2'
                                   2190 ;blue                      Allocated with name '_Twinkle_PARM_3'
                                   2191 ;Count                     Allocated with name '_Twinkle_PARM_4'
                                   2192 ;SpeedDelay                Allocated with name '_Twinkle_PARM_5'
                                   2193 ;OnlyOne                   Allocated with name '_Twinkle_PARM_6'
                                   2194 ;green                     Allocated to registers r7 
                                   2195 ;curEffect                 Allocated to registers r6 
                                   2196 ;i                         Allocated to registers r4 r5 
                                   2197 ;------------------------------------------------------------
                                   2198 ;	./N76_UCS1903.c:291: void Twinkle(uint8_t green, uint8_t red, uint8_t blue, int16_t Count, int16_t SpeedDelay, uint8_t OnlyOne)
                                   2199 ;	-----------------------------------------
                                   2200 ;	 function Twinkle
                                   2201 ;	-----------------------------------------
      000A25                       2202 _Twinkle:
      000A25 AF 82            [24] 2203 	mov	r7,dpl
                                   2204 ;	./N76_UCS1903.c:293: uint8_t curEffect = effect;
      000A27 AE 25            [24] 2205 	mov	r6,_effect
                                   2206 ;	./N76_UCS1903.c:294: setAll(0, 0, 0);
      000A29 75 2D 00         [24] 2207 	mov	_setAll_PARM_2,#0x00
      000A2C 75 2E 00         [24] 2208 	mov	_setAll_PARM_3,#0x00
      000A2F 75 82 00         [24] 2209 	mov	dpl,#0x00
      000A32 C0 07            [24] 2210 	push	ar7
      000A34 C0 06            [24] 2211 	push	ar6
      000A36 12 02 F0         [24] 2212 	lcall	_setAll
      000A39 D0 06            [24] 2213 	pop	ar6
      000A3B D0 07            [24] 2214 	pop	ar7
                                   2215 ;	./N76_UCS1903.c:295: for (int16_t i = 0; i < Count; i++)
      000A3D 7C 00            [12] 2216 	mov	r4,#0x00
      000A3F 7D 00            [12] 2217 	mov	r5,#0x00
      000A41                       2218 00107$:
      000A41 C3               [12] 2219 	clr	c
      000A42 EC               [12] 2220 	mov	a,r4
      000A43 95 51            [12] 2221 	subb	a,_Twinkle_PARM_4
      000A45 ED               [12] 2222 	mov	a,r5
      000A46 64 80            [12] 2223 	xrl	a,#0x80
      000A48 85 52 F0         [24] 2224 	mov	b,(_Twinkle_PARM_4 + 1)
      000A4B 63 F0 80         [24] 2225 	xrl	b,#0x80
      000A4E 95 F0            [12] 2226 	subb	a,b
      000A50 50 7B            [24] 2227 	jnc	00105$
                                   2228 ;	./N76_UCS1903.c:297: if (curEffect != effect) {_status=STT_NEW;return;}
      000A52 EE               [12] 2229 	mov	a,r6
      000A53 B5 25 02         [24] 2230 	cjne	a,_effect,00128$
      000A56 80 04            [24] 2231 	sjmp	00102$
      000A58                       2232 00128$:
      000A58 75 26 12         [24] 2233 	mov	__status,#0x12
      000A5B 22               [24] 2234 	ret
      000A5C                       2235 00102$:
                                   2236 ;	./N76_UCS1903.c:298: setPixel(random(NUM_LEDS), green, red, blue);
      000A5C 85 21 82         [24] 2237 	mov	dpl,_NUM_LEDS
      000A5F 85 22 83         [24] 2238 	mov	dph,(_NUM_LEDS + 1)
      000A62 C0 07            [24] 2239 	push	ar7
      000A64 C0 06            [24] 2240 	push	ar6
      000A66 C0 05            [24] 2241 	push	ar5
      000A68 C0 04            [24] 2242 	push	ar4
      000A6A 12 00 DD         [24] 2243 	lcall	_random
      000A6D D0 04            [24] 2244 	pop	ar4
      000A6F D0 05            [24] 2245 	pop	ar5
      000A71 D0 06            [24] 2246 	pop	ar6
      000A73 D0 07            [24] 2247 	pop	ar7
      000A75 8F 2A            [24] 2248 	mov	_setPixel_PARM_2,r7
      000A77 85 4F 2B         [24] 2249 	mov	_setPixel_PARM_3,_Twinkle_PARM_2
      000A7A 85 50 2C         [24] 2250 	mov	_setPixel_PARM_4,_Twinkle_PARM_3
      000A7D C0 07            [24] 2251 	push	ar7
      000A7F C0 06            [24] 2252 	push	ar6
      000A81 C0 05            [24] 2253 	push	ar5
      000A83 C0 04            [24] 2254 	push	ar4
      000A85 12 02 A6         [24] 2255 	lcall	_setPixel
                                   2256 ;	./N76_UCS1903.c:299: showStrip();
      000A88 12 02 27         [24] 2257 	lcall	_showStrip
                                   2258 ;	./N76_UCS1903.c:300: _delay_ms(SpeedDelay);
      000A8B A8 53            [24] 2259 	mov	r0,_Twinkle_PARM_5
      000A8D E5 54            [12] 2260 	mov	a,(_Twinkle_PARM_5 + 1)
      000A8F F9               [12] 2261 	mov	r1,a
      000A90 33               [12] 2262 	rlc	a
      000A91 95 E0            [12] 2263 	subb	a,acc
      000A93 FA               [12] 2264 	mov	r2,a
      000A94 88 82            [24] 2265 	mov	dpl,r0
      000A96 89 83            [24] 2266 	mov	dph,r1
      000A98 8A F0            [24] 2267 	mov	b,r2
      000A9A 12 16 8A         [24] 2268 	lcall	__delay_ms
      000A9D D0 04            [24] 2269 	pop	ar4
      000A9F D0 05            [24] 2270 	pop	ar5
      000AA1 D0 06            [24] 2271 	pop	ar6
      000AA3 D0 07            [24] 2272 	pop	ar7
                                   2273 ;	./N76_UCS1903.c:301: if (OnlyOne)
      000AA5 E5 55            [12] 2274 	mov	a,_Twinkle_PARM_6
      000AA7 60 1C            [24] 2275 	jz	00108$
                                   2276 ;	./N76_UCS1903.c:303: setAll(0, 0, 0);
      000AA9 75 2D 00         [24] 2277 	mov	_setAll_PARM_2,#0x00
      000AAC 75 2E 00         [24] 2278 	mov	_setAll_PARM_3,#0x00
      000AAF 75 82 00         [24] 2279 	mov	dpl,#0x00
      000AB2 C0 07            [24] 2280 	push	ar7
      000AB4 C0 06            [24] 2281 	push	ar6
      000AB6 C0 05            [24] 2282 	push	ar5
      000AB8 C0 04            [24] 2283 	push	ar4
      000ABA 12 02 F0         [24] 2284 	lcall	_setAll
      000ABD D0 04            [24] 2285 	pop	ar4
      000ABF D0 05            [24] 2286 	pop	ar5
      000AC1 D0 06            [24] 2287 	pop	ar6
      000AC3 D0 07            [24] 2288 	pop	ar7
      000AC5                       2289 00108$:
                                   2290 ;	./N76_UCS1903.c:295: for (int16_t i = 0; i < Count; i++)
      000AC5 0C               [12] 2291 	inc	r4
      000AC6 BC 00 01         [24] 2292 	cjne	r4,#0x00,00130$
      000AC9 0D               [12] 2293 	inc	r5
      000ACA                       2294 00130$:
      000ACA 02 0A 41         [24] 2295 	ljmp	00107$
      000ACD                       2296 00105$:
                                   2297 ;	./N76_UCS1903.c:307: _delay_ms(SpeedDelay);
      000ACD AC 53            [24] 2298 	mov	r4,_Twinkle_PARM_5
      000ACF E5 54            [12] 2299 	mov	a,(_Twinkle_PARM_5 + 1)
      000AD1 FD               [12] 2300 	mov	r5,a
      000AD2 33               [12] 2301 	rlc	a
      000AD3 95 E0            [12] 2302 	subb	a,acc
      000AD5 FE               [12] 2303 	mov	r6,a
      000AD6 8C 82            [24] 2304 	mov	dpl,r4
      000AD8 8D 83            [24] 2305 	mov	dph,r5
      000ADA 8E F0            [24] 2306 	mov	b,r6
                                   2307 ;	./N76_UCS1903.c:308: }
      000ADC 02 16 8A         [24] 2308 	ljmp	__delay_ms
                                   2309 ;------------------------------------------------------------
                                   2310 ;Allocation info for local variables in function 'TwinkleRandom'
                                   2311 ;------------------------------------------------------------
                                   2312 ;SpeedDelay                Allocated with name '_TwinkleRandom_PARM_2'
                                   2313 ;OnlyOne                   Allocated with name '_TwinkleRandom_PARM_3'
                                   2314 ;Count                     Allocated with name '_TwinkleRandom_Count_65536_130'
                                   2315 ;curEffect                 Allocated with name '_TwinkleRandom_curEffect_65536_131'
                                   2316 ;i                         Allocated to registers r3 r4 
                                   2317 ;------------------------------------------------------------
                                   2318 ;	./N76_UCS1903.c:310: void TwinkleRandom(int16_t Count, int16_t SpeedDelay, uint8_t OnlyOne)
                                   2319 ;	-----------------------------------------
                                   2320 ;	 function TwinkleRandom
                                   2321 ;	-----------------------------------------
      000ADF                       2322 _TwinkleRandom:
      000ADF 85 82 59         [24] 2323 	mov	_TwinkleRandom_Count_65536_130,dpl
      000AE2 85 83 5A         [24] 2324 	mov	(_TwinkleRandom_Count_65536_130 + 1),dph
                                   2325 ;	./N76_UCS1903.c:312: uint8_t curEffect = effect;
      000AE5 85 25 5B         [24] 2326 	mov	_TwinkleRandom_curEffect_65536_131,_effect
                                   2327 ;	./N76_UCS1903.c:313: setAll(0, 0, 0);
      000AE8 75 2D 00         [24] 2328 	mov	_setAll_PARM_2,#0x00
      000AEB 75 2E 00         [24] 2329 	mov	_setAll_PARM_3,#0x00
      000AEE 75 82 00         [24] 2330 	mov	dpl,#0x00
      000AF1 12 02 F0         [24] 2331 	lcall	_setAll
                                   2332 ;	./N76_UCS1903.c:314: showStrip();
      000AF4 12 02 27         [24] 2333 	lcall	_showStrip
                                   2334 ;	./N76_UCS1903.c:315: for (int16_t i = 0; i < Count; i++)
      000AF7 7B 00            [12] 2335 	mov	r3,#0x00
      000AF9 7C 00            [12] 2336 	mov	r4,#0x00
      000AFB                       2337 00107$:
      000AFB C3               [12] 2338 	clr	c
      000AFC EB               [12] 2339 	mov	a,r3
      000AFD 95 59            [12] 2340 	subb	a,_TwinkleRandom_Count_65536_130
      000AFF EC               [12] 2341 	mov	a,r4
      000B00 64 80            [12] 2342 	xrl	a,#0x80
      000B02 85 5A F0         [24] 2343 	mov	b,(_TwinkleRandom_Count_65536_130 + 1)
      000B05 63 F0 80         [24] 2344 	xrl	b,#0x80
      000B08 95 F0            [12] 2345 	subb	a,b
      000B0A 40 03            [24] 2346 	jc	00127$
      000B0C 02 0B DB         [24] 2347 	ljmp	00105$
      000B0F                       2348 00127$:
                                   2349 ;	./N76_UCS1903.c:317: if (curEffect != effect) {_status=STT_NEW;return;}
      000B0F E5 25            [12] 2350 	mov	a,_effect
      000B11 B5 5B 02         [24] 2351 	cjne	a,_TwinkleRandom_curEffect_65536_131,00128$
      000B14 80 04            [24] 2352 	sjmp	00102$
      000B16                       2353 00128$:
      000B16 75 26 12         [24] 2354 	mov	__status,#0x12
      000B19 22               [24] 2355 	ret
      000B1A                       2356 00102$:
                                   2357 ;	./N76_UCS1903.c:318: setPixel(random(NUM_LEDS), random(255), random(255), random(255));
      000B1A 85 21 82         [24] 2358 	mov	dpl,_NUM_LEDS
      000B1D 85 22 83         [24] 2359 	mov	dph,(_NUM_LEDS + 1)
      000B20 C0 04            [24] 2360 	push	ar4
      000B22 C0 03            [24] 2361 	push	ar3
      000B24 12 00 DD         [24] 2362 	lcall	_random
      000B27 A9 82            [24] 2363 	mov	r1,dpl
      000B29 AA 83            [24] 2364 	mov	r2,dph
      000B2B 90 00 FF         [24] 2365 	mov	dptr,#0x00ff
      000B2E C0 02            [24] 2366 	push	ar2
      000B30 C0 01            [24] 2367 	push	ar1
      000B32 12 00 DD         [24] 2368 	lcall	_random
      000B35 A8 82            [24] 2369 	mov	r0,dpl
      000B37 90 00 FF         [24] 2370 	mov	dptr,#0x00ff
      000B3A C0 00            [24] 2371 	push	ar0
      000B3C 12 00 DD         [24] 2372 	lcall	_random
      000B3F AD 82            [24] 2373 	mov	r5,dpl
      000B41 D0 00            [24] 2374 	pop	ar0
      000B43 D0 01            [24] 2375 	pop	ar1
      000B45 D0 02            [24] 2376 	pop	ar2
      000B47 D0 03            [24] 2377 	pop	ar3
      000B49 D0 04            [24] 2378 	pop	ar4
      000B4B 90 00 FF         [24] 2379 	mov	dptr,#0x00ff
      000B4E C0 05            [24] 2380 	push	ar5
      000B50 C0 04            [24] 2381 	push	ar4
      000B52 C0 03            [24] 2382 	push	ar3
      000B54 C0 02            [24] 2383 	push	ar2
      000B56 C0 01            [24] 2384 	push	ar1
      000B58 C0 00            [24] 2385 	push	ar0
      000B5A 12 00 DD         [24] 2386 	lcall	_random
      000B5D AE 82            [24] 2387 	mov	r6,dpl
      000B5F D0 00            [24] 2388 	pop	ar0
      000B61 D0 01            [24] 2389 	pop	ar1
      000B63 D0 02            [24] 2390 	pop	ar2
      000B65 D0 03            [24] 2391 	pop	ar3
      000B67 D0 04            [24] 2392 	pop	ar4
      000B69 D0 05            [24] 2393 	pop	ar5
      000B6B 8E 2C            [24] 2394 	mov	_setPixel_PARM_4,r6
      000B6D 88 2A            [24] 2395 	mov	_setPixel_PARM_2,r0
      000B6F 8D 2B            [24] 2396 	mov	_setPixel_PARM_3,r5
      000B71 89 82            [24] 2397 	mov	dpl,r1
      000B73 8A 83            [24] 2398 	mov	dph,r2
      000B75 C0 04            [24] 2399 	push	ar4
      000B77 C0 03            [24] 2400 	push	ar3
      000B79 12 02 A6         [24] 2401 	lcall	_setPixel
                                   2402 ;	./N76_UCS1903.c:319: showStrip();
      000B7C 12 02 27         [24] 2403 	lcall	_showStrip
                                   2404 ;	./N76_UCS1903.c:320: _delay_ms(DELAY);
      000B7F 85 21 0C         [24] 2405 	mov	__divuint_PARM_2,_NUM_LEDS
      000B82 85 22 0D         [24] 2406 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000B85 90 00 C8         [24] 2407 	mov	dptr,#0x00c8
      000B88 12 17 18         [24] 2408 	lcall	__divuint
      000B8B 85 23 0C         [24] 2409 	mov	__mulint_PARM_2,__delay
      000B8E 85 24 0D         [24] 2410 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000B91 12 18 C5         [24] 2411 	lcall	__mulint
      000B94 75 0C 0A         [24] 2412 	mov	__divuint_PARM_2,#0x0a
      000B97 75 0D 00         [24] 2413 	mov	(__divuint_PARM_2 + 1),#0x00
      000B9A 12 17 18         [24] 2414 	lcall	__divuint
      000B9D E5 82            [12] 2415 	mov	a,dpl
      000B9F 85 83 F0         [24] 2416 	mov	b,dph
      000BA2 24 01            [12] 2417 	add	a,#0x01
      000BA4 FE               [12] 2418 	mov	r6,a
      000BA5 E4               [12] 2419 	clr	a
      000BA6 35 F0            [12] 2420 	addc	a,b
      000BA8 FF               [12] 2421 	mov	r7,a
      000BA9 7D 00            [12] 2422 	mov	r5,#0x00
      000BAB 7A 00            [12] 2423 	mov	r2,#0x00
      000BAD 8E 82            [24] 2424 	mov	dpl,r6
      000BAF 8F 83            [24] 2425 	mov	dph,r7
      000BB1 8D F0            [24] 2426 	mov	b,r5
      000BB3 EA               [12] 2427 	mov	a,r2
      000BB4 12 16 8A         [24] 2428 	lcall	__delay_ms
      000BB7 D0 03            [24] 2429 	pop	ar3
      000BB9 D0 04            [24] 2430 	pop	ar4
                                   2431 ;	./N76_UCS1903.c:321: if (OnlyOne)
      000BBB E5 58            [12] 2432 	mov	a,_TwinkleRandom_PARM_3
      000BBD 60 14            [24] 2433 	jz	00108$
                                   2434 ;	./N76_UCS1903.c:323: setAll(0, 0, 0);
      000BBF 75 2D 00         [24] 2435 	mov	_setAll_PARM_2,#0x00
      000BC2 75 2E 00         [24] 2436 	mov	_setAll_PARM_3,#0x00
      000BC5 75 82 00         [24] 2437 	mov	dpl,#0x00
      000BC8 C0 04            [24] 2438 	push	ar4
      000BCA C0 03            [24] 2439 	push	ar3
      000BCC 12 02 F0         [24] 2440 	lcall	_setAll
      000BCF D0 03            [24] 2441 	pop	ar3
      000BD1 D0 04            [24] 2442 	pop	ar4
      000BD3                       2443 00108$:
                                   2444 ;	./N76_UCS1903.c:315: for (int16_t i = 0; i < Count; i++)
      000BD3 0B               [12] 2445 	inc	r3
      000BD4 BB 00 01         [24] 2446 	cjne	r3,#0x00,00130$
      000BD7 0C               [12] 2447 	inc	r4
      000BD8                       2448 00130$:
      000BD8 02 0A FB         [24] 2449 	ljmp	00107$
      000BDB                       2450 00105$:
                                   2451 ;	./N76_UCS1903.c:327: _delay_us(SpeedDelay);
      000BDB AC 56            [24] 2452 	mov	r4,_TwinkleRandom_PARM_2
      000BDD E5 57            [12] 2453 	mov	a,(_TwinkleRandom_PARM_2 + 1)
      000BDF FD               [12] 2454 	mov	r5,a
      000BE0 33               [12] 2455 	rlc	a
      000BE1 95 E0            [12] 2456 	subb	a,acc
      000BE3 FE               [12] 2457 	mov	r6,a
      000BE4 8C 82            [24] 2458 	mov	dpl,r4
      000BE6 8D 83            [24] 2459 	mov	dph,r5
      000BE8 8E F0            [24] 2460 	mov	b,r6
                                   2461 ;	./N76_UCS1903.c:328: }
      000BEA 02 16 C4         [24] 2462 	ljmp	__delay_us
                                   2463 ;------------------------------------------------------------
                                   2464 ;Allocation info for local variables in function 'Sparkle'
                                   2465 ;------------------------------------------------------------
                                   2466 ;red                       Allocated with name '_Sparkle_PARM_2'
                                   2467 ;blue                      Allocated with name '_Sparkle_PARM_3'
                                   2468 ;SpeedDelay                Allocated with name '_Sparkle_PARM_4'
                                   2469 ;green                     Allocated to registers r7 
                                   2470 ;Pixel                     Allocated to registers r5 r6 
                                   2471 ;------------------------------------------------------------
                                   2472 ;	./N76_UCS1903.c:330: void Sparkle(uint8_t green, uint8_t red, uint8_t blue, int16_t SpeedDelay)
                                   2473 ;	-----------------------------------------
                                   2474 ;	 function Sparkle
                                   2475 ;	-----------------------------------------
      000BED                       2476 _Sparkle:
      000BED AF 82            [24] 2477 	mov	r7,dpl
                                   2478 ;	./N76_UCS1903.c:332: int16_t Pixel = random(NUM_LEDS);
      000BEF 85 21 82         [24] 2479 	mov	dpl,_NUM_LEDS
      000BF2 85 22 83         [24] 2480 	mov	dph,(_NUM_LEDS + 1)
      000BF5 C0 07            [24] 2481 	push	ar7
      000BF7 12 00 DD         [24] 2482 	lcall	_random
      000BFA AD 82            [24] 2483 	mov	r5,dpl
      000BFC AE 83            [24] 2484 	mov	r6,dph
      000BFE D0 07            [24] 2485 	pop	ar7
                                   2486 ;	./N76_UCS1903.c:333: setPixel(Pixel, green, red, blue);
      000C00 8F 2A            [24] 2487 	mov	_setPixel_PARM_2,r7
      000C02 85 5C 2B         [24] 2488 	mov	_setPixel_PARM_3,_Sparkle_PARM_2
      000C05 85 5D 2C         [24] 2489 	mov	_setPixel_PARM_4,_Sparkle_PARM_3
      000C08 8D 82            [24] 2490 	mov	dpl,r5
      000C0A 8E 83            [24] 2491 	mov	dph,r6
      000C0C C0 06            [24] 2492 	push	ar6
      000C0E C0 05            [24] 2493 	push	ar5
      000C10 12 02 A6         [24] 2494 	lcall	_setPixel
                                   2495 ;	./N76_UCS1903.c:334: showStrip();
      000C13 12 02 27         [24] 2496 	lcall	_showStrip
                                   2497 ;	./N76_UCS1903.c:335: _delay_ms(DELAY);
      000C16 85 21 0C         [24] 2498 	mov	__divuint_PARM_2,_NUM_LEDS
      000C19 85 22 0D         [24] 2499 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000C1C 90 00 C8         [24] 2500 	mov	dptr,#0x00c8
      000C1F 12 17 18         [24] 2501 	lcall	__divuint
      000C22 85 23 0C         [24] 2502 	mov	__mulint_PARM_2,__delay
      000C25 85 24 0D         [24] 2503 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000C28 12 18 C5         [24] 2504 	lcall	__mulint
      000C2B 75 0C 0A         [24] 2505 	mov	__divuint_PARM_2,#0x0a
      000C2E 75 0D 00         [24] 2506 	mov	(__divuint_PARM_2 + 1),#0x00
      000C31 12 17 18         [24] 2507 	lcall	__divuint
      000C34 E5 82            [12] 2508 	mov	a,dpl
      000C36 85 83 F0         [24] 2509 	mov	b,dph
      000C39 24 01            [12] 2510 	add	a,#0x01
      000C3B FC               [12] 2511 	mov	r4,a
      000C3C E4               [12] 2512 	clr	a
      000C3D 35 F0            [12] 2513 	addc	a,b
      000C3F FF               [12] 2514 	mov	r7,a
      000C40 7B 00            [12] 2515 	mov	r3,#0x00
      000C42 7A 00            [12] 2516 	mov	r2,#0x00
      000C44 8C 82            [24] 2517 	mov	dpl,r4
      000C46 8F 83            [24] 2518 	mov	dph,r7
      000C48 8B F0            [24] 2519 	mov	b,r3
      000C4A EA               [12] 2520 	mov	a,r2
      000C4B 12 16 8A         [24] 2521 	lcall	__delay_ms
      000C4E D0 05            [24] 2522 	pop	ar5
      000C50 D0 06            [24] 2523 	pop	ar6
                                   2524 ;	./N76_UCS1903.c:336: setPixel(Pixel, 0, 0, 0);
      000C52 75 2A 00         [24] 2525 	mov	_setPixel_PARM_2,#0x00
      000C55 75 2B 00         [24] 2526 	mov	_setPixel_PARM_3,#0x00
      000C58 75 2C 00         [24] 2527 	mov	_setPixel_PARM_4,#0x00
      000C5B 8D 82            [24] 2528 	mov	dpl,r5
      000C5D 8E 83            [24] 2529 	mov	dph,r6
                                   2530 ;	./N76_UCS1903.c:337: }
      000C5F 02 02 A6         [24] 2531 	ljmp	_setPixel
                                   2532 ;------------------------------------------------------------
                                   2533 ;Allocation info for local variables in function 'SnowSparkle'
                                   2534 ;------------------------------------------------------------
                                   2535 ;red                       Allocated with name '_SnowSparkle_PARM_2'
                                   2536 ;blue                      Allocated with name '_SnowSparkle_PARM_3'
                                   2537 ;SparkleDelay              Allocated with name '_SnowSparkle_PARM_4'
                                   2538 ;SpeedDelay                Allocated with name '_SnowSparkle_PARM_5'
                                   2539 ;green                     Allocated to registers r7 
                                   2540 ;Pixel                     Allocated to registers r5 r6 
                                   2541 ;------------------------------------------------------------
                                   2542 ;	./N76_UCS1903.c:339: void SnowSparkle(uint8_t green, uint8_t red, uint8_t blue, int16_t SparkleDelay, int16_t SpeedDelay)
                                   2543 ;	-----------------------------------------
                                   2544 ;	 function SnowSparkle
                                   2545 ;	-----------------------------------------
      000C62                       2546 _SnowSparkle:
      000C62 AF 82            [24] 2547 	mov	r7,dpl
                                   2548 ;	./N76_UCS1903.c:341: setAll(green, red, blue);
      000C64 85 60 2D         [24] 2549 	mov	_setAll_PARM_2,_SnowSparkle_PARM_2
      000C67 85 61 2E         [24] 2550 	mov	_setAll_PARM_3,_SnowSparkle_PARM_3
      000C6A 8F 82            [24] 2551 	mov	dpl,r7
      000C6C C0 07            [24] 2552 	push	ar7
      000C6E 12 02 F0         [24] 2553 	lcall	_setAll
                                   2554 ;	./N76_UCS1903.c:343: int16_t Pixel = random(NUM_LEDS);
      000C71 85 21 82         [24] 2555 	mov	dpl,_NUM_LEDS
      000C74 85 22 83         [24] 2556 	mov	dph,(_NUM_LEDS + 1)
      000C77 12 00 DD         [24] 2557 	lcall	_random
      000C7A AD 82            [24] 2558 	mov	r5,dpl
      000C7C AE 83            [24] 2559 	mov	r6,dph
                                   2560 ;	./N76_UCS1903.c:344: setPixel(Pixel, 0xFF, 0xFF, 0xFF);
      000C7E 75 2A FF         [24] 2561 	mov	_setPixel_PARM_2,#0xff
      000C81 75 2B FF         [24] 2562 	mov	_setPixel_PARM_3,#0xff
      000C84 75 2C FF         [24] 2563 	mov	_setPixel_PARM_4,#0xff
      000C87 8D 82            [24] 2564 	mov	dpl,r5
      000C89 8E 83            [24] 2565 	mov	dph,r6
      000C8B C0 06            [24] 2566 	push	ar6
      000C8D C0 05            [24] 2567 	push	ar5
      000C8F 12 02 A6         [24] 2568 	lcall	_setPixel
                                   2569 ;	./N76_UCS1903.c:345: showStrip();
      000C92 12 02 27         [24] 2570 	lcall	_showStrip
                                   2571 ;	./N76_UCS1903.c:346: _delay_ms(SparkleDelay);
      000C95 A9 62            [24] 2572 	mov	r1,_SnowSparkle_PARM_4
      000C97 E5 63            [12] 2573 	mov	a,(_SnowSparkle_PARM_4 + 1)
      000C99 FA               [12] 2574 	mov	r2,a
      000C9A 33               [12] 2575 	rlc	a
      000C9B 95 E0            [12] 2576 	subb	a,acc
      000C9D FB               [12] 2577 	mov	r3,a
      000C9E 89 82            [24] 2578 	mov	dpl,r1
      000CA0 8A 83            [24] 2579 	mov	dph,r2
      000CA2 8B F0            [24] 2580 	mov	b,r3
      000CA4 12 16 8A         [24] 2581 	lcall	__delay_ms
      000CA7 D0 05            [24] 2582 	pop	ar5
      000CA9 D0 06            [24] 2583 	pop	ar6
      000CAB D0 07            [24] 2584 	pop	ar7
                                   2585 ;	./N76_UCS1903.c:347: setPixel(Pixel, green, red, blue);
      000CAD 8F 2A            [24] 2586 	mov	_setPixel_PARM_2,r7
      000CAF 85 60 2B         [24] 2587 	mov	_setPixel_PARM_3,_SnowSparkle_PARM_2
      000CB2 85 61 2C         [24] 2588 	mov	_setPixel_PARM_4,_SnowSparkle_PARM_3
      000CB5 8D 82            [24] 2589 	mov	dpl,r5
      000CB7 8E 83            [24] 2590 	mov	dph,r6
      000CB9 12 02 A6         [24] 2591 	lcall	_setPixel
                                   2592 ;	./N76_UCS1903.c:348: showStrip();
      000CBC 12 02 27         [24] 2593 	lcall	_showStrip
                                   2594 ;	./N76_UCS1903.c:349: _delay_ms(DELAY);
      000CBF 85 21 0C         [24] 2595 	mov	__divuint_PARM_2,_NUM_LEDS
      000CC2 85 22 0D         [24] 2596 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000CC5 90 00 C8         [24] 2597 	mov	dptr,#0x00c8
      000CC8 12 17 18         [24] 2598 	lcall	__divuint
      000CCB 85 23 0C         [24] 2599 	mov	__mulint_PARM_2,__delay
      000CCE 85 24 0D         [24] 2600 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000CD1 12 18 C5         [24] 2601 	lcall	__mulint
      000CD4 75 0C 0A         [24] 2602 	mov	__divuint_PARM_2,#0x0a
      000CD7 75 0D 00         [24] 2603 	mov	(__divuint_PARM_2 + 1),#0x00
      000CDA 12 17 18         [24] 2604 	lcall	__divuint
      000CDD E5 82            [12] 2605 	mov	a,dpl
      000CDF 85 83 F0         [24] 2606 	mov	b,dph
      000CE2 24 01            [12] 2607 	add	a,#0x01
      000CE4 FE               [12] 2608 	mov	r6,a
      000CE5 E4               [12] 2609 	clr	a
      000CE6 35 F0            [12] 2610 	addc	a,b
      000CE8 FF               [12] 2611 	mov	r7,a
      000CE9 7D 00            [12] 2612 	mov	r5,#0x00
      000CEB 7C 00            [12] 2613 	mov	r4,#0x00
      000CED 8E 82            [24] 2614 	mov	dpl,r6
      000CEF 8F 83            [24] 2615 	mov	dph,r7
      000CF1 8D F0            [24] 2616 	mov	b,r5
      000CF3 EC               [12] 2617 	mov	a,r4
                                   2618 ;	./N76_UCS1903.c:350: }
      000CF4 02 16 8A         [24] 2619 	ljmp	__delay_ms
                                   2620 ;------------------------------------------------------------
                                   2621 ;Allocation info for local variables in function 'colorWipe'
                                   2622 ;------------------------------------------------------------
                                   2623 ;red                       Allocated with name '_colorWipe_PARM_2'
                                   2624 ;blue                      Allocated with name '_colorWipe_PARM_3'
                                   2625 ;SpeedDelay                Allocated with name '_colorWipe_PARM_4'
                                   2626 ;green                     Allocated to registers r7 
                                   2627 ;curEffect                 Allocated to registers r6 
                                   2628 ;i                         Allocated to registers r4 r5 
                                   2629 ;------------------------------------------------------------
                                   2630 ;	./N76_UCS1903.c:352: void colorWipe(uint8_t green, uint8_t red, uint8_t blue, int16_t SpeedDelay)
                                   2631 ;	-----------------------------------------
                                   2632 ;	 function colorWipe
                                   2633 ;	-----------------------------------------
      000CF7                       2634 _colorWipe:
      000CF7 AF 82            [24] 2635 	mov	r7,dpl
                                   2636 ;	./N76_UCS1903.c:354: uint8_t curEffect = effect;
      000CF9 AE 25            [24] 2637 	mov	r6,_effect
                                   2638 ;	./N76_UCS1903.c:355: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000CFB 7C 00            [12] 2639 	mov	r4,#0x00
      000CFD 7D 00            [12] 2640 	mov	r5,#0x00
      000CFF                       2641 00105$:
      000CFF C3               [12] 2642 	clr	c
      000D00 EC               [12] 2643 	mov	a,r4
      000D01 95 21            [12] 2644 	subb	a,_NUM_LEDS
      000D03 ED               [12] 2645 	mov	a,r5
      000D04 95 22            [12] 2646 	subb	a,(_NUM_LEDS + 1)
      000D06 40 01            [24] 2647 	jc	00121$
      000D08 22               [24] 2648 	ret
      000D09                       2649 00121$:
                                   2650 ;	./N76_UCS1903.c:357: if (curEffect != effect) {_status=STT_NEW;return;}
      000D09 EE               [12] 2651 	mov	a,r6
      000D0A B5 25 02         [24] 2652 	cjne	a,_effect,00122$
      000D0D 80 04            [24] 2653 	sjmp	00102$
      000D0F                       2654 00122$:
      000D0F 75 26 12         [24] 2655 	mov	__status,#0x12
      000D12 22               [24] 2656 	ret
      000D13                       2657 00102$:
                                   2658 ;	./N76_UCS1903.c:358: setPixel(i, green, red, blue);
      000D13 8F 2A            [24] 2659 	mov	_setPixel_PARM_2,r7
      000D15 85 66 2B         [24] 2660 	mov	_setPixel_PARM_3,_colorWipe_PARM_2
      000D18 85 67 2C         [24] 2661 	mov	_setPixel_PARM_4,_colorWipe_PARM_3
      000D1B 8C 82            [24] 2662 	mov	dpl,r4
      000D1D 8D 83            [24] 2663 	mov	dph,r5
      000D1F C0 07            [24] 2664 	push	ar7
      000D21 C0 06            [24] 2665 	push	ar6
      000D23 C0 05            [24] 2666 	push	ar5
      000D25 C0 04            [24] 2667 	push	ar4
      000D27 12 02 A6         [24] 2668 	lcall	_setPixel
                                   2669 ;	./N76_UCS1903.c:359: showStrip();
      000D2A 12 02 27         [24] 2670 	lcall	_showStrip
                                   2671 ;	./N76_UCS1903.c:360: _delay_ms(DELAY2+1);
      000D2D 85 21 0C         [24] 2672 	mov	__divuint_PARM_2,_NUM_LEDS
      000D30 85 22 0D         [24] 2673 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000D33 90 00 C8         [24] 2674 	mov	dptr,#0x00c8
      000D36 12 17 18         [24] 2675 	lcall	__divuint
      000D39 85 23 0C         [24] 2676 	mov	__mulint_PARM_2,__delay
      000D3C 85 24 0D         [24] 2677 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000D3F 12 18 C5         [24] 2678 	lcall	__mulint
      000D42 75 0C 64         [24] 2679 	mov	__divuint_PARM_2,#0x64
      000D45 75 0D 00         [24] 2680 	mov	(__divuint_PARM_2 + 1),#0x00
      000D48 12 17 18         [24] 2681 	lcall	__divuint
      000D4B E5 82            [12] 2682 	mov	a,dpl
      000D4D 85 83 F0         [24] 2683 	mov	b,dph
      000D50 24 02            [12] 2684 	add	a,#0x02
      000D52 FA               [12] 2685 	mov	r2,a
      000D53 E4               [12] 2686 	clr	a
      000D54 35 F0            [12] 2687 	addc	a,b
      000D56 FB               [12] 2688 	mov	r3,a
      000D57 8A 00            [24] 2689 	mov	ar0,r2
      000D59 8B 01            [24] 2690 	mov	ar1,r3
      000D5B 7A 00            [12] 2691 	mov	r2,#0x00
      000D5D 7B 00            [12] 2692 	mov	r3,#0x00
      000D5F 88 82            [24] 2693 	mov	dpl,r0
      000D61 89 83            [24] 2694 	mov	dph,r1
      000D63 8A F0            [24] 2695 	mov	b,r2
      000D65 EB               [12] 2696 	mov	a,r3
      000D66 12 16 8A         [24] 2697 	lcall	__delay_ms
      000D69 D0 04            [24] 2698 	pop	ar4
      000D6B D0 05            [24] 2699 	pop	ar5
      000D6D D0 06            [24] 2700 	pop	ar6
      000D6F D0 07            [24] 2701 	pop	ar7
                                   2702 ;	./N76_UCS1903.c:355: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000D71 0C               [12] 2703 	inc	r4
      000D72 BC 00 01         [24] 2704 	cjne	r4,#0x00,00123$
      000D75 0D               [12] 2705 	inc	r5
      000D76                       2706 00123$:
                                   2707 ;	./N76_UCS1903.c:362: }
      000D76 02 0C FF         [24] 2708 	ljmp	00105$
                                   2709 ;------------------------------------------------------------
                                   2710 ;Allocation info for local variables in function 'rainbowCycle'
                                   2711 ;------------------------------------------------------------
                                   2712 ;SpeedDelay                Allocated to registers 
                                   2713 ;c                         Allocated to registers r0 r1 r2 
                                   2714 ;i                         Allocated to registers r3 r4 
                                   2715 ;j                         Allocated with name '_rainbowCycle_j_65536_147'
                                   2716 ;curEffect                 Allocated with name '_rainbowCycle_curEffect_65536_147'
                                   2717 ;------------------------------------------------------------
                                   2718 ;	./N76_UCS1903.c:364: void rainbowCycle(int16_t SpeedDelay)
                                   2719 ;	-----------------------------------------
                                   2720 ;	 function rainbowCycle
                                   2721 ;	-----------------------------------------
      000D79                       2722 _rainbowCycle:
                                   2723 ;	./N76_UCS1903.c:368: uint8_t curEffect = effect;
      000D79 85 25 6C         [24] 2724 	mov	_rainbowCycle_curEffect_65536_147,_effect
                                   2725 ;	./N76_UCS1903.c:370: for (j = 0; j < 256 * 5; j++)
      000D7C E4               [12] 2726 	clr	a
      000D7D F5 6A            [12] 2727 	mov	_rainbowCycle_j_65536_147,a
      000D7F F5 6B            [12] 2728 	mov	(_rainbowCycle_j_65536_147 + 1),a
                                   2729 ;	./N76_UCS1903.c:372: for (i = 0; i < NUM_LEDS; i++)
      000D81                       2730 00114$:
      000D81 7B 00            [12] 2731 	mov	r3,#0x00
      000D83 7C 00            [12] 2732 	mov	r4,#0x00
      000D85                       2733 00106$:
      000D85 C3               [12] 2734 	clr	c
      000D86 EB               [12] 2735 	mov	a,r3
      000D87 95 21            [12] 2736 	subb	a,_NUM_LEDS
      000D89 EC               [12] 2737 	mov	a,r4
      000D8A 95 22            [12] 2738 	subb	a,(_NUM_LEDS + 1)
      000D8C 40 03            [24] 2739 	jc	00128$
      000D8E 02 0E 0F         [24] 2740 	ljmp	00103$
      000D91                       2741 00128$:
                                   2742 ;	./N76_UCS1903.c:374: if (curEffect != effect) {_status=STT_NEW;return;}
      000D91 E5 25            [12] 2743 	mov	a,_effect
      000D93 B5 6C 02         [24] 2744 	cjne	a,_rainbowCycle_curEffect_65536_147,00129$
      000D96 80 04            [24] 2745 	sjmp	00102$
      000D98                       2746 00129$:
      000D98 75 26 12         [24] 2747 	mov	__status,#0x12
      000D9B 22               [24] 2748 	ret
      000D9C                       2749 00102$:
                                   2750 ;	./N76_UCS1903.c:375: c = Wheel(((i * 256 / NUM_LEDS) + j) & 255);
      000D9C 8B 01            [24] 2751 	mov	ar1,r3
      000D9E 89 02            [24] 2752 	mov	ar2,r1
      000DA0 79 00            [12] 2753 	mov	r1,#0x00
      000DA2 89 82            [24] 2754 	mov	dpl,r1
      000DA4 8A 83            [24] 2755 	mov	dph,r2
      000DA6 85 21 0C         [24] 2756 	mov	__divuint_PARM_2,_NUM_LEDS
      000DA9 85 22 0D         [24] 2757 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000DAC C0 04            [24] 2758 	push	ar4
      000DAE C0 03            [24] 2759 	push	ar3
      000DB0 12 17 18         [24] 2760 	lcall	__divuint
      000DB3 A9 82            [24] 2761 	mov	r1,dpl
      000DB5 E5 6A            [12] 2762 	mov	a,_rainbowCycle_j_65536_147
      000DB7 29               [12] 2763 	add	a,r1
      000DB8 F5 82            [12] 2764 	mov	dpl,a
      000DBA 12 0E 5F         [24] 2765 	lcall	_Wheel
      000DBD A8 82            [24] 2766 	mov	r0,dpl
      000DBF A9 83            [24] 2767 	mov	r1,dph
      000DC1 AA F0            [24] 2768 	mov	r2,b
      000DC3 D0 03            [24] 2769 	pop	ar3
      000DC5 D0 04            [24] 2770 	pop	ar4
                                   2771 ;	./N76_UCS1903.c:376: setPixel(i, *c, *(c + 1), *(c + 2));
      000DC7 88 82            [24] 2772 	mov	dpl,r0
      000DC9 89 83            [24] 2773 	mov	dph,r1
      000DCB 8A F0            [24] 2774 	mov	b,r2
      000DCD 12 1A CF         [24] 2775 	lcall	__gptrget
      000DD0 F5 2A            [12] 2776 	mov	_setPixel_PARM_2,a
      000DD2 74 01            [12] 2777 	mov	a,#0x01
      000DD4 28               [12] 2778 	add	a,r0
      000DD5 FD               [12] 2779 	mov	r5,a
      000DD6 E4               [12] 2780 	clr	a
      000DD7 39               [12] 2781 	addc	a,r1
      000DD8 FE               [12] 2782 	mov	r6,a
      000DD9 8A 07            [24] 2783 	mov	ar7,r2
      000DDB 8D 82            [24] 2784 	mov	dpl,r5
      000DDD 8E 83            [24] 2785 	mov	dph,r6
      000DDF 8F F0            [24] 2786 	mov	b,r7
      000DE1 12 1A CF         [24] 2787 	lcall	__gptrget
      000DE4 F5 2B            [12] 2788 	mov	_setPixel_PARM_3,a
      000DE6 74 02            [12] 2789 	mov	a,#0x02
      000DE8 28               [12] 2790 	add	a,r0
      000DE9 F8               [12] 2791 	mov	r0,a
      000DEA E4               [12] 2792 	clr	a
      000DEB 39               [12] 2793 	addc	a,r1
      000DEC F9               [12] 2794 	mov	r1,a
      000DED 88 82            [24] 2795 	mov	dpl,r0
      000DEF 89 83            [24] 2796 	mov	dph,r1
      000DF1 8A F0            [24] 2797 	mov	b,r2
      000DF3 12 1A CF         [24] 2798 	lcall	__gptrget
      000DF6 F5 2C            [12] 2799 	mov	_setPixel_PARM_4,a
      000DF8 8B 82            [24] 2800 	mov	dpl,r3
      000DFA 8C 83            [24] 2801 	mov	dph,r4
      000DFC C0 04            [24] 2802 	push	ar4
      000DFE C0 03            [24] 2803 	push	ar3
      000E00 12 02 A6         [24] 2804 	lcall	_setPixel
      000E03 D0 03            [24] 2805 	pop	ar3
      000E05 D0 04            [24] 2806 	pop	ar4
                                   2807 ;	./N76_UCS1903.c:372: for (i = 0; i < NUM_LEDS; i++)
      000E07 0B               [12] 2808 	inc	r3
      000E08 BB 00 01         [24] 2809 	cjne	r3,#0x00,00130$
      000E0B 0C               [12] 2810 	inc	r4
      000E0C                       2811 00130$:
      000E0C 02 0D 85         [24] 2812 	ljmp	00106$
      000E0F                       2813 00103$:
                                   2814 ;	./N76_UCS1903.c:378: showStrip();
      000E0F 12 02 27         [24] 2815 	lcall	_showStrip
                                   2816 ;	./N76_UCS1903.c:379: _delay_ms(DELAY);
      000E12 85 21 0C         [24] 2817 	mov	__divuint_PARM_2,_NUM_LEDS
      000E15 85 22 0D         [24] 2818 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000E18 90 00 C8         [24] 2819 	mov	dptr,#0x00c8
      000E1B 12 17 18         [24] 2820 	lcall	__divuint
      000E1E 85 23 0C         [24] 2821 	mov	__mulint_PARM_2,__delay
      000E21 85 24 0D         [24] 2822 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000E24 12 18 C5         [24] 2823 	lcall	__mulint
      000E27 75 0C 0A         [24] 2824 	mov	__divuint_PARM_2,#0x0a
      000E2A 75 0D 00         [24] 2825 	mov	(__divuint_PARM_2 + 1),#0x00
      000E2D 12 17 18         [24] 2826 	lcall	__divuint
      000E30 E5 82            [12] 2827 	mov	a,dpl
      000E32 85 83 F0         [24] 2828 	mov	b,dph
      000E35 24 01            [12] 2829 	add	a,#0x01
      000E37 FE               [12] 2830 	mov	r6,a
      000E38 E4               [12] 2831 	clr	a
      000E39 35 F0            [12] 2832 	addc	a,b
      000E3B FF               [12] 2833 	mov	r7,a
      000E3C 7D 00            [12] 2834 	mov	r5,#0x00
      000E3E 7C 00            [12] 2835 	mov	r4,#0x00
      000E40 8E 82            [24] 2836 	mov	dpl,r6
      000E42 8F 83            [24] 2837 	mov	dph,r7
      000E44 8D F0            [24] 2838 	mov	b,r5
      000E46 EC               [12] 2839 	mov	a,r4
      000E47 12 16 8A         [24] 2840 	lcall	__delay_ms
                                   2841 ;	./N76_UCS1903.c:370: for (j = 0; j < 256 * 5; j++)
      000E4A 05 6A            [12] 2842 	inc	_rainbowCycle_j_65536_147
      000E4C E4               [12] 2843 	clr	a
      000E4D B5 6A 02         [24] 2844 	cjne	a,_rainbowCycle_j_65536_147,00131$
      000E50 05 6B            [12] 2845 	inc	(_rainbowCycle_j_65536_147 + 1)
      000E52                       2846 00131$:
      000E52 AD 6A            [24] 2847 	mov	r5,_rainbowCycle_j_65536_147
      000E54 AE 6B            [24] 2848 	mov	r6,(_rainbowCycle_j_65536_147 + 1)
      000E56 74 FB            [12] 2849 	mov	a,#0x100 - 0x05
      000E58 2E               [12] 2850 	add	a,r6
      000E59 40 03            [24] 2851 	jc	00132$
      000E5B 02 0D 81         [24] 2852 	ljmp	00114$
      000E5E                       2853 00132$:
                                   2854 ;	./N76_UCS1903.c:381: }
      000E5E 22               [24] 2855 	ret
                                   2856 ;------------------------------------------------------------
                                   2857 ;Allocation info for local variables in function 'Wheel'
                                   2858 ;------------------------------------------------------------
                                   2859 ;c                         Allocated with name '_Wheel_c_65536_154'
                                   2860 ;WheelPos                  Allocated to registers r6 
                                   2861 ;curEffect                 Allocated to registers 
                                   2862 ;------------------------------------------------------------
                                   2863 ;	./N76_UCS1903.c:384: uint8_t *Wheel(uint8_t WheelPos)
                                   2864 ;	-----------------------------------------
                                   2865 ;	 function Wheel
                                   2866 ;	-----------------------------------------
      000E5F                       2867 _Wheel:
      000E5F AF 82            [24] 2868 	mov	r7,dpl
                                   2869 ;	./N76_UCS1903.c:389: if (WheelPos < 85)
      000E61 BF 55 00         [24] 2870 	cjne	r7,#0x55,00119$
      000E64                       2871 00119$:
      000E64 50 19            [24] 2872 	jnc	00105$
                                   2873 ;	./N76_UCS1903.c:391: c[0] = WheelPos * 3;
      000E66 EF               [12] 2874 	mov	a,r7
      000E67 75 F0 03         [24] 2875 	mov	b,#0x03
      000E6A A4               [48] 2876 	mul	ab
      000E6B F5 6D            [12] 2877 	mov	_Wheel_c_65536_154,a
                                   2878 ;	./N76_UCS1903.c:392: c[1] = 255 - WheelPos * 3;
      000E6D 8F 06            [24] 2879 	mov	ar6,r7
      000E6F EE               [12] 2880 	mov	a,r6
      000E70 75 F0 03         [24] 2881 	mov	b,#0x03
      000E73 A4               [48] 2882 	mul	ab
      000E74 D3               [12] 2883 	setb	c
      000E75 94 FF            [12] 2884 	subb	a,#0xff
      000E77 F4               [12] 2885 	cpl	a
      000E78 F5 6E            [12] 2886 	mov	(_Wheel_c_65536_154 + 0x0001),a
                                   2887 ;	./N76_UCS1903.c:393: c[2] = 0;
      000E7A 75 6F 00         [24] 2888 	mov	(_Wheel_c_65536_154 + 0x0002),#0x00
      000E7D 80 3A            [24] 2889 	sjmp	00106$
      000E7F                       2890 00105$:
                                   2891 ;	./N76_UCS1903.c:395: else if (WheelPos < 170)
      000E7F BF AA 00         [24] 2892 	cjne	r7,#0xaa,00121$
      000E82                       2893 00121$:
      000E82 50 1D            [24] 2894 	jnc	00102$
                                   2895 ;	./N76_UCS1903.c:397: WheelPos -= 85;
      000E84 8F 06            [24] 2896 	mov	ar6,r7
      000E86 EE               [12] 2897 	mov	a,r6
      000E87 24 AB            [12] 2898 	add	a,#0xab
                                   2899 ;	./N76_UCS1903.c:398: c[0] = 255 - WheelPos * 3;
      000E89 FE               [12] 2900 	mov	r6,a
      000E8A FD               [12] 2901 	mov	r5,a
      000E8B 75 F0 03         [24] 2902 	mov	b,#0x03
      000E8E A4               [48] 2903 	mul	ab
      000E8F D3               [12] 2904 	setb	c
      000E90 94 FF            [12] 2905 	subb	a,#0xff
      000E92 F4               [12] 2906 	cpl	a
      000E93 F5 6D            [12] 2907 	mov	_Wheel_c_65536_154,a
                                   2908 ;	./N76_UCS1903.c:399: c[1] = 0;
      000E95 75 6E 00         [24] 2909 	mov	(_Wheel_c_65536_154 + 0x0001),#0x00
                                   2910 ;	./N76_UCS1903.c:400: c[2] = WheelPos * 3;
      000E98 EE               [12] 2911 	mov	a,r6
      000E99 75 F0 03         [24] 2912 	mov	b,#0x03
      000E9C A4               [48] 2913 	mul	ab
      000E9D F5 6F            [12] 2914 	mov	(_Wheel_c_65536_154 + 0x0002),a
      000E9F 80 18            [24] 2915 	sjmp	00106$
      000EA1                       2916 00102$:
                                   2917 ;	./N76_UCS1903.c:404: WheelPos -= 170;
      000EA1 EF               [12] 2918 	mov	a,r7
      000EA2 24 56            [12] 2919 	add	a,#0x56
                                   2920 ;	./N76_UCS1903.c:405: c[0] = 0;
                                   2921 ;	./N76_UCS1903.c:406: c[1] = WheelPos * 3;
      000EA4 FF               [12] 2922 	mov	r7,a
      000EA5 75 6D 00         [24] 2923 	mov	_Wheel_c_65536_154,#0x00
      000EA8 75 F0 03         [24] 2924 	mov	b,#0x03
      000EAB A4               [48] 2925 	mul	ab
      000EAC F5 6E            [12] 2926 	mov	(_Wheel_c_65536_154 + 0x0001),a
                                   2927 ;	./N76_UCS1903.c:407: c[2] = 255 - WheelPos * 3;
      000EAE EF               [12] 2928 	mov	a,r7
      000EAF 75 F0 03         [24] 2929 	mov	b,#0x03
      000EB2 A4               [48] 2930 	mul	ab
      000EB3 D3               [12] 2931 	setb	c
      000EB4 94 FF            [12] 2932 	subb	a,#0xff
      000EB6 F4               [12] 2933 	cpl	a
      000EB7 F5 6F            [12] 2934 	mov	(_Wheel_c_65536_154 + 0x0002),a
      000EB9                       2935 00106$:
                                   2936 ;	./N76_UCS1903.c:410: return c;
      000EB9 90 00 6D         [24] 2937 	mov	dptr,#_Wheel_c_65536_154
      000EBC 75 F0 40         [24] 2938 	mov	b,#0x40
                                   2939 ;	./N76_UCS1903.c:411: }
      000EBF 22               [24] 2940 	ret
                                   2941 ;------------------------------------------------------------
                                   2942 ;Allocation info for local variables in function 'theaterChase'
                                   2943 ;------------------------------------------------------------
                                   2944 ;red                       Allocated with name '_theaterChase_PARM_2'
                                   2945 ;blue                      Allocated with name '_theaterChase_PARM_3'
                                   2946 ;SpeedDelay                Allocated with name '_theaterChase_PARM_4'
                                   2947 ;green                     Allocated to registers r7 
                                   2948 ;curEffect                 Allocated to registers r6 
                                   2949 ;j                         Allocated with name '_theaterChase_j_131072_160'
                                   2950 ;q                         Allocated to registers r2 r3 
                                   2951 ;i                         Allocated to registers r0 r1 
                                   2952 ;i                         Allocated to registers r4 r5 
                                   2953 ;------------------------------------------------------------
                                   2954 ;	./N76_UCS1903.c:413: void theaterChase(uint8_t green, uint8_t red, uint8_t blue, int16_t SpeedDelay)
                                   2955 ;	-----------------------------------------
                                   2956 ;	 function theaterChase
                                   2957 ;	-----------------------------------------
      000EC0                       2958 _theaterChase:
      000EC0 AF 82            [24] 2959 	mov	r7,dpl
                                   2960 ;	./N76_UCS1903.c:415: uint8_t curEffect = effect;
      000EC2 AE 25            [24] 2961 	mov	r6,_effect
                                   2962 ;	./N76_UCS1903.c:417: for (int16_t j = 0; j < 10; j++)
      000EC4 E4               [12] 2963 	clr	a
      000EC5 F5 74            [12] 2964 	mov	_theaterChase_j_131072_160,a
      000EC7 F5 75            [12] 2965 	mov	(_theaterChase_j_131072_160 + 1),a
      000EC9                       2966 00119$:
      000EC9 AA 74            [24] 2967 	mov	r2,_theaterChase_j_131072_160
      000ECB AB 75            [24] 2968 	mov	r3,(_theaterChase_j_131072_160 + 1)
      000ECD C3               [12] 2969 	clr	c
      000ECE EA               [12] 2970 	mov	a,r2
      000ECF 94 0A            [12] 2971 	subb	a,#0x0a
      000ED1 EB               [12] 2972 	mov	a,r3
      000ED2 64 80            [12] 2973 	xrl	a,#0x80
      000ED4 94 80            [12] 2974 	subb	a,#0x80
      000ED6 40 01            [24] 2975 	jc	00163$
      000ED8 22               [24] 2976 	ret
      000ED9                       2977 00163$:
                                   2978 ;	./N76_UCS1903.c:419: for (int16_t q = 0; q < 3; q++)
      000ED9 7A 00            [12] 2979 	mov	r2,#0x00
      000EDB 7B 00            [12] 2980 	mov	r3,#0x00
      000EDD                       2981 00116$:
      000EDD 8A 00            [24] 2982 	mov	ar0,r2
      000EDF 8B 01            [24] 2983 	mov	ar1,r3
      000EE1 C3               [12] 2984 	clr	c
      000EE2 E8               [12] 2985 	mov	a,r0
      000EE3 94 03            [12] 2986 	subb	a,#0x03
      000EE5 E9               [12] 2987 	mov	a,r1
      000EE6 64 80            [12] 2988 	xrl	a,#0x80
      000EE8 94 80            [12] 2989 	subb	a,#0x80
      000EEA 40 03            [24] 2990 	jc	00164$
      000EEC 02 0F F5         [24] 2991 	ljmp	00120$
      000EEF                       2992 00164$:
                                   2993 ;	./N76_UCS1903.c:421: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000EEF 78 00            [12] 2994 	mov	r0,#0x00
      000EF1 79 00            [12] 2995 	mov	r1,#0x00
      000EF3                       2996 00110$:
      000EF3 88 04            [24] 2997 	mov	ar4,r0
      000EF5 89 05            [24] 2998 	mov	ar5,r1
      000EF7 C3               [12] 2999 	clr	c
      000EF8 EC               [12] 3000 	mov	a,r4
      000EF9 95 21            [12] 3001 	subb	a,_NUM_LEDS
      000EFB ED               [12] 3002 	mov	a,r5
      000EFC 95 22            [12] 3003 	subb	a,(_NUM_LEDS + 1)
      000EFE 50 46            [24] 3004 	jnc	00103$
                                   3005 ;	./N76_UCS1903.c:423: if (curEffect != effect) {_status=STT_NEW;return;}
      000F00 EE               [12] 3006 	mov	a,r6
      000F01 B5 25 02         [24] 3007 	cjne	a,_effect,00166$
      000F04 80 04            [24] 3008 	sjmp	00102$
      000F06                       3009 00166$:
      000F06 75 26 12         [24] 3010 	mov	__status,#0x12
      000F09 22               [24] 3011 	ret
      000F0A                       3012 00102$:
                                   3013 ;	./N76_UCS1903.c:424: setPixel(i + q, green, red, blue); // turn every third pixel on
      000F0A EA               [12] 3014 	mov	a,r2
      000F0B 28               [12] 3015 	add	a,r0
      000F0C F5 82            [12] 3016 	mov	dpl,a
      000F0E EB               [12] 3017 	mov	a,r3
      000F0F 39               [12] 3018 	addc	a,r1
      000F10 F5 83            [12] 3019 	mov	dph,a
      000F12 8F 2A            [24] 3020 	mov	_setPixel_PARM_2,r7
      000F14 85 70 2B         [24] 3021 	mov	_setPixel_PARM_3,_theaterChase_PARM_2
      000F17 85 71 2C         [24] 3022 	mov	_setPixel_PARM_4,_theaterChase_PARM_3
      000F1A C0 07            [24] 3023 	push	ar7
      000F1C C0 06            [24] 3024 	push	ar6
      000F1E C0 03            [24] 3025 	push	ar3
      000F20 C0 02            [24] 3026 	push	ar2
      000F22 C0 01            [24] 3027 	push	ar1
      000F24 C0 00            [24] 3028 	push	ar0
      000F26 12 02 A6         [24] 3029 	lcall	_setPixel
      000F29 D0 00            [24] 3030 	pop	ar0
      000F2B D0 01            [24] 3031 	pop	ar1
      000F2D D0 02            [24] 3032 	pop	ar2
      000F2F D0 03            [24] 3033 	pop	ar3
      000F31 D0 06            [24] 3034 	pop	ar6
      000F33 D0 07            [24] 3035 	pop	ar7
                                   3036 ;	./N76_UCS1903.c:421: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000F35 88 04            [24] 3037 	mov	ar4,r0
      000F37 89 05            [24] 3038 	mov	ar5,r1
      000F39 74 03            [12] 3039 	mov	a,#0x03
      000F3B 2C               [12] 3040 	add	a,r4
      000F3C FC               [12] 3041 	mov	r4,a
      000F3D E4               [12] 3042 	clr	a
      000F3E 3D               [12] 3043 	addc	a,r5
      000F3F FD               [12] 3044 	mov	r5,a
      000F40 8C 00            [24] 3045 	mov	ar0,r4
      000F42 8D 01            [24] 3046 	mov	ar1,r5
      000F44 80 AD            [24] 3047 	sjmp	00110$
      000F46                       3048 00103$:
                                   3049 ;	./N76_UCS1903.c:426: showStrip();
      000F46 C0 07            [24] 3050 	push	ar7
      000F48 C0 06            [24] 3051 	push	ar6
      000F4A C0 03            [24] 3052 	push	ar3
      000F4C C0 02            [24] 3053 	push	ar2
      000F4E 12 02 27         [24] 3054 	lcall	_showStrip
                                   3055 ;	./N76_UCS1903.c:428: _delay_ms(DELAY);
      000F51 85 21 0C         [24] 3056 	mov	__divuint_PARM_2,_NUM_LEDS
      000F54 85 22 0D         [24] 3057 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000F57 90 00 C8         [24] 3058 	mov	dptr,#0x00c8
      000F5A 12 17 18         [24] 3059 	lcall	__divuint
      000F5D 85 23 0C         [24] 3060 	mov	__mulint_PARM_2,__delay
      000F60 85 24 0D         [24] 3061 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000F63 12 18 C5         [24] 3062 	lcall	__mulint
      000F66 75 0C 0A         [24] 3063 	mov	__divuint_PARM_2,#0x0a
      000F69 75 0D 00         [24] 3064 	mov	(__divuint_PARM_2 + 1),#0x00
      000F6C 12 17 18         [24] 3065 	lcall	__divuint
      000F6F E5 82            [12] 3066 	mov	a,dpl
      000F71 85 83 F0         [24] 3067 	mov	b,dph
      000F74 24 01            [12] 3068 	add	a,#0x01
      000F76 FC               [12] 3069 	mov	r4,a
      000F77 E4               [12] 3070 	clr	a
      000F78 35 F0            [12] 3071 	addc	a,b
      000F7A FD               [12] 3072 	mov	r5,a
      000F7B 8C 00            [24] 3073 	mov	ar0,r4
      000F7D 8D 01            [24] 3074 	mov	ar1,r5
      000F7F 7C 00            [12] 3075 	mov	r4,#0x00
      000F81 7D 00            [12] 3076 	mov	r5,#0x00
      000F83 88 82            [24] 3077 	mov	dpl,r0
      000F85 89 83            [24] 3078 	mov	dph,r1
      000F87 8C F0            [24] 3079 	mov	b,r4
      000F89 ED               [12] 3080 	mov	a,r5
      000F8A 12 16 8A         [24] 3081 	lcall	__delay_ms
      000F8D D0 02            [24] 3082 	pop	ar2
      000F8F D0 03            [24] 3083 	pop	ar3
      000F91 D0 06            [24] 3084 	pop	ar6
      000F93 D0 07            [24] 3085 	pop	ar7
                                   3086 ;	./N76_UCS1903.c:430: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000F95 7C 00            [12] 3087 	mov	r4,#0x00
      000F97 7D 00            [12] 3088 	mov	r5,#0x00
      000F99                       3089 00113$:
      000F99 8C 00            [24] 3090 	mov	ar0,r4
      000F9B 8D 01            [24] 3091 	mov	ar1,r5
      000F9D C3               [12] 3092 	clr	c
      000F9E E8               [12] 3093 	mov	a,r0
      000F9F 95 21            [12] 3094 	subb	a,_NUM_LEDS
      000FA1 E9               [12] 3095 	mov	a,r1
      000FA2 95 22            [12] 3096 	subb	a,(_NUM_LEDS + 1)
      000FA4 50 47            [24] 3097 	jnc	00117$
                                   3098 ;	./N76_UCS1903.c:432: if (curEffect != effect) {_status=STT_NEW;return;}
      000FA6 EE               [12] 3099 	mov	a,r6
      000FA7 B5 25 02         [24] 3100 	cjne	a,_effect,00168$
      000FAA 80 04            [24] 3101 	sjmp	00105$
      000FAC                       3102 00168$:
      000FAC 75 26 12         [24] 3103 	mov	__status,#0x12
      000FAF 22               [24] 3104 	ret
      000FB0                       3105 00105$:
                                   3106 ;	./N76_UCS1903.c:433: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      000FB0 EA               [12] 3107 	mov	a,r2
      000FB1 2C               [12] 3108 	add	a,r4
      000FB2 F5 82            [12] 3109 	mov	dpl,a
      000FB4 EB               [12] 3110 	mov	a,r3
      000FB5 3D               [12] 3111 	addc	a,r5
      000FB6 F5 83            [12] 3112 	mov	dph,a
      000FB8 75 2A 00         [24] 3113 	mov	_setPixel_PARM_2,#0x00
      000FBB 75 2B 00         [24] 3114 	mov	_setPixel_PARM_3,#0x00
      000FBE 75 2C 00         [24] 3115 	mov	_setPixel_PARM_4,#0x00
      000FC1 C0 07            [24] 3116 	push	ar7
      000FC3 C0 06            [24] 3117 	push	ar6
      000FC5 C0 05            [24] 3118 	push	ar5
      000FC7 C0 04            [24] 3119 	push	ar4
      000FC9 C0 03            [24] 3120 	push	ar3
      000FCB C0 02            [24] 3121 	push	ar2
      000FCD 12 02 A6         [24] 3122 	lcall	_setPixel
      000FD0 D0 02            [24] 3123 	pop	ar2
      000FD2 D0 03            [24] 3124 	pop	ar3
      000FD4 D0 04            [24] 3125 	pop	ar4
      000FD6 D0 05            [24] 3126 	pop	ar5
      000FD8 D0 06            [24] 3127 	pop	ar6
      000FDA D0 07            [24] 3128 	pop	ar7
                                   3129 ;	./N76_UCS1903.c:430: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000FDC 8C 00            [24] 3130 	mov	ar0,r4
      000FDE 8D 01            [24] 3131 	mov	ar1,r5
      000FE0 74 03            [12] 3132 	mov	a,#0x03
      000FE2 28               [12] 3133 	add	a,r0
      000FE3 F8               [12] 3134 	mov	r0,a
      000FE4 E4               [12] 3135 	clr	a
      000FE5 39               [12] 3136 	addc	a,r1
      000FE6 F9               [12] 3137 	mov	r1,a
      000FE7 88 04            [24] 3138 	mov	ar4,r0
      000FE9 89 05            [24] 3139 	mov	ar5,r1
      000FEB 80 AC            [24] 3140 	sjmp	00113$
      000FED                       3141 00117$:
                                   3142 ;	./N76_UCS1903.c:419: for (int16_t q = 0; q < 3; q++)
      000FED 0A               [12] 3143 	inc	r2
      000FEE BA 00 01         [24] 3144 	cjne	r2,#0x00,00169$
      000FF1 0B               [12] 3145 	inc	r3
      000FF2                       3146 00169$:
      000FF2 02 0E DD         [24] 3147 	ljmp	00116$
      000FF5                       3148 00120$:
                                   3149 ;	./N76_UCS1903.c:417: for (int16_t j = 0; j < 10; j++)
      000FF5 05 74            [12] 3150 	inc	_theaterChase_j_131072_160
      000FF7 E4               [12] 3151 	clr	a
      000FF8 B5 74 02         [24] 3152 	cjne	a,_theaterChase_j_131072_160,00170$
      000FFB 05 75            [12] 3153 	inc	(_theaterChase_j_131072_160 + 1)
      000FFD                       3154 00170$:
                                   3155 ;	./N76_UCS1903.c:437: }
      000FFD 02 0E C9         [24] 3156 	ljmp	00119$
                                   3157 ;------------------------------------------------------------
                                   3158 ;Allocation info for local variables in function 'theaterChaseRainbow'
                                   3159 ;------------------------------------------------------------
                                   3160 ;SpeedDelay                Allocated to registers 
                                   3161 ;c                         Allocated with name '_theaterChaseRainbow_c_65536_171'
                                   3162 ;curEffect                 Allocated with name '_theaterChaseRainbow_curEffect_65536_171'
                                   3163 ;j                         Allocated with name '_theaterChaseRainbow_j_131072_172'
                                   3164 ;q                         Allocated with name '_theaterChaseRainbow_q_262144_174'
                                   3165 ;i                         Allocated to registers r1 r2 
                                   3166 ;i                         Allocated to registers r6 r7 
                                   3167 ;------------------------------------------------------------
                                   3168 ;	./N76_UCS1903.c:439: void theaterChaseRainbow(int16_t SpeedDelay)
                                   3169 ;	-----------------------------------------
                                   3170 ;	 function theaterChaseRainbow
                                   3171 ;	-----------------------------------------
      001000                       3172 _theaterChaseRainbow:
                                   3173 ;	./N76_UCS1903.c:442: uint8_t curEffect = effect;
      001000 85 25 79         [24] 3174 	mov	_theaterChaseRainbow_curEffect_65536_171,_effect
                                   3175 ;	./N76_UCS1903.c:444: for (int16_t j = 0; j < 256; j++)
      001003 E4               [12] 3176 	clr	a
      001004 F5 7A            [12] 3177 	mov	_theaterChaseRainbow_j_131072_172,a
      001006 F5 7B            [12] 3178 	mov	(_theaterChaseRainbow_j_131072_172 + 1),a
      001008                       3179 00119$:
      001008 AB 7A            [24] 3180 	mov	r3,_theaterChaseRainbow_j_131072_172
      00100A AC 7B            [24] 3181 	mov	r4,(_theaterChaseRainbow_j_131072_172 + 1)
      00100C C3               [12] 3182 	clr	c
      00100D EC               [12] 3183 	mov	a,r4
      00100E 64 80            [12] 3184 	xrl	a,#0x80
      001010 94 81            [12] 3185 	subb	a,#0x81
      001012 40 01            [24] 3186 	jc	00163$
      001014 22               [24] 3187 	ret
      001015                       3188 00163$:
                                   3189 ;	./N76_UCS1903.c:446: for (int16_t q = 0; q < 3; q++)
      001015 E4               [12] 3190 	clr	a
      001016 F5 7C            [12] 3191 	mov	_theaterChaseRainbow_q_262144_174,a
      001018 F5 7D            [12] 3192 	mov	(_theaterChaseRainbow_q_262144_174 + 1),a
      00101A                       3193 00116$:
      00101A A9 7C            [24] 3194 	mov	r1,_theaterChaseRainbow_q_262144_174
      00101C AA 7D            [24] 3195 	mov	r2,(_theaterChaseRainbow_q_262144_174 + 1)
      00101E C3               [12] 3196 	clr	c
      00101F E9               [12] 3197 	mov	a,r1
      001020 94 03            [12] 3198 	subb	a,#0x03
      001022 EA               [12] 3199 	mov	a,r2
      001023 64 80            [12] 3200 	xrl	a,#0x80
      001025 94 80            [12] 3201 	subb	a,#0x80
      001027 40 03            [24] 3202 	jc	00164$
      001029 02 11 68         [24] 3203 	ljmp	00120$
      00102C                       3204 00164$:
                                   3205 ;	./N76_UCS1903.c:448: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      00102C 79 00            [12] 3206 	mov	r1,#0x00
      00102E 7A 00            [12] 3207 	mov	r2,#0x00
      001030                       3208 00110$:
      001030 89 00            [24] 3209 	mov	ar0,r1
      001032 8A 06            [24] 3210 	mov	ar6,r2
      001034 C3               [12] 3211 	clr	c
      001035 E8               [12] 3212 	mov	a,r0
      001036 95 21            [12] 3213 	subb	a,_NUM_LEDS
      001038 EE               [12] 3214 	mov	a,r6
      001039 95 22            [12] 3215 	subb	a,(_NUM_LEDS + 1)
      00103B 40 03            [24] 3216 	jc	00165$
      00103D 02 10 D7         [24] 3217 	ljmp	00103$
      001040                       3218 00165$:
                                   3219 ;	./N76_UCS1903.c:450: if (curEffect != effect) {_status=STT_NEW;return;}
      001040 E5 25            [12] 3220 	mov	a,_effect
      001042 B5 79 02         [24] 3221 	cjne	a,_theaterChaseRainbow_curEffect_65536_171,00166$
      001045 80 04            [24] 3222 	sjmp	00102$
      001047                       3223 00166$:
      001047 75 26 12         [24] 3224 	mov	__status,#0x12
      00104A 22               [24] 3225 	ret
      00104B                       3226 00102$:
                                   3227 ;	./N76_UCS1903.c:451: c = Wheel((i + j) % 255);
      00104B E5 7A            [12] 3228 	mov	a,_theaterChaseRainbow_j_131072_172
      00104D 29               [12] 3229 	add	a,r1
      00104E FD               [12] 3230 	mov	r5,a
      00104F E5 7B            [12] 3231 	mov	a,(_theaterChaseRainbow_j_131072_172 + 1)
      001051 3A               [12] 3232 	addc	a,r2
      001052 FE               [12] 3233 	mov	r6,a
      001053 8D 82            [24] 3234 	mov	dpl,r5
      001055 8E 83            [24] 3235 	mov	dph,r6
      001057 75 0C FF         [24] 3236 	mov	__modsint_PARM_2,#0xff
      00105A 75 0D 00         [24] 3237 	mov	(__modsint_PARM_2 + 1),#0x00
      00105D C0 02            [24] 3238 	push	ar2
      00105F C0 01            [24] 3239 	push	ar1
      001061 12 1A EB         [24] 3240 	lcall	__modsint
      001064 12 0E 5F         [24] 3241 	lcall	_Wheel
      001067 85 82 76         [24] 3242 	mov	_theaterChaseRainbow_c_65536_171,dpl
      00106A 85 83 77         [24] 3243 	mov	(_theaterChaseRainbow_c_65536_171 + 1),dph
      00106D 85 F0 78         [24] 3244 	mov	(_theaterChaseRainbow_c_65536_171 + 2),b
      001070 D0 01            [24] 3245 	pop	ar1
      001072 D0 02            [24] 3246 	pop	ar2
                                   3247 ;	./N76_UCS1903.c:452: setPixel(i + q, *c, *(c + 1), *(c + 2)); // turn every third pixel on
      001074 E5 7C            [12] 3248 	mov	a,_theaterChaseRainbow_q_262144_174
      001076 29               [12] 3249 	add	a,r1
      001077 FC               [12] 3250 	mov	r4,a
      001078 E5 7D            [12] 3251 	mov	a,(_theaterChaseRainbow_q_262144_174 + 1)
      00107A 3A               [12] 3252 	addc	a,r2
      00107B FF               [12] 3253 	mov	r7,a
      00107C 85 76 82         [24] 3254 	mov	dpl,_theaterChaseRainbow_c_65536_171
      00107F 85 77 83         [24] 3255 	mov	dph,(_theaterChaseRainbow_c_65536_171 + 1)
      001082 85 78 F0         [24] 3256 	mov	b,(_theaterChaseRainbow_c_65536_171 + 2)
      001085 12 1A CF         [24] 3257 	lcall	__gptrget
      001088 F5 2A            [12] 3258 	mov	_setPixel_PARM_2,a
      00108A 74 01            [12] 3259 	mov	a,#0x01
      00108C 25 76            [12] 3260 	add	a,_theaterChaseRainbow_c_65536_171
      00108E FB               [12] 3261 	mov	r3,a
      00108F E4               [12] 3262 	clr	a
      001090 35 77            [12] 3263 	addc	a,(_theaterChaseRainbow_c_65536_171 + 1)
      001092 FD               [12] 3264 	mov	r5,a
      001093 AE 78            [24] 3265 	mov	r6,(_theaterChaseRainbow_c_65536_171 + 2)
      001095 8B 82            [24] 3266 	mov	dpl,r3
      001097 8D 83            [24] 3267 	mov	dph,r5
      001099 8E F0            [24] 3268 	mov	b,r6
      00109B 12 1A CF         [24] 3269 	lcall	__gptrget
      00109E F5 2B            [12] 3270 	mov	_setPixel_PARM_3,a
      0010A0 74 02            [12] 3271 	mov	a,#0x02
      0010A2 25 76            [12] 3272 	add	a,_theaterChaseRainbow_c_65536_171
      0010A4 FB               [12] 3273 	mov	r3,a
      0010A5 E4               [12] 3274 	clr	a
      0010A6 35 77            [12] 3275 	addc	a,(_theaterChaseRainbow_c_65536_171 + 1)
      0010A8 FD               [12] 3276 	mov	r5,a
      0010A9 AE 78            [24] 3277 	mov	r6,(_theaterChaseRainbow_c_65536_171 + 2)
      0010AB 8B 82            [24] 3278 	mov	dpl,r3
      0010AD 8D 83            [24] 3279 	mov	dph,r5
      0010AF 8E F0            [24] 3280 	mov	b,r6
      0010B1 12 1A CF         [24] 3281 	lcall	__gptrget
      0010B4 F5 2C            [12] 3282 	mov	_setPixel_PARM_4,a
      0010B6 8C 82            [24] 3283 	mov	dpl,r4
      0010B8 8F 83            [24] 3284 	mov	dph,r7
      0010BA C0 02            [24] 3285 	push	ar2
      0010BC C0 01            [24] 3286 	push	ar1
      0010BE 12 02 A6         [24] 3287 	lcall	_setPixel
      0010C1 D0 01            [24] 3288 	pop	ar1
      0010C3 D0 02            [24] 3289 	pop	ar2
                                   3290 ;	./N76_UCS1903.c:448: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      0010C5 89 06            [24] 3291 	mov	ar6,r1
      0010C7 8A 07            [24] 3292 	mov	ar7,r2
      0010C9 74 03            [12] 3293 	mov	a,#0x03
      0010CB 2E               [12] 3294 	add	a,r6
      0010CC FE               [12] 3295 	mov	r6,a
      0010CD E4               [12] 3296 	clr	a
      0010CE 3F               [12] 3297 	addc	a,r7
      0010CF FF               [12] 3298 	mov	r7,a
      0010D0 8E 01            [24] 3299 	mov	ar1,r6
      0010D2 8F 02            [24] 3300 	mov	ar2,r7
      0010D4 02 10 30         [24] 3301 	ljmp	00110$
      0010D7                       3302 00103$:
                                   3303 ;	./N76_UCS1903.c:454: showStrip();
      0010D7 12 02 27         [24] 3304 	lcall	_showStrip
                                   3305 ;	./N76_UCS1903.c:456: _delay_ms(DELAY);
      0010DA 85 21 0C         [24] 3306 	mov	__divuint_PARM_2,_NUM_LEDS
      0010DD 85 22 0D         [24] 3307 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0010E0 90 00 C8         [24] 3308 	mov	dptr,#0x00c8
      0010E3 12 17 18         [24] 3309 	lcall	__divuint
      0010E6 85 23 0C         [24] 3310 	mov	__mulint_PARM_2,__delay
      0010E9 85 24 0D         [24] 3311 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0010EC 12 18 C5         [24] 3312 	lcall	__mulint
      0010EF 75 0C 0A         [24] 3313 	mov	__divuint_PARM_2,#0x0a
      0010F2 75 0D 00         [24] 3314 	mov	(__divuint_PARM_2 + 1),#0x00
      0010F5 12 17 18         [24] 3315 	lcall	__divuint
      0010F8 E5 82            [12] 3316 	mov	a,dpl
      0010FA 85 83 F0         [24] 3317 	mov	b,dph
      0010FD 24 01            [12] 3318 	add	a,#0x01
      0010FF FE               [12] 3319 	mov	r6,a
      001100 E4               [12] 3320 	clr	a
      001101 35 F0            [12] 3321 	addc	a,b
      001103 FF               [12] 3322 	mov	r7,a
      001104 7D 00            [12] 3323 	mov	r5,#0x00
      001106 7C 00            [12] 3324 	mov	r4,#0x00
      001108 8E 82            [24] 3325 	mov	dpl,r6
      00110A 8F 83            [24] 3326 	mov	dph,r7
      00110C 8D F0            [24] 3327 	mov	b,r5
      00110E EC               [12] 3328 	mov	a,r4
      00110F 12 16 8A         [24] 3329 	lcall	__delay_ms
                                   3330 ;	./N76_UCS1903.c:458: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      001112 7E 00            [12] 3331 	mov	r6,#0x00
      001114 7F 00            [12] 3332 	mov	r7,#0x00
      001116                       3333 00113$:
      001116 8E 04            [24] 3334 	mov	ar4,r6
      001118 8F 05            [24] 3335 	mov	ar5,r7
      00111A C3               [12] 3336 	clr	c
      00111B EC               [12] 3337 	mov	a,r4
      00111C 95 21            [12] 3338 	subb	a,_NUM_LEDS
      00111E ED               [12] 3339 	mov	a,r5
      00111F 95 22            [12] 3340 	subb	a,(_NUM_LEDS + 1)
      001121 50 3A            [24] 3341 	jnc	00117$
                                   3342 ;	./N76_UCS1903.c:460: if (curEffect != effect) {_status=STT_NEW;return;}
      001123 E5 25            [12] 3343 	mov	a,_effect
      001125 B5 79 02         [24] 3344 	cjne	a,_theaterChaseRainbow_curEffect_65536_171,00168$
      001128 80 04            [24] 3345 	sjmp	00105$
      00112A                       3346 00168$:
      00112A 75 26 12         [24] 3347 	mov	__status,#0x12
      00112D 22               [24] 3348 	ret
      00112E                       3349 00105$:
                                   3350 ;	./N76_UCS1903.c:461: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      00112E E5 7C            [12] 3351 	mov	a,_theaterChaseRainbow_q_262144_174
      001130 2E               [12] 3352 	add	a,r6
      001131 F5 82            [12] 3353 	mov	dpl,a
      001133 E5 7D            [12] 3354 	mov	a,(_theaterChaseRainbow_q_262144_174 + 1)
      001135 3F               [12] 3355 	addc	a,r7
      001136 F5 83            [12] 3356 	mov	dph,a
      001138 75 2A 00         [24] 3357 	mov	_setPixel_PARM_2,#0x00
      00113B 75 2B 00         [24] 3358 	mov	_setPixel_PARM_3,#0x00
      00113E 75 2C 00         [24] 3359 	mov	_setPixel_PARM_4,#0x00
      001141 C0 07            [24] 3360 	push	ar7
      001143 C0 06            [24] 3361 	push	ar6
      001145 12 02 A6         [24] 3362 	lcall	_setPixel
      001148 D0 06            [24] 3363 	pop	ar6
      00114A D0 07            [24] 3364 	pop	ar7
                                   3365 ;	./N76_UCS1903.c:458: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      00114C 8E 04            [24] 3366 	mov	ar4,r6
      00114E 8F 05            [24] 3367 	mov	ar5,r7
      001150 74 03            [12] 3368 	mov	a,#0x03
      001152 2C               [12] 3369 	add	a,r4
      001153 FC               [12] 3370 	mov	r4,a
      001154 E4               [12] 3371 	clr	a
      001155 3D               [12] 3372 	addc	a,r5
      001156 FD               [12] 3373 	mov	r5,a
      001157 8C 06            [24] 3374 	mov	ar6,r4
      001159 8D 07            [24] 3375 	mov	ar7,r5
      00115B 80 B9            [24] 3376 	sjmp	00113$
      00115D                       3377 00117$:
                                   3378 ;	./N76_UCS1903.c:446: for (int16_t q = 0; q < 3; q++)
      00115D 05 7C            [12] 3379 	inc	_theaterChaseRainbow_q_262144_174
      00115F E4               [12] 3380 	clr	a
      001160 B5 7C 02         [24] 3381 	cjne	a,_theaterChaseRainbow_q_262144_174,00169$
      001163 05 7D            [12] 3382 	inc	(_theaterChaseRainbow_q_262144_174 + 1)
      001165                       3383 00169$:
      001165 02 10 1A         [24] 3384 	ljmp	00116$
      001168                       3385 00120$:
                                   3386 ;	./N76_UCS1903.c:444: for (int16_t j = 0; j < 256; j++)
      001168 05 7A            [12] 3387 	inc	_theaterChaseRainbow_j_131072_172
      00116A E4               [12] 3388 	clr	a
      00116B B5 7A 02         [24] 3389 	cjne	a,_theaterChaseRainbow_j_131072_172,00170$
      00116E 05 7B            [12] 3390 	inc	(_theaterChaseRainbow_j_131072_172 + 1)
      001170                       3391 00170$:
                                   3392 ;	./N76_UCS1903.c:465: }
      001170 02 10 08         [24] 3393 	ljmp	00119$
                                   3394 ;------------------------------------------------------------
                                   3395 ;Allocation info for local variables in function 'TIM2_begin'
                                   3396 ;------------------------------------------------------------
                                   3397 ;reload                    Allocated with name '_TIM2_begin_PARM_2'
                                   3398 ;tim_div_x                 Allocated to registers r7 
                                   3399 ;------------------------------------------------------------
                                   3400 ;	./N76_UCS1903.c:468: void TIM2_begin(uint8_t tim_div_x, uint16_t reload)
                                   3401 ;	-----------------------------------------
                                   3402 ;	 function TIM2_begin
                                   3403 ;	-----------------------------------------
      001173                       3404 _TIM2_begin:
      001173 AF 82            [24] 3405 	mov	r7,dpl
                                   3406 ;	./N76_UCS1903.c:475: T2MOD&=~0x70;
      001175 53 C9 8F         [24] 3407 	anl	_t2mod,#0x8f
                                   3408 ;	./N76_UCS1903.c:476: T2MOD|=tim_div_x;
      001178 EF               [12] 3409 	mov	a,r7
      001179 42 C9            [12] 3410 	orl	_t2mod,a
                                   3411 ;	./N76_UCS1903.c:479: T2CON&=~(1<<0);T2MOD|=(1<<7);T2MOD|=(1<<3);
      00117B 53 C8 FE         [24] 3412 	anl	_t2con,#0xfe
      00117E 43 C9 80         [24] 3413 	orl	_t2mod,#0x80
      001181 43 C9 08         [24] 3414 	orl	_t2mod,#0x08
                                   3415 ;	./N76_UCS1903.c:482: RCMP2L = reload;//100ms
      001184 85 0C CA         [24] 3416 	mov	_rcmp2l,_TIM2_begin_PARM_2
                                   3417 ;	./N76_UCS1903.c:484: RCMP2H = reload>>8;
      001187 85 0D CB         [24] 3418 	mov	_rcmp2h,(_TIM2_begin_PARM_2 + 1)
                                   3419 ;	./N76_UCS1903.c:487: TL2 = 0;
      00118A 75 CC 00         [24] 3420 	mov	_tl2,#0x00
                                   3421 ;	./N76_UCS1903.c:488: TH2 = 0;
      00118D 75 CD 00         [24] 3422 	mov	_th2,#0x00
                                   3423 ;	./N76_UCS1903.c:491: setb(EIE, 7);                                    // Enable Timer2 interrupt
      001190 43 9B 80         [24] 3424 	orl	_eie,#0x80
                                   3425 ;	./N76_UCS1903.c:493: sei();
      001193 43 A8 80         [24] 3426 	orl	_ie,#0x80
                                   3427 ;	./N76_UCS1903.c:495: setb(T2CON, 2);                                    // Timer2 run
      001196 43 C8 04         [24] 3428 	orl	_t2con,#0x04
                                   3429 ;	./N76_UCS1903.c:496: }
      001199 22               [24] 3430 	ret
                                   3431 ;------------------------------------------------------------
                                   3432 ;Allocation info for local variables in function 'main'
                                   3433 ;------------------------------------------------------------
                                   3434 ;	./N76_UCS1903.c:498: void main(void)
                                   3435 ;	-----------------------------------------
                                   3436 ;	 function main
                                   3437 ;	-----------------------------------------
      00119A                       3438 _main:
                                   3439 ;	./N76_UCS1903.c:500: effect=APROM_read_byte(ADDR_EFF);
      00119A 90 20 00         [24] 3440 	mov	dptr,#0x2000
      00119D 12 15 C6         [24] 3441 	lcall	_APROM_read_byte
      0011A0 85 82 25         [24] 3442 	mov	_effect,dpl
                                   3443 ;	./N76_UCS1903.c:501: if (effect>=12) effect=0;
      0011A3 74 F4            [12] 3444 	mov	a,#0x100 - 0x0c
      0011A5 25 25            [12] 3445 	add	a,_effect
      0011A7 50 03            [24] 3446 	jnc	00102$
      0011A9 75 25 00         [24] 3447 	mov	_effect,#0x00
      0011AC                       3448 00102$:
                                   3449 ;	./N76_UCS1903.c:504: CKDIV = 0x00; // 16MHz
      0011AC 75 95 00         [24] 3450 	mov	_ckdiv,#0x00
                                   3451 ;	./N76_UCS1903.c:505: clrb(LED_PxM1, LED_PIN);
      0011AF 53 B1 BF         [24] 3452 	anl	_p0m1,#0xbf
                                   3453 ;	./N76_UCS1903.c:506: setb(LED_PxM2, LED_PIN);
      0011B2 43 B2 40         [24] 3454 	orl	_p0m2,#0x40
                                   3455 ;	./N76_UCS1903.c:507: clrb(LED_PORT, LED_PIN);
      0011B5 53 80 BF         [24] 3456 	anl	_p0,#0xbf
                                   3457 ;	./N76_UCS1903.c:509: clrb(SW_PxM1, SW50_PIN);
      0011B8 53 B1 FE         [24] 3458 	anl	_p0m1,#0xfe
                                   3459 ;	./N76_UCS1903.c:510: setb(SW_PxM2, SW50_PIN);
      0011BB 43 B2 01         [24] 3460 	orl	_p0m2,#0x01
                                   3461 ;	./N76_UCS1903.c:512: clrb(SW_PxM1, SW100_PIN);
      0011BE 53 B1 FD         [24] 3462 	anl	_p0m1,#0xfd
                                   3463 ;	./N76_UCS1903.c:513: setb(SW_PxM2, SW100_PIN);
      0011C1 43 B2 02         [24] 3464 	orl	_p0m2,#0x02
                                   3465 ;	./N76_UCS1903.c:515: clrb(SW_PxM1, SW150_PIN);
      0011C4 53 B1 FB         [24] 3466 	anl	_p0m1,#0xfb
                                   3467 ;	./N76_UCS1903.c:516: setb(SW_PxM2, SW150_PIN);
      0011C7 43 B2 04         [24] 3468 	orl	_p0m2,#0x04
                                   3469 ;	./N76_UCS1903.c:518: clrb(SW_PxM1, SW200_PIN);
      0011CA 53 B1 F7         [24] 3470 	anl	_p0m1,#0xf7
                                   3471 ;	./N76_UCS1903.c:519: setb(SW_PxM2, SW200_PIN);
      0011CD 43 B2 08         [24] 3472 	orl	_p0m2,#0x08
                                   3473 ;	./N76_UCS1903.c:521: SW_PORT |= 0x0F;
      0011D0 43 80 0F         [24] 3474 	orl	_p0,#0x0f
                                   3475 ;	./N76_UCS1903.c:523: clrb(BTN_PxM1, BTN_PIN);
      0011D3 53 B1 EF         [24] 3476 	anl	_p0m1,#0xef
                                   3477 ;	./N76_UCS1903.c:524: setb(BTN_PxM2, BTN_PIN);
      0011D6 43 B2 10         [24] 3478 	orl	_p0m2,#0x10
                                   3479 ;	./N76_UCS1903.c:525: setb(BTN_PORT, BTN_PIN);
      0011D9 43 80 10         [24] 3480 	orl	_p0,#0x10
                                   3481 ;	./N76_UCS1903.c:528: ADCCON0&=0xF0;
      0011DC 53 E8 F0         [24] 3482 	anl	_adccon0,#0xf0
                                   3483 ;	./N76_UCS1903.c:529: ADCCON0|=0x07;
      0011DF 43 E8 07         [24] 3484 	orl	_adccon0,#0x07
                                   3485 ;	./N76_UCS1903.c:532: clrb(P1M2, 1);
      0011E2 53 B4 FD         [24] 3486 	anl	_p1m2,#0xfd
                                   3487 ;	./N76_UCS1903.c:533: setb(P1M1, 1);
      0011E5 43 B3 02         [24] 3488 	orl	_p1m1,#0x02
                                   3489 ;	./N76_UCS1903.c:534: AINDIDS=0x00;
      0011E8 75 F6 00         [24] 3490 	mov	_aindids,#0x00
                                   3491 ;	./N76_UCS1903.c:535: AINDIDS|=(1<<7);
      0011EB 43 F6 80         [24] 3492 	orl	_aindids,#0x80
                                   3493 ;	./N76_UCS1903.c:536: ADCCON1|=(1<<0);
      0011EE 43 E1 01         [24] 3494 	orl	_adccon1,#0x01
                                   3495 ;	./N76_UCS1903.c:537: setb(IE, EADC);//enable interruppt ADC
      0011F1 43 A8 40         [24] 3496 	orl	_ie,#0x40
                                   3497 ;	./N76_UCS1903.c:540: setb(PICON, 6);
      0011F4 43 E9 40         [24] 3498 	orl	_picon,#0x40
                                   3499 ;	./N76_UCS1903.c:541: setb(PINEN, BTN_PIN);// enable falling edge
      0011F7 43 EA 10         [24] 3500 	orl	_pinen,#0x10
                                   3501 ;	./N76_UCS1903.c:542: clrb(PIPEN, BTN_PIN);// disable rasing edge
      0011FA 53 EB EF         [24] 3502 	anl	_pipen,#0xef
                                   3503 ;	./N76_UCS1903.c:545: setb(EIE , 1); // set external interrupt 0 at falling edge
      0011FD 43 9B 02         [24] 3504 	orl	_eie,#0x02
                                   3505 ;	./N76_UCS1903.c:547: clearAll();
      001200 12 01 EC         [24] 3506 	lcall	_clearAll
                                   3507 ;	./N76_UCS1903.c:548: TIM2_begin(0x70, 65536-15625);
      001203 75 0C F7         [24] 3508 	mov	_TIM2_begin_PARM_2,#0xf7
      001206 75 0D C2         [24] 3509 	mov	(_TIM2_begin_PARM_2 + 1),#0xc2
      001209 75 82 70         [24] 3510 	mov	dpl,#0x70
      00120C 12 11 73         [24] 3511 	lcall	_TIM2_begin
                                   3512 ;	./N76_UCS1903.c:549: sei();           // Enable global interrupt
      00120F 43 A8 80         [24] 3513 	orl	_ie,#0x80
                                   3514 ;	./N76_UCS1903.c:551: setb(ADCCON0, 6);
      001212 43 E8 40         [24] 3515 	orl	_adccon0,#0x40
                                   3516 ;	./N76_UCS1903.c:552: if (inbit(SW_PORT, SW50_PIN) == 0) NUM_LEDS = 50;
      001215 74 01            [12] 3517 	mov	a,#0x01
      001217 55 80            [12] 3518 	anl	a,_p0
      001219 FF               [12] 3519 	mov	r7,a
      00121A 70 07            [24] 3520 	jnz	00112$
      00121C 75 21 32         [24] 3521 	mov	_NUM_LEDS,#0x32
      00121F F5 22            [12] 3522 	mov	(_NUM_LEDS + 1),a
      001221 80 32            [24] 3523 	sjmp	00136$
      001223                       3524 00112$:
                                   3525 ;	./N76_UCS1903.c:553: else if (inbit(SW_PORT, SW100_PIN) == 0) NUM_LEDS = 100;
      001223 74 02            [12] 3526 	mov	a,#0x02
      001225 55 80            [12] 3527 	anl	a,_p0
      001227 C3               [12] 3528 	clr	c
      001228 13               [12] 3529 	rrc	a
      001229 FF               [12] 3530 	mov	r7,a
      00122A 70 07            [24] 3531 	jnz	00109$
      00122C 75 21 64         [24] 3532 	mov	_NUM_LEDS,#0x64
      00122F F5 22            [12] 3533 	mov	(_NUM_LEDS + 1),a
      001231 80 22            [24] 3534 	sjmp	00136$
      001233                       3535 00109$:
                                   3536 ;	./N76_UCS1903.c:554: else if (inbit(SW_PORT, SW150_PIN) == 0) NUM_LEDS = 150;
      001233 74 04            [12] 3537 	mov	a,#0x04
      001235 55 80            [12] 3538 	anl	a,_p0
      001237 03               [12] 3539 	rr	a
      001238 03               [12] 3540 	rr	a
      001239 54 3F            [12] 3541 	anl	a,#0x3f
      00123B FF               [12] 3542 	mov	r7,a
      00123C 70 07            [24] 3543 	jnz	00106$
      00123E 75 21 96         [24] 3544 	mov	_NUM_LEDS,#0x96
      001241 F5 22            [12] 3545 	mov	(_NUM_LEDS + 1),a
      001243 80 10            [24] 3546 	sjmp	00136$
      001245                       3547 00106$:
                                   3548 ;	./N76_UCS1903.c:555: else if (inbit(SW_PORT, SW200_PIN) == 0) NUM_LEDS = 200;
      001245 74 08            [12] 3549 	mov	a,#0x08
      001247 55 80            [12] 3550 	anl	a,_p0
      001249 C4               [12] 3551 	swap	a
      00124A 23               [12] 3552 	rl	a
      00124B 54 1F            [12] 3553 	anl	a,#0x1f
      00124D FF               [12] 3554 	mov	r7,a
      00124E 70 05            [24] 3555 	jnz	00136$
      001250 75 21 C8         [24] 3556 	mov	_NUM_LEDS,#0xc8
      001253 F5 22            [12] 3557 	mov	(_NUM_LEDS + 1),a
                                   3558 ;	./N76_UCS1903.c:557: while (1)
      001255                       3559 00136$:
                                   3560 ;	./N76_UCS1903.c:559: switch (effect)
      001255 E5 25            [12] 3561 	mov	a,_effect
      001257 24 F4            [12] 3562 	add	a,#0xff - 0x0b
      001259 50 03            [24] 3563 	jnc	00189$
      00125B 02 14 56         [24] 3564 	ljmp	00132$
      00125E                       3565 00189$:
      00125E E5 25            [12] 3566 	mov	a,_effect
      001260 24 0B            [12] 3567 	add	a,#(00190$-3-.)
      001262 83               [24] 3568 	movc	a,@a+pc
      001263 F5 82            [12] 3569 	mov	dpl,a
      001265 E5 25            [12] 3570 	mov	a,_effect
      001267 24 10            [12] 3571 	add	a,#(00191$-3-.)
      001269 83               [24] 3572 	movc	a,@a+pc
      00126A F5 83            [12] 3573 	mov	dph,a
      00126C E4               [12] 3574 	clr	a
      00126D 73               [24] 3575 	jmp	@a+dptr
      00126E                       3576 00190$:
      00126E 86                    3577 	.db	00114$
      00126F BD                    3578 	.db	00119$
      001270 E9                    3579 	.db	00120$
      001271 0A                    3580 	.db	00121$
      001272 48                    3581 	.db	00122$
      001273 66                    3582 	.db	00123$
      001274 92                    3583 	.db	00124$
      001275 A6                    3584 	.db	00125$
      001276 CD                    3585 	.db	00126$
      001277 17                    3586 	.db	00129$
      001278 1F                    3587 	.db	00130$
      001279 50                    3588 	.db	00131$
      00127A                       3589 00191$:
      00127A 12                    3590 	.db	00114$>>8
      00127B 12                    3591 	.db	00119$>>8
      00127C 12                    3592 	.db	00120$>>8
      00127D 13                    3593 	.db	00121$>>8
      00127E 13                    3594 	.db	00122$>>8
      00127F 13                    3595 	.db	00123$>>8
      001280 13                    3596 	.db	00124$>>8
      001281 13                    3597 	.db	00125$>>8
      001282 13                    3598 	.db	00126$>>8
      001283 14                    3599 	.db	00129$>>8
      001284 14                    3600 	.db	00130$>>8
      001285 14                    3601 	.db	00131$>>8
                                   3602 ;	./N76_UCS1903.c:561: case 0:
      001286                       3603 00114$:
                                   3604 ;	./N76_UCS1903.c:564: FadeInOut(0x00, 0xFF, 0x00); // r
      001286 75 2F FF         [24] 3605 	mov	_FadeInOut_PARM_2,#0xff
      001289 75 30 00         [24] 3606 	mov	_FadeInOut_PARM_3,#0x00
      00128C 75 82 00         [24] 3607 	mov	dpl,#0x00
      00128F 12 03 26         [24] 3608 	lcall	_FadeInOut
                                   3609 ;	./N76_UCS1903.c:565: if (_status==STT_NEW) break;
      001292 74 12            [12] 3610 	mov	a,#0x12
      001294 B5 26 03         [24] 3611 	cjne	a,__status,00192$
      001297 02 14 56         [24] 3612 	ljmp	00132$
      00129A                       3613 00192$:
                                   3614 ;	./N76_UCS1903.c:566: FadeInOut(0xFF, 0x00, 0x00); // g
      00129A 75 2F 00         [24] 3615 	mov	_FadeInOut_PARM_2,#0x00
      00129D 75 30 00         [24] 3616 	mov	_FadeInOut_PARM_3,#0x00
      0012A0 75 82 FF         [24] 3617 	mov	dpl,#0xff
      0012A3 12 03 26         [24] 3618 	lcall	_FadeInOut
                                   3619 ;	./N76_UCS1903.c:567: if (_status==STT_NEW) break;
      0012A6 74 12            [12] 3620 	mov	a,#0x12
      0012A8 B5 26 03         [24] 3621 	cjne	a,__status,00193$
      0012AB 02 14 56         [24] 3622 	ljmp	00132$
      0012AE                       3623 00193$:
                                   3624 ;	./N76_UCS1903.c:568: FadeInOut(0x00, 0x00, 0xFF); // b
      0012AE 75 2F 00         [24] 3625 	mov	_FadeInOut_PARM_2,#0x00
      0012B1 75 30 FF         [24] 3626 	mov	_FadeInOut_PARM_3,#0xff
      0012B4 75 82 00         [24] 3627 	mov	dpl,#0x00
      0012B7 12 03 26         [24] 3628 	lcall	_FadeInOut
                                   3629 ;	./N76_UCS1903.c:569: break;
      0012BA 02 14 56         [24] 3630 	ljmp	00132$
                                   3631 ;	./N76_UCS1903.c:571: case 1:
      0012BD                       3632 00119$:
                                   3633 ;	./N76_UCS1903.c:574: FadeInOut( random(0xFF), random(0xFF),  random(0xFF)); // green
      0012BD 90 00 FF         [24] 3634 	mov	dptr,#0x00ff
      0012C0 12 00 DD         [24] 3635 	lcall	_random
      0012C3 AE 82            [24] 3636 	mov	r6,dpl
      0012C5 90 00 FF         [24] 3637 	mov	dptr,#0x00ff
      0012C8 C0 06            [24] 3638 	push	ar6
      0012CA 12 00 DD         [24] 3639 	lcall	_random
      0012CD AD 82            [24] 3640 	mov	r5,dpl
      0012CF 90 00 FF         [24] 3641 	mov	dptr,#0x00ff
      0012D2 C0 05            [24] 3642 	push	ar5
      0012D4 12 00 DD         [24] 3643 	lcall	_random
      0012D7 AC 82            [24] 3644 	mov	r4,dpl
      0012D9 D0 05            [24] 3645 	pop	ar5
      0012DB D0 06            [24] 3646 	pop	ar6
      0012DD 8C 30            [24] 3647 	mov	_FadeInOut_PARM_3,r4
      0012DF 8D 2F            [24] 3648 	mov	_FadeInOut_PARM_2,r5
      0012E1 8E 82            [24] 3649 	mov	dpl,r6
      0012E3 12 03 26         [24] 3650 	lcall	_FadeInOut
                                   3651 ;	./N76_UCS1903.c:575: break;
      0012E6 02 14 56         [24] 3652 	ljmp	00132$
                                   3653 ;	./N76_UCS1903.c:578: case 2:
      0012E9                       3654 00120$:
                                   3655 ;	./N76_UCS1903.c:581: Strobe(0xFF, 0xFF, 0xFF, 10, 50, 1000);
      0012E9 75 37 FF         [24] 3656 	mov	_Strobe_PARM_2,#0xff
      0012EC 75 38 FF         [24] 3657 	mov	_Strobe_PARM_3,#0xff
      0012EF 75 39 0A         [24] 3658 	mov	_Strobe_PARM_4,#0x0a
      0012F2 75 3A 00         [24] 3659 	mov	(_Strobe_PARM_4 + 1),#0x00
      0012F5 75 3B 32         [24] 3660 	mov	_Strobe_PARM_5,#0x32
      0012F8 75 3C 00         [24] 3661 	mov	(_Strobe_PARM_5 + 1),#0x00
      0012FB 75 3D E8         [24] 3662 	mov	_Strobe_PARM_6,#0xe8
      0012FE 75 3E 03         [24] 3663 	mov	(_Strobe_PARM_6 + 1),#0x03
      001301 75 82 FF         [24] 3664 	mov	dpl,#0xff
      001304 12 05 C1         [24] 3665 	lcall	_Strobe
                                   3666 ;	./N76_UCS1903.c:582: break;
      001307 02 14 56         [24] 3667 	ljmp	00132$
                                   3668 ;	./N76_UCS1903.c:585: case 3:
      00130A                       3669 00121$:
                                   3670 ;	./N76_UCS1903.c:588: CylonBounce(RANDOM_GRB, 4, 10, 50);
      00130A 90 00 FF         [24] 3671 	mov	dptr,#0x00ff
      00130D 12 00 DD         [24] 3672 	lcall	_random
      001310 AE 82            [24] 3673 	mov	r6,dpl
      001312 90 00 FF         [24] 3674 	mov	dptr,#0x00ff
      001315 C0 06            [24] 3675 	push	ar6
      001317 12 00 DD         [24] 3676 	lcall	_random
      00131A AD 82            [24] 3677 	mov	r5,dpl
      00131C 90 00 FF         [24] 3678 	mov	dptr,#0x00ff
      00131F C0 05            [24] 3679 	push	ar5
      001321 12 00 DD         [24] 3680 	lcall	_random
      001324 AC 82            [24] 3681 	mov	r4,dpl
      001326 D0 05            [24] 3682 	pop	ar5
      001328 D0 06            [24] 3683 	pop	ar6
      00132A 8C 40            [24] 3684 	mov	_CylonBounce_PARM_3,r4
      00132C 8D 3F            [24] 3685 	mov	_CylonBounce_PARM_2,r5
      00132E 75 41 04         [24] 3686 	mov	_CylonBounce_PARM_4,#0x04
      001331 75 42 00         [24] 3687 	mov	(_CylonBounce_PARM_4 + 1),#0x00
      001334 75 43 0A         [24] 3688 	mov	_CylonBounce_PARM_5,#0x0a
      001337 75 44 00         [24] 3689 	mov	(_CylonBounce_PARM_5 + 1),#0x00
      00133A 75 45 32         [24] 3690 	mov	_CylonBounce_PARM_6,#0x32
      00133D 75 46 00         [24] 3691 	mov	(_CylonBounce_PARM_6 + 1),#0x00
      001340 8E 82            [24] 3692 	mov	dpl,r6
      001342 12 06 A6         [24] 3693 	lcall	_CylonBounce
                                   3694 ;	./N76_UCS1903.c:589: break;
      001345 02 14 56         [24] 3695 	ljmp	00132$
                                   3696 ;	./N76_UCS1903.c:592: case 4:
      001348                       3697 00122$:
                                   3698 ;	./N76_UCS1903.c:595: Twinkle(0xFF, 0x00, 0x00, 10, 100, false);
      001348 75 4F 00         [24] 3699 	mov	_Twinkle_PARM_2,#0x00
      00134B 75 50 00         [24] 3700 	mov	_Twinkle_PARM_3,#0x00
      00134E 75 51 0A         [24] 3701 	mov	_Twinkle_PARM_4,#0x0a
      001351 75 52 00         [24] 3702 	mov	(_Twinkle_PARM_4 + 1),#0x00
      001354 75 53 64         [24] 3703 	mov	_Twinkle_PARM_5,#0x64
      001357 75 54 00         [24] 3704 	mov	(_Twinkle_PARM_5 + 1),#0x00
      00135A 75 55 00         [24] 3705 	mov	_Twinkle_PARM_6,#0x00
      00135D 75 82 FF         [24] 3706 	mov	dpl,#0xff
      001360 12 0A 25         [24] 3707 	lcall	_Twinkle
                                   3708 ;	./N76_UCS1903.c:596: break;
      001363 02 14 56         [24] 3709 	ljmp	00132$
                                   3710 ;	./N76_UCS1903.c:599: case 5:
      001366                       3711 00123$:
                                   3712 ;	./N76_UCS1903.c:602: TwinkleRandom(NUM_LEDS/5*2, 100, false);
      001366 85 21 82         [24] 3713 	mov	dpl,_NUM_LEDS
      001369 85 22 83         [24] 3714 	mov	dph,(_NUM_LEDS + 1)
      00136C 75 0C 05         [24] 3715 	mov	__divuint_PARM_2,#0x05
      00136F 75 0D 00         [24] 3716 	mov	(__divuint_PARM_2 + 1),#0x00
      001372 12 17 18         [24] 3717 	lcall	__divuint
      001375 AE 82            [24] 3718 	mov	r6,dpl
      001377 AF 83            [24] 3719 	mov	r7,dph
      001379 EE               [12] 3720 	mov	a,r6
      00137A 2E               [12] 3721 	add	a,r6
      00137B FE               [12] 3722 	mov	r6,a
      00137C EF               [12] 3723 	mov	a,r7
      00137D 33               [12] 3724 	rlc	a
      00137E FF               [12] 3725 	mov	r7,a
      00137F 8E 82            [24] 3726 	mov	dpl,r6
      001381 8F 83            [24] 3727 	mov	dph,r7
      001383 75 56 64         [24] 3728 	mov	_TwinkleRandom_PARM_2,#0x64
      001386 75 57 00         [24] 3729 	mov	(_TwinkleRandom_PARM_2 + 1),#0x00
      001389 75 58 00         [24] 3730 	mov	_TwinkleRandom_PARM_3,#0x00
      00138C 12 0A DF         [24] 3731 	lcall	_TwinkleRandom
                                   3732 ;	./N76_UCS1903.c:603: break;
      00138F 02 14 56         [24] 3733 	ljmp	00132$
                                   3734 ;	./N76_UCS1903.c:606: case 6:
      001392                       3735 00124$:
                                   3736 ;	./N76_UCS1903.c:609: Sparkle(0xFF, 0xFF, 0xFF, 0);
      001392 75 5C FF         [24] 3737 	mov	_Sparkle_PARM_2,#0xff
      001395 75 5D FF         [24] 3738 	mov	_Sparkle_PARM_3,#0xff
      001398 E4               [12] 3739 	clr	a
      001399 F5 5E            [12] 3740 	mov	_Sparkle_PARM_4,a
      00139B F5 5F            [12] 3741 	mov	(_Sparkle_PARM_4 + 1),a
      00139D 75 82 FF         [24] 3742 	mov	dpl,#0xff
      0013A0 12 0B ED         [24] 3743 	lcall	_Sparkle
                                   3744 ;	./N76_UCS1903.c:610: break;
      0013A3 02 14 56         [24] 3745 	ljmp	00132$
                                   3746 ;	./N76_UCS1903.c:613: case 7:
      0013A6                       3747 00125$:
                                   3748 ;	./N76_UCS1903.c:616: SnowSparkle(0x10, 0x10, 0x10, 20, random2(100, 1000));
      0013A6 75 28 E8         [24] 3749 	mov	_random2_PARM_2,#0xe8
      0013A9 75 29 03         [24] 3750 	mov	(_random2_PARM_2 + 1),#0x03
      0013AC 90 00 64         [24] 3751 	mov	dptr,#0x0064
      0013AF 12 01 03         [24] 3752 	lcall	_random2
      0013B2 85 82 64         [24] 3753 	mov	_SnowSparkle_PARM_5,dpl
      0013B5 85 83 65         [24] 3754 	mov	(_SnowSparkle_PARM_5 + 1),dph
      0013B8 75 60 10         [24] 3755 	mov	_SnowSparkle_PARM_2,#0x10
      0013BB 75 61 10         [24] 3756 	mov	_SnowSparkle_PARM_3,#0x10
      0013BE 75 62 14         [24] 3757 	mov	_SnowSparkle_PARM_4,#0x14
      0013C1 75 63 00         [24] 3758 	mov	(_SnowSparkle_PARM_4 + 1),#0x00
      0013C4 75 82 10         [24] 3759 	mov	dpl,#0x10
      0013C7 12 0C 62         [24] 3760 	lcall	_SnowSparkle
                                   3761 ;	./N76_UCS1903.c:617: break;
      0013CA 02 14 56         [24] 3762 	ljmp	00132$
                                   3763 ;	./N76_UCS1903.c:620: case 8:
      0013CD                       3764 00126$:
                                   3765 ;	./N76_UCS1903.c:623: colorWipe(RANDOM_GRB, 50);
      0013CD 90 00 FF         [24] 3766 	mov	dptr,#0x00ff
      0013D0 12 00 DD         [24] 3767 	lcall	_random
      0013D3 AE 82            [24] 3768 	mov	r6,dpl
      0013D5 90 00 FF         [24] 3769 	mov	dptr,#0x00ff
      0013D8 C0 06            [24] 3770 	push	ar6
      0013DA 12 00 DD         [24] 3771 	lcall	_random
      0013DD AD 82            [24] 3772 	mov	r5,dpl
      0013DF 90 00 FF         [24] 3773 	mov	dptr,#0x00ff
      0013E2 C0 05            [24] 3774 	push	ar5
      0013E4 12 00 DD         [24] 3775 	lcall	_random
      0013E7 AC 82            [24] 3776 	mov	r4,dpl
      0013E9 D0 05            [24] 3777 	pop	ar5
      0013EB D0 06            [24] 3778 	pop	ar6
      0013ED 8C 67            [24] 3779 	mov	_colorWipe_PARM_3,r4
      0013EF 8D 66            [24] 3780 	mov	_colorWipe_PARM_2,r5
      0013F1 75 68 32         [24] 3781 	mov	_colorWipe_PARM_4,#0x32
      0013F4 75 69 00         [24] 3782 	mov	(_colorWipe_PARM_4 + 1),#0x00
      0013F7 8E 82            [24] 3783 	mov	dpl,r6
      0013F9 12 0C F7         [24] 3784 	lcall	_colorWipe
                                   3785 ;	./N76_UCS1903.c:624: if (_status==STT_NEW) break;
      0013FC 74 12            [12] 3786 	mov	a,#0x12
      0013FE B5 26 02         [24] 3787 	cjne	a,__status,00194$
      001401 80 53            [24] 3788 	sjmp	00132$
      001403                       3789 00194$:
                                   3790 ;	./N76_UCS1903.c:625: colorWipe(0x00,0x00,0x00, 50);
      001403 75 66 00         [24] 3791 	mov	_colorWipe_PARM_2,#0x00
      001406 75 67 00         [24] 3792 	mov	_colorWipe_PARM_3,#0x00
      001409 75 68 32         [24] 3793 	mov	_colorWipe_PARM_4,#0x32
      00140C 75 69 00         [24] 3794 	mov	(_colorWipe_PARM_4 + 1),#0x00
      00140F 75 82 00         [24] 3795 	mov	dpl,#0x00
      001412 12 0C F7         [24] 3796 	lcall	_colorWipe
                                   3797 ;	./N76_UCS1903.c:626: break;
                                   3798 ;	./N76_UCS1903.c:629: case 9:
      001415 80 3F            [24] 3799 	sjmp	00132$
      001417                       3800 00129$:
                                   3801 ;	./N76_UCS1903.c:632: rainbowCycle(20);
      001417 90 00 14         [24] 3802 	mov	dptr,#0x0014
      00141A 12 0D 79         [24] 3803 	lcall	_rainbowCycle
                                   3804 ;	./N76_UCS1903.c:633: break;
                                   3805 ;	./N76_UCS1903.c:636: case 10:
      00141D 80 37            [24] 3806 	sjmp	00132$
      00141F                       3807 00130$:
                                   3808 ;	./N76_UCS1903.c:639: theaterChase(RANDOM_GRB, 50);
      00141F 90 00 FF         [24] 3809 	mov	dptr,#0x00ff
      001422 12 00 DD         [24] 3810 	lcall	_random
      001425 AE 82            [24] 3811 	mov	r6,dpl
      001427 90 00 FF         [24] 3812 	mov	dptr,#0x00ff
      00142A C0 06            [24] 3813 	push	ar6
      00142C 12 00 DD         [24] 3814 	lcall	_random
      00142F AD 82            [24] 3815 	mov	r5,dpl
      001431 90 00 FF         [24] 3816 	mov	dptr,#0x00ff
      001434 C0 05            [24] 3817 	push	ar5
      001436 12 00 DD         [24] 3818 	lcall	_random
      001439 AC 82            [24] 3819 	mov	r4,dpl
      00143B D0 05            [24] 3820 	pop	ar5
      00143D D0 06            [24] 3821 	pop	ar6
      00143F 8C 71            [24] 3822 	mov	_theaterChase_PARM_3,r4
      001441 8D 70            [24] 3823 	mov	_theaterChase_PARM_2,r5
      001443 75 72 32         [24] 3824 	mov	_theaterChase_PARM_4,#0x32
      001446 75 73 00         [24] 3825 	mov	(_theaterChase_PARM_4 + 1),#0x00
      001449 8E 82            [24] 3826 	mov	dpl,r6
      00144B 12 0E C0         [24] 3827 	lcall	_theaterChase
                                   3828 ;	./N76_UCS1903.c:640: break;
                                   3829 ;	./N76_UCS1903.c:643: case 11:
      00144E 80 06            [24] 3830 	sjmp	00132$
      001450                       3831 00131$:
                                   3832 ;	./N76_UCS1903.c:646: theaterChaseRainbow(50);
      001450 90 00 32         [24] 3833 	mov	dptr,#0x0032
      001453 12 10 00         [24] 3834 	lcall	_theaterChaseRainbow
                                   3835 ;	./N76_UCS1903.c:649: }
      001456                       3836 00132$:
                                   3837 ;	./N76_UCS1903.c:650: if (_status == STT_NEW)
      001456 74 12            [12] 3838 	mov	a,#0x12
      001458 B5 26 02         [24] 3839 	cjne	a,__status,00195$
      00145B 80 03            [24] 3840 	sjmp	00196$
      00145D                       3841 00195$:
      00145D 02 12 55         [24] 3842 	ljmp	00136$
      001460                       3843 00196$:
                                   3844 ;	./N76_UCS1903.c:652: _status = STT_NOTSAVED;
      001460 75 26 56         [24] 3845 	mov	__status,#0x56
                                   3846 ;	./N76_UCS1903.c:653: cnt = 0;
      001463 75 27 00         [24] 3847 	mov	_cnt,#0x00
                                   3848 ;	./N76_UCS1903.c:656: }
      001466 02 12 55         [24] 3849 	ljmp	00136$
                                   3850 ;------------------------------------------------------------
                                   3851 ;Allocation info for local variables in function 'ADC_INT_FUCTION'
                                   3852 ;------------------------------------------------------------
                                   3853 ;	./N76_UCS1903.c:658: ISR(ADC_INT_FUCTION, INTERRUPT_ADC)
                                   3854 ;	-----------------------------------------
                                   3855 ;	 function ADC_INT_FUCTION
                                   3856 ;	-----------------------------------------
      001469                       3857 _ADC_INT_FUCTION:
      001469 C0 E0            [24] 3858 	push	acc
      00146B C0 07            [24] 3859 	push	ar7
      00146D C0 06            [24] 3860 	push	ar6
      00146F C0 05            [24] 3861 	push	ar5
      001471 C0 04            [24] 3862 	push	ar4
      001473 C0 D0            [24] 3863 	push	psw
      001475 75 D0 00         [24] 3864 	mov	psw,#0x00
                                   3865 ;	./N76_UCS1903.c:660: _delay = (ADCRH << 4) | ADCRL;
      001478 AE C3            [24] 3866 	mov	r6,_adcrh
      00147A E4               [12] 3867 	clr	a
      00147B C4               [12] 3868 	swap	a
      00147C 54 F0            [12] 3869 	anl	a,#0xf0
      00147E CE               [12] 3870 	xch	a,r6
      00147F C4               [12] 3871 	swap	a
      001480 CE               [12] 3872 	xch	a,r6
      001481 6E               [12] 3873 	xrl	a,r6
      001482 CE               [12] 3874 	xch	a,r6
      001483 54 F0            [12] 3875 	anl	a,#0xf0
      001485 CE               [12] 3876 	xch	a,r6
      001486 6E               [12] 3877 	xrl	a,r6
      001487 FF               [12] 3878 	mov	r7,a
      001488 AC C2            [24] 3879 	mov	r4,_adcrl
      00148A 7D 00            [12] 3880 	mov	r5,#0x00
      00148C EC               [12] 3881 	mov	a,r4
      00148D 42 06            [12] 3882 	orl	ar6,a
      00148F ED               [12] 3883 	mov	a,r5
      001490 42 07            [12] 3884 	orl	ar7,a
      001492 8E 23            [24] 3885 	mov	__delay,r6
      001494 8F 24            [24] 3886 	mov	(__delay + 1),r7
                                   3887 ;	./N76_UCS1903.c:661: clrb(ADCCON0, 7);
      001496 53 E8 7F         [24] 3888 	anl	_adccon0,#0x7f
                                   3889 ;	./N76_UCS1903.c:662: }
      001499 D0 D0            [24] 3890 	pop	psw
      00149B D0 04            [24] 3891 	pop	ar4
      00149D D0 05            [24] 3892 	pop	ar5
      00149F D0 06            [24] 3893 	pop	ar6
      0014A1 D0 07            [24] 3894 	pop	ar7
      0014A3 D0 E0            [24] 3895 	pop	acc
      0014A5 32               [24] 3896 	reti
                                   3897 ;	eliminated unneeded push/pop dpl
                                   3898 ;	eliminated unneeded push/pop dph
                                   3899 ;	eliminated unneeded push/pop b
                                   3900 ;------------------------------------------------------------
                                   3901 ;Allocation info for local variables in function 'PIN_INT_FUCTION'
                                   3902 ;------------------------------------------------------------
                                   3903 ;	./N76_UCS1903.c:664: ISR(PIN_INT_FUCTION, INTERRUPT_PIN)
                                   3904 ;	-----------------------------------------
                                   3905 ;	 function PIN_INT_FUCTION
                                   3906 ;	-----------------------------------------
      0014A6                       3907 _PIN_INT_FUCTION:
      0014A6 C0 20            [24] 3908 	push	bits
      0014A8 C0 E0            [24] 3909 	push	acc
      0014AA C0 F0            [24] 3910 	push	b
      0014AC C0 82            [24] 3911 	push	dpl
      0014AE C0 83            [24] 3912 	push	dph
      0014B0 C0 07            [24] 3913 	push	(0+7)
      0014B2 C0 06            [24] 3914 	push	(0+6)
      0014B4 C0 05            [24] 3915 	push	(0+5)
      0014B6 C0 04            [24] 3916 	push	(0+4)
      0014B8 C0 03            [24] 3917 	push	(0+3)
      0014BA C0 02            [24] 3918 	push	(0+2)
      0014BC C0 01            [24] 3919 	push	(0+1)
      0014BE C0 00            [24] 3920 	push	(0+0)
      0014C0 C0 D0            [24] 3921 	push	psw
      0014C2 75 D0 00         [24] 3922 	mov	psw,#0x00
                                   3923 ;	./N76_UCS1903.c:666: if (PIF == 0x10)
      0014C5 74 10            [12] 3924 	mov	a,#0x10
      0014C7 B5 EC 0E         [24] 3925 	cjne	a,_pif,00104$
                                   3926 ;	./N76_UCS1903.c:668: if (++effect>=12)	effect=0;
      0014CA 05 25            [12] 3927 	inc	_effect
      0014CC 74 F4            [12] 3928 	mov	a,#0x100 - 0x0c
      0014CE 25 25            [12] 3929 	add	a,_effect
      0014D0 50 03            [24] 3930 	jnc	00102$
      0014D2 75 25 00         [24] 3931 	mov	_effect,#0x00
      0014D5                       3932 00102$:
                                   3933 ;	./N76_UCS1903.c:669: clearAll();
      0014D5 12 01 EC         [24] 3934 	lcall	_clearAll
      0014D8                       3935 00104$:
                                   3936 ;	./N76_UCS1903.c:671: PIF = 0x00; // clear interrupt flag
      0014D8 75 EC 00         [24] 3937 	mov	_pif,#0x00
                                   3938 ;	./N76_UCS1903.c:672: _delay_us(500000);
      0014DB 90 A1 20         [24] 3939 	mov	dptr,#0xa120
      0014DE 75 F0 07         [24] 3940 	mov	b,#0x07
      0014E1 E4               [12] 3941 	clr	a
      0014E2 12 16 C4         [24] 3942 	lcall	__delay_us
                                   3943 ;	./N76_UCS1903.c:673: }
      0014E5 D0 D0            [24] 3944 	pop	psw
      0014E7 D0 00            [24] 3945 	pop	(0+0)
      0014E9 D0 01            [24] 3946 	pop	(0+1)
      0014EB D0 02            [24] 3947 	pop	(0+2)
      0014ED D0 03            [24] 3948 	pop	(0+3)
      0014EF D0 04            [24] 3949 	pop	(0+4)
      0014F1 D0 05            [24] 3950 	pop	(0+5)
      0014F3 D0 06            [24] 3951 	pop	(0+6)
      0014F5 D0 07            [24] 3952 	pop	(0+7)
      0014F7 D0 83            [24] 3953 	pop	dph
      0014F9 D0 82            [24] 3954 	pop	dpl
      0014FB D0 F0            [24] 3955 	pop	b
      0014FD D0 E0            [24] 3956 	pop	acc
      0014FF D0 20            [24] 3957 	pop	bits
      001501 32               [24] 3958 	reti
                                   3959 ;------------------------------------------------------------
                                   3960 ;Allocation info for local variables in function 'timer2'
                                   3961 ;------------------------------------------------------------
                                   3962 ;x                         Allocated to registers r6 r7 
                                   3963 ;------------------------------------------------------------
                                   3964 ;	./N76_UCS1903.c:674: ISR(timer2, INTERRUPT_TIMER2)
                                   3965 ;	-----------------------------------------
                                   3966 ;	 function timer2
                                   3967 ;	-----------------------------------------
      001502                       3968 _timer2:
      001502 C0 20            [24] 3969 	push	bits
      001504 C0 E0            [24] 3970 	push	acc
      001506 C0 F0            [24] 3971 	push	b
      001508 C0 82            [24] 3972 	push	dpl
      00150A C0 83            [24] 3973 	push	dph
      00150C C0 07            [24] 3974 	push	(0+7)
      00150E C0 06            [24] 3975 	push	(0+6)
      001510 C0 05            [24] 3976 	push	(0+5)
      001512 C0 04            [24] 3977 	push	(0+4)
      001514 C0 03            [24] 3978 	push	(0+3)
      001516 C0 02            [24] 3979 	push	(0+2)
      001518 C0 01            [24] 3980 	push	(0+1)
      00151A C0 00            [24] 3981 	push	(0+0)
      00151C C0 D0            [24] 3982 	push	psw
      00151E 75 D0 00         [24] 3983 	mov	psw,#0x00
                                   3984 ;	./N76_UCS1903.c:676: uint16_t x=NUM_LEDS;
      001521 AE 21            [24] 3985 	mov	r6,_NUM_LEDS
      001523 AF 22            [24] 3986 	mov	r7,(_NUM_LEDS + 1)
                                   3987 ;	./N76_UCS1903.c:677: if (_status == STT_NOTSAVED)
      001525 74 56            [12] 3988 	mov	a,#0x56
      001527 B5 26 04         [24] 3989 	cjne	a,__status,00153$
      00152A 74 01            [12] 3990 	mov	a,#0x01
      00152C 80 01            [24] 3991 	sjmp	00154$
      00152E                       3992 00153$:
      00152E E4               [12] 3993 	clr	a
      00152F                       3994 00154$:
      00152F FD               [12] 3995 	mov	r5,a
      001530 60 02            [24] 3996 	jz	00102$
                                   3997 ;	./N76_UCS1903.c:678: cnt++;
      001532 05 27            [12] 3998 	inc	_cnt
      001534                       3999 00102$:
                                   4000 ;	./N76_UCS1903.c:679: if (cnt == 20 && _status == STT_NOTSAVED)
      001534 74 14            [12] 4001 	mov	a,#0x14
      001536 B5 27 1D         [24] 4002 	cjne	a,_cnt,00104$
      001539 ED               [12] 4003 	mov	a,r5
      00153A 60 1A            [24] 4004 	jz	00104$
                                   4005 ;	./N76_UCS1903.c:681: Erase_APROM(ADDR_EFF);
      00153C 90 20 00         [24] 4006 	mov	dptr,#0x2000
      00153F C0 07            [24] 4007 	push	ar7
      001541 C0 06            [24] 4008 	push	ar6
      001543 12 16 30         [24] 4009 	lcall	_Erase_APROM
                                   4010 ;	./N76_UCS1903.c:682: APROM_write_byte(ADDR_EFF, effect);
      001546 85 25 0C         [24] 4011 	mov	_APROM_write_byte_PARM_2,_effect
      001549 90 20 00         [24] 4012 	mov	dptr,#0x2000
      00154C 12 15 D6         [24] 4013 	lcall	_APROM_write_byte
      00154F D0 06            [24] 4014 	pop	ar6
      001551 D0 07            [24] 4015 	pop	ar7
                                   4016 ;	./N76_UCS1903.c:683: _status = STT_OLD;
      001553 75 26 00         [24] 4017 	mov	__status,#0x00
                                   4018 ;	./N76_UCS1903.c:684: cnt == 0;
      001556                       4019 00104$:
                                   4020 ;	./N76_UCS1903.c:687: if (inbit(SW_PORT, SW50_PIN) == 0) NUM_LEDS = 50;
      001556 74 01            [12] 4021 	mov	a,#0x01
      001558 55 80            [12] 4022 	anl	a,_p0
      00155A FD               [12] 4023 	mov	r5,a
      00155B 70 07            [24] 4024 	jnz	00115$
      00155D 75 21 32         [24] 4025 	mov	_NUM_LEDS,#0x32
      001560 F5 22            [12] 4026 	mov	(_NUM_LEDS + 1),a
      001562 80 32            [24] 4027 	sjmp	00116$
      001564                       4028 00115$:
                                   4029 ;	./N76_UCS1903.c:688: else if (inbit(SW_PORT, SW100_PIN) == 0) NUM_LEDS = 100;
      001564 74 02            [12] 4030 	mov	a,#0x02
      001566 55 80            [12] 4031 	anl	a,_p0
      001568 C3               [12] 4032 	clr	c
      001569 13               [12] 4033 	rrc	a
      00156A FD               [12] 4034 	mov	r5,a
      00156B 70 07            [24] 4035 	jnz	00112$
      00156D 75 21 64         [24] 4036 	mov	_NUM_LEDS,#0x64
      001570 F5 22            [12] 4037 	mov	(_NUM_LEDS + 1),a
      001572 80 22            [24] 4038 	sjmp	00116$
      001574                       4039 00112$:
                                   4040 ;	./N76_UCS1903.c:689: else if (inbit(SW_PORT, SW150_PIN) == 0) NUM_LEDS = 150;
      001574 74 04            [12] 4041 	mov	a,#0x04
      001576 55 80            [12] 4042 	anl	a,_p0
      001578 03               [12] 4043 	rr	a
      001579 03               [12] 4044 	rr	a
      00157A 54 3F            [12] 4045 	anl	a,#0x3f
      00157C FD               [12] 4046 	mov	r5,a
      00157D 70 07            [24] 4047 	jnz	00109$
      00157F 75 21 96         [24] 4048 	mov	_NUM_LEDS,#0x96
      001582 F5 22            [12] 4049 	mov	(_NUM_LEDS + 1),a
      001584 80 10            [24] 4050 	sjmp	00116$
      001586                       4051 00109$:
                                   4052 ;	./N76_UCS1903.c:690: else if (inbit(SW_PORT, SW200_PIN) == 0) NUM_LEDS = 200;
      001586 74 08            [12] 4053 	mov	a,#0x08
      001588 55 80            [12] 4054 	anl	a,_p0
      00158A C4               [12] 4055 	swap	a
      00158B 23               [12] 4056 	rl	a
      00158C 54 1F            [12] 4057 	anl	a,#0x1f
      00158E FD               [12] 4058 	mov	r5,a
      00158F 70 05            [24] 4059 	jnz	00116$
      001591 75 21 C8         [24] 4060 	mov	_NUM_LEDS,#0xc8
      001594 F5 22            [12] 4061 	mov	(_NUM_LEDS + 1),a
      001596                       4062 00116$:
                                   4063 ;	./N76_UCS1903.c:691: if (NUM_LEDS != x) clearAll();
      001596 EE               [12] 4064 	mov	a,r6
      001597 B5 21 06         [24] 4065 	cjne	a,_NUM_LEDS,00163$
      00159A EF               [12] 4066 	mov	a,r7
      00159B B5 22 02         [24] 4067 	cjne	a,(_NUM_LEDS + 1),00163$
      00159E 80 03            [24] 4068 	sjmp	00118$
      0015A0                       4069 00163$:
      0015A0 12 01 EC         [24] 4070 	lcall	_clearAll
      0015A3                       4071 00118$:
                                   4072 ;	./N76_UCS1903.c:693: clrb(T2CON, 7);//TF2
      0015A3 53 C8 7F         [24] 4073 	anl	_t2con,#0x7f
                                   4074 ;	./N76_UCS1903.c:694: setb(ADCCON0, 6);
      0015A6 43 E8 40         [24] 4075 	orl	_adccon0,#0x40
                                   4076 ;	./N76_UCS1903.c:695: }
      0015A9 D0 D0            [24] 4077 	pop	psw
      0015AB D0 00            [24] 4078 	pop	(0+0)
      0015AD D0 01            [24] 4079 	pop	(0+1)
      0015AF D0 02            [24] 4080 	pop	(0+2)
      0015B1 D0 03            [24] 4081 	pop	(0+3)
      0015B3 D0 04            [24] 4082 	pop	(0+4)
      0015B5 D0 05            [24] 4083 	pop	(0+5)
      0015B7 D0 06            [24] 4084 	pop	(0+6)
      0015B9 D0 07            [24] 4085 	pop	(0+7)
      0015BB D0 83            [24] 4086 	pop	dph
      0015BD D0 82            [24] 4087 	pop	dpl
      0015BF D0 F0            [24] 4088 	pop	b
      0015C1 D0 E0            [24] 4089 	pop	acc
      0015C3 D0 20            [24] 4090 	pop	bits
      0015C5 32               [24] 4091 	reti
                                   4092 	.area CSEG    (CODE)
                                   4093 	.area CONST   (CODE)
                                   4094 	.area XINIT   (CODE)
                                   4095 	.area CABS    (ABS,CODE)
