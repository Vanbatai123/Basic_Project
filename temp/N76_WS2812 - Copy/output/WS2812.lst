                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module WS2812
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Pattern3
                                     12 	.globl _LED__SendByte_
                                     13 	.globl _LED__SendOne_
                                     14 	.globl _LED__SendZero_
                                     15 	.globl _rand
                                     16 	.globl _xRamWrite
                                     17 	.globl _xRamRead
                                     18 	.globl __delay_us
                                     19 	.globl __delay_ms
                                     20 	.globl _eiph1
                                     21 	.globl _eip1
                                     22 	.globl _pmd
                                     23 	.globl _pmen
                                     24 	.globl _pdtcnt
                                     25 	.globl _pdten
                                     26 	.globl _scon_1
                                     27 	.globl _eiph
                                     28 	.globl _aindids
                                     29 	.globl _spdr
                                     30 	.globl _spsr
                                     31 	.globl _spcr2
                                     32 	.globl _spcr
                                     33 	.globl _capcon4
                                     34 	.globl _capcon3
                                     35 	.globl _b
                                     36 	.globl _eip
                                     37 	.globl _c2h
                                     38 	.globl _c2l
                                     39 	.globl _pif
                                     40 	.globl _pipen
                                     41 	.globl _pinen
                                     42 	.globl _picon
                                     43 	.globl _adccon0
                                     44 	.globl _c1h
                                     45 	.globl _c1l
                                     46 	.globl _c0h
                                     47 	.globl _c0l
                                     48 	.globl _adcdly
                                     49 	.globl _adccon2
                                     50 	.globl _adccon1
                                     51 	.globl _acc
                                     52 	.globl _pwmcon1
                                     53 	.globl _piocon0
                                     54 	.globl _pwm3l
                                     55 	.globl _pwm2l
                                     56 	.globl _pwm1l
                                     57 	.globl _pwm0l
                                     58 	.globl _pwmpl
                                     59 	.globl _pwmcon0
                                     60 	.globl _fbd
                                     61 	.globl _pnp
                                     62 	.globl _pwm3h
                                     63 	.globl _pwm2h
                                     64 	.globl _pwm1h
                                     65 	.globl _pwm0h
                                     66 	.globl _pwmph
                                     67 	.globl _psw
                                     68 	.globl _adcmph
                                     69 	.globl _adcmpl
                                     70 	.globl _pwm5l
                                     71 	.globl _th2
                                     72 	.globl _pwm4l
                                     73 	.globl _tl2
                                     74 	.globl _rcmp2h
                                     75 	.globl _rcmp2l
                                     76 	.globl _t2mod
                                     77 	.globl _t2con
                                     78 	.globl _ta
                                     79 	.globl _piocon1
                                     80 	.globl _rh3
                                     81 	.globl _pwm5h
                                     82 	.globl _rl3
                                     83 	.globl _pwm4h
                                     84 	.globl _t3con
                                     85 	.globl _adcrh
                                     86 	.globl _adcrl
                                     87 	.globl _i2addr
                                     88 	.globl _i2con
                                     89 	.globl _i2toc
                                     90 	.globl _i2clk
                                     91 	.globl _i2stat
                                     92 	.globl _i2dat
                                     93 	.globl _saddr_1
                                     94 	.globl _saden_1
                                     95 	.globl _saden
                                     96 	.globl _ip
                                     97 	.globl _pwmintc
                                     98 	.globl _iph
                                     99 	.globl _p2s
                                    100 	.globl _p1sr
                                    101 	.globl _p1m2
                                    102 	.globl _p1s
                                    103 	.globl _p1m1
                                    104 	.globl _p0sr
                                    105 	.globl _p0m2
                                    106 	.globl _p0s
                                    107 	.globl _p0m1
                                    108 	.globl _p3
                                    109 	.globl _iapcn
                                    110 	.globl _iapfd
                                    111 	.globl _p3sr
                                    112 	.globl _p3m2
                                    113 	.globl _p3s
                                    114 	.globl _p3m1
                                    115 	.globl _bodcon1
                                    116 	.globl _wdcon
                                    117 	.globl _saddr
                                    118 	.globl _ie
                                    119 	.globl _iapah
                                    120 	.globl _iapal
                                    121 	.globl _iapuen
                                    122 	.globl _iaptrg
                                    123 	.globl _bodcon0
                                    124 	.globl _auxr1
                                    125 	.globl _p2
                                    126 	.globl _chpcon
                                    127 	.globl _eie1
                                    128 	.globl _eie
                                    129 	.globl _sbuf_1
                                    130 	.globl _sbuf
                                    131 	.globl _scon
                                    132 	.globl _cken
                                    133 	.globl _ckswt
                                    134 	.globl _ckdiv
                                    135 	.globl _capcon2
                                    136 	.globl _capcon1
                                    137 	.globl _capcon0
                                    138 	.globl _sfrs
                                    139 	.globl _p1
                                    140 	.globl _wkcon
                                    141 	.globl _ckcon
                                    142 	.globl _th1
                                    143 	.globl _th0
                                    144 	.globl _tl1
                                    145 	.globl _tl0
                                    146 	.globl _tmod
                                    147 	.globl _tcon
                                    148 	.globl _pcon
                                    149 	.globl _rwk
                                    150 	.globl _rctrim1
                                    151 	.globl _rctrim0
                                    152 	.globl _dph
                                    153 	.globl _dpl
                                    154 	.globl _sp
                                    155 	.globl _p0
                                    156 	.globl _Pattern3_PARM_3
                                    157 	.globl _Pattern3_PARM_2
                                    158 	.globl _theaterChase_PARM_4
                                    159 	.globl _theaterChase_PARM_3
                                    160 	.globl _theaterChase_PARM_2
                                    161 	.globl _colorWipe_PARM_4
                                    162 	.globl _colorWipe_PARM_3
                                    163 	.globl _colorWipe_PARM_2
                                    164 	.globl _SnowSparkle_PARM_5
                                    165 	.globl _SnowSparkle_PARM_4
                                    166 	.globl _SnowSparkle_PARM_3
                                    167 	.globl _SnowSparkle_PARM_2
                                    168 	.globl _Sparkle_PARM_4
                                    169 	.globl _Sparkle_PARM_3
                                    170 	.globl _Sparkle_PARM_2
                                    171 	.globl _TwinkleRandom_PARM_3
                                    172 	.globl _TwinkleRandom_PARM_2
                                    173 	.globl _Twinkle_PARM_6
                                    174 	.globl _Twinkle_PARM_5
                                    175 	.globl _Twinkle_PARM_4
                                    176 	.globl _Twinkle_PARM_3
                                    177 	.globl _Twinkle_PARM_2
                                    178 	.globl _CylonBounce_PARM_6
                                    179 	.globl _CylonBounce_PARM_5
                                    180 	.globl _CylonBounce_PARM_4
                                    181 	.globl _CylonBounce_PARM_3
                                    182 	.globl _CylonBounce_PARM_2
                                    183 	.globl _Strobe_PARM_6
                                    184 	.globl _Strobe_PARM_5
                                    185 	.globl _Strobe_PARM_4
                                    186 	.globl _Strobe_PARM_3
                                    187 	.globl _Strobe_PARM_2
                                    188 	.globl _FadeInOut_PARM_3
                                    189 	.globl _FadeInOut_PARM_2
                                    190 	.globl _setAll_PARM_3
                                    191 	.globl _setAll_PARM_2
                                    192 	.globl _setPixel_PARM_4
                                    193 	.globl _setPixel_PARM_3
                                    194 	.globl _setPixel_PARM_2
                                    195 	.globl _random2_PARM_2
                                    196 	.globl _random
                                    197 	.globl _random2
                                    198 	.globl _clearAll
                                    199 	.globl _showStrip
                                    200 	.globl _setPixel
                                    201 	.globl _setAll
                                    202 	.globl _FadeInOut
                                    203 	.globl _Strobe
                                    204 	.globl _CylonBounce
                                    205 	.globl _Twinkle
                                    206 	.globl _TwinkleRandom
                                    207 	.globl _Sparkle
                                    208 	.globl _SnowSparkle
                                    209 	.globl _colorWipe
                                    210 	.globl _rainbowCycle
                                    211 	.globl _Wheel
                                    212 	.globl _theaterChase
                                    213 	.globl _theaterChaseRainbow
                                    214 ;--------------------------------------------------------
                                    215 ; special function registers
                                    216 ;--------------------------------------------------------
                                    217 	.area RSEG    (ABS,DATA)
      000000                        218 	.org 0x0000
                           000080   219 _p0	=	0x0080
                           000081   220 _sp	=	0x0081
                           000082   221 _dpl	=	0x0082
                           000083   222 _dph	=	0x0083
                           000084   223 _rctrim0	=	0x0084
                           000085   224 _rctrim1	=	0x0085
                           000086   225 _rwk	=	0x0086
                           000087   226 _pcon	=	0x0087
                           000088   227 _tcon	=	0x0088
                           000089   228 _tmod	=	0x0089
                           00008A   229 _tl0	=	0x008a
                           00008B   230 _tl1	=	0x008b
                           00008C   231 _th0	=	0x008c
                           00008D   232 _th1	=	0x008d
                           00008E   233 _ckcon	=	0x008e
                           00008F   234 _wkcon	=	0x008f
                           000090   235 _p1	=	0x0090
                           000091   236 _sfrs	=	0x0091
                           000092   237 _capcon0	=	0x0092
                           000093   238 _capcon1	=	0x0093
                           000094   239 _capcon2	=	0x0094
                           000095   240 _ckdiv	=	0x0095
                           000096   241 _ckswt	=	0x0096
                           000097   242 _cken	=	0x0097
                           000098   243 _scon	=	0x0098
                           000099   244 _sbuf	=	0x0099
                           00009A   245 _sbuf_1	=	0x009a
                           00009B   246 _eie	=	0x009b
                           00009C   247 _eie1	=	0x009c
                           00009F   248 _chpcon	=	0x009f
                           0000A0   249 _p2	=	0x00a0
                           0000A2   250 _auxr1	=	0x00a2
                           0000A3   251 _bodcon0	=	0x00a3
                           0000A4   252 _iaptrg	=	0x00a4
                           0000A5   253 _iapuen	=	0x00a5
                           0000A6   254 _iapal	=	0x00a6
                           0000A7   255 _iapah	=	0x00a7
                           0000A8   256 _ie	=	0x00a8
                           0000A9   257 _saddr	=	0x00a9
                           0000AA   258 _wdcon	=	0x00aa
                           0000AB   259 _bodcon1	=	0x00ab
                           0000AC   260 _p3m1	=	0x00ac
                           0000AC   261 _p3s	=	0x00ac
                           0000AD   262 _p3m2	=	0x00ad
                           0000AD   263 _p3sr	=	0x00ad
                           0000AE   264 _iapfd	=	0x00ae
                           0000AF   265 _iapcn	=	0x00af
                           0000B0   266 _p3	=	0x00b0
                           0000B1   267 _p0m1	=	0x00b1
                           0000B1   268 _p0s	=	0x00b1
                           0000B2   269 _p0m2	=	0x00b2
                           0000B2   270 _p0sr	=	0x00b2
                           0000B3   271 _p1m1	=	0x00b3
                           0000B3   272 _p1s	=	0x00b3
                           0000B4   273 _p1m2	=	0x00b4
                           0000B4   274 _p1sr	=	0x00b4
                           0000B5   275 _p2s	=	0x00b5
                           0000B7   276 _iph	=	0x00b7
                           0000B7   277 _pwmintc	=	0x00b7
                           0000B8   278 _ip	=	0x00b8
                           0000B9   279 _saden	=	0x00b9
                           0000BA   280 _saden_1	=	0x00ba
                           0000BB   281 _saddr_1	=	0x00bb
                           0000BC   282 _i2dat	=	0x00bc
                           0000BD   283 _i2stat	=	0x00bd
                           0000BE   284 _i2clk	=	0x00be
                           0000BF   285 _i2toc	=	0x00bf
                           0000C0   286 _i2con	=	0x00c0
                           0000C1   287 _i2addr	=	0x00c1
                           0000C2   288 _adcrl	=	0x00c2
                           0000C3   289 _adcrh	=	0x00c3
                           0000C4   290 _t3con	=	0x00c4
                           0000C4   291 _pwm4h	=	0x00c4
                           0000C5   292 _rl3	=	0x00c5
                           0000C5   293 _pwm5h	=	0x00c5
                           0000C6   294 _rh3	=	0x00c6
                           0000C6   295 _piocon1	=	0x00c6
                           0000C7   296 _ta	=	0x00c7
                           0000C8   297 _t2con	=	0x00c8
                           0000C9   298 _t2mod	=	0x00c9
                           0000CA   299 _rcmp2l	=	0x00ca
                           0000CB   300 _rcmp2h	=	0x00cb
                           0000CC   301 _tl2	=	0x00cc
                           0000CC   302 _pwm4l	=	0x00cc
                           0000CD   303 _th2	=	0x00cd
                           0000CD   304 _pwm5l	=	0x00cd
                           0000CE   305 _adcmpl	=	0x00ce
                           0000CF   306 _adcmph	=	0x00cf
                           0000D0   307 _psw	=	0x00d0
                           0000D1   308 _pwmph	=	0x00d1
                           0000D2   309 _pwm0h	=	0x00d2
                           0000D3   310 _pwm1h	=	0x00d3
                           0000D4   311 _pwm2h	=	0x00d4
                           0000D5   312 _pwm3h	=	0x00d5
                           0000D6   313 _pnp	=	0x00d6
                           0000D7   314 _fbd	=	0x00d7
                           0000D8   315 _pwmcon0	=	0x00d8
                           0000D9   316 _pwmpl	=	0x00d9
                           0000DA   317 _pwm0l	=	0x00da
                           0000DB   318 _pwm1l	=	0x00db
                           0000DC   319 _pwm2l	=	0x00dc
                           0000DD   320 _pwm3l	=	0x00dd
                           0000DE   321 _piocon0	=	0x00de
                           0000DF   322 _pwmcon1	=	0x00df
                           0000E0   323 _acc	=	0x00e0
                           0000E1   324 _adccon1	=	0x00e1
                           0000E2   325 _adccon2	=	0x00e2
                           0000E3   326 _adcdly	=	0x00e3
                           0000E4   327 _c0l	=	0x00e4
                           0000E5   328 _c0h	=	0x00e5
                           0000E6   329 _c1l	=	0x00e6
                           0000E7   330 _c1h	=	0x00e7
                           0000E8   331 _adccon0	=	0x00e8
                           0000E9   332 _picon	=	0x00e9
                           0000EA   333 _pinen	=	0x00ea
                           0000EB   334 _pipen	=	0x00eb
                           0000EC   335 _pif	=	0x00ec
                           0000ED   336 _c2l	=	0x00ed
                           0000EE   337 _c2h	=	0x00ee
                           0000EF   338 _eip	=	0x00ef
                           0000F0   339 _b	=	0x00f0
                           0000F1   340 _capcon3	=	0x00f1
                           0000F2   341 _capcon4	=	0x00f2
                           0000F3   342 _spcr	=	0x00f3
                           0000F3   343 _spcr2	=	0x00f3
                           0000F4   344 _spsr	=	0x00f4
                           0000F5   345 _spdr	=	0x00f5
                           0000F6   346 _aindids	=	0x00f6
                           0000F7   347 _eiph	=	0x00f7
                           0000F8   348 _scon_1	=	0x00f8
                           0000F9   349 _pdten	=	0x00f9
                           0000FA   350 _pdtcnt	=	0x00fa
                           0000FB   351 _pmen	=	0x00fb
                           0000FC   352 _pmd	=	0x00fc
                           0000FE   353 _eip1	=	0x00fe
                           0000FF   354 _eiph1	=	0x00ff
                                    355 ;--------------------------------------------------------
                                    356 ; special function bits
                                    357 ;--------------------------------------------------------
                                    358 	.area RSEG    (ABS,DATA)
      000000                        359 	.org 0x0000
                                    360 ;--------------------------------------------------------
                                    361 ; overlayable register banks
                                    362 ;--------------------------------------------------------
                                    363 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        364 	.ds 8
                                    365 ;--------------------------------------------------------
                                    366 ; internal ram data
                                    367 ;--------------------------------------------------------
                                    368 	.area DSEG    (DATA)
      000000                        369 _random2_PARM_2:
      000000                        370 	.ds 2
      000002                        371 _setPixel_PARM_2:
      000002                        372 	.ds 1
      000003                        373 _setPixel_PARM_3:
      000003                        374 	.ds 1
      000004                        375 _setPixel_PARM_4:
      000004                        376 	.ds 1
      000005                        377 _setAll_PARM_2:
      000005                        378 	.ds 1
      000006                        379 _setAll_PARM_3:
      000006                        380 	.ds 1
      000007                        381 _FadeInOut_PARM_2:
      000007                        382 	.ds 1
      000008                        383 _FadeInOut_PARM_3:
      000008                        384 	.ds 1
      000009                        385 _FadeInOut_green_65536_74:
      000009                        386 	.ds 1
      00000A                        387 _FadeInOut_g_65536_75:
      00000A                        388 	.ds 1
      00000B                        389 _FadeInOut_r_65536_75:
      00000B                        390 	.ds 1
      00000C                        391 _FadeInOut_curEffect_65536_75:
      00000C                        392 	.ds 1
      00000D                        393 _FadeInOut_k_131072_79:
      00000D                        394 	.ds 2
      00000F                        395 _Strobe_PARM_2:
      00000F                        396 	.ds 1
      000010                        397 _Strobe_PARM_3:
      000010                        398 	.ds 1
      000011                        399 _Strobe_PARM_4:
      000011                        400 	.ds 2
      000013                        401 _Strobe_PARM_5:
      000013                        402 	.ds 2
      000015                        403 _Strobe_PARM_6:
      000015                        404 	.ds 2
      000017                        405 _CylonBounce_PARM_2:
      000017                        406 	.ds 1
      000018                        407 _CylonBounce_PARM_3:
      000018                        408 	.ds 1
      000019                        409 _CylonBounce_PARM_4:
      000019                        410 	.ds 2
      00001B                        411 _CylonBounce_PARM_5:
      00001B                        412 	.ds 2
      00001D                        413 _CylonBounce_PARM_6:
      00001D                        414 	.ds 2
      00001F                        415 _CylonBounce_green_65536_87:
      00001F                        416 	.ds 1
      000020                        417 _CylonBounce_curEffect_65536_88:
      000020                        418 	.ds 1
      000021                        419 _CylonBounce_i_131072_89:
      000021                        420 	.ds 2
      000023                        421 _CylonBounce_j_262144_96:
      000023                        422 	.ds 2
      000025                        423 _CylonBounce_sloc0_1_0:
      000025                        424 	.ds 1
      000026                        425 _CylonBounce_sloc1_1_0:
      000026                        426 	.ds 1
      000027                        427 _Twinkle_PARM_2:
      000027                        428 	.ds 1
      000028                        429 _Twinkle_PARM_3:
      000028                        430 	.ds 1
      000029                        431 _Twinkle_PARM_4:
      000029                        432 	.ds 2
      00002B                        433 _Twinkle_PARM_5:
      00002B                        434 	.ds 2
      00002D                        435 _Twinkle_PARM_6:
      00002D                        436 	.ds 1
      00002E                        437 _TwinkleRandom_PARM_2:
      00002E                        438 	.ds 2
      000030                        439 _TwinkleRandom_PARM_3:
      000030                        440 	.ds 1
      000031                        441 _TwinkleRandom_Count_65536_105:
      000031                        442 	.ds 2
      000033                        443 _TwinkleRandom_curEffect_65536_106:
      000033                        444 	.ds 1
      000034                        445 _Sparkle_PARM_2:
      000034                        446 	.ds 1
      000035                        447 _Sparkle_PARM_3:
      000035                        448 	.ds 1
      000036                        449 _Sparkle_PARM_4:
      000036                        450 	.ds 2
      000038                        451 _SnowSparkle_PARM_2:
      000038                        452 	.ds 1
      000039                        453 _SnowSparkle_PARM_3:
      000039                        454 	.ds 1
      00003A                        455 _SnowSparkle_PARM_4:
      00003A                        456 	.ds 2
      00003C                        457 _SnowSparkle_PARM_5:
      00003C                        458 	.ds 2
      00003E                        459 _colorWipe_PARM_2:
      00003E                        460 	.ds 1
      00003F                        461 _colorWipe_PARM_3:
      00003F                        462 	.ds 1
      000040                        463 _colorWipe_PARM_4:
      000040                        464 	.ds 2
      000042                        465 _rainbowCycle_j_65536_122:
      000042                        466 	.ds 2
      000044                        467 _rainbowCycle_curEffect_65536_122:
      000044                        468 	.ds 1
      000045                        469 _Wheel_c_65536_129:
      000045                        470 	.ds 3
      000048                        471 _theaterChase_PARM_2:
      000048                        472 	.ds 1
      000049                        473 _theaterChase_PARM_3:
      000049                        474 	.ds 1
      00004A                        475 _theaterChase_PARM_4:
      00004A                        476 	.ds 2
      00004C                        477 _theaterChase_j_131072_135:
      00004C                        478 	.ds 2
      00004E                        479 _theaterChaseRainbow_c_65536_146:
      00004E                        480 	.ds 3
      000051                        481 _theaterChaseRainbow_curEffect_65536_146:
      000051                        482 	.ds 1
      000052                        483 _theaterChaseRainbow_j_131072_147:
      000052                        484 	.ds 2
      000054                        485 _theaterChaseRainbow_q_262144_149:
      000054                        486 	.ds 2
      000056                        487 _Pattern3_PARM_2:
      000056                        488 	.ds 1
      000057                        489 _Pattern3_PARM_3:
      000057                        490 	.ds 1
                                    491 ;--------------------------------------------------------
                                    492 ; overlayable items in internal ram
                                    493 ;--------------------------------------------------------
                                    494 	.area	OSEG    (OVR,DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; indirectly addressable internal ram data
                                    497 ;--------------------------------------------------------
                                    498 	.area ISEG    (DATA)
                                    499 ;--------------------------------------------------------
                                    500 ; absolute internal ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area IABS    (ABS,DATA)
                                    503 	.area IABS    (ABS,DATA)
                                    504 ;--------------------------------------------------------
                                    505 ; bit data
                                    506 ;--------------------------------------------------------
                                    507 	.area BSEG    (BIT)
                                    508 ;--------------------------------------------------------
                                    509 ; paged external ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area PSEG    (PAG,XDATA)
                                    512 ;--------------------------------------------------------
                                    513 ; external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area XSEG    (XDATA)
                                    516 ;--------------------------------------------------------
                                    517 ; absolute external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XABS    (ABS,XDATA)
                                    520 ;--------------------------------------------------------
                                    521 ; external initialized ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XISEG   (XDATA)
                                    524 	.area HOME    (CODE)
                                    525 	.area GSINIT0 (CODE)
                                    526 	.area GSINIT1 (CODE)
                                    527 	.area GSINIT2 (CODE)
                                    528 	.area GSINIT3 (CODE)
                                    529 	.area GSINIT4 (CODE)
                                    530 	.area GSINIT5 (CODE)
                                    531 	.area GSINIT  (CODE)
                                    532 	.area GSFINAL (CODE)
                                    533 	.area CSEG    (CODE)
                                    534 ;--------------------------------------------------------
                                    535 ; global & static initialisations
                                    536 ;--------------------------------------------------------
                                    537 	.area HOME    (CODE)
                                    538 	.area GSINIT  (CODE)
                                    539 	.area GSFINAL (CODE)
                                    540 	.area GSINIT  (CODE)
                                    541 ;--------------------------------------------------------
                                    542 ; Home
                                    543 ;--------------------------------------------------------
                                    544 	.area HOME    (CODE)
                                    545 	.area HOME    (CODE)
                                    546 ;--------------------------------------------------------
                                    547 ; code
                                    548 ;--------------------------------------------------------
                                    549 	.area CSEG    (CODE)
                                    550 ;------------------------------------------------------------
                                    551 ;Allocation info for local variables in function 'random'
                                    552 ;------------------------------------------------------------
                                    553 ;howbig                    Allocated to registers r6 r7 
                                    554 ;------------------------------------------------------------
                                    555 ;	./src/WS2812.c:16: uint16_t random(uint16_t howbig)
                                    556 ;	-----------------------------------------
                                    557 ;	 function random
                                    558 ;	-----------------------------------------
      000000                        559 _random:
                           000007   560 	ar7 = 0x07
                           000006   561 	ar6 = 0x06
                           000005   562 	ar5 = 0x05
                           000004   563 	ar4 = 0x04
                           000003   564 	ar3 = 0x03
                           000002   565 	ar2 = 0x02
                           000001   566 	ar1 = 0x01
                           000000   567 	ar0 = 0x00
      000000 AE 82            [24]  568 	mov	r6,dpl
      000002 AF 83            [24]  569 	mov	r7,dph
                                    570 ;	./src/WS2812.c:18: if (howbig == 0)
      000004 EE               [12]  571 	mov	a,r6
      000005 4F               [12]  572 	orl	a,r7
      000006 70 04            [24]  573 	jnz	00102$
                                    574 ;	./src/WS2812.c:20: return 0;
      000008 90 00 00         [24]  575 	mov	dptr,#0x0000
      00000B 22               [24]  576 	ret
      00000C                        577 00102$:
                                    578 ;	./src/WS2812.c:22: return rand() % howbig;
      00000C C0 07            [24]  579 	push	ar7
      00000E C0 06            [24]  580 	push	ar6
      000010 12r00r00         [24]  581 	lcall	_rand
      000013 AC 82            [24]  582 	mov	r4,dpl
      000015 AD 83            [24]  583 	mov	r5,dph
      000017 D0 06            [24]  584 	pop	ar6
      000019 D0 07            [24]  585 	pop	ar7
      00001B 8C 82            [24]  586 	mov	dpl,r4
      00001D 8D 83            [24]  587 	mov	dph,r5
      00001F 8E*00            [24]  588 	mov	__moduint_PARM_2,r6
      000021 8F*01            [24]  589 	mov	(__moduint_PARM_2 + 1),r7
                                    590 ;	./src/WS2812.c:23: }
      000023 02r00r00         [24]  591 	ljmp	__moduint
                                    592 ;------------------------------------------------------------
                                    593 ;Allocation info for local variables in function 'random2'
                                    594 ;------------------------------------------------------------
                                    595 ;howbig                    Allocated with name '_random2_PARM_2'
                                    596 ;howsmall                  Allocated to registers r6 r7 
                                    597 ;diff                      Allocated to registers 
                                    598 ;------------------------------------------------------------
                                    599 ;	./src/WS2812.c:25: uint16_t random2(uint16_t howsmall, uint16_t howbig)
                                    600 ;	-----------------------------------------
                                    601 ;	 function random2
                                    602 ;	-----------------------------------------
      000026                        603 _random2:
      000026 AE 82            [24]  604 	mov	r6,dpl
      000028 AF 83            [24]  605 	mov	r7,dph
                                    606 ;	./src/WS2812.c:27: if (howsmall >= howbig)
      00002A C3               [12]  607 	clr	c
      00002B EE               [12]  608 	mov	a,r6
      00002C 95*00            [12]  609 	subb	a,_random2_PARM_2
      00002E EF               [12]  610 	mov	a,r7
      00002F 95*01            [12]  611 	subb	a,(_random2_PARM_2 + 1)
      000031 40 05            [24]  612 	jc	00102$
                                    613 ;	./src/WS2812.c:29: return howsmall;
      000033 8E 82            [24]  614 	mov	dpl,r6
      000035 8F 83            [24]  615 	mov	dph,r7
      000037 22               [24]  616 	ret
      000038                        617 00102$:
                                    618 ;	./src/WS2812.c:31: uint16_t diff = howbig - howsmall;
      000038 E5*00            [12]  619 	mov	a,_random2_PARM_2
      00003A C3               [12]  620 	clr	c
      00003B 9E               [12]  621 	subb	a,r6
      00003C F5 82            [12]  622 	mov	dpl,a
      00003E E5*01            [12]  623 	mov	a,(_random2_PARM_2 + 1)
      000040 9F               [12]  624 	subb	a,r7
      000041 F5 83            [12]  625 	mov	dph,a
                                    626 ;	./src/WS2812.c:32: return random(diff) + howsmall;
      000043 C0 07            [24]  627 	push	ar7
      000045 C0 06            [24]  628 	push	ar6
      000047 12r00r00         [24]  629 	lcall	_random
      00004A E5 82            [12]  630 	mov	a,dpl
      00004C 85 83 F0         [24]  631 	mov	b,dph
      00004F D0 06            [24]  632 	pop	ar6
      000051 D0 07            [24]  633 	pop	ar7
      000053 2E               [12]  634 	add	a,r6
      000054 F5 82            [12]  635 	mov	dpl,a
      000056 EF               [12]  636 	mov	a,r7
      000057 35 F0            [12]  637 	addc	a,b
      000059 F5 83            [12]  638 	mov	dph,a
                                    639 ;	./src/WS2812.c:33: }
      00005B 22               [24]  640 	ret
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function 'LED__SendZero_'
                                    643 ;------------------------------------------------------------
                                    644 ;	./src/WS2812.c:35: void LED__SendZero_()
                                    645 ;	-----------------------------------------
                                    646 ;	 function LED__SendZero_
                                    647 ;	-----------------------------------------
      00005C                        648 _LED__SendZero_:
                                    649 ;	./src/WS2812.c:37: setb(LED_PORT, LED_PIN);
      00005C 43 80 40         [24]  650 	orl	_p0,#0x40
                                    651 ;	./src/WS2812.c:38: _nop_();
      00005F 00               [12]  652 	nop
                                    653 ;	./src/WS2812.c:39: _nop_();
      000060 00               [12]  654 	nop
                                    655 ;	./src/WS2812.c:40: clrb(LED_PORT, LED_PIN);
      000061 53 80 BF         [24]  656 	anl	_p0,#0xbf
                                    657 ;	./src/WS2812.c:41: _nop_();
      000064 00               [12]  658 	nop
                                    659 ;	./src/WS2812.c:42: _nop_();
      000065 00               [12]  660 	nop
                                    661 ;	./src/WS2812.c:43: _nop_();
      000066 00               [12]  662 	nop
                                    663 ;	./src/WS2812.c:44: _nop_();
      000067 00               [12]  664 	nop
                                    665 ;	./src/WS2812.c:45: }
      000068 22               [24]  666 	ret
                                    667 ;------------------------------------------------------------
                                    668 ;Allocation info for local variables in function 'LED__SendOne_'
                                    669 ;------------------------------------------------------------
                                    670 ;	./src/WS2812.c:46: void LED__SendOne_()
                                    671 ;	-----------------------------------------
                                    672 ;	 function LED__SendOne_
                                    673 ;	-----------------------------------------
      000069                        674 _LED__SendOne_:
                                    675 ;	./src/WS2812.c:48: setb(LED_PORT, LED_PIN);
      000069 43 80 40         [24]  676 	orl	_p0,#0x40
                                    677 ;	./src/WS2812.c:49: _nop_();
      00006C 00               [12]  678 	nop
                                    679 ;	./src/WS2812.c:50: _nop_();
      00006D 00               [12]  680 	nop
                                    681 ;	./src/WS2812.c:51: _nop_();
      00006E 00               [12]  682 	nop
                                    683 ;	./src/WS2812.c:52: _nop_();
      00006F 00               [12]  684 	nop
                                    685 ;	./src/WS2812.c:53: _nop_();
      000070 00               [12]  686 	nop
                                    687 ;	./src/WS2812.c:54: _nop_();
      000071 00               [12]  688 	nop
                                    689 ;	./src/WS2812.c:55: _nop_();
      000072 00               [12]  690 	nop
                                    691 ;	./src/WS2812.c:56: clrb(LED_PORT, LED_PIN);
      000073 53 80 BF         [24]  692 	anl	_p0,#0xbf
                                    693 ;	./src/WS2812.c:57: }
      000076 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'LED__SendByte_'
                                    697 ;------------------------------------------------------------
                                    698 ;dat                       Allocated to registers r7 
                                    699 ;------------------------------------------------------------
                                    700 ;	./src/WS2812.c:58: void LED__SendByte_(uint8_t dat)
                                    701 ;	-----------------------------------------
                                    702 ;	 function LED__SendByte_
                                    703 ;	-----------------------------------------
      000077                        704 _LED__SendByte_:
                                    705 ;	./src/WS2812.c:60: if (dat & 0x80)
      000077 E5 82            [12]  706 	mov	a,dpl
      000079 FF               [12]  707 	mov	r7,a
      00007A 30 E7 09         [24]  708 	jnb	acc.7,00102$
                                    709 ;	./src/WS2812.c:61: LED__SendOne_();
      00007D C0 07            [24]  710 	push	ar7
      00007F 12r00r69         [24]  711 	lcall	_LED__SendOne_
      000082 D0 07            [24]  712 	pop	ar7
      000084 80 07            [24]  713 	sjmp	00103$
      000086                        714 00102$:
                                    715 ;	./src/WS2812.c:63: LED__SendZero_();
      000086 C0 07            [24]  716 	push	ar7
      000088 12r00r5C         [24]  717 	lcall	_LED__SendZero_
      00008B D0 07            [24]  718 	pop	ar7
      00008D                        719 00103$:
                                    720 ;	./src/WS2812.c:64: if (dat & 0x40)
      00008D EF               [12]  721 	mov	a,r7
      00008E 30 E6 09         [24]  722 	jnb	acc.6,00105$
                                    723 ;	./src/WS2812.c:65: LED__SendOne_();
      000091 C0 07            [24]  724 	push	ar7
      000093 12r00r69         [24]  725 	lcall	_LED__SendOne_
      000096 D0 07            [24]  726 	pop	ar7
      000098 80 07            [24]  727 	sjmp	00106$
      00009A                        728 00105$:
                                    729 ;	./src/WS2812.c:67: LED__SendZero_();
      00009A C0 07            [24]  730 	push	ar7
      00009C 12r00r5C         [24]  731 	lcall	_LED__SendZero_
      00009F D0 07            [24]  732 	pop	ar7
      0000A1                        733 00106$:
                                    734 ;	./src/WS2812.c:68: if (dat & 0x20)
      0000A1 EF               [12]  735 	mov	a,r7
      0000A2 30 E5 09         [24]  736 	jnb	acc.5,00108$
                                    737 ;	./src/WS2812.c:69: LED__SendOne_();
      0000A5 C0 07            [24]  738 	push	ar7
      0000A7 12r00r69         [24]  739 	lcall	_LED__SendOne_
      0000AA D0 07            [24]  740 	pop	ar7
      0000AC 80 07            [24]  741 	sjmp	00109$
      0000AE                        742 00108$:
                                    743 ;	./src/WS2812.c:71: LED__SendZero_();
      0000AE C0 07            [24]  744 	push	ar7
      0000B0 12r00r5C         [24]  745 	lcall	_LED__SendZero_
      0000B3 D0 07            [24]  746 	pop	ar7
      0000B5                        747 00109$:
                                    748 ;	./src/WS2812.c:72: if (dat & 0x10)
      0000B5 EF               [12]  749 	mov	a,r7
      0000B6 30 E4 09         [24]  750 	jnb	acc.4,00111$
                                    751 ;	./src/WS2812.c:73: LED__SendOne_();
      0000B9 C0 07            [24]  752 	push	ar7
      0000BB 12r00r69         [24]  753 	lcall	_LED__SendOne_
      0000BE D0 07            [24]  754 	pop	ar7
      0000C0 80 07            [24]  755 	sjmp	00112$
      0000C2                        756 00111$:
                                    757 ;	./src/WS2812.c:75: LED__SendZero_();
      0000C2 C0 07            [24]  758 	push	ar7
      0000C4 12r00r5C         [24]  759 	lcall	_LED__SendZero_
      0000C7 D0 07            [24]  760 	pop	ar7
      0000C9                        761 00112$:
                                    762 ;	./src/WS2812.c:76: if (dat & 0x08)
      0000C9 EF               [12]  763 	mov	a,r7
      0000CA 30 E3 09         [24]  764 	jnb	acc.3,00114$
                                    765 ;	./src/WS2812.c:77: LED__SendOne_();
      0000CD C0 07            [24]  766 	push	ar7
      0000CF 12r00r69         [24]  767 	lcall	_LED__SendOne_
      0000D2 D0 07            [24]  768 	pop	ar7
      0000D4 80 07            [24]  769 	sjmp	00115$
      0000D6                        770 00114$:
                                    771 ;	./src/WS2812.c:79: LED__SendZero_();
      0000D6 C0 07            [24]  772 	push	ar7
      0000D8 12r00r5C         [24]  773 	lcall	_LED__SendZero_
      0000DB D0 07            [24]  774 	pop	ar7
      0000DD                        775 00115$:
                                    776 ;	./src/WS2812.c:80: if (dat & 0x04)
      0000DD EF               [12]  777 	mov	a,r7
      0000DE 30 E2 09         [24]  778 	jnb	acc.2,00117$
                                    779 ;	./src/WS2812.c:81: LED__SendOne_();
      0000E1 C0 07            [24]  780 	push	ar7
      0000E3 12r00r69         [24]  781 	lcall	_LED__SendOne_
      0000E6 D0 07            [24]  782 	pop	ar7
      0000E8 80 07            [24]  783 	sjmp	00118$
      0000EA                        784 00117$:
                                    785 ;	./src/WS2812.c:83: LED__SendZero_();
      0000EA C0 07            [24]  786 	push	ar7
      0000EC 12r00r5C         [24]  787 	lcall	_LED__SendZero_
      0000EF D0 07            [24]  788 	pop	ar7
      0000F1                        789 00118$:
                                    790 ;	./src/WS2812.c:84: if (dat & 0x02)
      0000F1 EF               [12]  791 	mov	a,r7
      0000F2 30 E1 09         [24]  792 	jnb	acc.1,00120$
                                    793 ;	./src/WS2812.c:85: LED__SendOne_();
      0000F5 C0 07            [24]  794 	push	ar7
      0000F7 12r00r69         [24]  795 	lcall	_LED__SendOne_
      0000FA D0 07            [24]  796 	pop	ar7
      0000FC 80 07            [24]  797 	sjmp	00121$
      0000FE                        798 00120$:
                                    799 ;	./src/WS2812.c:87: LED__SendZero_();
      0000FE C0 07            [24]  800 	push	ar7
      000100 12r00r5C         [24]  801 	lcall	_LED__SendZero_
      000103 D0 07            [24]  802 	pop	ar7
      000105                        803 00121$:
                                    804 ;	./src/WS2812.c:88: if (dat & 0x01)
      000105 EF               [12]  805 	mov	a,r7
      000106 30 E0 03         [24]  806 	jnb	acc.0,00123$
                                    807 ;	./src/WS2812.c:89: LED__SendOne_();
      000109 02r00r69         [24]  808 	ljmp	_LED__SendOne_
      00010C                        809 00123$:
                                    810 ;	./src/WS2812.c:91: LED__SendZero_();
                                    811 ;	./src/WS2812.c:92: }
      00010C 02r00r5C         [24]  812 	ljmp	_LED__SendZero_
                                    813 ;------------------------------------------------------------
                                    814 ;Allocation info for local variables in function 'clearAll'
                                    815 ;------------------------------------------------------------
                                    816 ;i                         Allocated to registers r6 r7 
                                    817 ;------------------------------------------------------------
                                    818 ;	./src/WS2812.c:94: void clearAll()
                                    819 ;	-----------------------------------------
                                    820 ;	 function clearAll
                                    821 ;	-----------------------------------------
      00010F                        822 _clearAll:
                                    823 ;	./src/WS2812.c:96: for (uint16_t i = 0; i < 300; i++)
      00010F 7E 00            [12]  824 	mov	r6,#0x00
      000111 7F 00            [12]  825 	mov	r7,#0x00
      000113                        826 00103$:
      000113 8E 04            [24]  827 	mov	ar4,r6
      000115 8F 05            [24]  828 	mov	ar5,r7
      000117 C3               [12]  829 	clr	c
      000118 EC               [12]  830 	mov	a,r4
      000119 94 2C            [12]  831 	subb	a,#0x2c
      00011B ED               [12]  832 	mov	a,r5
      00011C 94 01            [12]  833 	subb	a,#0x01
      00011E 50 21            [24]  834 	jnc	00101$
                                    835 ;	./src/WS2812.c:98: LED__SendByte_(0);
      000120 75 82 00         [24]  836 	mov	dpl,#0x00
      000123 C0 07            [24]  837 	push	ar7
      000125 C0 06            [24]  838 	push	ar6
      000127 12r00r77         [24]  839 	lcall	_LED__SendByte_
                                    840 ;	./src/WS2812.c:99: LED__SendByte_(0);
      00012A 75 82 00         [24]  841 	mov	dpl,#0x00
      00012D 12r00r77         [24]  842 	lcall	_LED__SendByte_
                                    843 ;	./src/WS2812.c:100: LED__SendByte_(0);
      000130 75 82 00         [24]  844 	mov	dpl,#0x00
      000133 12r00r77         [24]  845 	lcall	_LED__SendByte_
      000136 D0 06            [24]  846 	pop	ar6
      000138 D0 07            [24]  847 	pop	ar7
                                    848 ;	./src/WS2812.c:96: for (uint16_t i = 0; i < 300; i++)
      00013A 0E               [12]  849 	inc	r6
      00013B BE 00 D5         [24]  850 	cjne	r6,#0x00,00103$
      00013E 0F               [12]  851 	inc	r7
      00013F 80 D2            [24]  852 	sjmp	00103$
      000141                        853 00101$:
                                    854 ;	./src/WS2812.c:103: setAll(0x00, 0x00, 0x00);
      000141 75*05 00         [24]  855 	mov	_setAll_PARM_2,#0x00
      000144 75*06 00         [24]  856 	mov	_setAll_PARM_3,#0x00
      000147 75 82 00         [24]  857 	mov	dpl,#0x00
      00014A 12r02r1C         [24]  858 	lcall	_setAll
                                    859 ;	./src/WS2812.c:104: showStrip();
      00014D 12r01r53         [24]  860 	lcall	_showStrip
                                    861 ;	./src/WS2812.c:105: showStrip();
                                    862 ;	./src/WS2812.c:106: }
      000150 02r01r53         [24]  863 	ljmp	_showStrip
                                    864 ;------------------------------------------------------------
                                    865 ;Allocation info for local variables in function 'showStrip'
                                    866 ;------------------------------------------------------------
                                    867 ;i                         Allocated to registers r7 
                                    868 ;g                         Allocated to registers r4 
                                    869 ;r                         Allocated to registers r3 
                                    870 ;b                         Allocated to registers r6 
                                    871 ;------------------------------------------------------------
                                    872 ;	./src/WS2812.c:108: void showStrip()
                                    873 ;	-----------------------------------------
                                    874 ;	 function showStrip
                                    875 ;	-----------------------------------------
      000153                        876 _showStrip:
                                    877 ;	./src/WS2812.c:110: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      000153 7F 00            [12]  878 	mov	r7,#0x00
      000155                        879 00103$:
      000155 8F 05            [24]  880 	mov	ar5,r7
      000157 7E 00            [12]  881 	mov	r6,#0x00
      000159 C3               [12]  882 	clr	c
      00015A ED               [12]  883 	mov	a,r5
      00015B 95*00            [12]  884 	subb	a,_NUM_LEDS
      00015D EE               [12]  885 	mov	a,r6
      00015E 95*01            [12]  886 	subb	a,(_NUM_LEDS + 1)
      000160 40 01            [24]  887 	jc	00116$
      000162 22               [24]  888 	ret
      000163                        889 00116$:
                                    890 ;	./src/WS2812.c:113: g = xRamRead(i * 3);
      000163 8F*00            [24]  891 	mov	__mulint_PARM_2,r7
      000165 75*01 00         [24]  892 	mov	(__mulint_PARM_2 + 1),#0x00
      000168 90 00 03         [24]  893 	mov	dptr,#0x0003
      00016B C0 07            [24]  894 	push	ar7
      00016D 12r00r00         [24]  895 	lcall	__mulint
      000170 AD 82            [24]  896 	mov	r5,dpl
      000172 AE 83            [24]  897 	mov  r6,dph
      000174 C0 06            [24]  898 	push	ar6
      000176 C0 05            [24]  899 	push	ar5
      000178 12r00r00         [24]  900 	lcall	_xRamRead
      00017B AC 82            [24]  901 	mov	r4,dpl
      00017D D0 05            [24]  902 	pop	ar5
      00017F D0 06            [24]  903 	pop	ar6
                                    904 ;	./src/WS2812.c:114: r = xRamRead(i * 3 + 1);
      000181 74 01            [12]  905 	mov	a,#0x01
      000183 2D               [12]  906 	add	a,r5
      000184 FA               [12]  907 	mov	r2,a
      000185 E4               [12]  908 	clr	a
      000186 3E               [12]  909 	addc	a,r6
      000187 FB               [12]  910 	mov	r3,a
      000188 8A 82            [24]  911 	mov	dpl,r2
      00018A 8B 83            [24]  912 	mov	dph,r3
      00018C C0 06            [24]  913 	push	ar6
      00018E C0 05            [24]  914 	push	ar5
      000190 C0 04            [24]  915 	push	ar4
      000192 12r00r00         [24]  916 	lcall	_xRamRead
      000195 AB 82            [24]  917 	mov	r3,dpl
      000197 D0 04            [24]  918 	pop	ar4
      000199 D0 05            [24]  919 	pop	ar5
      00019B D0 06            [24]  920 	pop	ar6
                                    921 ;	./src/WS2812.c:115: b = xRamRead(i * 3 + 2);
      00019D 74 02            [12]  922 	mov	a,#0x02
      00019F 2D               [12]  923 	add	a,r5
      0001A0 FD               [12]  924 	mov	r5,a
      0001A1 E4               [12]  925 	clr	a
      0001A2 3E               [12]  926 	addc	a,r6
      0001A3 FE               [12]  927 	mov	r6,a
      0001A4 8D 82            [24]  928 	mov	dpl,r5
      0001A6 8E 83            [24]  929 	mov	dph,r6
      0001A8 C0 04            [24]  930 	push	ar4
      0001AA C0 03            [24]  931 	push	ar3
      0001AC 12r00r00         [24]  932 	lcall	_xRamRead
      0001AF AE 82            [24]  933 	mov	r6,dpl
      0001B1 D0 03            [24]  934 	pop	ar3
      0001B3 D0 04            [24]  935 	pop	ar4
                                    936 ;	./src/WS2812.c:117: LED__SendByte_(g);
      0001B5 8C 82            [24]  937 	mov	dpl,r4
      0001B7 C0 06            [24]  938 	push	ar6
      0001B9 C0 03            [24]  939 	push	ar3
      0001BB 12r00r77         [24]  940 	lcall	_LED__SendByte_
      0001BE D0 03            [24]  941 	pop	ar3
                                    942 ;	./src/WS2812.c:118: LED__SendByte_(r);
      0001C0 8B 82            [24]  943 	mov	dpl,r3
      0001C2 12r00r77         [24]  944 	lcall	_LED__SendByte_
      0001C5 D0 06            [24]  945 	pop	ar6
                                    946 ;	./src/WS2812.c:119: LED__SendByte_(b);
      0001C7 8E 82            [24]  947 	mov	dpl,r6
      0001C9 12r00r77         [24]  948 	lcall	_LED__SendByte_
      0001CC D0 07            [24]  949 	pop	ar7
                                    950 ;	./src/WS2812.c:110: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      0001CE 0F               [12]  951 	inc	r7
                                    952 ;	./src/WS2812.c:121: }
      0001CF 02r01r55         [24]  953 	ljmp	00103$
                                    954 ;------------------------------------------------------------
                                    955 ;Allocation info for local variables in function 'setPixel'
                                    956 ;------------------------------------------------------------
                                    957 ;green                     Allocated with name '_setPixel_PARM_2'
                                    958 ;red                       Allocated with name '_setPixel_PARM_3'
                                    959 ;blue                      Allocated with name '_setPixel_PARM_4'
                                    960 ;Pixel                     Allocated to registers r6 r7 
                                    961 ;------------------------------------------------------------
                                    962 ;	./src/WS2812.c:124: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                    963 ;	-----------------------------------------
                                    964 ;	 function setPixel
                                    965 ;	-----------------------------------------
      0001D2                        966 _setPixel:
      0001D2 AE 82            [24]  967 	mov	r6,dpl
      0001D4 AF 83            [24]  968 	mov	r7,dph
                                    969 ;	./src/WS2812.c:126: xRamWrite(Pixel * 3, green);
      0001D6 8E*00            [24]  970 	mov	__mulint_PARM_2,r6
      0001D8 8F*01            [24]  971 	mov	(__mulint_PARM_2 + 1),r7
      0001DA 90 00 03         [24]  972 	mov	dptr,#0x0003
      0001DD 12r00r00         [24]  973 	lcall	__mulint
      0001E0 AE 82            [24]  974 	mov	r6,dpl
      0001E2 AF 83            [24]  975 	mov  r7,dph
      0001E4 85*02*00         [24]  976 	mov	_xRamWrite_PARM_2,_setPixel_PARM_2
      0001E7 C0 07            [24]  977 	push	ar7
      0001E9 C0 06            [24]  978 	push	ar6
      0001EB 12r00r00         [24]  979 	lcall	_xRamWrite
      0001EE D0 06            [24]  980 	pop	ar6
      0001F0 D0 07            [24]  981 	pop	ar7
                                    982 ;	./src/WS2812.c:127: xRamWrite(Pixel * 3 + 1, red);
      0001F2 74 01            [12]  983 	mov	a,#0x01
      0001F4 2E               [12]  984 	add	a,r6
      0001F5 FC               [12]  985 	mov	r4,a
      0001F6 E4               [12]  986 	clr	a
      0001F7 3F               [12]  987 	addc	a,r7
      0001F8 FD               [12]  988 	mov	r5,a
      0001F9 8C 82            [24]  989 	mov	dpl,r4
      0001FB 8D 83            [24]  990 	mov	dph,r5
      0001FD 85*03*00         [24]  991 	mov	_xRamWrite_PARM_2,_setPixel_PARM_3
      000200 C0 07            [24]  992 	push	ar7
      000202 C0 06            [24]  993 	push	ar6
      000204 12r00r00         [24]  994 	lcall	_xRamWrite
      000207 D0 06            [24]  995 	pop	ar6
      000209 D0 07            [24]  996 	pop	ar7
                                    997 ;	./src/WS2812.c:128: xRamWrite(Pixel * 3 + 2, blue);
      00020B 74 02            [12]  998 	mov	a,#0x02
      00020D 2E               [12]  999 	add	a,r6
      00020E FE               [12] 1000 	mov	r6,a
      00020F E4               [12] 1001 	clr	a
      000210 3F               [12] 1002 	addc	a,r7
      000211 FF               [12] 1003 	mov	r7,a
      000212 8E 82            [24] 1004 	mov	dpl,r6
      000214 8F 83            [24] 1005 	mov	dph,r7
      000216 85*04*00         [24] 1006 	mov	_xRamWrite_PARM_2,_setPixel_PARM_4
                                   1007 ;	./src/WS2812.c:129: }
      000219 02r00r00         [24] 1008 	ljmp	_xRamWrite
                                   1009 ;------------------------------------------------------------
                                   1010 ;Allocation info for local variables in function 'setAll'
                                   1011 ;------------------------------------------------------------
                                   1012 ;red                       Allocated with name '_setAll_PARM_2'
                                   1013 ;blue                      Allocated with name '_setAll_PARM_3'
                                   1014 ;green                     Allocated to registers r7 
                                   1015 ;i                         Allocated to registers r5 r6 
                                   1016 ;------------------------------------------------------------
                                   1017 ;	./src/WS2812.c:132: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                   1018 ;	-----------------------------------------
                                   1019 ;	 function setAll
                                   1020 ;	-----------------------------------------
      00021C                       1021 _setAll:
      00021C AF 82            [24] 1022 	mov	r7,dpl
                                   1023 ;	./src/WS2812.c:134: for (int16_t i = 0; i < NUM_LEDS; ++i)
      00021E 7D 00            [12] 1024 	mov	r5,#0x00
      000220 7E 00            [12] 1025 	mov	r6,#0x00
      000222                       1026 00103$:
      000222 8D 03            [24] 1027 	mov	ar3,r5
      000224 8E 04            [24] 1028 	mov	ar4,r6
      000226 C3               [12] 1029 	clr	c
      000227 EB               [12] 1030 	mov	a,r3
      000228 95*00            [12] 1031 	subb	a,_NUM_LEDS
      00022A EC               [12] 1032 	mov	a,r4
      00022B 95*01            [12] 1033 	subb	a,(_NUM_LEDS + 1)
      00022D 50 22            [24] 1034 	jnc	00105$
                                   1035 ;	./src/WS2812.c:136: setPixel(i, green, red, blue);
      00022F 8F*02            [24] 1036 	mov	_setPixel_PARM_2,r7
      000231 85*05*03         [24] 1037 	mov	_setPixel_PARM_3,_setAll_PARM_2
      000234 85*06*04         [24] 1038 	mov	_setPixel_PARM_4,_setAll_PARM_3
      000237 8D 82            [24] 1039 	mov	dpl,r5
      000239 8E 83            [24] 1040 	mov	dph,r6
      00023B C0 07            [24] 1041 	push	ar7
      00023D C0 06            [24] 1042 	push	ar6
      00023F C0 05            [24] 1043 	push	ar5
      000241 12r01rD2         [24] 1044 	lcall	_setPixel
      000244 D0 05            [24] 1045 	pop	ar5
      000246 D0 06            [24] 1046 	pop	ar6
      000248 D0 07            [24] 1047 	pop	ar7
                                   1048 ;	./src/WS2812.c:134: for (int16_t i = 0; i < NUM_LEDS; ++i)
      00024A 0D               [12] 1049 	inc	r5
      00024B BD 00 D4         [24] 1050 	cjne	r5,#0x00,00103$
      00024E 0E               [12] 1051 	inc	r6
      00024F 80 D1            [24] 1052 	sjmp	00103$
      000251                       1053 00105$:
                                   1054 ;	./src/WS2812.c:138: }
      000251 22               [24] 1055 	ret
                                   1056 ;------------------------------------------------------------
                                   1057 ;Allocation info for local variables in function 'FadeInOut'
                                   1058 ;------------------------------------------------------------
                                   1059 ;red                       Allocated with name '_FadeInOut_PARM_2'
                                   1060 ;blue                      Allocated with name '_FadeInOut_PARM_3'
                                   1061 ;green                     Allocated with name '_FadeInOut_green_65536_74'
                                   1062 ;g                         Allocated with name '_FadeInOut_g_65536_75'
                                   1063 ;r                         Allocated with name '_FadeInOut_r_65536_75'
                                   1064 ;b                         Allocated to registers 
                                   1065 ;curEffect                 Allocated with name '_FadeInOut_curEffect_65536_75'
                                   1066 ;k                         Allocated to registers r4 r5 
                                   1067 ;k                         Allocated with name '_FadeInOut_k_131072_79'
                                   1068 ;------------------------------------------------------------
                                   1069 ;	./src/WS2812.c:139: void FadeInOut(uint8_t green, uint8_t red, uint8_t blue)
                                   1070 ;	-----------------------------------------
                                   1071 ;	 function FadeInOut
                                   1072 ;	-----------------------------------------
      000252                       1073 _FadeInOut:
      000252 85 82*09         [24] 1074 	mov	_FadeInOut_green_65536_74,dpl
                                   1075 ;	./src/WS2812.c:142: uint8_t curEffect = effect;
      000255 85*00*0C         [24] 1076 	mov	_FadeInOut_curEffect_65536_75,_effect
                                   1077 ;	./src/WS2812.c:144: for (int16_t k = 0; k < 255; k = k + NUM_LEDS/50)
      000258 7C 00            [12] 1078 	mov	r4,#0x00
      00025A 7D 00            [12] 1079 	mov	r5,#0x00
      00025C                       1080 00108$:
      00025C 8C 02            [24] 1081 	mov	ar2,r4
      00025E 8D 03            [24] 1082 	mov	ar3,r5
      000260 C3               [12] 1083 	clr	c
      000261 EA               [12] 1084 	mov	a,r2
      000262 94 FF            [12] 1085 	subb	a,#0xff
      000264 EB               [12] 1086 	mov	a,r3
      000265 64 80            [12] 1087 	xrl	a,#0x80
      000267 94 80            [12] 1088 	subb	a,#0x80
      000269 40 03            [24] 1089 	jc	00145$
      00026B 02r03r51         [24] 1090 	ljmp	00103$
      00026E                       1091 00145$:
                                   1092 ;	./src/WS2812.c:146: if (curEffect != effect) {_status=STT_NEW;return;}
      00026E E5*00            [12] 1093 	mov	a,_effect
      000270 B5*0C 02         [24] 1094 	cjne	a,_FadeInOut_curEffect_65536_75,00146$
      000273 80 04            [24] 1095 	sjmp	00102$
      000275                       1096 00146$:
      000275 75*00 12         [24] 1097 	mov	__status,#0x12
      000278 22               [24] 1098 	ret
      000279                       1099 00102$:
                                   1100 ;	./src/WS2812.c:148: r = k * red / 256;
      000279 85*07*00         [24] 1101 	mov	__mulint_PARM_2,_FadeInOut_PARM_2
      00027C 75*01 00         [24] 1102 	mov	(__mulint_PARM_2 + 1),#0x00
      00027F 8C 82            [24] 1103 	mov	dpl,r4
      000281 8D 83            [24] 1104 	mov	dph,r5
      000283 C0 05            [24] 1105 	push	ar5
      000285 C0 04            [24] 1106 	push	ar4
      000287 12r00r00         [24] 1107 	lcall	__mulint
      00028A 75*00 00         [24] 1108 	mov	__divsint_PARM_2,#0x00
      00028D 75*01 01         [24] 1109 	mov	(__divsint_PARM_2 + 1),#0x01
      000290 12r00r00         [24] 1110 	lcall	__divsint
      000293 AA 82            [24] 1111 	mov	r2,dpl
      000295 D0 04            [24] 1112 	pop	ar4
      000297 D0 05            [24] 1113 	pop	ar5
                                   1114 ;	./src/WS2812.c:149: g = k * green / 256;
      000299 85*09*00         [24] 1115 	mov	__mulint_PARM_2,_FadeInOut_green_65536_74
      00029C 75*01 00         [24] 1116 	mov	(__mulint_PARM_2 + 1),#0x00
      00029F 8C 82            [24] 1117 	mov	dpl,r4
      0002A1 8D 83            [24] 1118 	mov	dph,r5
      0002A3 C0 05            [24] 1119 	push	ar5
      0002A5 C0 04            [24] 1120 	push	ar4
      0002A7 C0 02            [24] 1121 	push	ar2
      0002A9 12r00r00         [24] 1122 	lcall	__mulint
      0002AC 75*00 00         [24] 1123 	mov	__divsint_PARM_2,#0x00
      0002AF 75*01 01         [24] 1124 	mov	(__divsint_PARM_2 + 1),#0x01
      0002B2 12r00r00         [24] 1125 	lcall	__divsint
      0002B5 A9 82            [24] 1126 	mov	r1,dpl
      0002B7 D0 02            [24] 1127 	pop	ar2
      0002B9 D0 04            [24] 1128 	pop	ar4
      0002BB D0 05            [24] 1129 	pop	ar5
                                   1130 ;	./src/WS2812.c:150: b = k * blue / 256;
      0002BD 85*08*00         [24] 1131 	mov	__mulint_PARM_2,_FadeInOut_PARM_3
      0002C0 75*01 00         [24] 1132 	mov	(__mulint_PARM_2 + 1),#0x00
      0002C3 8C 82            [24] 1133 	mov	dpl,r4
      0002C5 8D 83            [24] 1134 	mov	dph,r5
      0002C7 C0 05            [24] 1135 	push	ar5
      0002C9 C0 04            [24] 1136 	push	ar4
      0002CB C0 02            [24] 1137 	push	ar2
      0002CD C0 01            [24] 1138 	push	ar1
      0002CF 12r00r00         [24] 1139 	lcall	__mulint
      0002D2 75*00 00         [24] 1140 	mov	__divsint_PARM_2,#0x00
      0002D5 75*01 01         [24] 1141 	mov	(__divsint_PARM_2 + 1),#0x01
      0002D8 12r00r00         [24] 1142 	lcall	__divsint
      0002DB A8 82            [24] 1143 	mov	r0,dpl
      0002DD D0 01            [24] 1144 	pop	ar1
      0002DF D0 02            [24] 1145 	pop	ar2
      0002E1 88*06            [24] 1146 	mov	_setAll_PARM_3,r0
                                   1147 ;	./src/WS2812.c:151: setAll(g, r, b);
      0002E3 8A*05            [24] 1148 	mov	_setAll_PARM_2,r2
      0002E5 89 82            [24] 1149 	mov	dpl,r1
      0002E7 12r02r1C         [24] 1150 	lcall	_setAll
                                   1151 ;	./src/WS2812.c:152: showStrip();
      0002EA 12r01r53         [24] 1152 	lcall	_showStrip
                                   1153 ;	./src/WS2812.c:153: _delay_ms(DELAY2);
      0002ED 85*00*00         [24] 1154 	mov	__divuint_PARM_2,_NUM_LEDS
      0002F0 85*01*01         [24] 1155 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0002F3 90 00 C8         [24] 1156 	mov	dptr,#0x00c8
      0002F6 12r00r00         [24] 1157 	lcall	__divuint
      0002F9 85*00*00         [24] 1158 	mov	__mulint_PARM_2,__delay
      0002FC 85*01*01         [24] 1159 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0002FF 12r00r00         [24] 1160 	lcall	__mulint
      000302 75*00 64         [24] 1161 	mov	__divuint_PARM_2,#0x64
      000305 75*01 00         [24] 1162 	mov	(__divuint_PARM_2 + 1),#0x00
      000308 12r00r00         [24] 1163 	lcall	__divuint
      00030B E5 82            [12] 1164 	mov	a,dpl
      00030D 85 83 F0         [24] 1165 	mov	b,dph
      000310 24 01            [12] 1166 	add	a,#0x01
      000312 FA               [12] 1167 	mov	r2,a
      000313 E4               [12] 1168 	clr	a
      000314 35 F0            [12] 1169 	addc	a,b
      000316 FB               [12] 1170 	mov	r3,a
      000317 8A 00            [24] 1171 	mov	ar0,r2
      000319 8B 01            [24] 1172 	mov	ar1,r3
      00031B 7A 00            [12] 1173 	mov	r2,#0x00
      00031D 7B 00            [12] 1174 	mov	r3,#0x00
      00031F 88 82            [24] 1175 	mov	dpl,r0
      000321 89 83            [24] 1176 	mov	dph,r1
      000323 8A F0            [24] 1177 	mov	b,r2
      000325 EB               [12] 1178 	mov	a,r3
      000326 12r00r00         [24] 1179 	lcall	__delay_ms
                                   1180 ;	./src/WS2812.c:144: for (int16_t k = 0; k < 255; k = k + NUM_LEDS/50)
      000329 85*00 82         [24] 1181 	mov	dpl,_NUM_LEDS
      00032C 85*01 83         [24] 1182 	mov	dph,(_NUM_LEDS + 1)
      00032F 75*00 32         [24] 1183 	mov	__divuint_PARM_2,#0x32
      000332 75*01 00         [24] 1184 	mov	(__divuint_PARM_2 + 1),#0x00
      000335 12r00r00         [24] 1185 	lcall	__divuint
      000338 AA 82            [24] 1186 	mov	r2,dpl
      00033A AB 83            [24] 1187 	mov	r3,dph
      00033C D0 04            [24] 1188 	pop	ar4
      00033E D0 05            [24] 1189 	pop	ar5
      000340 8C 00            [24] 1190 	mov	ar0,r4
      000342 8D 01            [24] 1191 	mov	ar1,r5
      000344 EA               [12] 1192 	mov	a,r2
      000345 28               [12] 1193 	add	a,r0
      000346 FA               [12] 1194 	mov	r2,a
      000347 EB               [12] 1195 	mov	a,r3
      000348 39               [12] 1196 	addc	a,r1
      000349 FB               [12] 1197 	mov	r3,a
      00034A 8A 04            [24] 1198 	mov	ar4,r2
      00034C 8B 05            [24] 1199 	mov	ar5,r3
      00034E 02r02r5C         [24] 1200 	ljmp	00108$
      000351                       1201 00103$:
                                   1202 ;	./src/WS2812.c:156: for (int16_t k = 255; k > 0; k = k - NUM_LEDS/25)
      000351 75*0D FF         [24] 1203 	mov	_FadeInOut_k_131072_79,#0xff
      000354 75*0E 00         [24] 1204 	mov	(_FadeInOut_k_131072_79 + 1),#0x00
      000357                       1205 00111$:
      000357 AA*0D            [24] 1206 	mov	r2,_FadeInOut_k_131072_79
      000359 AB*0E            [24] 1207 	mov	r3,(_FadeInOut_k_131072_79 + 1)
      00035B C3               [12] 1208 	clr	c
      00035C E4               [12] 1209 	clr	a
      00035D 9A               [12] 1210 	subb	a,r2
      00035E 74 80            [12] 1211 	mov	a,#(0x00 ^ 0x80)
      000360 8B F0            [24] 1212 	mov	b,r3
      000362 63 F0 80         [24] 1213 	xrl	b,#0x80
      000365 95 F0            [12] 1214 	subb	a,b
      000367 40 01            [24] 1215 	jc	00147$
      000369 22               [24] 1216 	ret
      00036A                       1217 00147$:
                                   1218 ;	./src/WS2812.c:158: if (curEffect != effect) {_status=STT_NEW;return;}
      00036A E5*00            [12] 1219 	mov	a,_effect
      00036C B5*0C 02         [24] 1220 	cjne	a,_FadeInOut_curEffect_65536_75,00148$
      00036F 80 04            [24] 1221 	sjmp	00105$
      000371                       1222 00148$:
      000371 75*00 12         [24] 1223 	mov	__status,#0x12
      000374 22               [24] 1224 	ret
      000375                       1225 00105$:
                                   1226 ;	./src/WS2812.c:159: r = (k / 256.0) * red;
      000375 85*0D 82         [24] 1227 	mov	dpl,_FadeInOut_k_131072_79
      000378 85*0E 83         [24] 1228 	mov	dph,(_FadeInOut_k_131072_79 + 1)
      00037B 12r00r00         [24] 1229 	lcall	___sint2fs
      00037E A8 82            [24] 1230 	mov	r0,dpl
      000380 A9 83            [24] 1231 	mov	r1,dph
      000382 AA F0            [24] 1232 	mov	r2,b
      000384 FB               [12] 1233 	mov	r3,a
      000385 E4               [12] 1234 	clr	a
      000386 C0 E0            [24] 1235 	push	acc
      000388 C0 E0            [24] 1236 	push	acc
      00038A 74 80            [12] 1237 	mov	a,#0x80
      00038C C0 E0            [24] 1238 	push	acc
      00038E 74 43            [12] 1239 	mov	a,#0x43
      000390 C0 E0            [24] 1240 	push	acc
      000392 88 82            [24] 1241 	mov	dpl,r0
      000394 89 83            [24] 1242 	mov	dph,r1
      000396 8A F0            [24] 1243 	mov	b,r2
      000398 EB               [12] 1244 	mov	a,r3
      000399 12r00r00         [24] 1245 	lcall	___fsdiv
      00039C A8 82            [24] 1246 	mov	r0,dpl
      00039E A9 83            [24] 1247 	mov	r1,dph
      0003A0 AA F0            [24] 1248 	mov	r2,b
      0003A2 FB               [12] 1249 	mov	r3,a
      0003A3 E5 81            [12] 1250 	mov	a,sp
      0003A5 24 FC            [12] 1251 	add	a,#0xfc
      0003A7 F5 81            [12] 1252 	mov	sp,a
      0003A9 85*07 82         [24] 1253 	mov	dpl,_FadeInOut_PARM_2
      0003AC C0 03            [24] 1254 	push	ar3
      0003AE C0 02            [24] 1255 	push	ar2
      0003B0 C0 01            [24] 1256 	push	ar1
      0003B2 C0 00            [24] 1257 	push	ar0
      0003B4 12r00r00         [24] 1258 	lcall	___uchar2fs
      0003B7 AC 82            [24] 1259 	mov	r4,dpl
      0003B9 AD 83            [24] 1260 	mov	r5,dph
      0003BB AE F0            [24] 1261 	mov	r6,b
      0003BD FF               [12] 1262 	mov	r7,a
      0003BE D0 00            [24] 1263 	pop	ar0
      0003C0 D0 01            [24] 1264 	pop	ar1
      0003C2 D0 02            [24] 1265 	pop	ar2
      0003C4 D0 03            [24] 1266 	pop	ar3
      0003C6 C0 03            [24] 1267 	push	ar3
      0003C8 C0 02            [24] 1268 	push	ar2
      0003CA C0 01            [24] 1269 	push	ar1
      0003CC C0 00            [24] 1270 	push	ar0
      0003CE C0 04            [24] 1271 	push	ar4
      0003D0 C0 05            [24] 1272 	push	ar5
      0003D2 C0 06            [24] 1273 	push	ar6
      0003D4 C0 07            [24] 1274 	push	ar7
      0003D6 88 82            [24] 1275 	mov	dpl,r0
      0003D8 89 83            [24] 1276 	mov	dph,r1
      0003DA 8A F0            [24] 1277 	mov	b,r2
      0003DC EB               [12] 1278 	mov	a,r3
      0003DD 12r00r00         [24] 1279 	lcall	___fsmul
      0003E0 AC 82            [24] 1280 	mov	r4,dpl
      0003E2 AD 83            [24] 1281 	mov	r5,dph
      0003E4 AE F0            [24] 1282 	mov	r6,b
      0003E6 FF               [12] 1283 	mov	r7,a
      0003E7 E5 81            [12] 1284 	mov	a,sp
      0003E9 24 FC            [12] 1285 	add	a,#0xfc
      0003EB F5 81            [12] 1286 	mov	sp,a
      0003ED 8C 82            [24] 1287 	mov	dpl,r4
      0003EF 8D 83            [24] 1288 	mov	dph,r5
      0003F1 8E F0            [24] 1289 	mov	b,r6
      0003F3 EF               [12] 1290 	mov	a,r7
      0003F4 12r00r00         [24] 1291 	lcall	___fs2uchar
      0003F7 85 82*0B         [24] 1292 	mov	_FadeInOut_r_65536_75,dpl
                                   1293 ;	./src/WS2812.c:160: g = (k / 256.0) * green;
      0003FA 85*09 82         [24] 1294 	mov	dpl,_FadeInOut_green_65536_74
      0003FD 12r00r00         [24] 1295 	lcall	___uchar2fs
      000400 AC 82            [24] 1296 	mov	r4,dpl
      000402 AD 83            [24] 1297 	mov	r5,dph
      000404 AE F0            [24] 1298 	mov	r6,b
      000406 FF               [12] 1299 	mov	r7,a
      000407 D0 00            [24] 1300 	pop	ar0
      000409 D0 01            [24] 1301 	pop	ar1
      00040B D0 02            [24] 1302 	pop	ar2
      00040D D0 03            [24] 1303 	pop	ar3
      00040F C0 03            [24] 1304 	push	ar3
      000411 C0 02            [24] 1305 	push	ar2
      000413 C0 01            [24] 1306 	push	ar1
      000415 C0 00            [24] 1307 	push	ar0
      000417 C0 04            [24] 1308 	push	ar4
      000419 C0 05            [24] 1309 	push	ar5
      00041B C0 06            [24] 1310 	push	ar6
      00041D C0 07            [24] 1311 	push	ar7
      00041F 88 82            [24] 1312 	mov	dpl,r0
      000421 89 83            [24] 1313 	mov	dph,r1
      000423 8A F0            [24] 1314 	mov	b,r2
      000425 EB               [12] 1315 	mov	a,r3
      000426 12r00r00         [24] 1316 	lcall	___fsmul
      000429 AC 82            [24] 1317 	mov	r4,dpl
      00042B AD 83            [24] 1318 	mov	r5,dph
      00042D AE F0            [24] 1319 	mov	r6,b
      00042F FF               [12] 1320 	mov	r7,a
      000430 E5 81            [12] 1321 	mov	a,sp
      000432 24 FC            [12] 1322 	add	a,#0xfc
      000434 F5 81            [12] 1323 	mov	sp,a
      000436 8C 82            [24] 1324 	mov	dpl,r4
      000438 8D 83            [24] 1325 	mov	dph,r5
      00043A 8E F0            [24] 1326 	mov	b,r6
      00043C EF               [12] 1327 	mov	a,r7
      00043D 12r00r00         [24] 1328 	lcall	___fs2uchar
      000440 85 82*0A         [24] 1329 	mov	_FadeInOut_g_65536_75,dpl
                                   1330 ;	./src/WS2812.c:161: b = (k / 256.0) * blue;
      000443 85*08 82         [24] 1331 	mov	dpl,_FadeInOut_PARM_3
      000446 12r00r00         [24] 1332 	lcall	___uchar2fs
      000449 AC 82            [24] 1333 	mov	r4,dpl
      00044B AD 83            [24] 1334 	mov	r5,dph
      00044D AE F0            [24] 1335 	mov	r6,b
      00044F FF               [12] 1336 	mov	r7,a
      000450 D0 00            [24] 1337 	pop	ar0
      000452 D0 01            [24] 1338 	pop	ar1
      000454 D0 02            [24] 1339 	pop	ar2
      000456 D0 03            [24] 1340 	pop	ar3
      000458 C0 04            [24] 1341 	push	ar4
      00045A C0 05            [24] 1342 	push	ar5
      00045C C0 06            [24] 1343 	push	ar6
      00045E C0 07            [24] 1344 	push	ar7
      000460 88 82            [24] 1345 	mov	dpl,r0
      000462 89 83            [24] 1346 	mov	dph,r1
      000464 8A F0            [24] 1347 	mov	b,r2
      000466 EB               [12] 1348 	mov	a,r3
      000467 12r00r00         [24] 1349 	lcall	___fsmul
      00046A AC 82            [24] 1350 	mov	r4,dpl
      00046C AD 83            [24] 1351 	mov	r5,dph
      00046E AE F0            [24] 1352 	mov	r6,b
      000470 FF               [12] 1353 	mov	r7,a
      000471 E5 81            [12] 1354 	mov	a,sp
      000473 24 FC            [12] 1355 	add	a,#0xfc
      000475 F5 81            [12] 1356 	mov	sp,a
      000477 8C 82            [24] 1357 	mov	dpl,r4
      000479 8D 83            [24] 1358 	mov	dph,r5
      00047B 8E F0            [24] 1359 	mov	b,r6
      00047D EF               [12] 1360 	mov	a,r7
      00047E 12r00r00         [24] 1361 	lcall	___fs2uchar
      000481 85 82*06         [24] 1362 	mov	_setAll_PARM_3,dpl
                                   1363 ;	./src/WS2812.c:162: setAll(g, r, b);
      000484 85*0B*05         [24] 1364 	mov	_setAll_PARM_2,_FadeInOut_r_65536_75
      000487 85*0A 82         [24] 1365 	mov	dpl,_FadeInOut_g_65536_75
      00048A 12r02r1C         [24] 1366 	lcall	_setAll
                                   1367 ;	./src/WS2812.c:163: showStrip();
      00048D 12r01r53         [24] 1368 	lcall	_showStrip
                                   1369 ;	./src/WS2812.c:164: _delay_ms(DELAY2);
      000490 85*00*00         [24] 1370 	mov	__divuint_PARM_2,_NUM_LEDS
      000493 85*01*01         [24] 1371 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000496 90 00 C8         [24] 1372 	mov	dptr,#0x00c8
      000499 12r00r00         [24] 1373 	lcall	__divuint
      00049C 85*00*00         [24] 1374 	mov	__mulint_PARM_2,__delay
      00049F 85*01*01         [24] 1375 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0004A2 12r00r00         [24] 1376 	lcall	__mulint
      0004A5 75*00 64         [24] 1377 	mov	__divuint_PARM_2,#0x64
      0004A8 75*01 00         [24] 1378 	mov	(__divuint_PARM_2 + 1),#0x00
      0004AB 12r00r00         [24] 1379 	lcall	__divuint
      0004AE E5 82            [12] 1380 	mov	a,dpl
      0004B0 85 83 F0         [24] 1381 	mov	b,dph
      0004B3 24 01            [12] 1382 	add	a,#0x01
      0004B5 FE               [12] 1383 	mov	r6,a
      0004B6 E4               [12] 1384 	clr	a
      0004B7 35 F0            [12] 1385 	addc	a,b
      0004B9 FF               [12] 1386 	mov	r7,a
      0004BA 7D 00            [12] 1387 	mov	r5,#0x00
      0004BC 7C 00            [12] 1388 	mov	r4,#0x00
      0004BE 8E 82            [24] 1389 	mov	dpl,r6
      0004C0 8F 83            [24] 1390 	mov	dph,r7
      0004C2 8D F0            [24] 1391 	mov	b,r5
      0004C4 EC               [12] 1392 	mov	a,r4
      0004C5 12r00r00         [24] 1393 	lcall	__delay_ms
                                   1394 ;	./src/WS2812.c:156: for (int16_t k = 255; k > 0; k = k - NUM_LEDS/25)
      0004C8 85*00 82         [24] 1395 	mov	dpl,_NUM_LEDS
      0004CB 85*01 83         [24] 1396 	mov	dph,(_NUM_LEDS + 1)
      0004CE 75*00 19         [24] 1397 	mov	__divuint_PARM_2,#0x19
      0004D1 75*01 00         [24] 1398 	mov	(__divuint_PARM_2 + 1),#0x00
      0004D4 12r00r00         [24] 1399 	lcall	__divuint
      0004D7 AE 82            [24] 1400 	mov	r6,dpl
      0004D9 AF 83            [24] 1401 	mov	r7,dph
      0004DB AC*0D            [24] 1402 	mov	r4,_FadeInOut_k_131072_79
      0004DD AD*0E            [24] 1403 	mov	r5,(_FadeInOut_k_131072_79 + 1)
      0004DF EC               [12] 1404 	mov	a,r4
      0004E0 C3               [12] 1405 	clr	c
      0004E1 9E               [12] 1406 	subb	a,r6
      0004E2 FE               [12] 1407 	mov	r6,a
      0004E3 ED               [12] 1408 	mov	a,r5
      0004E4 9F               [12] 1409 	subb	a,r7
      0004E5 FF               [12] 1410 	mov	r7,a
      0004E6 8E*0D            [24] 1411 	mov	_FadeInOut_k_131072_79,r6
      0004E8 8F*0E            [24] 1412 	mov	(_FadeInOut_k_131072_79 + 1),r7
                                   1413 ;	./src/WS2812.c:166: }
      0004EA 02r03r57         [24] 1414 	ljmp	00111$
                                   1415 ;------------------------------------------------------------
                                   1416 ;Allocation info for local variables in function 'Strobe'
                                   1417 ;------------------------------------------------------------
                                   1418 ;red                       Allocated with name '_Strobe_PARM_2'
                                   1419 ;blue                      Allocated with name '_Strobe_PARM_3'
                                   1420 ;StrobeCount               Allocated with name '_Strobe_PARM_4'
                                   1421 ;FlashDelay                Allocated with name '_Strobe_PARM_5'
                                   1422 ;EndPause                  Allocated with name '_Strobe_PARM_6'
                                   1423 ;green                     Allocated to registers r7 
                                   1424 ;curEffect                 Allocated to registers r6 
                                   1425 ;j                         Allocated to registers r4 r5 
                                   1426 ;------------------------------------------------------------
                                   1427 ;	./src/WS2812.c:168: void Strobe(uint8_t green, uint8_t red, uint8_t blue, int16_t StrobeCount, int16_t FlashDelay, int16_t EndPause)
                                   1428 ;	-----------------------------------------
                                   1429 ;	 function Strobe
                                   1430 ;	-----------------------------------------
      0004ED                       1431 _Strobe:
      0004ED AF 82            [24] 1432 	mov	r7,dpl
                                   1433 ;	./src/WS2812.c:170: uint8_t curEffect = effect;
      0004EF AE*00            [24] 1434 	mov	r6,_effect
                                   1435 ;	./src/WS2812.c:171: for (int16_t j = 0; j < StrobeCount; j++)
      0004F1 7C 00            [12] 1436 	mov	r4,#0x00
      0004F3 7D 00            [12] 1437 	mov	r5,#0x00
      0004F5                       1438 00105$:
      0004F5 C3               [12] 1439 	clr	c
      0004F6 EC               [12] 1440 	mov	a,r4
      0004F7 95*11            [12] 1441 	subb	a,_Strobe_PARM_4
      0004F9 ED               [12] 1442 	mov	a,r5
      0004FA 64 80            [12] 1443 	xrl	a,#0x80
      0004FC 85*12 F0         [24] 1444 	mov	b,(_Strobe_PARM_4 + 1)
      0004FF 63 F0 80         [24] 1445 	xrl	b,#0x80
      000502 95 F0            [12] 1446 	subb	a,b
      000504 40 03            [24] 1447 	jc	00121$
      000506 02r05rC0         [24] 1448 	ljmp	00103$
      000509                       1449 00121$:
                                   1450 ;	./src/WS2812.c:173: if (curEffect != effect) {_status=STT_NEW;return;}
      000509 EE               [12] 1451 	mov	a,r6
      00050A B5*00 02         [24] 1452 	cjne	a,_effect,00122$
      00050D 80 04            [24] 1453 	sjmp	00102$
      00050F                       1454 00122$:
      00050F 75*00 12         [24] 1455 	mov	__status,#0x12
      000512 22               [24] 1456 	ret
      000513                       1457 00102$:
                                   1458 ;	./src/WS2812.c:174: setAll(green, red, blue);
      000513 85*0F*05         [24] 1459 	mov	_setAll_PARM_2,_Strobe_PARM_2
      000516 85*10*06         [24] 1460 	mov	_setAll_PARM_3,_Strobe_PARM_3
      000519 8F 82            [24] 1461 	mov	dpl,r7
      00051B C0 07            [24] 1462 	push	ar7
      00051D C0 06            [24] 1463 	push	ar6
      00051F C0 05            [24] 1464 	push	ar5
      000521 C0 04            [24] 1465 	push	ar4
      000523 12r02r1C         [24] 1466 	lcall	_setAll
                                   1467 ;	./src/WS2812.c:175: showStrip();
      000526 12r01r53         [24] 1468 	lcall	_showStrip
                                   1469 ;	./src/WS2812.c:176: _delay_ms(DELAY2);
      000529 85*00*00         [24] 1470 	mov	__divuint_PARM_2,_NUM_LEDS
      00052C 85*01*01         [24] 1471 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00052F 90 00 C8         [24] 1472 	mov	dptr,#0x00c8
      000532 12r00r00         [24] 1473 	lcall	__divuint
      000535 85*00*00         [24] 1474 	mov	__mulint_PARM_2,__delay
      000538 85*01*01         [24] 1475 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00053B 12r00r00         [24] 1476 	lcall	__mulint
      00053E 75*00 64         [24] 1477 	mov	__divuint_PARM_2,#0x64
      000541 75*01 00         [24] 1478 	mov	(__divuint_PARM_2 + 1),#0x00
      000544 12r00r00         [24] 1479 	lcall	__divuint
      000547 E5 82            [12] 1480 	mov	a,dpl
      000549 85 83 F0         [24] 1481 	mov	b,dph
      00054C 24 01            [12] 1482 	add	a,#0x01
      00054E FA               [12] 1483 	mov	r2,a
      00054F E4               [12] 1484 	clr	a
      000550 35 F0            [12] 1485 	addc	a,b
      000552 FB               [12] 1486 	mov	r3,a
      000553 8A 00            [24] 1487 	mov	ar0,r2
      000555 8B 01            [24] 1488 	mov	ar1,r3
      000557 7A 00            [12] 1489 	mov	r2,#0x00
      000559 7B 00            [12] 1490 	mov	r3,#0x00
      00055B 88 82            [24] 1491 	mov	dpl,r0
      00055D 89 83            [24] 1492 	mov	dph,r1
      00055F 8A F0            [24] 1493 	mov	b,r2
      000561 EB               [12] 1494 	mov	a,r3
      000562 12r00r00         [24] 1495 	lcall	__delay_ms
                                   1496 ;	./src/WS2812.c:177: setAll(0, 0, 0);
      000565 75*05 00         [24] 1497 	mov	_setAll_PARM_2,#0x00
      000568 75*06 00         [24] 1498 	mov	_setAll_PARM_3,#0x00
      00056B 75 82 00         [24] 1499 	mov	dpl,#0x00
      00056E 12r02r1C         [24] 1500 	lcall	_setAll
                                   1501 ;	./src/WS2812.c:178: showStrip();
      000571 12r01r53         [24] 1502 	lcall	_showStrip
                                   1503 ;	./src/WS2812.c:179: _delay_ms(DELAY2);
      000574 85*00*00         [24] 1504 	mov	__divuint_PARM_2,_NUM_LEDS
      000577 85*01*01         [24] 1505 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00057A 90 00 C8         [24] 1506 	mov	dptr,#0x00c8
      00057D 12r00r00         [24] 1507 	lcall	__divuint
      000580 85*00*00         [24] 1508 	mov	__mulint_PARM_2,__delay
      000583 85*01*01         [24] 1509 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000586 12r00r00         [24] 1510 	lcall	__mulint
      000589 75*00 64         [24] 1511 	mov	__divuint_PARM_2,#0x64
      00058C 75*01 00         [24] 1512 	mov	(__divuint_PARM_2 + 1),#0x00
      00058F 12r00r00         [24] 1513 	lcall	__divuint
      000592 E5 82            [12] 1514 	mov	a,dpl
      000594 85 83 F0         [24] 1515 	mov	b,dph
      000597 24 01            [12] 1516 	add	a,#0x01
      000599 FA               [12] 1517 	mov	r2,a
      00059A E4               [12] 1518 	clr	a
      00059B 35 F0            [12] 1519 	addc	a,b
      00059D FB               [12] 1520 	mov	r3,a
      00059E 8A 00            [24] 1521 	mov	ar0,r2
      0005A0 8B 01            [24] 1522 	mov	ar1,r3
      0005A2 7A 00            [12] 1523 	mov	r2,#0x00
      0005A4 7B 00            [12] 1524 	mov	r3,#0x00
      0005A6 88 82            [24] 1525 	mov	dpl,r0
      0005A8 89 83            [24] 1526 	mov	dph,r1
      0005AA 8A F0            [24] 1527 	mov	b,r2
      0005AC EB               [12] 1528 	mov	a,r3
      0005AD 12r00r00         [24] 1529 	lcall	__delay_ms
      0005B0 D0 04            [24] 1530 	pop	ar4
      0005B2 D0 05            [24] 1531 	pop	ar5
      0005B4 D0 06            [24] 1532 	pop	ar6
      0005B6 D0 07            [24] 1533 	pop	ar7
                                   1534 ;	./src/WS2812.c:171: for (int16_t j = 0; j < StrobeCount; j++)
      0005B8 0C               [12] 1535 	inc	r4
      0005B9 BC 00 01         [24] 1536 	cjne	r4,#0x00,00123$
      0005BC 0D               [12] 1537 	inc	r5
      0005BD                       1538 00123$:
      0005BD 02r04rF5         [24] 1539 	ljmp	00105$
      0005C0                       1540 00103$:
                                   1541 ;	./src/WS2812.c:181: _delay_ms(EndPause);
      0005C0 AC*15            [24] 1542 	mov	r4,_Strobe_PARM_6
      0005C2 E5*16            [12] 1543 	mov	a,(_Strobe_PARM_6 + 1)
      0005C4 FD               [12] 1544 	mov	r5,a
      0005C5 33               [12] 1545 	rlc	a
      0005C6 95 E0            [12] 1546 	subb	a,acc
      0005C8 FE               [12] 1547 	mov	r6,a
      0005C9 8C 82            [24] 1548 	mov	dpl,r4
      0005CB 8D 83            [24] 1549 	mov	dph,r5
      0005CD 8E F0            [24] 1550 	mov	b,r6
                                   1551 ;	./src/WS2812.c:182: }
      0005CF 02r00r00         [24] 1552 	ljmp	__delay_ms
                                   1553 ;------------------------------------------------------------
                                   1554 ;Allocation info for local variables in function 'CylonBounce'
                                   1555 ;------------------------------------------------------------
                                   1556 ;red                       Allocated with name '_CylonBounce_PARM_2'
                                   1557 ;blue                      Allocated with name '_CylonBounce_PARM_3'
                                   1558 ;EyeSize                   Allocated with name '_CylonBounce_PARM_4'
                                   1559 ;SpeedDelay                Allocated with name '_CylonBounce_PARM_5'
                                   1560 ;ReturnDelay               Allocated with name '_CylonBounce_PARM_6'
                                   1561 ;green                     Allocated with name '_CylonBounce_green_65536_87'
                                   1562 ;curEffect                 Allocated with name '_CylonBounce_curEffect_65536_88'
                                   1563 ;i                         Allocated with name '_CylonBounce_i_131072_89'
                                   1564 ;j                         Allocated to registers r5 r7 
                                   1565 ;i                         Allocated to registers 
                                   1566 ;j                         Allocated with name '_CylonBounce_j_262144_96'
                                   1567 ;sloc0                     Allocated with name '_CylonBounce_sloc0_1_0'
                                   1568 ;sloc1                     Allocated with name '_CylonBounce_sloc1_1_0'
                                   1569 ;------------------------------------------------------------
                                   1570 ;	./src/WS2812.c:184: void CylonBounce(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t SpeedDelay, int16_t ReturnDelay)
                                   1571 ;	-----------------------------------------
                                   1572 ;	 function CylonBounce
                                   1573 ;	-----------------------------------------
      0005D2                       1574 _CylonBounce:
      0005D2 85 82*1F         [24] 1575 	mov	_CylonBounce_green_65536_87,dpl
                                   1576 ;	./src/WS2812.c:186: uint8_t curEffect = effect;
      0005D5 85*00*20         [24] 1577 	mov	_CylonBounce_curEffect_65536_88,_effect
                                   1578 ;	./src/WS2812.c:187: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      0005D8 E4               [12] 1579 	clr	a
      0005D9 F5*21            [12] 1580 	mov	_CylonBounce_i_131072_89,a
      0005DB F5*22            [12] 1581 	mov	(_CylonBounce_i_131072_89 + 1),a
      0005DD                       1582 00113$:
      0005DD AA*19            [24] 1583 	mov	r2,_CylonBounce_PARM_4
      0005DF AB*1A            [24] 1584 	mov	r3,(_CylonBounce_PARM_4 + 1)
      0005E1 E5*00            [12] 1585 	mov	a,_NUM_LEDS
      0005E3 C3               [12] 1586 	clr	c
      0005E4 9A               [12] 1587 	subb	a,r2
      0005E5 F8               [12] 1588 	mov	r0,a
      0005E6 E5*01            [12] 1589 	mov	a,(_NUM_LEDS + 1)
      0005E8 9B               [12] 1590 	subb	a,r3
      0005E9 F9               [12] 1591 	mov	r1,a
      0005EA E8               [12] 1592 	mov	a,r0
      0005EB 24 FE            [12] 1593 	add	a,#0xfe
      0005ED F8               [12] 1594 	mov	r0,a
      0005EE E9               [12] 1595 	mov	a,r1
      0005EF 34 FF            [12] 1596 	addc	a,#0xff
      0005F1 F9               [12] 1597 	mov	r1,a
      0005F2 AE*21            [24] 1598 	mov	r6,_CylonBounce_i_131072_89
      0005F4 AF*22            [24] 1599 	mov	r7,(_CylonBounce_i_131072_89 + 1)
      0005F6 C3               [12] 1600 	clr	c
      0005F7 EE               [12] 1601 	mov	a,r6
      0005F8 98               [12] 1602 	subb	a,r0
      0005F9 EF               [12] 1603 	mov	a,r7
      0005FA 99               [12] 1604 	subb	a,r1
      0005FB 40 03            [24] 1605 	jc	00163$
      0005FD 02r07r18         [24] 1606 	ljmp	00104$
      000600                       1607 00163$:
                                   1608 ;	./src/WS2812.c:189: setAll(0, 0, 0);
      000600 75*05 00         [24] 1609 	mov	_setAll_PARM_2,#0x00
      000603 75*06 00         [24] 1610 	mov	_setAll_PARM_3,#0x00
      000606 75 82 00         [24] 1611 	mov	dpl,#0x00
      000609 12r02r1C         [24] 1612 	lcall	_setAll
                                   1613 ;	./src/WS2812.c:190: setPixel(i, red / 10, green / 10, blue / 10);
      00060C AE*17            [24] 1614 	mov	r6,_CylonBounce_PARM_2
      00060E 7F 00            [12] 1615 	mov	r7,#0x00
      000610 75*00 0A         [24] 1616 	mov	__divsint_PARM_2,#0x0a
                                   1617 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000613 8F*01            [24] 1618 	mov	(__divsint_PARM_2 + 1),r7
      000615 8E 82            [24] 1619 	mov	dpl,r6
      000617 8F 83            [24] 1620 	mov	dph,r7
      000619 12r00r00         [24] 1621 	lcall	__divsint
      00061C AE 82            [24] 1622 	mov	r6,dpl
      00061E A9*1F            [24] 1623 	mov	r1,_CylonBounce_green_65536_87
      000620 7F 00            [12] 1624 	mov	r7,#0x00
      000622 75*00 0A         [24] 1625 	mov	__divsint_PARM_2,#0x0a
                                   1626 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000625 8F*01            [24] 1627 	mov	(__divsint_PARM_2 + 1),r7
      000627 89 82            [24] 1628 	mov	dpl,r1
      000629 8F 83            [24] 1629 	mov	dph,r7
      00062B C0 06            [24] 1630 	push	ar6
      00062D 12r00r00         [24] 1631 	lcall	__divsint
      000630 A9 82            [24] 1632 	mov	r1,dpl
      000632 A8*18            [24] 1633 	mov	r0,_CylonBounce_PARM_3
      000634 7F 00            [12] 1634 	mov	r7,#0x00
      000636 75*00 0A         [24] 1635 	mov	__divsint_PARM_2,#0x0a
                                   1636 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000639 8F*01            [24] 1637 	mov	(__divsint_PARM_2 + 1),r7
      00063B 88 82            [24] 1638 	mov	dpl,r0
      00063D 8F 83            [24] 1639 	mov	dph,r7
      00063F C0 01            [24] 1640 	push	ar1
      000641 12r00r00         [24] 1641 	lcall	__divsint
      000644 A8 82            [24] 1642 	mov	r0,dpl
      000646 D0 01            [24] 1643 	pop	ar1
      000648 D0 06            [24] 1644 	pop	ar6
      00064A 8E*02            [24] 1645 	mov	_setPixel_PARM_2,r6
      00064C 89*03            [24] 1646 	mov	_setPixel_PARM_3,r1
      00064E 88*04            [24] 1647 	mov	_setPixel_PARM_4,r0
      000650 85*21 82         [24] 1648 	mov	dpl,_CylonBounce_i_131072_89
      000653 85*22 83         [24] 1649 	mov	dph,(_CylonBounce_i_131072_89 + 1)
      000656 C0 06            [24] 1650 	push	ar6
      000658 C0 01            [24] 1651 	push	ar1
      00065A C0 00            [24] 1652 	push	ar0
      00065C 12r01rD2         [24] 1653 	lcall	_setPixel
      00065F D0 00            [24] 1654 	pop	ar0
      000661 D0 01            [24] 1655 	pop	ar1
      000663 D0 06            [24] 1656 	pop	ar6
                                   1657 ;	./src/WS2812.c:191: for (int16_t j = 1; j <= EyeSize; j++)
      000665 7D 01            [12] 1658 	mov	r5,#0x01
      000667 7F 00            [12] 1659 	mov	r7,#0x00
      000669                       1660 00110$:
      000669 C3               [12] 1661 	clr	c
      00066A E5*19            [12] 1662 	mov	a,_CylonBounce_PARM_4
      00066C 9D               [12] 1663 	subb	a,r5
      00066D E5*1A            [12] 1664 	mov	a,(_CylonBounce_PARM_4 + 1)
      00066F 64 80            [12] 1665 	xrl	a,#0x80
      000671 8F F0            [24] 1666 	mov	b,r7
      000673 63 F0 80         [24] 1667 	xrl	b,#0x80
      000676 95 F0            [12] 1668 	subb	a,b
      000678 40 3C            [24] 1669 	jc	00103$
                                   1670 ;	./src/WS2812.c:193: if (curEffect != effect) {_status=STT_NEW;return;}
      00067A E5*00            [12] 1671 	mov	a,_effect
      00067C B5*20 02         [24] 1672 	cjne	a,_CylonBounce_curEffect_65536_88,00165$
      00067F 80 04            [24] 1673 	sjmp	00102$
      000681                       1674 00165$:
      000681 75*00 12         [24] 1675 	mov	__status,#0x12
      000684 22               [24] 1676 	ret
      000685                       1677 00102$:
                                   1678 ;	./src/WS2812.c:194: setPixel(i + j, green, red, blue);
      000685 ED               [12] 1679 	mov	a,r5
      000686 25*21            [12] 1680 	add	a,_CylonBounce_i_131072_89
      000688 F5 82            [12] 1681 	mov	dpl,a
      00068A EF               [12] 1682 	mov	a,r7
      00068B 35*22            [12] 1683 	addc	a,(_CylonBounce_i_131072_89 + 1)
      00068D F5 83            [12] 1684 	mov	dph,a
      00068F 85*1F*02         [24] 1685 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_87
      000692 85*17*03         [24] 1686 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000695 85*18*04         [24] 1687 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000698 C0 07            [24] 1688 	push	ar7
      00069A C0 06            [24] 1689 	push	ar6
      00069C C0 05            [24] 1690 	push	ar5
      00069E C0 01            [24] 1691 	push	ar1
      0006A0 C0 00            [24] 1692 	push	ar0
      0006A2 12r01rD2         [24] 1693 	lcall	_setPixel
      0006A5 D0 00            [24] 1694 	pop	ar0
      0006A7 D0 01            [24] 1695 	pop	ar1
      0006A9 D0 05            [24] 1696 	pop	ar5
      0006AB D0 06            [24] 1697 	pop	ar6
      0006AD D0 07            [24] 1698 	pop	ar7
                                   1699 ;	./src/WS2812.c:191: for (int16_t j = 1; j <= EyeSize; j++)
      0006AF 0D               [12] 1700 	inc	r5
      0006B0 BD 00 B6         [24] 1701 	cjne	r5,#0x00,00110$
      0006B3 0F               [12] 1702 	inc	r7
      0006B4 80 B3            [24] 1703 	sjmp	00110$
      0006B6                       1704 00103$:
                                   1705 ;	./src/WS2812.c:196: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      0006B6 E5*19            [12] 1706 	mov	a,_CylonBounce_PARM_4
      0006B8 25*21            [12] 1707 	add	a,_CylonBounce_i_131072_89
      0006BA FD               [12] 1708 	mov	r5,a
      0006BB E5*1A            [12] 1709 	mov	a,(_CylonBounce_PARM_4 + 1)
      0006BD 35*22            [12] 1710 	addc	a,(_CylonBounce_i_131072_89 + 1)
      0006BF FF               [12] 1711 	mov	r7,a
      0006C0 0D               [12] 1712 	inc	r5
      0006C1 BD 00 01         [24] 1713 	cjne	r5,#0x00,00167$
      0006C4 0F               [12] 1714 	inc	r7
      0006C5                       1715 00167$:
      0006C5 8D 82            [24] 1716 	mov	dpl,r5
      0006C7 8F 83            [24] 1717 	mov	dph,r7
      0006C9 8E*02            [24] 1718 	mov	_setPixel_PARM_2,r6
      0006CB 89*03            [24] 1719 	mov	_setPixel_PARM_3,r1
      0006CD 88*04            [24] 1720 	mov	_setPixel_PARM_4,r0
      0006CF 12r01rD2         [24] 1721 	lcall	_setPixel
                                   1722 ;	./src/WS2812.c:197: showStrip();
      0006D2 12r01r53         [24] 1723 	lcall	_showStrip
                                   1724 ;	./src/WS2812.c:198: _delay_ms(DELAY2);
      0006D5 85*00*00         [24] 1725 	mov	__divuint_PARM_2,_NUM_LEDS
      0006D8 85*01*01         [24] 1726 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0006DB 90 00 C8         [24] 1727 	mov	dptr,#0x00c8
      0006DE 12r00r00         [24] 1728 	lcall	__divuint
      0006E1 85*00*00         [24] 1729 	mov	__mulint_PARM_2,__delay
      0006E4 85*01*01         [24] 1730 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0006E7 12r00r00         [24] 1731 	lcall	__mulint
      0006EA 75*00 64         [24] 1732 	mov	__divuint_PARM_2,#0x64
      0006ED 75*01 00         [24] 1733 	mov	(__divuint_PARM_2 + 1),#0x00
      0006F0 12r00r00         [24] 1734 	lcall	__divuint
      0006F3 E5 82            [12] 1735 	mov	a,dpl
      0006F5 85 83 F0         [24] 1736 	mov	b,dph
      0006F8 24 01            [12] 1737 	add	a,#0x01
      0006FA FE               [12] 1738 	mov	r6,a
      0006FB E4               [12] 1739 	clr	a
      0006FC 35 F0            [12] 1740 	addc	a,b
      0006FE FF               [12] 1741 	mov	r7,a
      0006FF 7D 00            [12] 1742 	mov	r5,#0x00
      000701 7C 00            [12] 1743 	mov	r4,#0x00
      000703 8E 82            [24] 1744 	mov	dpl,r6
      000705 8F 83            [24] 1745 	mov	dph,r7
      000707 8D F0            [24] 1746 	mov	b,r5
      000709 EC               [12] 1747 	mov	a,r4
      00070A 12r00r00         [24] 1748 	lcall	__delay_ms
                                   1749 ;	./src/WS2812.c:187: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      00070D 05*21            [12] 1750 	inc	_CylonBounce_i_131072_89
      00070F E4               [12] 1751 	clr	a
      000710 B5*21 02         [24] 1752 	cjne	a,_CylonBounce_i_131072_89,00168$
      000713 05*22            [12] 1753 	inc	(_CylonBounce_i_131072_89 + 1)
      000715                       1754 00168$:
      000715 02r05rDD         [24] 1755 	ljmp	00113$
      000718                       1756 00104$:
                                   1757 ;	./src/WS2812.c:201: _delay_ms(ReturnDelay);
      000718 AC*1D            [24] 1758 	mov	r4,_CylonBounce_PARM_6
      00071A E5*1E            [12] 1759 	mov	a,(_CylonBounce_PARM_6 + 1)
      00071C FD               [12] 1760 	mov	r5,a
      00071D 33               [12] 1761 	rlc	a
      00071E 95 E0            [12] 1762 	subb	a,acc
      000720 FE               [12] 1763 	mov	r6,a
      000721 FF               [12] 1764 	mov	r7,a
      000722 8C 82            [24] 1765 	mov	dpl,r4
      000724 8D 83            [24] 1766 	mov	dph,r5
      000726 8E F0            [24] 1767 	mov	b,r6
      000728 C0 07            [24] 1768 	push	ar7
      00072A C0 06            [24] 1769 	push	ar6
      00072C C0 05            [24] 1770 	push	ar5
      00072E C0 04            [24] 1771 	push	ar4
      000730 C0 03            [24] 1772 	push	ar3
      000732 C0 02            [24] 1773 	push	ar2
      000734 12r00r00         [24] 1774 	lcall	__delay_ms
      000737 D0 02            [24] 1775 	pop	ar2
      000739 D0 03            [24] 1776 	pop	ar3
      00073B D0 04            [24] 1777 	pop	ar4
      00073D D0 05            [24] 1778 	pop	ar5
      00073F D0 06            [24] 1779 	pop	ar6
      000741 D0 07            [24] 1780 	pop	ar7
                                   1781 ;	./src/WS2812.c:203: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      000743 E5*00            [12] 1782 	mov	a,_NUM_LEDS
      000745 C3               [12] 1783 	clr	c
      000746 9A               [12] 1784 	subb	a,r2
      000747 FA               [12] 1785 	mov	r2,a
      000748 E5*01            [12] 1786 	mov	a,(_NUM_LEDS + 1)
      00074A 9B               [12] 1787 	subb	a,r3
      00074B FB               [12] 1788 	mov	r3,a
      00074C EA               [12] 1789 	mov	a,r2
      00074D 24 FE            [12] 1790 	add	a,#0xfe
      00074F FA               [12] 1791 	mov	r2,a
      000750 EB               [12] 1792 	mov	a,r3
      000751 34 FF            [12] 1793 	addc	a,#0xff
      000753 FB               [12] 1794 	mov	r3,a
      000754                       1795 00119$:
      000754 8A 00            [24] 1796 	mov	ar0,r2
      000756 8B 01            [24] 1797 	mov	ar1,r3
      000758 C3               [12] 1798 	clr	c
      000759 E4               [12] 1799 	clr	a
      00075A 98               [12] 1800 	subb	a,r0
      00075B 74 80            [12] 1801 	mov	a,#(0x00 ^ 0x80)
      00075D 89 F0            [24] 1802 	mov	b,r1
      00075F 63 F0 80         [24] 1803 	xrl	b,#0x80
      000762 95 F0            [12] 1804 	subb	a,b
      000764 40 03            [24] 1805 	jc	00169$
      000766 02r09r47         [24] 1806 	ljmp	00108$
      000769                       1807 00169$:
                                   1808 ;	./src/WS2812.c:205: setAll(0, 0, 0);
      000769 C0 04            [24] 1809 	push	ar4
      00076B C0 05            [24] 1810 	push	ar5
      00076D C0 06            [24] 1811 	push	ar6
      00076F C0 07            [24] 1812 	push	ar7
      000771 75*05 00         [24] 1813 	mov	_setAll_PARM_2,#0x00
      000774 75*06 00         [24] 1814 	mov	_setAll_PARM_3,#0x00
      000777 75 82 00         [24] 1815 	mov	dpl,#0x00
      00077A C0 07            [24] 1816 	push	ar7
      00077C C0 06            [24] 1817 	push	ar6
      00077E C0 05            [24] 1818 	push	ar5
      000780 C0 04            [24] 1819 	push	ar4
      000782 C0 03            [24] 1820 	push	ar3
      000784 C0 02            [24] 1821 	push	ar2
      000786 12r02r1C         [24] 1822 	lcall	_setAll
                                   1823 ;	./src/WS2812.c:206: setPixel(i, red / 10, green / 10, blue / 10);
      000789 A8*17            [24] 1824 	mov	r0,_CylonBounce_PARM_2
      00078B 79 00            [12] 1825 	mov	r1,#0x00
      00078D 75*00 0A         [24] 1826 	mov	__divsint_PARM_2,#0x0a
                                   1827 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000790 89*01            [24] 1828 	mov	(__divsint_PARM_2 + 1),r1
      000792 88 82            [24] 1829 	mov	dpl,r0
      000794 89 83            [24] 1830 	mov	dph,r1
      000796 12r00r00         [24] 1831 	lcall	__divsint
      000799 A8 82            [24] 1832 	mov	r0,dpl
      00079B D0 02            [24] 1833 	pop	ar2
      00079D D0 03            [24] 1834 	pop	ar3
      00079F D0 04            [24] 1835 	pop	ar4
      0007A1 D0 05            [24] 1836 	pop	ar5
      0007A3 D0 06            [24] 1837 	pop	ar6
      0007A5 D0 07            [24] 1838 	pop	ar7
      0007A7 A9*1F            [24] 1839 	mov	r1,_CylonBounce_green_65536_87
      0007A9 7F 00            [12] 1840 	mov	r7,#0x00
      0007AB 75*00 0A         [24] 1841 	mov	__divsint_PARM_2,#0x0a
                                   1842 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0007AE 8F*01            [24] 1843 	mov	(__divsint_PARM_2 + 1),r7
      0007B0 89 82            [24] 1844 	mov	dpl,r1
      0007B2 8F 83            [24] 1845 	mov	dph,r7
      0007B4 C0 05            [24] 1846 	push	ar5
      0007B6 C0 04            [24] 1847 	push	ar4
      0007B8 C0 03            [24] 1848 	push	ar3
      0007BA C0 02            [24] 1849 	push	ar2
      0007BC C0 00            [24] 1850 	push	ar0
      0007BE 12r00r00         [24] 1851 	lcall	__divsint
      0007C1 AE 82            [24] 1852 	mov	r6,dpl
      0007C3 8E*25            [24] 1853 	mov	_CylonBounce_sloc0_1_0,r6
      0007C5 AE*18            [24] 1854 	mov	r6,_CylonBounce_PARM_3
      0007C7 7F 00            [12] 1855 	mov	r7,#0x00
      0007C9 75*00 0A         [24] 1856 	mov	__divsint_PARM_2,#0x0a
                                   1857 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0007CC 8F*01            [24] 1858 	mov	(__divsint_PARM_2 + 1),r7
      0007CE 8E 82            [24] 1859 	mov	dpl,r6
      0007D0 8F 83            [24] 1860 	mov	dph,r7
      0007D2 12r00r00         [24] 1861 	lcall	__divsint
      0007D5 AE 82            [24] 1862 	mov	r6,dpl
      0007D7 AF 83            [24] 1863 	mov	r7,dph
      0007D9 D0 00            [24] 1864 	pop	ar0
      0007DB D0 02            [24] 1865 	pop	ar2
      0007DD D0 03            [24] 1866 	pop	ar3
      0007DF D0 04            [24] 1867 	pop	ar4
      0007E1 D0 05            [24] 1868 	pop	ar5
      0007E3 8E*26            [24] 1869 	mov	_CylonBounce_sloc1_1_0,r6
      0007E5 88*02            [24] 1870 	mov	_setPixel_PARM_2,r0
      0007E7 85*25*03         [24] 1871 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      0007EA 85*26*04         [24] 1872 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      0007ED 8A 82            [24] 1873 	mov	dpl,r2
      0007EF 8B 83            [24] 1874 	mov	dph,r3
      0007F1 C0 07            [24] 1875 	push	ar7
      0007F3 C0 06            [24] 1876 	push	ar6
      0007F5 C0 05            [24] 1877 	push	ar5
      0007F7 C0 04            [24] 1878 	push	ar4
      0007F9 C0 03            [24] 1879 	push	ar3
      0007FB C0 02            [24] 1880 	push	ar2
      0007FD C0 00            [24] 1881 	push	ar0
      0007FF 12r01rD2         [24] 1882 	lcall	_setPixel
      000802 D0 00            [24] 1883 	pop	ar0
      000804 D0 02            [24] 1884 	pop	ar2
      000806 D0 03            [24] 1885 	pop	ar3
      000808 D0 04            [24] 1886 	pop	ar4
      00080A D0 05            [24] 1887 	pop	ar5
      00080C D0 06            [24] 1888 	pop	ar6
      00080E D0 07            [24] 1889 	pop	ar7
                                   1890 ;	./src/WS2812.c:207: for (int16_t j = 1; j <= EyeSize; j++)
      000810 75*23 01         [24] 1891 	mov	_CylonBounce_j_262144_96,#0x01
      000813 75*24 00         [24] 1892 	mov	(_CylonBounce_j_262144_96 + 1),#0x00
                                   1893 ;	./src/WS2812.c:217: _delay_ms(ReturnDelay);
      000816 D0 07            [24] 1894 	pop	ar7
      000818 D0 06            [24] 1895 	pop	ar6
      00081A D0 05            [24] 1896 	pop	ar5
      00081C D0 04            [24] 1897 	pop	ar4
                                   1898 ;	./src/WS2812.c:207: for (int16_t j = 1; j <= EyeSize; j++)
      00081E                       1899 00116$:
      00081E C3               [12] 1900 	clr	c
      00081F E5*19            [12] 1901 	mov	a,_CylonBounce_PARM_4
      000821 95*23            [12] 1902 	subb	a,_CylonBounce_j_262144_96
      000823 E5*1A            [12] 1903 	mov	a,(_CylonBounce_PARM_4 + 1)
      000825 64 80            [12] 1904 	xrl	a,#0x80
      000827 85*24 F0         [24] 1905 	mov	b,(_CylonBounce_j_262144_96 + 1)
      00082A 63 F0 80         [24] 1906 	xrl	b,#0x80
      00082D 95 F0            [12] 1907 	subb	a,b
      00082F 40 47            [24] 1908 	jc	00107$
                                   1909 ;	./src/WS2812.c:209: if (curEffect != effect) {_status=STT_NEW;return;}
      000831 E5*00            [12] 1910 	mov	a,_effect
      000833 B5*20 02         [24] 1911 	cjne	a,_CylonBounce_curEffect_65536_88,00171$
      000836 80 04            [24] 1912 	sjmp	00106$
      000838                       1913 00171$:
      000838 75*00 12         [24] 1914 	mov	__status,#0x12
      00083B 22               [24] 1915 	ret
      00083C                       1916 00106$:
                                   1917 ;	./src/WS2812.c:210: setPixel(i + j, green, red, blue);
      00083C E5*23            [12] 1918 	mov	a,_CylonBounce_j_262144_96
      00083E 2A               [12] 1919 	add	a,r2
      00083F F5 82            [12] 1920 	mov	dpl,a
      000841 E5*24            [12] 1921 	mov	a,(_CylonBounce_j_262144_96 + 1)
      000843 3B               [12] 1922 	addc	a,r3
      000844 F5 83            [12] 1923 	mov	dph,a
      000846 85*1F*02         [24] 1924 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_87
      000849 85*17*03         [24] 1925 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      00084C 85*18*04         [24] 1926 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      00084F C0 07            [24] 1927 	push	ar7
      000851 C0 06            [24] 1928 	push	ar6
      000853 C0 05            [24] 1929 	push	ar5
      000855 C0 04            [24] 1930 	push	ar4
      000857 C0 03            [24] 1931 	push	ar3
      000859 C0 02            [24] 1932 	push	ar2
      00085B C0 00            [24] 1933 	push	ar0
      00085D 12r01rD2         [24] 1934 	lcall	_setPixel
      000860 D0 00            [24] 1935 	pop	ar0
      000862 D0 02            [24] 1936 	pop	ar2
      000864 D0 03            [24] 1937 	pop	ar3
      000866 D0 04            [24] 1938 	pop	ar4
      000868 D0 05            [24] 1939 	pop	ar5
      00086A D0 06            [24] 1940 	pop	ar6
      00086C D0 07            [24] 1941 	pop	ar7
                                   1942 ;	./src/WS2812.c:207: for (int16_t j = 1; j <= EyeSize; j++)
      00086E 05*23            [12] 1943 	inc	_CylonBounce_j_262144_96
      000870 E4               [12] 1944 	clr	a
      000871 B5*23 AA         [24] 1945 	cjne	a,_CylonBounce_j_262144_96,00116$
      000874 05*24            [12] 1946 	inc	(_CylonBounce_j_262144_96 + 1)
      000876 80 A6            [24] 1947 	sjmp	00116$
      000878                       1948 00107$:
                                   1949 ;	./src/WS2812.c:212: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      000878 C0 04            [24] 1950 	push	ar4
      00087A C0 05            [24] 1951 	push	ar5
      00087C C0 06            [24] 1952 	push	ar6
      00087E C0 07            [24] 1953 	push	ar7
      000880 E5*19            [12] 1954 	mov	a,_CylonBounce_PARM_4
      000882 2A               [12] 1955 	add	a,r2
      000883 F9               [12] 1956 	mov	r1,a
      000884 E5*1A            [12] 1957 	mov	a,(_CylonBounce_PARM_4 + 1)
      000886 3B               [12] 1958 	addc	a,r3
      000887 FF               [12] 1959 	mov	r7,a
      000888 09               [12] 1960 	inc	r1
      000889 B9 00 01         [24] 1961 	cjne	r1,#0x00,00173$
      00088C 0F               [12] 1962 	inc	r7
      00088D                       1963 00173$:
      00088D 89 82            [24] 1964 	mov	dpl,r1
      00088F 8F 83            [24] 1965 	mov	dph,r7
      000891 88*02            [24] 1966 	mov	_setPixel_PARM_2,r0
      000893 85*25*03         [24] 1967 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000896 85*26*04         [24] 1968 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000899 C0 07            [24] 1969 	push	ar7
      00089B C0 06            [24] 1970 	push	ar6
      00089D C0 05            [24] 1971 	push	ar5
      00089F C0 04            [24] 1972 	push	ar4
      0008A1 C0 03            [24] 1973 	push	ar3
      0008A3 C0 02            [24] 1974 	push	ar2
      0008A5 12r01rD2         [24] 1975 	lcall	_setPixel
                                   1976 ;	./src/WS2812.c:213: showStrip();
      0008A8 12r01r53         [24] 1977 	lcall	_showStrip
                                   1978 ;	./src/WS2812.c:214: _delay_ms(DELAY2);
      0008AB 85*00*00         [24] 1979 	mov	__divuint_PARM_2,_NUM_LEDS
      0008AE 85*01*01         [24] 1980 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0008B1 90 00 C8         [24] 1981 	mov	dptr,#0x00c8
      0008B4 12r00r00         [24] 1982 	lcall	__divuint
      0008B7 D0 02            [24] 1983 	pop	ar2
      0008B9 D0 03            [24] 1984 	pop	ar3
      0008BB D0 04            [24] 1985 	pop	ar4
      0008BD D0 05            [24] 1986 	pop	ar5
      0008BF D0 06            [24] 1987 	pop	ar6
      0008C1 D0 07            [24] 1988 	pop	ar7
      0008C3 85*00*00         [24] 1989 	mov	__mulint_PARM_2,__delay
      0008C6 85*01*01         [24] 1990 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0008C9 C0 05            [24] 1991 	push	ar5
      0008CB C0 04            [24] 1992 	push	ar4
      0008CD C0 03            [24] 1993 	push	ar3
      0008CF C0 02            [24] 1994 	push	ar2
      0008D1 12r00r00         [24] 1995 	lcall	__mulint
      0008D4 AE 82            [24] 1996 	mov	r6,dpl
      0008D6 AF 83            [24] 1997 	mov	r7,dph
      0008D8 D0 02            [24] 1998 	pop	ar2
      0008DA D0 03            [24] 1999 	pop	ar3
      0008DC D0 04            [24] 2000 	pop	ar4
      0008DE D0 05            [24] 2001 	pop	ar5
      0008E0 8E 82            [24] 2002 	mov	dpl,r6
      0008E2 8F 83            [24] 2003 	mov	dph,r7
      0008E4 75*00 64         [24] 2004 	mov	__divuint_PARM_2,#0x64
      0008E7 75*01 00         [24] 2005 	mov	(__divuint_PARM_2 + 1),#0x00
      0008EA C0 07            [24] 2006 	push	ar7
      0008EC C0 06            [24] 2007 	push	ar6
      0008EE C0 05            [24] 2008 	push	ar5
      0008F0 C0 04            [24] 2009 	push	ar4
      0008F2 C0 03            [24] 2010 	push	ar3
      0008F4 C0 02            [24] 2011 	push	ar2
      0008F6 12r00r00         [24] 2012 	lcall	__divuint
      0008F9 E5 82            [12] 2013 	mov	a,dpl
      0008FB 85 83 F0         [24] 2014 	mov	b,dph
      0008FE D0 02            [24] 2015 	pop	ar2
      000900 D0 03            [24] 2016 	pop	ar3
      000902 D0 04            [24] 2017 	pop	ar4
      000904 D0 05            [24] 2018 	pop	ar5
      000906 D0 06            [24] 2019 	pop	ar6
      000908 D0 07            [24] 2020 	pop	ar7
      00090A 24 01            [12] 2021 	add	a,#0x01
      00090C FE               [12] 2022 	mov	r6,a
      00090D E4               [12] 2023 	clr	a
      00090E 35 F0            [12] 2024 	addc	a,b
      000910 FF               [12] 2025 	mov	r7,a
      000911 7D 00            [12] 2026 	mov	r5,#0x00
      000913 7C 00            [12] 2027 	mov	r4,#0x00
      000915 8E 82            [24] 2028 	mov	dpl,r6
      000917 8F 83            [24] 2029 	mov	dph,r7
      000919 8D F0            [24] 2030 	mov	b,r5
      00091B EC               [12] 2031 	mov	a,r4
      00091C C0 07            [24] 2032 	push	ar7
      00091E C0 06            [24] 2033 	push	ar6
      000920 C0 05            [24] 2034 	push	ar5
      000922 C0 04            [24] 2035 	push	ar4
      000924 C0 03            [24] 2036 	push	ar3
      000926 C0 02            [24] 2037 	push	ar2
      000928 12r00r00         [24] 2038 	lcall	__delay_ms
      00092B D0 02            [24] 2039 	pop	ar2
      00092D D0 03            [24] 2040 	pop	ar3
      00092F D0 04            [24] 2041 	pop	ar4
      000931 D0 05            [24] 2042 	pop	ar5
      000933 D0 06            [24] 2043 	pop	ar6
      000935 D0 07            [24] 2044 	pop	ar7
                                   2045 ;	./src/WS2812.c:203: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      000937 1A               [12] 2046 	dec	r2
      000938 BA FF 01         [24] 2047 	cjne	r2,#0xff,00174$
      00093B 1B               [12] 2048 	dec	r3
      00093C                       2049 00174$:
      00093C D0 07            [24] 2050 	pop	ar7
      00093E D0 06            [24] 2051 	pop	ar6
      000940 D0 05            [24] 2052 	pop	ar5
      000942 D0 04            [24] 2053 	pop	ar4
      000944 02r07r54         [24] 2054 	ljmp	00119$
      000947                       2055 00108$:
                                   2056 ;	./src/WS2812.c:217: _delay_ms(ReturnDelay);
      000947 8C 82            [24] 2057 	mov	dpl,r4
      000949 8D 83            [24] 2058 	mov	dph,r5
      00094B 8E F0            [24] 2059 	mov	b,r6
      00094D EF               [12] 2060 	mov	a,r7
                                   2061 ;	./src/WS2812.c:218: }
      00094E 02r00r00         [24] 2062 	ljmp	__delay_ms
                                   2063 ;------------------------------------------------------------
                                   2064 ;Allocation info for local variables in function 'Twinkle'
                                   2065 ;------------------------------------------------------------
                                   2066 ;red                       Allocated with name '_Twinkle_PARM_2'
                                   2067 ;blue                      Allocated with name '_Twinkle_PARM_3'
                                   2068 ;Count                     Allocated with name '_Twinkle_PARM_4'
                                   2069 ;SpeedDelay                Allocated with name '_Twinkle_PARM_5'
                                   2070 ;OnlyOne                   Allocated with name '_Twinkle_PARM_6'
                                   2071 ;green                     Allocated to registers r7 
                                   2072 ;curEffect                 Allocated to registers r6 
                                   2073 ;i                         Allocated to registers r4 r5 
                                   2074 ;------------------------------------------------------------
                                   2075 ;	./src/WS2812.c:220: void Twinkle(uint8_t green, uint8_t red, uint8_t blue, int16_t Count, int16_t SpeedDelay, uint8_t OnlyOne)
                                   2076 ;	-----------------------------------------
                                   2077 ;	 function Twinkle
                                   2078 ;	-----------------------------------------
      000951                       2079 _Twinkle:
      000951 AF 82            [24] 2080 	mov	r7,dpl
                                   2081 ;	./src/WS2812.c:222: uint8_t curEffect = effect;
      000953 AE*00            [24] 2082 	mov	r6,_effect
                                   2083 ;	./src/WS2812.c:223: setAll(0, 0, 0);
      000955 75*05 00         [24] 2084 	mov	_setAll_PARM_2,#0x00
      000958 75*06 00         [24] 2085 	mov	_setAll_PARM_3,#0x00
      00095B 75 82 00         [24] 2086 	mov	dpl,#0x00
      00095E C0 07            [24] 2087 	push	ar7
      000960 C0 06            [24] 2088 	push	ar6
      000962 12r02r1C         [24] 2089 	lcall	_setAll
      000965 D0 06            [24] 2090 	pop	ar6
      000967 D0 07            [24] 2091 	pop	ar7
                                   2092 ;	./src/WS2812.c:224: for (int16_t i = 0; i < Count; i++)
      000969 7C 00            [12] 2093 	mov	r4,#0x00
      00096B 7D 00            [12] 2094 	mov	r5,#0x00
      00096D                       2095 00107$:
      00096D C3               [12] 2096 	clr	c
      00096E EC               [12] 2097 	mov	a,r4
      00096F 95*29            [12] 2098 	subb	a,_Twinkle_PARM_4
      000971 ED               [12] 2099 	mov	a,r5
      000972 64 80            [12] 2100 	xrl	a,#0x80
      000974 85*2A F0         [24] 2101 	mov	b,(_Twinkle_PARM_4 + 1)
      000977 63 F0 80         [24] 2102 	xrl	b,#0x80
      00097A 95 F0            [12] 2103 	subb	a,b
      00097C 50 7B            [24] 2104 	jnc	00105$
                                   2105 ;	./src/WS2812.c:226: if (curEffect != effect) {_status=STT_NEW;return;}
      00097E EE               [12] 2106 	mov	a,r6
      00097F B5*00 02         [24] 2107 	cjne	a,_effect,00128$
      000982 80 04            [24] 2108 	sjmp	00102$
      000984                       2109 00128$:
      000984 75*00 12         [24] 2110 	mov	__status,#0x12
      000987 22               [24] 2111 	ret
      000988                       2112 00102$:
                                   2113 ;	./src/WS2812.c:227: setPixel(random(NUM_LEDS), green, red, blue);
      000988 85*00 82         [24] 2114 	mov	dpl,_NUM_LEDS
      00098B 85*01 83         [24] 2115 	mov	dph,(_NUM_LEDS + 1)
      00098E C0 07            [24] 2116 	push	ar7
      000990 C0 06            [24] 2117 	push	ar6
      000992 C0 05            [24] 2118 	push	ar5
      000994 C0 04            [24] 2119 	push	ar4
      000996 12r00r00         [24] 2120 	lcall	_random
      000999 D0 04            [24] 2121 	pop	ar4
      00099B D0 05            [24] 2122 	pop	ar5
      00099D D0 06            [24] 2123 	pop	ar6
      00099F D0 07            [24] 2124 	pop	ar7
      0009A1 8F*02            [24] 2125 	mov	_setPixel_PARM_2,r7
      0009A3 85*27*03         [24] 2126 	mov	_setPixel_PARM_3,_Twinkle_PARM_2
      0009A6 85*28*04         [24] 2127 	mov	_setPixel_PARM_4,_Twinkle_PARM_3
      0009A9 C0 07            [24] 2128 	push	ar7
      0009AB C0 06            [24] 2129 	push	ar6
      0009AD C0 05            [24] 2130 	push	ar5
      0009AF C0 04            [24] 2131 	push	ar4
      0009B1 12r01rD2         [24] 2132 	lcall	_setPixel
                                   2133 ;	./src/WS2812.c:228: showStrip();
      0009B4 12r01r53         [24] 2134 	lcall	_showStrip
                                   2135 ;	./src/WS2812.c:229: _delay_ms(SpeedDelay);
      0009B7 A8*2B            [24] 2136 	mov	r0,_Twinkle_PARM_5
      0009B9 E5*2C            [12] 2137 	mov	a,(_Twinkle_PARM_5 + 1)
      0009BB F9               [12] 2138 	mov	r1,a
      0009BC 33               [12] 2139 	rlc	a
      0009BD 95 E0            [12] 2140 	subb	a,acc
      0009BF FA               [12] 2141 	mov	r2,a
      0009C0 88 82            [24] 2142 	mov	dpl,r0
      0009C2 89 83            [24] 2143 	mov	dph,r1
      0009C4 8A F0            [24] 2144 	mov	b,r2
      0009C6 12r00r00         [24] 2145 	lcall	__delay_ms
      0009C9 D0 04            [24] 2146 	pop	ar4
      0009CB D0 05            [24] 2147 	pop	ar5
      0009CD D0 06            [24] 2148 	pop	ar6
      0009CF D0 07            [24] 2149 	pop	ar7
                                   2150 ;	./src/WS2812.c:230: if (OnlyOne)
      0009D1 E5*2D            [12] 2151 	mov	a,_Twinkle_PARM_6
      0009D3 60 1C            [24] 2152 	jz	00108$
                                   2153 ;	./src/WS2812.c:232: setAll(0, 0, 0);
      0009D5 75*05 00         [24] 2154 	mov	_setAll_PARM_2,#0x00
      0009D8 75*06 00         [24] 2155 	mov	_setAll_PARM_3,#0x00
      0009DB 75 82 00         [24] 2156 	mov	dpl,#0x00
      0009DE C0 07            [24] 2157 	push	ar7
      0009E0 C0 06            [24] 2158 	push	ar6
      0009E2 C0 05            [24] 2159 	push	ar5
      0009E4 C0 04            [24] 2160 	push	ar4
      0009E6 12r02r1C         [24] 2161 	lcall	_setAll
      0009E9 D0 04            [24] 2162 	pop	ar4
      0009EB D0 05            [24] 2163 	pop	ar5
      0009ED D0 06            [24] 2164 	pop	ar6
      0009EF D0 07            [24] 2165 	pop	ar7
      0009F1                       2166 00108$:
                                   2167 ;	./src/WS2812.c:224: for (int16_t i = 0; i < Count; i++)
      0009F1 0C               [12] 2168 	inc	r4
      0009F2 BC 00 01         [24] 2169 	cjne	r4,#0x00,00130$
      0009F5 0D               [12] 2170 	inc	r5
      0009F6                       2171 00130$:
      0009F6 02r09r6D         [24] 2172 	ljmp	00107$
      0009F9                       2173 00105$:
                                   2174 ;	./src/WS2812.c:236: _delay_ms(SpeedDelay);
      0009F9 AC*2B            [24] 2175 	mov	r4,_Twinkle_PARM_5
      0009FB E5*2C            [12] 2176 	mov	a,(_Twinkle_PARM_5 + 1)
      0009FD FD               [12] 2177 	mov	r5,a
      0009FE 33               [12] 2178 	rlc	a
      0009FF 95 E0            [12] 2179 	subb	a,acc
      000A01 FE               [12] 2180 	mov	r6,a
      000A02 8C 82            [24] 2181 	mov	dpl,r4
      000A04 8D 83            [24] 2182 	mov	dph,r5
      000A06 8E F0            [24] 2183 	mov	b,r6
                                   2184 ;	./src/WS2812.c:237: }
      000A08 02r00r00         [24] 2185 	ljmp	__delay_ms
                                   2186 ;------------------------------------------------------------
                                   2187 ;Allocation info for local variables in function 'TwinkleRandom'
                                   2188 ;------------------------------------------------------------
                                   2189 ;SpeedDelay                Allocated with name '_TwinkleRandom_PARM_2'
                                   2190 ;OnlyOne                   Allocated with name '_TwinkleRandom_PARM_3'
                                   2191 ;Count                     Allocated with name '_TwinkleRandom_Count_65536_105'
                                   2192 ;curEffect                 Allocated with name '_TwinkleRandom_curEffect_65536_106'
                                   2193 ;i                         Allocated to registers r3 r4 
                                   2194 ;------------------------------------------------------------
                                   2195 ;	./src/WS2812.c:239: void TwinkleRandom(int16_t Count, int16_t SpeedDelay, uint8_t OnlyOne)
                                   2196 ;	-----------------------------------------
                                   2197 ;	 function TwinkleRandom
                                   2198 ;	-----------------------------------------
      000A0B                       2199 _TwinkleRandom:
      000A0B 85 82*31         [24] 2200 	mov	_TwinkleRandom_Count_65536_105,dpl
      000A0E 85 83*32         [24] 2201 	mov	(_TwinkleRandom_Count_65536_105 + 1),dph
                                   2202 ;	./src/WS2812.c:241: uint8_t curEffect = effect;
      000A11 85*00*33         [24] 2203 	mov	_TwinkleRandom_curEffect_65536_106,_effect
                                   2204 ;	./src/WS2812.c:242: setAll(0, 0, 0);
      000A14 75*05 00         [24] 2205 	mov	_setAll_PARM_2,#0x00
      000A17 75*06 00         [24] 2206 	mov	_setAll_PARM_3,#0x00
      000A1A 75 82 00         [24] 2207 	mov	dpl,#0x00
      000A1D 12r02r1C         [24] 2208 	lcall	_setAll
                                   2209 ;	./src/WS2812.c:243: showStrip();
      000A20 12r01r53         [24] 2210 	lcall	_showStrip
                                   2211 ;	./src/WS2812.c:244: for (int16_t i = 0; i < Count; i++)
      000A23 7B 00            [12] 2212 	mov	r3,#0x00
      000A25 7C 00            [12] 2213 	mov	r4,#0x00
      000A27                       2214 00107$:
      000A27 C3               [12] 2215 	clr	c
      000A28 EB               [12] 2216 	mov	a,r3
      000A29 95*31            [12] 2217 	subb	a,_TwinkleRandom_Count_65536_105
      000A2B EC               [12] 2218 	mov	a,r4
      000A2C 64 80            [12] 2219 	xrl	a,#0x80
      000A2E 85*32 F0         [24] 2220 	mov	b,(_TwinkleRandom_Count_65536_105 + 1)
      000A31 63 F0 80         [24] 2221 	xrl	b,#0x80
      000A34 95 F0            [12] 2222 	subb	a,b
      000A36 40 03            [24] 2223 	jc	00127$
      000A38 02r0Br07         [24] 2224 	ljmp	00105$
      000A3B                       2225 00127$:
                                   2226 ;	./src/WS2812.c:246: if (curEffect != effect) {_status=STT_NEW;return;}
      000A3B E5*00            [12] 2227 	mov	a,_effect
      000A3D B5*33 02         [24] 2228 	cjne	a,_TwinkleRandom_curEffect_65536_106,00128$
      000A40 80 04            [24] 2229 	sjmp	00102$
      000A42                       2230 00128$:
      000A42 75*00 12         [24] 2231 	mov	__status,#0x12
      000A45 22               [24] 2232 	ret
      000A46                       2233 00102$:
                                   2234 ;	./src/WS2812.c:247: setPixel(random(NUM_LEDS), random(255), random(255), random(255));
      000A46 85*00 82         [24] 2235 	mov	dpl,_NUM_LEDS
      000A49 85*01 83         [24] 2236 	mov	dph,(_NUM_LEDS + 1)
      000A4C C0 04            [24] 2237 	push	ar4
      000A4E C0 03            [24] 2238 	push	ar3
      000A50 12r00r00         [24] 2239 	lcall	_random
      000A53 A9 82            [24] 2240 	mov	r1,dpl
      000A55 AA 83            [24] 2241 	mov	r2,dph
      000A57 90 00 FF         [24] 2242 	mov	dptr,#0x00ff
      000A5A C0 02            [24] 2243 	push	ar2
      000A5C C0 01            [24] 2244 	push	ar1
      000A5E 12r00r00         [24] 2245 	lcall	_random
      000A61 A8 82            [24] 2246 	mov	r0,dpl
      000A63 90 00 FF         [24] 2247 	mov	dptr,#0x00ff
      000A66 C0 00            [24] 2248 	push	ar0
      000A68 12r00r00         [24] 2249 	lcall	_random
      000A6B AD 82            [24] 2250 	mov	r5,dpl
      000A6D D0 00            [24] 2251 	pop	ar0
      000A6F D0 01            [24] 2252 	pop	ar1
      000A71 D0 02            [24] 2253 	pop	ar2
      000A73 D0 03            [24] 2254 	pop	ar3
      000A75 D0 04            [24] 2255 	pop	ar4
      000A77 90 00 FF         [24] 2256 	mov	dptr,#0x00ff
      000A7A C0 05            [24] 2257 	push	ar5
      000A7C C0 04            [24] 2258 	push	ar4
      000A7E C0 03            [24] 2259 	push	ar3
      000A80 C0 02            [24] 2260 	push	ar2
      000A82 C0 01            [24] 2261 	push	ar1
      000A84 C0 00            [24] 2262 	push	ar0
      000A86 12r00r00         [24] 2263 	lcall	_random
      000A89 AE 82            [24] 2264 	mov	r6,dpl
      000A8B D0 00            [24] 2265 	pop	ar0
      000A8D D0 01            [24] 2266 	pop	ar1
      000A8F D0 02            [24] 2267 	pop	ar2
      000A91 D0 03            [24] 2268 	pop	ar3
      000A93 D0 04            [24] 2269 	pop	ar4
      000A95 D0 05            [24] 2270 	pop	ar5
      000A97 8E*04            [24] 2271 	mov	_setPixel_PARM_4,r6
      000A99 88*02            [24] 2272 	mov	_setPixel_PARM_2,r0
      000A9B 8D*03            [24] 2273 	mov	_setPixel_PARM_3,r5
      000A9D 89 82            [24] 2274 	mov	dpl,r1
      000A9F 8A 83            [24] 2275 	mov	dph,r2
      000AA1 C0 04            [24] 2276 	push	ar4
      000AA3 C0 03            [24] 2277 	push	ar3
      000AA5 12r01rD2         [24] 2278 	lcall	_setPixel
                                   2279 ;	./src/WS2812.c:248: showStrip();
      000AA8 12r01r53         [24] 2280 	lcall	_showStrip
                                   2281 ;	./src/WS2812.c:249: _delay_ms(DELAY);
      000AAB 85*00*00         [24] 2282 	mov	__divuint_PARM_2,_NUM_LEDS
      000AAE 85*01*01         [24] 2283 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000AB1 90 00 C8         [24] 2284 	mov	dptr,#0x00c8
      000AB4 12r00r00         [24] 2285 	lcall	__divuint
      000AB7 85*00*00         [24] 2286 	mov	__mulint_PARM_2,__delay
      000ABA 85*01*01         [24] 2287 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000ABD 12r00r00         [24] 2288 	lcall	__mulint
      000AC0 75*00 0A         [24] 2289 	mov	__divuint_PARM_2,#0x0a
      000AC3 75*01 00         [24] 2290 	mov	(__divuint_PARM_2 + 1),#0x00
      000AC6 12r00r00         [24] 2291 	lcall	__divuint
      000AC9 E5 82            [12] 2292 	mov	a,dpl
      000ACB 85 83 F0         [24] 2293 	mov	b,dph
      000ACE 24 01            [12] 2294 	add	a,#0x01
      000AD0 FE               [12] 2295 	mov	r6,a
      000AD1 E4               [12] 2296 	clr	a
      000AD2 35 F0            [12] 2297 	addc	a,b
      000AD4 FF               [12] 2298 	mov	r7,a
      000AD5 7D 00            [12] 2299 	mov	r5,#0x00
      000AD7 7A 00            [12] 2300 	mov	r2,#0x00
      000AD9 8E 82            [24] 2301 	mov	dpl,r6
      000ADB 8F 83            [24] 2302 	mov	dph,r7
      000ADD 8D F0            [24] 2303 	mov	b,r5
      000ADF EA               [12] 2304 	mov	a,r2
      000AE0 12r00r00         [24] 2305 	lcall	__delay_ms
      000AE3 D0 03            [24] 2306 	pop	ar3
      000AE5 D0 04            [24] 2307 	pop	ar4
                                   2308 ;	./src/WS2812.c:250: if (OnlyOne)
      000AE7 E5*30            [12] 2309 	mov	a,_TwinkleRandom_PARM_3
      000AE9 60 14            [24] 2310 	jz	00108$
                                   2311 ;	./src/WS2812.c:252: setAll(0, 0, 0);
      000AEB 75*05 00         [24] 2312 	mov	_setAll_PARM_2,#0x00
      000AEE 75*06 00         [24] 2313 	mov	_setAll_PARM_3,#0x00
      000AF1 75 82 00         [24] 2314 	mov	dpl,#0x00
      000AF4 C0 04            [24] 2315 	push	ar4
      000AF6 C0 03            [24] 2316 	push	ar3
      000AF8 12r02r1C         [24] 2317 	lcall	_setAll
      000AFB D0 03            [24] 2318 	pop	ar3
      000AFD D0 04            [24] 2319 	pop	ar4
      000AFF                       2320 00108$:
                                   2321 ;	./src/WS2812.c:244: for (int16_t i = 0; i < Count; i++)
      000AFF 0B               [12] 2322 	inc	r3
      000B00 BB 00 01         [24] 2323 	cjne	r3,#0x00,00130$
      000B03 0C               [12] 2324 	inc	r4
      000B04                       2325 00130$:
      000B04 02r0Ar27         [24] 2326 	ljmp	00107$
      000B07                       2327 00105$:
                                   2328 ;	./src/WS2812.c:256: _delay_us(SpeedDelay);
      000B07 AC*2E            [24] 2329 	mov	r4,_TwinkleRandom_PARM_2
      000B09 E5*2F            [12] 2330 	mov	a,(_TwinkleRandom_PARM_2 + 1)
      000B0B FD               [12] 2331 	mov	r5,a
      000B0C 33               [12] 2332 	rlc	a
      000B0D 95 E0            [12] 2333 	subb	a,acc
      000B0F FE               [12] 2334 	mov	r6,a
      000B10 8C 82            [24] 2335 	mov	dpl,r4
      000B12 8D 83            [24] 2336 	mov	dph,r5
      000B14 8E F0            [24] 2337 	mov	b,r6
                                   2338 ;	./src/WS2812.c:257: }
      000B16 02r00r00         [24] 2339 	ljmp	__delay_us
                                   2340 ;------------------------------------------------------------
                                   2341 ;Allocation info for local variables in function 'Sparkle'
                                   2342 ;------------------------------------------------------------
                                   2343 ;red                       Allocated with name '_Sparkle_PARM_2'
                                   2344 ;blue                      Allocated with name '_Sparkle_PARM_3'
                                   2345 ;SpeedDelay                Allocated with name '_Sparkle_PARM_4'
                                   2346 ;green                     Allocated to registers r7 
                                   2347 ;Pixel                     Allocated to registers r5 r6 
                                   2348 ;------------------------------------------------------------
                                   2349 ;	./src/WS2812.c:259: void Sparkle(uint8_t green, uint8_t red, uint8_t blue, int16_t SpeedDelay)
                                   2350 ;	-----------------------------------------
                                   2351 ;	 function Sparkle
                                   2352 ;	-----------------------------------------
      000B19                       2353 _Sparkle:
      000B19 AF 82            [24] 2354 	mov	r7,dpl
                                   2355 ;	./src/WS2812.c:261: int16_t Pixel = random(NUM_LEDS);
      000B1B 85*00 82         [24] 2356 	mov	dpl,_NUM_LEDS
      000B1E 85*01 83         [24] 2357 	mov	dph,(_NUM_LEDS + 1)
      000B21 C0 07            [24] 2358 	push	ar7
      000B23 12r00r00         [24] 2359 	lcall	_random
      000B26 AD 82            [24] 2360 	mov	r5,dpl
      000B28 AE 83            [24] 2361 	mov	r6,dph
      000B2A D0 07            [24] 2362 	pop	ar7
                                   2363 ;	./src/WS2812.c:262: setPixel(Pixel, green, red, blue);
      000B2C 8F*02            [24] 2364 	mov	_setPixel_PARM_2,r7
      000B2E 85*34*03         [24] 2365 	mov	_setPixel_PARM_3,_Sparkle_PARM_2
      000B31 85*35*04         [24] 2366 	mov	_setPixel_PARM_4,_Sparkle_PARM_3
      000B34 8D 82            [24] 2367 	mov	dpl,r5
      000B36 8E 83            [24] 2368 	mov	dph,r6
      000B38 C0 06            [24] 2369 	push	ar6
      000B3A C0 05            [24] 2370 	push	ar5
      000B3C 12r01rD2         [24] 2371 	lcall	_setPixel
                                   2372 ;	./src/WS2812.c:263: showStrip();
      000B3F 12r01r53         [24] 2373 	lcall	_showStrip
                                   2374 ;	./src/WS2812.c:264: _delay_ms(DELAY);
      000B42 85*00*00         [24] 2375 	mov	__divuint_PARM_2,_NUM_LEDS
      000B45 85*01*01         [24] 2376 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000B48 90 00 C8         [24] 2377 	mov	dptr,#0x00c8
      000B4B 12r00r00         [24] 2378 	lcall	__divuint
      000B4E 85*00*00         [24] 2379 	mov	__mulint_PARM_2,__delay
      000B51 85*01*01         [24] 2380 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000B54 12r00r00         [24] 2381 	lcall	__mulint
      000B57 75*00 0A         [24] 2382 	mov	__divuint_PARM_2,#0x0a
      000B5A 75*01 00         [24] 2383 	mov	(__divuint_PARM_2 + 1),#0x00
      000B5D 12r00r00         [24] 2384 	lcall	__divuint
      000B60 E5 82            [12] 2385 	mov	a,dpl
      000B62 85 83 F0         [24] 2386 	mov	b,dph
      000B65 24 01            [12] 2387 	add	a,#0x01
      000B67 FC               [12] 2388 	mov	r4,a
      000B68 E4               [12] 2389 	clr	a
      000B69 35 F0            [12] 2390 	addc	a,b
      000B6B FF               [12] 2391 	mov	r7,a
      000B6C 7B 00            [12] 2392 	mov	r3,#0x00
      000B6E 7A 00            [12] 2393 	mov	r2,#0x00
      000B70 8C 82            [24] 2394 	mov	dpl,r4
      000B72 8F 83            [24] 2395 	mov	dph,r7
      000B74 8B F0            [24] 2396 	mov	b,r3
      000B76 EA               [12] 2397 	mov	a,r2
      000B77 12r00r00         [24] 2398 	lcall	__delay_ms
      000B7A D0 05            [24] 2399 	pop	ar5
      000B7C D0 06            [24] 2400 	pop	ar6
                                   2401 ;	./src/WS2812.c:265: setPixel(Pixel, 0, 0, 0);
      000B7E 75*02 00         [24] 2402 	mov	_setPixel_PARM_2,#0x00
      000B81 75*03 00         [24] 2403 	mov	_setPixel_PARM_3,#0x00
      000B84 75*04 00         [24] 2404 	mov	_setPixel_PARM_4,#0x00
      000B87 8D 82            [24] 2405 	mov	dpl,r5
      000B89 8E 83            [24] 2406 	mov	dph,r6
                                   2407 ;	./src/WS2812.c:266: }
      000B8B 02r01rD2         [24] 2408 	ljmp	_setPixel
                                   2409 ;------------------------------------------------------------
                                   2410 ;Allocation info for local variables in function 'SnowSparkle'
                                   2411 ;------------------------------------------------------------
                                   2412 ;red                       Allocated with name '_SnowSparkle_PARM_2'
                                   2413 ;blue                      Allocated with name '_SnowSparkle_PARM_3'
                                   2414 ;SparkleDelay              Allocated with name '_SnowSparkle_PARM_4'
                                   2415 ;SpeedDelay                Allocated with name '_SnowSparkle_PARM_5'
                                   2416 ;green                     Allocated to registers r7 
                                   2417 ;Pixel                     Allocated to registers r5 r6 
                                   2418 ;------------------------------------------------------------
                                   2419 ;	./src/WS2812.c:268: void SnowSparkle(uint8_t green, uint8_t red, uint8_t blue, int16_t SparkleDelay, int16_t SpeedDelay)
                                   2420 ;	-----------------------------------------
                                   2421 ;	 function SnowSparkle
                                   2422 ;	-----------------------------------------
      000B8E                       2423 _SnowSparkle:
      000B8E AF 82            [24] 2424 	mov	r7,dpl
                                   2425 ;	./src/WS2812.c:270: setAll(green, red, blue);
      000B90 85*38*05         [24] 2426 	mov	_setAll_PARM_2,_SnowSparkle_PARM_2
      000B93 85*39*06         [24] 2427 	mov	_setAll_PARM_3,_SnowSparkle_PARM_3
      000B96 8F 82            [24] 2428 	mov	dpl,r7
      000B98 C0 07            [24] 2429 	push	ar7
      000B9A 12r02r1C         [24] 2430 	lcall	_setAll
                                   2431 ;	./src/WS2812.c:272: int16_t Pixel = random(NUM_LEDS);
      000B9D 85*00 82         [24] 2432 	mov	dpl,_NUM_LEDS
      000BA0 85*01 83         [24] 2433 	mov	dph,(_NUM_LEDS + 1)
      000BA3 12r00r00         [24] 2434 	lcall	_random
      000BA6 AD 82            [24] 2435 	mov	r5,dpl
      000BA8 AE 83            [24] 2436 	mov	r6,dph
                                   2437 ;	./src/WS2812.c:273: setPixel(Pixel, 0xFF, 0xFF, 0xFF);
      000BAA 75*02 FF         [24] 2438 	mov	_setPixel_PARM_2,#0xff
      000BAD 75*03 FF         [24] 2439 	mov	_setPixel_PARM_3,#0xff
      000BB0 75*04 FF         [24] 2440 	mov	_setPixel_PARM_4,#0xff
      000BB3 8D 82            [24] 2441 	mov	dpl,r5
      000BB5 8E 83            [24] 2442 	mov	dph,r6
      000BB7 C0 06            [24] 2443 	push	ar6
      000BB9 C0 05            [24] 2444 	push	ar5
      000BBB 12r01rD2         [24] 2445 	lcall	_setPixel
                                   2446 ;	./src/WS2812.c:274: showStrip();
      000BBE 12r01r53         [24] 2447 	lcall	_showStrip
                                   2448 ;	./src/WS2812.c:275: _delay_ms(SparkleDelay);
      000BC1 A9*3A            [24] 2449 	mov	r1,_SnowSparkle_PARM_4
      000BC3 E5*3B            [12] 2450 	mov	a,(_SnowSparkle_PARM_4 + 1)
      000BC5 FA               [12] 2451 	mov	r2,a
      000BC6 33               [12] 2452 	rlc	a
      000BC7 95 E0            [12] 2453 	subb	a,acc
      000BC9 FB               [12] 2454 	mov	r3,a
      000BCA 89 82            [24] 2455 	mov	dpl,r1
      000BCC 8A 83            [24] 2456 	mov	dph,r2
      000BCE 8B F0            [24] 2457 	mov	b,r3
      000BD0 12r00r00         [24] 2458 	lcall	__delay_ms
      000BD3 D0 05            [24] 2459 	pop	ar5
      000BD5 D0 06            [24] 2460 	pop	ar6
      000BD7 D0 07            [24] 2461 	pop	ar7
                                   2462 ;	./src/WS2812.c:276: setPixel(Pixel, green, red, blue);
      000BD9 8F*02            [24] 2463 	mov	_setPixel_PARM_2,r7
      000BDB 85*38*03         [24] 2464 	mov	_setPixel_PARM_3,_SnowSparkle_PARM_2
      000BDE 85*39*04         [24] 2465 	mov	_setPixel_PARM_4,_SnowSparkle_PARM_3
      000BE1 8D 82            [24] 2466 	mov	dpl,r5
      000BE3 8E 83            [24] 2467 	mov	dph,r6
      000BE5 12r01rD2         [24] 2468 	lcall	_setPixel
                                   2469 ;	./src/WS2812.c:277: showStrip();
      000BE8 12r01r53         [24] 2470 	lcall	_showStrip
                                   2471 ;	./src/WS2812.c:278: _delay_ms(DELAY);
      000BEB 85*00*00         [24] 2472 	mov	__divuint_PARM_2,_NUM_LEDS
      000BEE 85*01*01         [24] 2473 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000BF1 90 00 C8         [24] 2474 	mov	dptr,#0x00c8
      000BF4 12r00r00         [24] 2475 	lcall	__divuint
      000BF7 85*00*00         [24] 2476 	mov	__mulint_PARM_2,__delay
      000BFA 85*01*01         [24] 2477 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000BFD 12r00r00         [24] 2478 	lcall	__mulint
      000C00 75*00 0A         [24] 2479 	mov	__divuint_PARM_2,#0x0a
      000C03 75*01 00         [24] 2480 	mov	(__divuint_PARM_2 + 1),#0x00
      000C06 12r00r00         [24] 2481 	lcall	__divuint
      000C09 E5 82            [12] 2482 	mov	a,dpl
      000C0B 85 83 F0         [24] 2483 	mov	b,dph
      000C0E 24 01            [12] 2484 	add	a,#0x01
      000C10 FE               [12] 2485 	mov	r6,a
      000C11 E4               [12] 2486 	clr	a
      000C12 35 F0            [12] 2487 	addc	a,b
      000C14 FF               [12] 2488 	mov	r7,a
      000C15 7D 00            [12] 2489 	mov	r5,#0x00
      000C17 7C 00            [12] 2490 	mov	r4,#0x00
      000C19 8E 82            [24] 2491 	mov	dpl,r6
      000C1B 8F 83            [24] 2492 	mov	dph,r7
      000C1D 8D F0            [24] 2493 	mov	b,r5
      000C1F EC               [12] 2494 	mov	a,r4
                                   2495 ;	./src/WS2812.c:279: }
      000C20 02r00r00         [24] 2496 	ljmp	__delay_ms
                                   2497 ;------------------------------------------------------------
                                   2498 ;Allocation info for local variables in function 'colorWipe'
                                   2499 ;------------------------------------------------------------
                                   2500 ;red                       Allocated with name '_colorWipe_PARM_2'
                                   2501 ;blue                      Allocated with name '_colorWipe_PARM_3'
                                   2502 ;SpeedDelay                Allocated with name '_colorWipe_PARM_4'
                                   2503 ;green                     Allocated to registers r7 
                                   2504 ;curEffect                 Allocated to registers r6 
                                   2505 ;i                         Allocated to registers r4 r5 
                                   2506 ;------------------------------------------------------------
                                   2507 ;	./src/WS2812.c:281: void colorWipe(uint8_t green, uint8_t red, uint8_t blue, int16_t SpeedDelay)
                                   2508 ;	-----------------------------------------
                                   2509 ;	 function colorWipe
                                   2510 ;	-----------------------------------------
      000C23                       2511 _colorWipe:
      000C23 AF 82            [24] 2512 	mov	r7,dpl
                                   2513 ;	./src/WS2812.c:283: uint8_t curEffect = effect;
      000C25 AE*00            [24] 2514 	mov	r6,_effect
                                   2515 ;	./src/WS2812.c:284: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000C27 7C 00            [12] 2516 	mov	r4,#0x00
      000C29 7D 00            [12] 2517 	mov	r5,#0x00
      000C2B                       2518 00105$:
      000C2B C3               [12] 2519 	clr	c
      000C2C EC               [12] 2520 	mov	a,r4
      000C2D 95*00            [12] 2521 	subb	a,_NUM_LEDS
      000C2F ED               [12] 2522 	mov	a,r5
      000C30 95*01            [12] 2523 	subb	a,(_NUM_LEDS + 1)
      000C32 40 01            [24] 2524 	jc	00121$
      000C34 22               [24] 2525 	ret
      000C35                       2526 00121$:
                                   2527 ;	./src/WS2812.c:286: if (curEffect != effect) {_status=STT_NEW;return;}
      000C35 EE               [12] 2528 	mov	a,r6
      000C36 B5*00 02         [24] 2529 	cjne	a,_effect,00122$
      000C39 80 04            [24] 2530 	sjmp	00102$
      000C3B                       2531 00122$:
      000C3B 75*00 12         [24] 2532 	mov	__status,#0x12
      000C3E 22               [24] 2533 	ret
      000C3F                       2534 00102$:
                                   2535 ;	./src/WS2812.c:287: setPixel(i, green, red, blue);
      000C3F 8F*02            [24] 2536 	mov	_setPixel_PARM_2,r7
      000C41 85*3E*03         [24] 2537 	mov	_setPixel_PARM_3,_colorWipe_PARM_2
      000C44 85*3F*04         [24] 2538 	mov	_setPixel_PARM_4,_colorWipe_PARM_3
      000C47 8C 82            [24] 2539 	mov	dpl,r4
      000C49 8D 83            [24] 2540 	mov	dph,r5
      000C4B C0 07            [24] 2541 	push	ar7
      000C4D C0 06            [24] 2542 	push	ar6
      000C4F C0 05            [24] 2543 	push	ar5
      000C51 C0 04            [24] 2544 	push	ar4
      000C53 12r01rD2         [24] 2545 	lcall	_setPixel
                                   2546 ;	./src/WS2812.c:288: showStrip();
      000C56 12r01r53         [24] 2547 	lcall	_showStrip
                                   2548 ;	./src/WS2812.c:289: _delay_ms(DELAY2+1);
      000C59 85*00*00         [24] 2549 	mov	__divuint_PARM_2,_NUM_LEDS
      000C5C 85*01*01         [24] 2550 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000C5F 90 00 C8         [24] 2551 	mov	dptr,#0x00c8
      000C62 12r00r00         [24] 2552 	lcall	__divuint
      000C65 85*00*00         [24] 2553 	mov	__mulint_PARM_2,__delay
      000C68 85*01*01         [24] 2554 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000C6B 12r00r00         [24] 2555 	lcall	__mulint
      000C6E 75*00 64         [24] 2556 	mov	__divuint_PARM_2,#0x64
      000C71 75*01 00         [24] 2557 	mov	(__divuint_PARM_2 + 1),#0x00
      000C74 12r00r00         [24] 2558 	lcall	__divuint
      000C77 E5 82            [12] 2559 	mov	a,dpl
      000C79 85 83 F0         [24] 2560 	mov	b,dph
      000C7C 24 02            [12] 2561 	add	a,#0x02
      000C7E FA               [12] 2562 	mov	r2,a
      000C7F E4               [12] 2563 	clr	a
      000C80 35 F0            [12] 2564 	addc	a,b
      000C82 FB               [12] 2565 	mov	r3,a
      000C83 8A 00            [24] 2566 	mov	ar0,r2
      000C85 8B 01            [24] 2567 	mov	ar1,r3
      000C87 7A 00            [12] 2568 	mov	r2,#0x00
      000C89 7B 00            [12] 2569 	mov	r3,#0x00
      000C8B 88 82            [24] 2570 	mov	dpl,r0
      000C8D 89 83            [24] 2571 	mov	dph,r1
      000C8F 8A F0            [24] 2572 	mov	b,r2
      000C91 EB               [12] 2573 	mov	a,r3
      000C92 12r00r00         [24] 2574 	lcall	__delay_ms
      000C95 D0 04            [24] 2575 	pop	ar4
      000C97 D0 05            [24] 2576 	pop	ar5
      000C99 D0 06            [24] 2577 	pop	ar6
      000C9B D0 07            [24] 2578 	pop	ar7
                                   2579 ;	./src/WS2812.c:284: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000C9D 0C               [12] 2580 	inc	r4
      000C9E BC 00 01         [24] 2581 	cjne	r4,#0x00,00123$
      000CA1 0D               [12] 2582 	inc	r5
      000CA2                       2583 00123$:
                                   2584 ;	./src/WS2812.c:291: }
      000CA2 02r0Cr2B         [24] 2585 	ljmp	00105$
                                   2586 ;------------------------------------------------------------
                                   2587 ;Allocation info for local variables in function 'rainbowCycle'
                                   2588 ;------------------------------------------------------------
                                   2589 ;SpeedDelay                Allocated to registers 
                                   2590 ;c                         Allocated to registers r0 r1 r2 
                                   2591 ;i                         Allocated to registers r3 r4 
                                   2592 ;j                         Allocated with name '_rainbowCycle_j_65536_122'
                                   2593 ;curEffect                 Allocated with name '_rainbowCycle_curEffect_65536_122'
                                   2594 ;------------------------------------------------------------
                                   2595 ;	./src/WS2812.c:293: void rainbowCycle(int16_t SpeedDelay)
                                   2596 ;	-----------------------------------------
                                   2597 ;	 function rainbowCycle
                                   2598 ;	-----------------------------------------
      000CA5                       2599 _rainbowCycle:
                                   2600 ;	./src/WS2812.c:297: uint8_t curEffect = effect;
      000CA5 85*00*44         [24] 2601 	mov	_rainbowCycle_curEffect_65536_122,_effect
                                   2602 ;	./src/WS2812.c:299: for (j = 0; j < 256 * 5; j++)
      000CA8 E4               [12] 2603 	clr	a
      000CA9 F5*42            [12] 2604 	mov	_rainbowCycle_j_65536_122,a
      000CAB F5*43            [12] 2605 	mov	(_rainbowCycle_j_65536_122 + 1),a
                                   2606 ;	./src/WS2812.c:301: for (i = 0; i < NUM_LEDS; i++)
      000CAD                       2607 00114$:
      000CAD 7B 00            [12] 2608 	mov	r3,#0x00
      000CAF 7C 00            [12] 2609 	mov	r4,#0x00
      000CB1                       2610 00106$:
      000CB1 C3               [12] 2611 	clr	c
      000CB2 EB               [12] 2612 	mov	a,r3
      000CB3 95*00            [12] 2613 	subb	a,_NUM_LEDS
      000CB5 EC               [12] 2614 	mov	a,r4
      000CB6 95*01            [12] 2615 	subb	a,(_NUM_LEDS + 1)
      000CB8 40 03            [24] 2616 	jc	00128$
      000CBA 02r0Dr3B         [24] 2617 	ljmp	00103$
      000CBD                       2618 00128$:
                                   2619 ;	./src/WS2812.c:303: if (curEffect != effect) {_status=STT_NEW;return;}
      000CBD E5*00            [12] 2620 	mov	a,_effect
      000CBF B5*44 02         [24] 2621 	cjne	a,_rainbowCycle_curEffect_65536_122,00129$
      000CC2 80 04            [24] 2622 	sjmp	00102$
      000CC4                       2623 00129$:
      000CC4 75*00 12         [24] 2624 	mov	__status,#0x12
      000CC7 22               [24] 2625 	ret
      000CC8                       2626 00102$:
                                   2627 ;	./src/WS2812.c:304: c = Wheel(((i * 256 / NUM_LEDS) + j) & 255);
      000CC8 8B 01            [24] 2628 	mov	ar1,r3
      000CCA 89 02            [24] 2629 	mov	ar2,r1
      000CCC 79 00            [12] 2630 	mov	r1,#0x00
      000CCE 89 82            [24] 2631 	mov	dpl,r1
      000CD0 8A 83            [24] 2632 	mov	dph,r2
      000CD2 85*00*00         [24] 2633 	mov	__divuint_PARM_2,_NUM_LEDS
      000CD5 85*01*01         [24] 2634 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000CD8 C0 04            [24] 2635 	push	ar4
      000CDA C0 03            [24] 2636 	push	ar3
      000CDC 12r00r00         [24] 2637 	lcall	__divuint
      000CDF A9 82            [24] 2638 	mov	r1,dpl
      000CE1 E5*42            [12] 2639 	mov	a,_rainbowCycle_j_65536_122
      000CE3 29               [12] 2640 	add	a,r1
      000CE4 F5 82            [12] 2641 	mov	dpl,a
      000CE6 12r0Dr8B         [24] 2642 	lcall	_Wheel
      000CE9 A8 82            [24] 2643 	mov	r0,dpl
      000CEB A9 83            [24] 2644 	mov	r1,dph
      000CED AA F0            [24] 2645 	mov	r2,b
      000CEF D0 03            [24] 2646 	pop	ar3
      000CF1 D0 04            [24] 2647 	pop	ar4
                                   2648 ;	./src/WS2812.c:305: setPixel(i, *c, *(c + 1), *(c + 2));
      000CF3 88 82            [24] 2649 	mov	dpl,r0
      000CF5 89 83            [24] 2650 	mov	dph,r1
      000CF7 8A F0            [24] 2651 	mov	b,r2
      000CF9 12r00r00         [24] 2652 	lcall	__gptrget
      000CFC F5*02            [12] 2653 	mov	_setPixel_PARM_2,a
      000CFE 74 01            [12] 2654 	mov	a,#0x01
      000D00 28               [12] 2655 	add	a,r0
      000D01 FD               [12] 2656 	mov	r5,a
      000D02 E4               [12] 2657 	clr	a
      000D03 39               [12] 2658 	addc	a,r1
      000D04 FE               [12] 2659 	mov	r6,a
      000D05 8A 07            [24] 2660 	mov	ar7,r2
      000D07 8D 82            [24] 2661 	mov	dpl,r5
      000D09 8E 83            [24] 2662 	mov	dph,r6
      000D0B 8F F0            [24] 2663 	mov	b,r7
      000D0D 12r00r00         [24] 2664 	lcall	__gptrget
      000D10 F5*03            [12] 2665 	mov	_setPixel_PARM_3,a
      000D12 74 02            [12] 2666 	mov	a,#0x02
      000D14 28               [12] 2667 	add	a,r0
      000D15 F8               [12] 2668 	mov	r0,a
      000D16 E4               [12] 2669 	clr	a
      000D17 39               [12] 2670 	addc	a,r1
      000D18 F9               [12] 2671 	mov	r1,a
      000D19 88 82            [24] 2672 	mov	dpl,r0
      000D1B 89 83            [24] 2673 	mov	dph,r1
      000D1D 8A F0            [24] 2674 	mov	b,r2
      000D1F 12r00r00         [24] 2675 	lcall	__gptrget
      000D22 F5*04            [12] 2676 	mov	_setPixel_PARM_4,a
      000D24 8B 82            [24] 2677 	mov	dpl,r3
      000D26 8C 83            [24] 2678 	mov	dph,r4
      000D28 C0 04            [24] 2679 	push	ar4
      000D2A C0 03            [24] 2680 	push	ar3
      000D2C 12r01rD2         [24] 2681 	lcall	_setPixel
      000D2F D0 03            [24] 2682 	pop	ar3
      000D31 D0 04            [24] 2683 	pop	ar4
                                   2684 ;	./src/WS2812.c:301: for (i = 0; i < NUM_LEDS; i++)
      000D33 0B               [12] 2685 	inc	r3
      000D34 BB 00 01         [24] 2686 	cjne	r3,#0x00,00130$
      000D37 0C               [12] 2687 	inc	r4
      000D38                       2688 00130$:
      000D38 02r0CrB1         [24] 2689 	ljmp	00106$
      000D3B                       2690 00103$:
                                   2691 ;	./src/WS2812.c:307: showStrip();
      000D3B 12r01r53         [24] 2692 	lcall	_showStrip
                                   2693 ;	./src/WS2812.c:308: _delay_ms(DELAY);
      000D3E 85*00*00         [24] 2694 	mov	__divuint_PARM_2,_NUM_LEDS
      000D41 85*01*01         [24] 2695 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000D44 90 00 C8         [24] 2696 	mov	dptr,#0x00c8
      000D47 12r00r00         [24] 2697 	lcall	__divuint
      000D4A 85*00*00         [24] 2698 	mov	__mulint_PARM_2,__delay
      000D4D 85*01*01         [24] 2699 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000D50 12r00r00         [24] 2700 	lcall	__mulint
      000D53 75*00 0A         [24] 2701 	mov	__divuint_PARM_2,#0x0a
      000D56 75*01 00         [24] 2702 	mov	(__divuint_PARM_2 + 1),#0x00
      000D59 12r00r00         [24] 2703 	lcall	__divuint
      000D5C E5 82            [12] 2704 	mov	a,dpl
      000D5E 85 83 F0         [24] 2705 	mov	b,dph
      000D61 24 01            [12] 2706 	add	a,#0x01
      000D63 FE               [12] 2707 	mov	r6,a
      000D64 E4               [12] 2708 	clr	a
      000D65 35 F0            [12] 2709 	addc	a,b
      000D67 FF               [12] 2710 	mov	r7,a
      000D68 7D 00            [12] 2711 	mov	r5,#0x00
      000D6A 7C 00            [12] 2712 	mov	r4,#0x00
      000D6C 8E 82            [24] 2713 	mov	dpl,r6
      000D6E 8F 83            [24] 2714 	mov	dph,r7
      000D70 8D F0            [24] 2715 	mov	b,r5
      000D72 EC               [12] 2716 	mov	a,r4
      000D73 12r00r00         [24] 2717 	lcall	__delay_ms
                                   2718 ;	./src/WS2812.c:299: for (j = 0; j < 256 * 5; j++)
      000D76 05*42            [12] 2719 	inc	_rainbowCycle_j_65536_122
      000D78 E4               [12] 2720 	clr	a
      000D79 B5*42 02         [24] 2721 	cjne	a,_rainbowCycle_j_65536_122,00131$
      000D7C 05*43            [12] 2722 	inc	(_rainbowCycle_j_65536_122 + 1)
      000D7E                       2723 00131$:
      000D7E AD*42            [24] 2724 	mov	r5,_rainbowCycle_j_65536_122
      000D80 AE*43            [24] 2725 	mov	r6,(_rainbowCycle_j_65536_122 + 1)
      000D82 74 FB            [12] 2726 	mov	a,#0x100 - 0x05
      000D84 2E               [12] 2727 	add	a,r6
      000D85 40 03            [24] 2728 	jc	00132$
      000D87 02r0CrAD         [24] 2729 	ljmp	00114$
      000D8A                       2730 00132$:
                                   2731 ;	./src/WS2812.c:310: }
      000D8A 22               [24] 2732 	ret
                                   2733 ;------------------------------------------------------------
                                   2734 ;Allocation info for local variables in function 'Wheel'
                                   2735 ;------------------------------------------------------------
                                   2736 ;c                         Allocated with name '_Wheel_c_65536_129'
                                   2737 ;WheelPos                  Allocated to registers r6 
                                   2738 ;curEffect                 Allocated to registers 
                                   2739 ;------------------------------------------------------------
                                   2740 ;	./src/WS2812.c:313: uint8_t *Wheel(uint8_t WheelPos)
                                   2741 ;	-----------------------------------------
                                   2742 ;	 function Wheel
                                   2743 ;	-----------------------------------------
      000D8B                       2744 _Wheel:
      000D8B AF 82            [24] 2745 	mov	r7,dpl
                                   2746 ;	./src/WS2812.c:318: if (WheelPos < 85)
      000D8D BF 55 00         [24] 2747 	cjne	r7,#0x55,00119$
      000D90                       2748 00119$:
      000D90 50 19            [24] 2749 	jnc	00105$
                                   2750 ;	./src/WS2812.c:320: c[0] = WheelPos * 3;
      000D92 EF               [12] 2751 	mov	a,r7
      000D93 75 F0 03         [24] 2752 	mov	b,#0x03
      000D96 A4               [48] 2753 	mul	ab
      000D97 F5*45            [12] 2754 	mov	_Wheel_c_65536_129,a
                                   2755 ;	./src/WS2812.c:321: c[1] = 255 - WheelPos * 3;
      000D99 8F 06            [24] 2756 	mov	ar6,r7
      000D9B EE               [12] 2757 	mov	a,r6
      000D9C 75 F0 03         [24] 2758 	mov	b,#0x03
      000D9F A4               [48] 2759 	mul	ab
      000DA0 D3               [12] 2760 	setb	c
      000DA1 94 FF            [12] 2761 	subb	a,#0xff
      000DA3 F4               [12] 2762 	cpl	a
      000DA4 F5*46            [12] 2763 	mov	(_Wheel_c_65536_129 + 0x0001),a
                                   2764 ;	./src/WS2812.c:322: c[2] = 0;
      000DA6 75*47 00         [24] 2765 	mov	(_Wheel_c_65536_129 + 0x0002),#0x00
      000DA9 80 3A            [24] 2766 	sjmp	00106$
      000DAB                       2767 00105$:
                                   2768 ;	./src/WS2812.c:324: else if (WheelPos < 170)
      000DAB BF AA 00         [24] 2769 	cjne	r7,#0xaa,00121$
      000DAE                       2770 00121$:
      000DAE 50 1D            [24] 2771 	jnc	00102$
                                   2772 ;	./src/WS2812.c:326: WheelPos -= 85;
      000DB0 8F 06            [24] 2773 	mov	ar6,r7
      000DB2 EE               [12] 2774 	mov	a,r6
      000DB3 24 AB            [12] 2775 	add	a,#0xab
                                   2776 ;	./src/WS2812.c:327: c[0] = 255 - WheelPos * 3;
      000DB5 FE               [12] 2777 	mov	r6,a
      000DB6 FD               [12] 2778 	mov	r5,a
      000DB7 75 F0 03         [24] 2779 	mov	b,#0x03
      000DBA A4               [48] 2780 	mul	ab
      000DBB D3               [12] 2781 	setb	c
      000DBC 94 FF            [12] 2782 	subb	a,#0xff
      000DBE F4               [12] 2783 	cpl	a
      000DBF F5*45            [12] 2784 	mov	_Wheel_c_65536_129,a
                                   2785 ;	./src/WS2812.c:328: c[1] = 0;
      000DC1 75*46 00         [24] 2786 	mov	(_Wheel_c_65536_129 + 0x0001),#0x00
                                   2787 ;	./src/WS2812.c:329: c[2] = WheelPos * 3;
      000DC4 EE               [12] 2788 	mov	a,r6
      000DC5 75 F0 03         [24] 2789 	mov	b,#0x03
      000DC8 A4               [48] 2790 	mul	ab
      000DC9 F5*47            [12] 2791 	mov	(_Wheel_c_65536_129 + 0x0002),a
      000DCB 80 18            [24] 2792 	sjmp	00106$
      000DCD                       2793 00102$:
                                   2794 ;	./src/WS2812.c:333: WheelPos -= 170;
      000DCD EF               [12] 2795 	mov	a,r7
      000DCE 24 56            [12] 2796 	add	a,#0x56
                                   2797 ;	./src/WS2812.c:334: c[0] = 0;
                                   2798 ;	./src/WS2812.c:335: c[1] = WheelPos * 3;
      000DD0 FF               [12] 2799 	mov	r7,a
      000DD1 75*45 00         [24] 2800 	mov	_Wheel_c_65536_129,#0x00
      000DD4 75 F0 03         [24] 2801 	mov	b,#0x03
      000DD7 A4               [48] 2802 	mul	ab
      000DD8 F5*46            [12] 2803 	mov	(_Wheel_c_65536_129 + 0x0001),a
                                   2804 ;	./src/WS2812.c:336: c[2] = 255 - WheelPos * 3;
      000DDA EF               [12] 2805 	mov	a,r7
      000DDB 75 F0 03         [24] 2806 	mov	b,#0x03
      000DDE A4               [48] 2807 	mul	ab
      000DDF D3               [12] 2808 	setb	c
      000DE0 94 FF            [12] 2809 	subb	a,#0xff
      000DE2 F4               [12] 2810 	cpl	a
      000DE3 F5*47            [12] 2811 	mov	(_Wheel_c_65536_129 + 0x0002),a
      000DE5                       2812 00106$:
                                   2813 ;	./src/WS2812.c:339: return c;
      000DE5 90r00r45         [24] 2814 	mov	dptr,#_Wheel_c_65536_129
      000DE8 75 F0 40         [24] 2815 	mov	b,#0x40
                                   2816 ;	./src/WS2812.c:340: }
      000DEB 22               [24] 2817 	ret
                                   2818 ;------------------------------------------------------------
                                   2819 ;Allocation info for local variables in function 'theaterChase'
                                   2820 ;------------------------------------------------------------
                                   2821 ;red                       Allocated with name '_theaterChase_PARM_2'
                                   2822 ;blue                      Allocated with name '_theaterChase_PARM_3'
                                   2823 ;SpeedDelay                Allocated with name '_theaterChase_PARM_4'
                                   2824 ;green                     Allocated to registers r7 
                                   2825 ;curEffect                 Allocated to registers r6 
                                   2826 ;j                         Allocated with name '_theaterChase_j_131072_135'
                                   2827 ;q                         Allocated to registers r2 r3 
                                   2828 ;i                         Allocated to registers r0 r1 
                                   2829 ;i                         Allocated to registers r4 r5 
                                   2830 ;------------------------------------------------------------
                                   2831 ;	./src/WS2812.c:342: void theaterChase(uint8_t green, uint8_t red, uint8_t blue, int16_t SpeedDelay)
                                   2832 ;	-----------------------------------------
                                   2833 ;	 function theaterChase
                                   2834 ;	-----------------------------------------
      000DEC                       2835 _theaterChase:
      000DEC AF 82            [24] 2836 	mov	r7,dpl
                                   2837 ;	./src/WS2812.c:344: uint8_t curEffect = effect;
      000DEE AE*00            [24] 2838 	mov	r6,_effect
                                   2839 ;	./src/WS2812.c:346: for (int16_t j = 0; j < 10; j++)
      000DF0 E4               [12] 2840 	clr	a
      000DF1 F5*4C            [12] 2841 	mov	_theaterChase_j_131072_135,a
      000DF3 F5*4D            [12] 2842 	mov	(_theaterChase_j_131072_135 + 1),a
      000DF5                       2843 00119$:
      000DF5 AA*4C            [24] 2844 	mov	r2,_theaterChase_j_131072_135
      000DF7 AB*4D            [24] 2845 	mov	r3,(_theaterChase_j_131072_135 + 1)
      000DF9 C3               [12] 2846 	clr	c
      000DFA EA               [12] 2847 	mov	a,r2
      000DFB 94 0A            [12] 2848 	subb	a,#0x0a
      000DFD EB               [12] 2849 	mov	a,r3
      000DFE 64 80            [12] 2850 	xrl	a,#0x80
      000E00 94 80            [12] 2851 	subb	a,#0x80
      000E02 40 01            [24] 2852 	jc	00163$
      000E04 22               [24] 2853 	ret
      000E05                       2854 00163$:
                                   2855 ;	./src/WS2812.c:348: for (int16_t q = 0; q < 3; q++)
      000E05 7A 00            [12] 2856 	mov	r2,#0x00
      000E07 7B 00            [12] 2857 	mov	r3,#0x00
      000E09                       2858 00116$:
      000E09 8A 00            [24] 2859 	mov	ar0,r2
      000E0B 8B 01            [24] 2860 	mov	ar1,r3
      000E0D C3               [12] 2861 	clr	c
      000E0E E8               [12] 2862 	mov	a,r0
      000E0F 94 03            [12] 2863 	subb	a,#0x03
      000E11 E9               [12] 2864 	mov	a,r1
      000E12 64 80            [12] 2865 	xrl	a,#0x80
      000E14 94 80            [12] 2866 	subb	a,#0x80
      000E16 40 03            [24] 2867 	jc	00164$
      000E18 02r0Fr21         [24] 2868 	ljmp	00120$
      000E1B                       2869 00164$:
                                   2870 ;	./src/WS2812.c:350: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000E1B 78 00            [12] 2871 	mov	r0,#0x00
      000E1D 79 00            [12] 2872 	mov	r1,#0x00
      000E1F                       2873 00110$:
      000E1F 88 04            [24] 2874 	mov	ar4,r0
      000E21 89 05            [24] 2875 	mov	ar5,r1
      000E23 C3               [12] 2876 	clr	c
      000E24 EC               [12] 2877 	mov	a,r4
      000E25 95*00            [12] 2878 	subb	a,_NUM_LEDS
      000E27 ED               [12] 2879 	mov	a,r5
      000E28 95*01            [12] 2880 	subb	a,(_NUM_LEDS + 1)
      000E2A 50 46            [24] 2881 	jnc	00103$
                                   2882 ;	./src/WS2812.c:352: if (curEffect != effect) {_status=STT_NEW;return;}
      000E2C EE               [12] 2883 	mov	a,r6
      000E2D B5*00 02         [24] 2884 	cjne	a,_effect,00166$
      000E30 80 04            [24] 2885 	sjmp	00102$
      000E32                       2886 00166$:
      000E32 75*00 12         [24] 2887 	mov	__status,#0x12
      000E35 22               [24] 2888 	ret
      000E36                       2889 00102$:
                                   2890 ;	./src/WS2812.c:353: setPixel(i + q, green, red, blue); // turn every third pixel on
      000E36 EA               [12] 2891 	mov	a,r2
      000E37 28               [12] 2892 	add	a,r0
      000E38 F5 82            [12] 2893 	mov	dpl,a
      000E3A EB               [12] 2894 	mov	a,r3
      000E3B 39               [12] 2895 	addc	a,r1
      000E3C F5 83            [12] 2896 	mov	dph,a
      000E3E 8F*02            [24] 2897 	mov	_setPixel_PARM_2,r7
      000E40 85*48*03         [24] 2898 	mov	_setPixel_PARM_3,_theaterChase_PARM_2
      000E43 85*49*04         [24] 2899 	mov	_setPixel_PARM_4,_theaterChase_PARM_3
      000E46 C0 07            [24] 2900 	push	ar7
      000E48 C0 06            [24] 2901 	push	ar6
      000E4A C0 03            [24] 2902 	push	ar3
      000E4C C0 02            [24] 2903 	push	ar2
      000E4E C0 01            [24] 2904 	push	ar1
      000E50 C0 00            [24] 2905 	push	ar0
      000E52 12r01rD2         [24] 2906 	lcall	_setPixel
      000E55 D0 00            [24] 2907 	pop	ar0
      000E57 D0 01            [24] 2908 	pop	ar1
      000E59 D0 02            [24] 2909 	pop	ar2
      000E5B D0 03            [24] 2910 	pop	ar3
      000E5D D0 06            [24] 2911 	pop	ar6
      000E5F D0 07            [24] 2912 	pop	ar7
                                   2913 ;	./src/WS2812.c:350: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000E61 88 04            [24] 2914 	mov	ar4,r0
      000E63 89 05            [24] 2915 	mov	ar5,r1
      000E65 74 03            [12] 2916 	mov	a,#0x03
      000E67 2C               [12] 2917 	add	a,r4
      000E68 FC               [12] 2918 	mov	r4,a
      000E69 E4               [12] 2919 	clr	a
      000E6A 3D               [12] 2920 	addc	a,r5
      000E6B FD               [12] 2921 	mov	r5,a
      000E6C 8C 00            [24] 2922 	mov	ar0,r4
      000E6E 8D 01            [24] 2923 	mov	ar1,r5
      000E70 80 AD            [24] 2924 	sjmp	00110$
      000E72                       2925 00103$:
                                   2926 ;	./src/WS2812.c:355: showStrip();
      000E72 C0 07            [24] 2927 	push	ar7
      000E74 C0 06            [24] 2928 	push	ar6
      000E76 C0 03            [24] 2929 	push	ar3
      000E78 C0 02            [24] 2930 	push	ar2
      000E7A 12r01r53         [24] 2931 	lcall	_showStrip
                                   2932 ;	./src/WS2812.c:357: _delay_ms(DELAY);
      000E7D 85*00*00         [24] 2933 	mov	__divuint_PARM_2,_NUM_LEDS
      000E80 85*01*01         [24] 2934 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000E83 90 00 C8         [24] 2935 	mov	dptr,#0x00c8
      000E86 12r00r00         [24] 2936 	lcall	__divuint
      000E89 85*00*00         [24] 2937 	mov	__mulint_PARM_2,__delay
      000E8C 85*01*01         [24] 2938 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000E8F 12r00r00         [24] 2939 	lcall	__mulint
      000E92 75*00 0A         [24] 2940 	mov	__divuint_PARM_2,#0x0a
      000E95 75*01 00         [24] 2941 	mov	(__divuint_PARM_2 + 1),#0x00
      000E98 12r00r00         [24] 2942 	lcall	__divuint
      000E9B E5 82            [12] 2943 	mov	a,dpl
      000E9D 85 83 F0         [24] 2944 	mov	b,dph
      000EA0 24 01            [12] 2945 	add	a,#0x01
      000EA2 FC               [12] 2946 	mov	r4,a
      000EA3 E4               [12] 2947 	clr	a
      000EA4 35 F0            [12] 2948 	addc	a,b
      000EA6 FD               [12] 2949 	mov	r5,a
      000EA7 8C 00            [24] 2950 	mov	ar0,r4
      000EA9 8D 01            [24] 2951 	mov	ar1,r5
      000EAB 7C 00            [12] 2952 	mov	r4,#0x00
      000EAD 7D 00            [12] 2953 	mov	r5,#0x00
      000EAF 88 82            [24] 2954 	mov	dpl,r0
      000EB1 89 83            [24] 2955 	mov	dph,r1
      000EB3 8C F0            [24] 2956 	mov	b,r4
      000EB5 ED               [12] 2957 	mov	a,r5
      000EB6 12r00r00         [24] 2958 	lcall	__delay_ms
      000EB9 D0 02            [24] 2959 	pop	ar2
      000EBB D0 03            [24] 2960 	pop	ar3
      000EBD D0 06            [24] 2961 	pop	ar6
      000EBF D0 07            [24] 2962 	pop	ar7
                                   2963 ;	./src/WS2812.c:359: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000EC1 7C 00            [12] 2964 	mov	r4,#0x00
      000EC3 7D 00            [12] 2965 	mov	r5,#0x00
      000EC5                       2966 00113$:
      000EC5 8C 00            [24] 2967 	mov	ar0,r4
      000EC7 8D 01            [24] 2968 	mov	ar1,r5
      000EC9 C3               [12] 2969 	clr	c
      000ECA E8               [12] 2970 	mov	a,r0
      000ECB 95*00            [12] 2971 	subb	a,_NUM_LEDS
      000ECD E9               [12] 2972 	mov	a,r1
      000ECE 95*01            [12] 2973 	subb	a,(_NUM_LEDS + 1)
      000ED0 50 47            [24] 2974 	jnc	00117$
                                   2975 ;	./src/WS2812.c:361: if (curEffect != effect) {_status=STT_NEW;return;}
      000ED2 EE               [12] 2976 	mov	a,r6
      000ED3 B5*00 02         [24] 2977 	cjne	a,_effect,00168$
      000ED6 80 04            [24] 2978 	sjmp	00105$
      000ED8                       2979 00168$:
      000ED8 75*00 12         [24] 2980 	mov	__status,#0x12
      000EDB 22               [24] 2981 	ret
      000EDC                       2982 00105$:
                                   2983 ;	./src/WS2812.c:362: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      000EDC EA               [12] 2984 	mov	a,r2
      000EDD 2C               [12] 2985 	add	a,r4
      000EDE F5 82            [12] 2986 	mov	dpl,a
      000EE0 EB               [12] 2987 	mov	a,r3
      000EE1 3D               [12] 2988 	addc	a,r5
      000EE2 F5 83            [12] 2989 	mov	dph,a
      000EE4 75*02 00         [24] 2990 	mov	_setPixel_PARM_2,#0x00
      000EE7 75*03 00         [24] 2991 	mov	_setPixel_PARM_3,#0x00
      000EEA 75*04 00         [24] 2992 	mov	_setPixel_PARM_4,#0x00
      000EED C0 07            [24] 2993 	push	ar7
      000EEF C0 06            [24] 2994 	push	ar6
      000EF1 C0 05            [24] 2995 	push	ar5
      000EF3 C0 04            [24] 2996 	push	ar4
      000EF5 C0 03            [24] 2997 	push	ar3
      000EF7 C0 02            [24] 2998 	push	ar2
      000EF9 12r01rD2         [24] 2999 	lcall	_setPixel
      000EFC D0 02            [24] 3000 	pop	ar2
      000EFE D0 03            [24] 3001 	pop	ar3
      000F00 D0 04            [24] 3002 	pop	ar4
      000F02 D0 05            [24] 3003 	pop	ar5
      000F04 D0 06            [24] 3004 	pop	ar6
      000F06 D0 07            [24] 3005 	pop	ar7
                                   3006 ;	./src/WS2812.c:359: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000F08 8C 00            [24] 3007 	mov	ar0,r4
      000F0A 8D 01            [24] 3008 	mov	ar1,r5
      000F0C 74 03            [12] 3009 	mov	a,#0x03
      000F0E 28               [12] 3010 	add	a,r0
      000F0F F8               [12] 3011 	mov	r0,a
      000F10 E4               [12] 3012 	clr	a
      000F11 39               [12] 3013 	addc	a,r1
      000F12 F9               [12] 3014 	mov	r1,a
      000F13 88 04            [24] 3015 	mov	ar4,r0
      000F15 89 05            [24] 3016 	mov	ar5,r1
      000F17 80 AC            [24] 3017 	sjmp	00113$
      000F19                       3018 00117$:
                                   3019 ;	./src/WS2812.c:348: for (int16_t q = 0; q < 3; q++)
      000F19 0A               [12] 3020 	inc	r2
      000F1A BA 00 01         [24] 3021 	cjne	r2,#0x00,00169$
      000F1D 0B               [12] 3022 	inc	r3
      000F1E                       3023 00169$:
      000F1E 02r0Er09         [24] 3024 	ljmp	00116$
      000F21                       3025 00120$:
                                   3026 ;	./src/WS2812.c:346: for (int16_t j = 0; j < 10; j++)
      000F21 05*4C            [12] 3027 	inc	_theaterChase_j_131072_135
      000F23 E4               [12] 3028 	clr	a
      000F24 B5*4C 02         [24] 3029 	cjne	a,_theaterChase_j_131072_135,00170$
      000F27 05*4D            [12] 3030 	inc	(_theaterChase_j_131072_135 + 1)
      000F29                       3031 00170$:
                                   3032 ;	./src/WS2812.c:366: }
      000F29 02r0DrF5         [24] 3033 	ljmp	00119$
                                   3034 ;------------------------------------------------------------
                                   3035 ;Allocation info for local variables in function 'theaterChaseRainbow'
                                   3036 ;------------------------------------------------------------
                                   3037 ;SpeedDelay                Allocated to registers 
                                   3038 ;c                         Allocated with name '_theaterChaseRainbow_c_65536_146'
                                   3039 ;curEffect                 Allocated with name '_theaterChaseRainbow_curEffect_65536_146'
                                   3040 ;j                         Allocated with name '_theaterChaseRainbow_j_131072_147'
                                   3041 ;q                         Allocated with name '_theaterChaseRainbow_q_262144_149'
                                   3042 ;i                         Allocated to registers r1 r2 
                                   3043 ;i                         Allocated to registers r6 r7 
                                   3044 ;------------------------------------------------------------
                                   3045 ;	./src/WS2812.c:368: void theaterChaseRainbow(int16_t SpeedDelay)
                                   3046 ;	-----------------------------------------
                                   3047 ;	 function theaterChaseRainbow
                                   3048 ;	-----------------------------------------
      000F2C                       3049 _theaterChaseRainbow:
                                   3050 ;	./src/WS2812.c:371: uint8_t curEffect = effect;
      000F2C 85*00*51         [24] 3051 	mov	_theaterChaseRainbow_curEffect_65536_146,_effect
                                   3052 ;	./src/WS2812.c:373: for (int16_t j = 0; j < 256; j++)
      000F2F E4               [12] 3053 	clr	a
      000F30 F5*52            [12] 3054 	mov	_theaterChaseRainbow_j_131072_147,a
      000F32 F5*53            [12] 3055 	mov	(_theaterChaseRainbow_j_131072_147 + 1),a
      000F34                       3056 00119$:
      000F34 AB*52            [24] 3057 	mov	r3,_theaterChaseRainbow_j_131072_147
      000F36 AC*53            [24] 3058 	mov	r4,(_theaterChaseRainbow_j_131072_147 + 1)
      000F38 C3               [12] 3059 	clr	c
      000F39 EC               [12] 3060 	mov	a,r4
      000F3A 64 80            [12] 3061 	xrl	a,#0x80
      000F3C 94 81            [12] 3062 	subb	a,#0x81
      000F3E 40 01            [24] 3063 	jc	00163$
      000F40 22               [24] 3064 	ret
      000F41                       3065 00163$:
                                   3066 ;	./src/WS2812.c:375: for (int16_t q = 0; q < 3; q++)
      000F41 E4               [12] 3067 	clr	a
      000F42 F5*54            [12] 3068 	mov	_theaterChaseRainbow_q_262144_149,a
      000F44 F5*55            [12] 3069 	mov	(_theaterChaseRainbow_q_262144_149 + 1),a
      000F46                       3070 00116$:
      000F46 A9*54            [24] 3071 	mov	r1,_theaterChaseRainbow_q_262144_149
      000F48 AA*55            [24] 3072 	mov	r2,(_theaterChaseRainbow_q_262144_149 + 1)
      000F4A C3               [12] 3073 	clr	c
      000F4B E9               [12] 3074 	mov	a,r1
      000F4C 94 03            [12] 3075 	subb	a,#0x03
      000F4E EA               [12] 3076 	mov	a,r2
      000F4F 64 80            [12] 3077 	xrl	a,#0x80
      000F51 94 80            [12] 3078 	subb	a,#0x80
      000F53 40 03            [24] 3079 	jc	00164$
      000F55 02r10r94         [24] 3080 	ljmp	00120$
      000F58                       3081 00164$:
                                   3082 ;	./src/WS2812.c:377: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000F58 79 00            [12] 3083 	mov	r1,#0x00
      000F5A 7A 00            [12] 3084 	mov	r2,#0x00
      000F5C                       3085 00110$:
      000F5C 89 00            [24] 3086 	mov	ar0,r1
      000F5E 8A 06            [24] 3087 	mov	ar6,r2
      000F60 C3               [12] 3088 	clr	c
      000F61 E8               [12] 3089 	mov	a,r0
      000F62 95*00            [12] 3090 	subb	a,_NUM_LEDS
      000F64 EE               [12] 3091 	mov	a,r6
      000F65 95*01            [12] 3092 	subb	a,(_NUM_LEDS + 1)
      000F67 40 03            [24] 3093 	jc	00165$
      000F69 02r10r03         [24] 3094 	ljmp	00103$
      000F6C                       3095 00165$:
                                   3096 ;	./src/WS2812.c:379: if (curEffect != effect) {_status=STT_NEW;return;}
      000F6C E5*00            [12] 3097 	mov	a,_effect
      000F6E B5*51 02         [24] 3098 	cjne	a,_theaterChaseRainbow_curEffect_65536_146,00166$
      000F71 80 04            [24] 3099 	sjmp	00102$
      000F73                       3100 00166$:
      000F73 75*00 12         [24] 3101 	mov	__status,#0x12
      000F76 22               [24] 3102 	ret
      000F77                       3103 00102$:
                                   3104 ;	./src/WS2812.c:380: c = Wheel((i + j) % 255);
      000F77 E5*52            [12] 3105 	mov	a,_theaterChaseRainbow_j_131072_147
      000F79 29               [12] 3106 	add	a,r1
      000F7A FD               [12] 3107 	mov	r5,a
      000F7B E5*53            [12] 3108 	mov	a,(_theaterChaseRainbow_j_131072_147 + 1)
      000F7D 3A               [12] 3109 	addc	a,r2
      000F7E FE               [12] 3110 	mov	r6,a
      000F7F 8D 82            [24] 3111 	mov	dpl,r5
      000F81 8E 83            [24] 3112 	mov	dph,r6
      000F83 75*00 FF         [24] 3113 	mov	__modsint_PARM_2,#0xff
      000F86 75*01 00         [24] 3114 	mov	(__modsint_PARM_2 + 1),#0x00
      000F89 C0 02            [24] 3115 	push	ar2
      000F8B C0 01            [24] 3116 	push	ar1
      000F8D 12r00r00         [24] 3117 	lcall	__modsint
      000F90 12r0Dr8B         [24] 3118 	lcall	_Wheel
      000F93 85 82*4E         [24] 3119 	mov	_theaterChaseRainbow_c_65536_146,dpl
      000F96 85 83*4F         [24] 3120 	mov	(_theaterChaseRainbow_c_65536_146 + 1),dph
      000F99 85 F0*50         [24] 3121 	mov	(_theaterChaseRainbow_c_65536_146 + 2),b
      000F9C D0 01            [24] 3122 	pop	ar1
      000F9E D0 02            [24] 3123 	pop	ar2
                                   3124 ;	./src/WS2812.c:381: setPixel(i + q, *c, *(c + 1), *(c + 2)); // turn every third pixel on
      000FA0 E5*54            [12] 3125 	mov	a,_theaterChaseRainbow_q_262144_149
      000FA2 29               [12] 3126 	add	a,r1
      000FA3 FC               [12] 3127 	mov	r4,a
      000FA4 E5*55            [12] 3128 	mov	a,(_theaterChaseRainbow_q_262144_149 + 1)
      000FA6 3A               [12] 3129 	addc	a,r2
      000FA7 FF               [12] 3130 	mov	r7,a
      000FA8 85*4E 82         [24] 3131 	mov	dpl,_theaterChaseRainbow_c_65536_146
      000FAB 85*4F 83         [24] 3132 	mov	dph,(_theaterChaseRainbow_c_65536_146 + 1)
      000FAE 85*50 F0         [24] 3133 	mov	b,(_theaterChaseRainbow_c_65536_146 + 2)
      000FB1 12r00r00         [24] 3134 	lcall	__gptrget
      000FB4 F5*02            [12] 3135 	mov	_setPixel_PARM_2,a
      000FB6 74 01            [12] 3136 	mov	a,#0x01
      000FB8 25*4E            [12] 3137 	add	a,_theaterChaseRainbow_c_65536_146
      000FBA FB               [12] 3138 	mov	r3,a
      000FBB E4               [12] 3139 	clr	a
      000FBC 35*4F            [12] 3140 	addc	a,(_theaterChaseRainbow_c_65536_146 + 1)
      000FBE FD               [12] 3141 	mov	r5,a
      000FBF AE*50            [24] 3142 	mov	r6,(_theaterChaseRainbow_c_65536_146 + 2)
      000FC1 8B 82            [24] 3143 	mov	dpl,r3
      000FC3 8D 83            [24] 3144 	mov	dph,r5
      000FC5 8E F0            [24] 3145 	mov	b,r6
      000FC7 12r00r00         [24] 3146 	lcall	__gptrget
      000FCA F5*03            [12] 3147 	mov	_setPixel_PARM_3,a
      000FCC 74 02            [12] 3148 	mov	a,#0x02
      000FCE 25*4E            [12] 3149 	add	a,_theaterChaseRainbow_c_65536_146
      000FD0 FB               [12] 3150 	mov	r3,a
      000FD1 E4               [12] 3151 	clr	a
      000FD2 35*4F            [12] 3152 	addc	a,(_theaterChaseRainbow_c_65536_146 + 1)
      000FD4 FD               [12] 3153 	mov	r5,a
      000FD5 AE*50            [24] 3154 	mov	r6,(_theaterChaseRainbow_c_65536_146 + 2)
      000FD7 8B 82            [24] 3155 	mov	dpl,r3
      000FD9 8D 83            [24] 3156 	mov	dph,r5
      000FDB 8E F0            [24] 3157 	mov	b,r6
      000FDD 12r00r00         [24] 3158 	lcall	__gptrget
      000FE0 F5*04            [12] 3159 	mov	_setPixel_PARM_4,a
      000FE2 8C 82            [24] 3160 	mov	dpl,r4
      000FE4 8F 83            [24] 3161 	mov	dph,r7
      000FE6 C0 02            [24] 3162 	push	ar2
      000FE8 C0 01            [24] 3163 	push	ar1
      000FEA 12r01rD2         [24] 3164 	lcall	_setPixel
      000FED D0 01            [24] 3165 	pop	ar1
      000FEF D0 02            [24] 3166 	pop	ar2
                                   3167 ;	./src/WS2812.c:377: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000FF1 89 06            [24] 3168 	mov	ar6,r1
      000FF3 8A 07            [24] 3169 	mov	ar7,r2
      000FF5 74 03            [12] 3170 	mov	a,#0x03
      000FF7 2E               [12] 3171 	add	a,r6
      000FF8 FE               [12] 3172 	mov	r6,a
      000FF9 E4               [12] 3173 	clr	a
      000FFA 3F               [12] 3174 	addc	a,r7
      000FFB FF               [12] 3175 	mov	r7,a
      000FFC 8E 01            [24] 3176 	mov	ar1,r6
      000FFE 8F 02            [24] 3177 	mov	ar2,r7
      001000 02r0Fr5C         [24] 3178 	ljmp	00110$
      001003                       3179 00103$:
                                   3180 ;	./src/WS2812.c:383: showStrip();
      001003 12r01r53         [24] 3181 	lcall	_showStrip
                                   3182 ;	./src/WS2812.c:385: _delay_ms(DELAY);
      001006 85*00*00         [24] 3183 	mov	__divuint_PARM_2,_NUM_LEDS
      001009 85*01*01         [24] 3184 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00100C 90 00 C8         [24] 3185 	mov	dptr,#0x00c8
      00100F 12r00r00         [24] 3186 	lcall	__divuint
      001012 85*00*00         [24] 3187 	mov	__mulint_PARM_2,__delay
      001015 85*01*01         [24] 3188 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      001018 12r00r00         [24] 3189 	lcall	__mulint
      00101B 75*00 0A         [24] 3190 	mov	__divuint_PARM_2,#0x0a
      00101E 75*01 00         [24] 3191 	mov	(__divuint_PARM_2 + 1),#0x00
      001021 12r00r00         [24] 3192 	lcall	__divuint
      001024 E5 82            [12] 3193 	mov	a,dpl
      001026 85 83 F0         [24] 3194 	mov	b,dph
      001029 24 01            [12] 3195 	add	a,#0x01
      00102B FE               [12] 3196 	mov	r6,a
      00102C E4               [12] 3197 	clr	a
      00102D 35 F0            [12] 3198 	addc	a,b
      00102F FF               [12] 3199 	mov	r7,a
      001030 7D 00            [12] 3200 	mov	r5,#0x00
      001032 7C 00            [12] 3201 	mov	r4,#0x00
      001034 8E 82            [24] 3202 	mov	dpl,r6
      001036 8F 83            [24] 3203 	mov	dph,r7
      001038 8D F0            [24] 3204 	mov	b,r5
      00103A EC               [12] 3205 	mov	a,r4
      00103B 12r00r00         [24] 3206 	lcall	__delay_ms
                                   3207 ;	./src/WS2812.c:387: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      00103E 7E 00            [12] 3208 	mov	r6,#0x00
      001040 7F 00            [12] 3209 	mov	r7,#0x00
      001042                       3210 00113$:
      001042 8E 04            [24] 3211 	mov	ar4,r6
      001044 8F 05            [24] 3212 	mov	ar5,r7
      001046 C3               [12] 3213 	clr	c
      001047 EC               [12] 3214 	mov	a,r4
      001048 95*00            [12] 3215 	subb	a,_NUM_LEDS
      00104A ED               [12] 3216 	mov	a,r5
      00104B 95*01            [12] 3217 	subb	a,(_NUM_LEDS + 1)
      00104D 50 3A            [24] 3218 	jnc	00117$
                                   3219 ;	./src/WS2812.c:389: if (curEffect != effect) {_status=STT_NEW;return;}
      00104F E5*00            [12] 3220 	mov	a,_effect
      001051 B5*51 02         [24] 3221 	cjne	a,_theaterChaseRainbow_curEffect_65536_146,00168$
      001054 80 04            [24] 3222 	sjmp	00105$
      001056                       3223 00168$:
      001056 75*00 12         [24] 3224 	mov	__status,#0x12
      001059 22               [24] 3225 	ret
      00105A                       3226 00105$:
                                   3227 ;	./src/WS2812.c:390: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      00105A E5*54            [12] 3228 	mov	a,_theaterChaseRainbow_q_262144_149
      00105C 2E               [12] 3229 	add	a,r6
      00105D F5 82            [12] 3230 	mov	dpl,a
      00105F E5*55            [12] 3231 	mov	a,(_theaterChaseRainbow_q_262144_149 + 1)
      001061 3F               [12] 3232 	addc	a,r7
      001062 F5 83            [12] 3233 	mov	dph,a
      001064 75*02 00         [24] 3234 	mov	_setPixel_PARM_2,#0x00
      001067 75*03 00         [24] 3235 	mov	_setPixel_PARM_3,#0x00
      00106A 75*04 00         [24] 3236 	mov	_setPixel_PARM_4,#0x00
      00106D C0 07            [24] 3237 	push	ar7
      00106F C0 06            [24] 3238 	push	ar6
      001071 12r01rD2         [24] 3239 	lcall	_setPixel
      001074 D0 06            [24] 3240 	pop	ar6
      001076 D0 07            [24] 3241 	pop	ar7
                                   3242 ;	./src/WS2812.c:387: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      001078 8E 04            [24] 3243 	mov	ar4,r6
      00107A 8F 05            [24] 3244 	mov	ar5,r7
      00107C 74 03            [12] 3245 	mov	a,#0x03
      00107E 2C               [12] 3246 	add	a,r4
      00107F FC               [12] 3247 	mov	r4,a
      001080 E4               [12] 3248 	clr	a
      001081 3D               [12] 3249 	addc	a,r5
      001082 FD               [12] 3250 	mov	r5,a
      001083 8C 06            [24] 3251 	mov	ar6,r4
      001085 8D 07            [24] 3252 	mov	ar7,r5
      001087 80 B9            [24] 3253 	sjmp	00113$
      001089                       3254 00117$:
                                   3255 ;	./src/WS2812.c:375: for (int16_t q = 0; q < 3; q++)
      001089 05*54            [12] 3256 	inc	_theaterChaseRainbow_q_262144_149
      00108B E4               [12] 3257 	clr	a
      00108C B5*54 02         [24] 3258 	cjne	a,_theaterChaseRainbow_q_262144_149,00169$
      00108F 05*55            [12] 3259 	inc	(_theaterChaseRainbow_q_262144_149 + 1)
      001091                       3260 00169$:
      001091 02r0Fr46         [24] 3261 	ljmp	00116$
      001094                       3262 00120$:
                                   3263 ;	./src/WS2812.c:373: for (int16_t j = 0; j < 256; j++)
      001094 05*52            [12] 3264 	inc	_theaterChaseRainbow_j_131072_147
      001096 E4               [12] 3265 	clr	a
      001097 B5*52 02         [24] 3266 	cjne	a,_theaterChaseRainbow_j_131072_147,00170$
      00109A 05*53            [12] 3267 	inc	(_theaterChaseRainbow_j_131072_147 + 1)
      00109C                       3268 00170$:
                                   3269 ;	./src/WS2812.c:394: }
      00109C 02r0Fr34         [24] 3270 	ljmp	00119$
                                   3271 ;------------------------------------------------------------
                                   3272 ;Allocation info for local variables in function 'Pattern3'
                                   3273 ;------------------------------------------------------------
                                   3274 ;r                         Allocated with name '_Pattern3_PARM_2'
                                   3275 ;b                         Allocated with name '_Pattern3_PARM_3'
                                   3276 ;g                         Allocated to registers r7 
                                   3277 ;i                         Allocated to registers r5 r6 
                                   3278 ;i                         Allocated to registers r6 r7 
                                   3279 ;------------------------------------------------------------
                                   3280 ;	./src/WS2812.c:398: void Pattern3(uint8_t g,uint8_t r,uint8_t b)
                                   3281 ;	-----------------------------------------
                                   3282 ;	 function Pattern3
                                   3283 ;	-----------------------------------------
      00109F                       3284 _Pattern3:
      00109F AF 82            [24] 3285 	mov	r7,dpl
                                   3286 ;	./src/WS2812.c:400: for (int i = 0; i < (NUM_LEDS / 2); i++)
      0010A1 7D 00            [12] 3287 	mov	r5,#0x00
      0010A3 7E 00            [12] 3288 	mov	r6,#0x00
      0010A5                       3289 00104$:
      0010A5 AB*00            [24] 3290 	mov	r3,_NUM_LEDS
      0010A7 E5*01            [12] 3291 	mov	a,(_NUM_LEDS + 1)
      0010A9 C3               [12] 3292 	clr	c
      0010AA 13               [12] 3293 	rrc	a
      0010AB CB               [12] 3294 	xch	a,r3
      0010AC 13               [12] 3295 	rrc	a
      0010AD CB               [12] 3296 	xch	a,r3
      0010AE FC               [12] 3297 	mov	r4,a
      0010AF 8D 01            [24] 3298 	mov	ar1,r5
      0010B1 8E 02            [24] 3299 	mov	ar2,r6
      0010B3 C3               [12] 3300 	clr	c
      0010B4 E9               [12] 3301 	mov	a,r1
      0010B5 9B               [12] 3302 	subb	a,r3
      0010B6 EA               [12] 3303 	mov	a,r2
      0010B7 9C               [12] 3304 	subb	a,r4
      0010B8 40 03            [24] 3305 	jc	00129$
      0010BA 02r11r5E         [24] 3306 	ljmp	00101$
      0010BD                       3307 00129$:
                                   3308 ;	./src/WS2812.c:402: setPixel((NUM_LEDS / 2) + i, g, r, b);
      0010BD E9               [12] 3309 	mov	a,r1
      0010BE 2B               [12] 3310 	add	a,r3
      0010BF FB               [12] 3311 	mov	r3,a
      0010C0 EA               [12] 3312 	mov	a,r2
      0010C1 3C               [12] 3313 	addc	a,r4
      0010C2 FC               [12] 3314 	mov	r4,a
      0010C3 8B 82            [24] 3315 	mov	dpl,r3
      0010C5 8C 83            [24] 3316 	mov	dph,r4
      0010C7 8F*02            [24] 3317 	mov	_setPixel_PARM_2,r7
      0010C9 85*56*03         [24] 3318 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      0010CC 85*57*04         [24] 3319 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      0010CF C0 07            [24] 3320 	push	ar7
      0010D1 C0 06            [24] 3321 	push	ar6
      0010D3 C0 05            [24] 3322 	push	ar5
      0010D5 C0 02            [24] 3323 	push	ar2
      0010D7 C0 01            [24] 3324 	push	ar1
      0010D9 12r01rD2         [24] 3325 	lcall	_setPixel
      0010DC D0 01            [24] 3326 	pop	ar1
      0010DE D0 02            [24] 3327 	pop	ar2
      0010E0 D0 05            [24] 3328 	pop	ar5
      0010E2 D0 06            [24] 3329 	pop	ar6
      0010E4 D0 07            [24] 3330 	pop	ar7
                                   3331 ;	./src/WS2812.c:403: setPixel(((NUM_LEDS / 2) - 1) - i, g, r, b);
      0010E6 AB*00            [24] 3332 	mov	r3,_NUM_LEDS
      0010E8 E5*01            [12] 3333 	mov	a,(_NUM_LEDS + 1)
      0010EA C3               [12] 3334 	clr	c
      0010EB 13               [12] 3335 	rrc	a
      0010EC CB               [12] 3336 	xch	a,r3
      0010ED 13               [12] 3337 	rrc	a
      0010EE CB               [12] 3338 	xch	a,r3
      0010EF FC               [12] 3339 	mov	r4,a
      0010F0 1B               [12] 3340 	dec	r3
      0010F1 BB FF 01         [24] 3341 	cjne	r3,#0xff,00130$
      0010F4 1C               [12] 3342 	dec	r4
      0010F5                       3343 00130$:
      0010F5 EB               [12] 3344 	mov	a,r3
      0010F6 C3               [12] 3345 	clr	c
      0010F7 99               [12] 3346 	subb	a,r1
      0010F8 F9               [12] 3347 	mov	r1,a
      0010F9 EC               [12] 3348 	mov	a,r4
      0010FA 9A               [12] 3349 	subb	a,r2
      0010FB FA               [12] 3350 	mov	r2,a
      0010FC 89 82            [24] 3351 	mov	dpl,r1
      0010FE 8A 83            [24] 3352 	mov	dph,r2
      001100 8F*02            [24] 3353 	mov	_setPixel_PARM_2,r7
      001102 85*56*03         [24] 3354 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      001105 85*57*04         [24] 3355 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      001108 C0 07            [24] 3356 	push	ar7
      00110A C0 06            [24] 3357 	push	ar6
      00110C C0 05            [24] 3358 	push	ar5
      00110E 12r01rD2         [24] 3359 	lcall	_setPixel
                                   3360 ;	./src/WS2812.c:404: showStrip();
      001111 12r01r53         [24] 3361 	lcall	_showStrip
                                   3362 ;	./src/WS2812.c:405: _delay_ms(DELAY2);
      001114 85*00*00         [24] 3363 	mov	__divuint_PARM_2,_NUM_LEDS
      001117 85*01*01         [24] 3364 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00111A 90 00 C8         [24] 3365 	mov	dptr,#0x00c8
      00111D 12r00r00         [24] 3366 	lcall	__divuint
      001120 85*00*00         [24] 3367 	mov	__mulint_PARM_2,__delay
      001123 85*01*01         [24] 3368 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      001126 12r00r00         [24] 3369 	lcall	__mulint
      001129 75*00 64         [24] 3370 	mov	__divuint_PARM_2,#0x64
      00112C 75*01 00         [24] 3371 	mov	(__divuint_PARM_2 + 1),#0x00
      00112F 12r00r00         [24] 3372 	lcall	__divuint
      001132 E5 82            [12] 3373 	mov	a,dpl
      001134 85 83 F0         [24] 3374 	mov	b,dph
      001137 24 01            [12] 3375 	add	a,#0x01
      001139 FB               [12] 3376 	mov	r3,a
      00113A E4               [12] 3377 	clr	a
      00113B 35 F0            [12] 3378 	addc	a,b
      00113D FC               [12] 3379 	mov	r4,a
      00113E 8B 01            [24] 3380 	mov	ar1,r3
      001140 8C 02            [24] 3381 	mov	ar2,r4
      001142 7B 00            [12] 3382 	mov	r3,#0x00
      001144 7C 00            [12] 3383 	mov	r4,#0x00
      001146 89 82            [24] 3384 	mov	dpl,r1
      001148 8A 83            [24] 3385 	mov	dph,r2
      00114A 8B F0            [24] 3386 	mov	b,r3
      00114C EC               [12] 3387 	mov	a,r4
      00114D 12r00r00         [24] 3388 	lcall	__delay_ms
      001150 D0 05            [24] 3389 	pop	ar5
      001152 D0 06            [24] 3390 	pop	ar6
      001154 D0 07            [24] 3391 	pop	ar7
                                   3392 ;	./src/WS2812.c:400: for (int i = 0; i < (NUM_LEDS / 2); i++)
      001156 0D               [12] 3393 	inc	r5
      001157 BD 00 01         [24] 3394 	cjne	r5,#0x00,00131$
      00115A 0E               [12] 3395 	inc	r6
      00115B                       3396 00131$:
      00115B 02r10rA5         [24] 3397 	ljmp	00104$
      00115E                       3398 00101$:
                                   3399 ;	./src/WS2812.c:407: for (int i = 0; i < (NUM_LEDS / 2); i++)
      00115E 7E 00            [12] 3400 	mov	r6,#0x00
      001160 7F 00            [12] 3401 	mov	r7,#0x00
      001162                       3402 00107$:
      001162 AC*00            [24] 3403 	mov	r4,_NUM_LEDS
      001164 E5*01            [12] 3404 	mov	a,(_NUM_LEDS + 1)
      001166 C3               [12] 3405 	clr	c
      001167 13               [12] 3406 	rrc	a
      001168 CC               [12] 3407 	xch	a,r4
      001169 13               [12] 3408 	rrc	a
      00116A CC               [12] 3409 	xch	a,r4
      00116B FD               [12] 3410 	mov	r5,a
      00116C 8E 02            [24] 3411 	mov	ar2,r6
      00116E 8F 03            [24] 3412 	mov	ar3,r7
      001170 C3               [12] 3413 	clr	c
      001171 EA               [12] 3414 	mov	a,r2
      001172 9C               [12] 3415 	subb	a,r4
      001173 EB               [12] 3416 	mov	a,r3
      001174 9D               [12] 3417 	subb	a,r5
      001175 40 03            [24] 3418 	jc	00132$
      001177 02r12r11         [24] 3419 	ljmp	00102$
      00117A                       3420 00132$:
                                   3421 ;	./src/WS2812.c:409: setPixel((NUM_LEDS / 2) + i, 0,0,0);
      00117A EA               [12] 3422 	mov	a,r2
      00117B 2C               [12] 3423 	add	a,r4
      00117C FC               [12] 3424 	mov	r4,a
      00117D EB               [12] 3425 	mov	a,r3
      00117E 3D               [12] 3426 	addc	a,r5
      00117F FD               [12] 3427 	mov	r5,a
      001180 8C 82            [24] 3428 	mov	dpl,r4
      001182 8D 83            [24] 3429 	mov	dph,r5
      001184 75*02 00         [24] 3430 	mov	_setPixel_PARM_2,#0x00
      001187 75*03 00         [24] 3431 	mov	_setPixel_PARM_3,#0x00
      00118A 75*04 00         [24] 3432 	mov	_setPixel_PARM_4,#0x00
      00118D C0 07            [24] 3433 	push	ar7
      00118F C0 06            [24] 3434 	push	ar6
      001191 C0 03            [24] 3435 	push	ar3
      001193 C0 02            [24] 3436 	push	ar2
      001195 12r01rD2         [24] 3437 	lcall	_setPixel
      001198 D0 02            [24] 3438 	pop	ar2
      00119A D0 03            [24] 3439 	pop	ar3
      00119C D0 06            [24] 3440 	pop	ar6
      00119E D0 07            [24] 3441 	pop	ar7
                                   3442 ;	./src/WS2812.c:410: setPixel(((NUM_LEDS / 2) - 1) - i,  0,0,0);
      0011A0 AC*00            [24] 3443 	mov	r4,_NUM_LEDS
      0011A2 E5*01            [12] 3444 	mov	a,(_NUM_LEDS + 1)
      0011A4 C3               [12] 3445 	clr	c
      0011A5 13               [12] 3446 	rrc	a
      0011A6 CC               [12] 3447 	xch	a,r4
      0011A7 13               [12] 3448 	rrc	a
      0011A8 CC               [12] 3449 	xch	a,r4
      0011A9 FD               [12] 3450 	mov	r5,a
      0011AA 1C               [12] 3451 	dec	r4
      0011AB BC FF 01         [24] 3452 	cjne	r4,#0xff,00133$
      0011AE 1D               [12] 3453 	dec	r5
      0011AF                       3454 00133$:
      0011AF EC               [12] 3455 	mov	a,r4
      0011B0 C3               [12] 3456 	clr	c
      0011B1 9A               [12] 3457 	subb	a,r2
      0011B2 FA               [12] 3458 	mov	r2,a
      0011B3 ED               [12] 3459 	mov	a,r5
      0011B4 9B               [12] 3460 	subb	a,r3
      0011B5 FB               [12] 3461 	mov	r3,a
      0011B6 8A 82            [24] 3462 	mov	dpl,r2
      0011B8 8B 83            [24] 3463 	mov	dph,r3
      0011BA 75*02 00         [24] 3464 	mov	_setPixel_PARM_2,#0x00
      0011BD 75*03 00         [24] 3465 	mov	_setPixel_PARM_3,#0x00
      0011C0 75*04 00         [24] 3466 	mov	_setPixel_PARM_4,#0x00
      0011C3 C0 07            [24] 3467 	push	ar7
      0011C5 C0 06            [24] 3468 	push	ar6
      0011C7 12r01rD2         [24] 3469 	lcall	_setPixel
                                   3470 ;	./src/WS2812.c:411: showStrip();
      0011CA 12r01r53         [24] 3471 	lcall	_showStrip
                                   3472 ;	./src/WS2812.c:412: _delay_ms(DELAY2);
      0011CD 85*00*00         [24] 3473 	mov	__divuint_PARM_2,_NUM_LEDS
      0011D0 85*01*01         [24] 3474 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0011D3 90 00 C8         [24] 3475 	mov	dptr,#0x00c8
      0011D6 12r00r00         [24] 3476 	lcall	__divuint
      0011D9 85*00*00         [24] 3477 	mov	__mulint_PARM_2,__delay
      0011DC 85*01*01         [24] 3478 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0011DF 12r00r00         [24] 3479 	lcall	__mulint
      0011E2 75*00 64         [24] 3480 	mov	__divuint_PARM_2,#0x64
      0011E5 75*01 00         [24] 3481 	mov	(__divuint_PARM_2 + 1),#0x00
      0011E8 12r00r00         [24] 3482 	lcall	__divuint
      0011EB E5 82            [12] 3483 	mov	a,dpl
      0011ED 85 83 F0         [24] 3484 	mov	b,dph
      0011F0 24 01            [12] 3485 	add	a,#0x01
      0011F2 FC               [12] 3486 	mov	r4,a
      0011F3 E4               [12] 3487 	clr	a
      0011F4 35 F0            [12] 3488 	addc	a,b
      0011F6 FD               [12] 3489 	mov	r5,a
      0011F7 7B 00            [12] 3490 	mov	r3,#0x00
      0011F9 7A 00            [12] 3491 	mov	r2,#0x00
      0011FB 8C 82            [24] 3492 	mov	dpl,r4
      0011FD 8D 83            [24] 3493 	mov	dph,r5
      0011FF 8B F0            [24] 3494 	mov	b,r3
      001201 EA               [12] 3495 	mov	a,r2
      001202 12r00r00         [24] 3496 	lcall	__delay_ms
      001205 D0 06            [24] 3497 	pop	ar6
      001207 D0 07            [24] 3498 	pop	ar7
                                   3499 ;	./src/WS2812.c:407: for (int i = 0; i < (NUM_LEDS / 2); i++)
      001209 0E               [12] 3500 	inc	r6
      00120A BE 00 01         [24] 3501 	cjne	r6,#0x00,00134$
      00120D 0F               [12] 3502 	inc	r7
      00120E                       3503 00134$:
      00120E 02r11r62         [24] 3504 	ljmp	00107$
      001211                       3505 00102$:
                                   3506 ;	./src/WS2812.c:414: _delay_ms(300);
      001211 90 01 2C         [24] 3507 	mov	dptr,#0x012c
      001214 E4               [12] 3508 	clr	a
      001215 F5 F0            [12] 3509 	mov	b,a
                                   3510 ;	./src/WS2812.c:415: }
      001217 02r00r00         [24] 3511 	ljmp	__delay_ms
                                   3512 	.area CSEG    (CODE)
                                   3513 	.area CONST   (CODE)
                                   3514 	.area XINIT   (CODE)
                                   3515 	.area CABS    (ABS,CODE)
