                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module WS2812
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _meteorRain_PARM_6
                                     12 	.globl _meteorRain_PARM_5
                                     13 	.globl _meteorRain_PARM_4
                                     14 	.globl _meteorRain_PARM_3
                                     15 	.globl _meteorRain_PARM_2
                                     16 	.globl _LED__SendByte_
                                     17 	.globl _LED__SendOne_
                                     18 	.globl _LED__SendZero_
                                     19 	.globl _rand
                                     20 	.globl __delay_ms
                                     21 	.globl _eiph1
                                     22 	.globl _eip1
                                     23 	.globl _pmd
                                     24 	.globl _pmen
                                     25 	.globl _pdtcnt
                                     26 	.globl _pdten
                                     27 	.globl _scon_1
                                     28 	.globl _eiph
                                     29 	.globl _aindids
                                     30 	.globl _spdr
                                     31 	.globl _spsr
                                     32 	.globl _spcr2
                                     33 	.globl _spcr
                                     34 	.globl _capcon4
                                     35 	.globl _capcon3
                                     36 	.globl _b
                                     37 	.globl _eip
                                     38 	.globl _c2h
                                     39 	.globl _c2l
                                     40 	.globl _pif
                                     41 	.globl _pipen
                                     42 	.globl _pinen
                                     43 	.globl _picon
                                     44 	.globl _adccon0
                                     45 	.globl _c1h
                                     46 	.globl _c1l
                                     47 	.globl _c0h
                                     48 	.globl _c0l
                                     49 	.globl _adcdly
                                     50 	.globl _adccon2
                                     51 	.globl _adccon1
                                     52 	.globl _acc
                                     53 	.globl _pwmcon1
                                     54 	.globl _piocon0
                                     55 	.globl _pwm3l
                                     56 	.globl _pwm2l
                                     57 	.globl _pwm1l
                                     58 	.globl _pwm0l
                                     59 	.globl _pwmpl
                                     60 	.globl _pwmcon0
                                     61 	.globl _fbd
                                     62 	.globl _pnp
                                     63 	.globl _pwm3h
                                     64 	.globl _pwm2h
                                     65 	.globl _pwm1h
                                     66 	.globl _pwm0h
                                     67 	.globl _pwmph
                                     68 	.globl _psw
                                     69 	.globl _adcmph
                                     70 	.globl _adcmpl
                                     71 	.globl _pwm5l
                                     72 	.globl _th2
                                     73 	.globl _pwm4l
                                     74 	.globl _tl2
                                     75 	.globl _rcmp2h
                                     76 	.globl _rcmp2l
                                     77 	.globl _t2mod
                                     78 	.globl _t2con
                                     79 	.globl _ta
                                     80 	.globl _piocon1
                                     81 	.globl _rh3
                                     82 	.globl _pwm5h
                                     83 	.globl _rl3
                                     84 	.globl _pwm4h
                                     85 	.globl _t3con
                                     86 	.globl _adcrh
                                     87 	.globl _adcrl
                                     88 	.globl _i2addr
                                     89 	.globl _i2con
                                     90 	.globl _i2toc
                                     91 	.globl _i2clk
                                     92 	.globl _i2stat
                                     93 	.globl _i2dat
                                     94 	.globl _saddr_1
                                     95 	.globl _saden_1
                                     96 	.globl _saden
                                     97 	.globl _ip
                                     98 	.globl _pwmintc
                                     99 	.globl _iph
                                    100 	.globl _p2s
                                    101 	.globl _p1sr
                                    102 	.globl _p1m2
                                    103 	.globl _p1s
                                    104 	.globl _p1m1
                                    105 	.globl _p0sr
                                    106 	.globl _p0m2
                                    107 	.globl _p0s
                                    108 	.globl _p0m1
                                    109 	.globl _p3
                                    110 	.globl _iapcn
                                    111 	.globl _iapfd
                                    112 	.globl _p3sr
                                    113 	.globl _p3m2
                                    114 	.globl _p3s
                                    115 	.globl _p3m1
                                    116 	.globl _bodcon1
                                    117 	.globl _wdcon
                                    118 	.globl _saddr
                                    119 	.globl _ie
                                    120 	.globl _iapah
                                    121 	.globl _iapal
                                    122 	.globl _iapuen
                                    123 	.globl _iaptrg
                                    124 	.globl _bodcon0
                                    125 	.globl _auxr1
                                    126 	.globl _p2
                                    127 	.globl _chpcon
                                    128 	.globl _eie1
                                    129 	.globl _eie
                                    130 	.globl _sbuf_1
                                    131 	.globl _sbuf
                                    132 	.globl _scon
                                    133 	.globl _cken
                                    134 	.globl _ckswt
                                    135 	.globl _ckdiv
                                    136 	.globl _capcon2
                                    137 	.globl _capcon1
                                    138 	.globl _capcon0
                                    139 	.globl _sfrs
                                    140 	.globl _p1
                                    141 	.globl _wkcon
                                    142 	.globl _ckcon
                                    143 	.globl _th1
                                    144 	.globl _th0
                                    145 	.globl _tl1
                                    146 	.globl _tl0
                                    147 	.globl _tmod
                                    148 	.globl _tcon
                                    149 	.globl _pcon
                                    150 	.globl _rwk
                                    151 	.globl _rctrim1
                                    152 	.globl _rctrim0
                                    153 	.globl _dph
                                    154 	.globl _dpl
                                    155 	.globl _sp
                                    156 	.globl _p0
                                    157 	.globl _sinWave_PARM_3
                                    158 	.globl _sinWave_PARM_2
                                    159 	.globl _fadeToBlackBy_PARM_2
                                    160 	.globl _Pattern3_PARM_4
                                    161 	.globl _Pattern3_PARM_3
                                    162 	.globl _Pattern3_PARM_2
                                    163 	.globl _theaterChase_PARM_3
                                    164 	.globl _theaterChase_PARM_2
                                    165 	.globl _colorWipe_PARM_4
                                    166 	.globl _colorWipe_PARM_3
                                    167 	.globl _colorWipe_PARM_2
                                    168 	.globl _CylonBounce_PARM_5
                                    169 	.globl _CylonBounce_PARM_4
                                    170 	.globl _CylonBounce_PARM_3
                                    171 	.globl _CylonBounce_PARM_2
                                    172 	.globl _Strobe_PARM_5
                                    173 	.globl _Strobe_PARM_4
                                    174 	.globl _Strobe_PARM_3
                                    175 	.globl _Strobe_PARM_2
                                    176 	.globl _FadeInOut_PARM_3
                                    177 	.globl _FadeInOut_PARM_2
                                    178 	.globl _setAll_PARM_3
                                    179 	.globl _setAll_PARM_2
                                    180 	.globl _setPixel_PARM_4
                                    181 	.globl _setPixel_PARM_3
                                    182 	.globl _setPixel_PARM_2
                                    183 	.globl _random2_PARM_2
                                    184 	.globl _mang
                                    185 	.globl _random
                                    186 	.globl _random2
                                    187 	.globl _clearAll
                                    188 	.globl _showStrip
                                    189 	.globl _setPixel
                                    190 	.globl _setAll
                                    191 	.globl _FadeInOut
                                    192 	.globl _Strobe
                                    193 	.globl _CylonBounce
                                    194 	.globl _colorWipe
                                    195 	.globl _rainbowCycle
                                    196 	.globl _theaterChase
                                    197 	.globl _theaterChaseRainbow
                                    198 	.globl _Pattern3
                                    199 	.globl _fadeToBlackBy
                                    200 	.globl _meteorRain
                                    201 	.globl _sinWave
                                    202 ;--------------------------------------------------------
                                    203 ; special function registers
                                    204 ;--------------------------------------------------------
                                    205 	.area RSEG    (ABS,DATA)
      000000                        206 	.org 0x0000
                           000080   207 _p0	=	0x0080
                           000081   208 _sp	=	0x0081
                           000082   209 _dpl	=	0x0082
                           000083   210 _dph	=	0x0083
                           000084   211 _rctrim0	=	0x0084
                           000085   212 _rctrim1	=	0x0085
                           000086   213 _rwk	=	0x0086
                           000087   214 _pcon	=	0x0087
                           000088   215 _tcon	=	0x0088
                           000089   216 _tmod	=	0x0089
                           00008A   217 _tl0	=	0x008a
                           00008B   218 _tl1	=	0x008b
                           00008C   219 _th0	=	0x008c
                           00008D   220 _th1	=	0x008d
                           00008E   221 _ckcon	=	0x008e
                           00008F   222 _wkcon	=	0x008f
                           000090   223 _p1	=	0x0090
                           000091   224 _sfrs	=	0x0091
                           000092   225 _capcon0	=	0x0092
                           000093   226 _capcon1	=	0x0093
                           000094   227 _capcon2	=	0x0094
                           000095   228 _ckdiv	=	0x0095
                           000096   229 _ckswt	=	0x0096
                           000097   230 _cken	=	0x0097
                           000098   231 _scon	=	0x0098
                           000099   232 _sbuf	=	0x0099
                           00009A   233 _sbuf_1	=	0x009a
                           00009B   234 _eie	=	0x009b
                           00009C   235 _eie1	=	0x009c
                           00009F   236 _chpcon	=	0x009f
                           0000A0   237 _p2	=	0x00a0
                           0000A2   238 _auxr1	=	0x00a2
                           0000A3   239 _bodcon0	=	0x00a3
                           0000A4   240 _iaptrg	=	0x00a4
                           0000A5   241 _iapuen	=	0x00a5
                           0000A6   242 _iapal	=	0x00a6
                           0000A7   243 _iapah	=	0x00a7
                           0000A8   244 _ie	=	0x00a8
                           0000A9   245 _saddr	=	0x00a9
                           0000AA   246 _wdcon	=	0x00aa
                           0000AB   247 _bodcon1	=	0x00ab
                           0000AC   248 _p3m1	=	0x00ac
                           0000AC   249 _p3s	=	0x00ac
                           0000AD   250 _p3m2	=	0x00ad
                           0000AD   251 _p3sr	=	0x00ad
                           0000AE   252 _iapfd	=	0x00ae
                           0000AF   253 _iapcn	=	0x00af
                           0000B0   254 _p3	=	0x00b0
                           0000B1   255 _p0m1	=	0x00b1
                           0000B1   256 _p0s	=	0x00b1
                           0000B2   257 _p0m2	=	0x00b2
                           0000B2   258 _p0sr	=	0x00b2
                           0000B3   259 _p1m1	=	0x00b3
                           0000B3   260 _p1s	=	0x00b3
                           0000B4   261 _p1m2	=	0x00b4
                           0000B4   262 _p1sr	=	0x00b4
                           0000B5   263 _p2s	=	0x00b5
                           0000B7   264 _iph	=	0x00b7
                           0000B7   265 _pwmintc	=	0x00b7
                           0000B8   266 _ip	=	0x00b8
                           0000B9   267 _saden	=	0x00b9
                           0000BA   268 _saden_1	=	0x00ba
                           0000BB   269 _saddr_1	=	0x00bb
                           0000BC   270 _i2dat	=	0x00bc
                           0000BD   271 _i2stat	=	0x00bd
                           0000BE   272 _i2clk	=	0x00be
                           0000BF   273 _i2toc	=	0x00bf
                           0000C0   274 _i2con	=	0x00c0
                           0000C1   275 _i2addr	=	0x00c1
                           0000C2   276 _adcrl	=	0x00c2
                           0000C3   277 _adcrh	=	0x00c3
                           0000C4   278 _t3con	=	0x00c4
                           0000C4   279 _pwm4h	=	0x00c4
                           0000C5   280 _rl3	=	0x00c5
                           0000C5   281 _pwm5h	=	0x00c5
                           0000C6   282 _rh3	=	0x00c6
                           0000C6   283 _piocon1	=	0x00c6
                           0000C7   284 _ta	=	0x00c7
                           0000C8   285 _t2con	=	0x00c8
                           0000C9   286 _t2mod	=	0x00c9
                           0000CA   287 _rcmp2l	=	0x00ca
                           0000CB   288 _rcmp2h	=	0x00cb
                           0000CC   289 _tl2	=	0x00cc
                           0000CC   290 _pwm4l	=	0x00cc
                           0000CD   291 _th2	=	0x00cd
                           0000CD   292 _pwm5l	=	0x00cd
                           0000CE   293 _adcmpl	=	0x00ce
                           0000CF   294 _adcmph	=	0x00cf
                           0000D0   295 _psw	=	0x00d0
                           0000D1   296 _pwmph	=	0x00d1
                           0000D2   297 _pwm0h	=	0x00d2
                           0000D3   298 _pwm1h	=	0x00d3
                           0000D4   299 _pwm2h	=	0x00d4
                           0000D5   300 _pwm3h	=	0x00d5
                           0000D6   301 _pnp	=	0x00d6
                           0000D7   302 _fbd	=	0x00d7
                           0000D8   303 _pwmcon0	=	0x00d8
                           0000D9   304 _pwmpl	=	0x00d9
                           0000DA   305 _pwm0l	=	0x00da
                           0000DB   306 _pwm1l	=	0x00db
                           0000DC   307 _pwm2l	=	0x00dc
                           0000DD   308 _pwm3l	=	0x00dd
                           0000DE   309 _piocon0	=	0x00de
                           0000DF   310 _pwmcon1	=	0x00df
                           0000E0   311 _acc	=	0x00e0
                           0000E1   312 _adccon1	=	0x00e1
                           0000E2   313 _adccon2	=	0x00e2
                           0000E3   314 _adcdly	=	0x00e3
                           0000E4   315 _c0l	=	0x00e4
                           0000E5   316 _c0h	=	0x00e5
                           0000E6   317 _c1l	=	0x00e6
                           0000E7   318 _c1h	=	0x00e7
                           0000E8   319 _adccon0	=	0x00e8
                           0000E9   320 _picon	=	0x00e9
                           0000EA   321 _pinen	=	0x00ea
                           0000EB   322 _pipen	=	0x00eb
                           0000EC   323 _pif	=	0x00ec
                           0000ED   324 _c2l	=	0x00ed
                           0000EE   325 _c2h	=	0x00ee
                           0000EF   326 _eip	=	0x00ef
                           0000F0   327 _b	=	0x00f0
                           0000F1   328 _capcon3	=	0x00f1
                           0000F2   329 _capcon4	=	0x00f2
                           0000F3   330 _spcr	=	0x00f3
                           0000F3   331 _spcr2	=	0x00f3
                           0000F4   332 _spsr	=	0x00f4
                           0000F5   333 _spdr	=	0x00f5
                           0000F6   334 _aindids	=	0x00f6
                           0000F7   335 _eiph	=	0x00f7
                           0000F8   336 _scon_1	=	0x00f8
                           0000F9   337 _pdten	=	0x00f9
                           0000FA   338 _pdtcnt	=	0x00fa
                           0000FB   339 _pmen	=	0x00fb
                           0000FC   340 _pmd	=	0x00fc
                           0000FE   341 _eip1	=	0x00fe
                           0000FF   342 _eiph1	=	0x00ff
                                    343 ;--------------------------------------------------------
                                    344 ; special function bits
                                    345 ;--------------------------------------------------------
                                    346 	.area RSEG    (ABS,DATA)
      000000                        347 	.org 0x0000
                                    348 ;--------------------------------------------------------
                                    349 ; overlayable register banks
                                    350 ;--------------------------------------------------------
                                    351 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        352 	.ds 8
                                    353 ;--------------------------------------------------------
                                    354 ; internal ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area DSEG    (DATA)
      000022                        357 _mang::
      000022                        358 	.ds 13
      00002F                        359 _random2_PARM_2:
      00002F                        360 	.ds 2
      000031                        361 _setPixel_PARM_2:
      000031                        362 	.ds 1
      000032                        363 _setPixel_PARM_3:
      000032                        364 	.ds 1
      000033                        365 _setPixel_PARM_4:
      000033                        366 	.ds 1
      000034                        367 _setAll_PARM_2:
      000034                        368 	.ds 1
      000035                        369 _setAll_PARM_3:
      000035                        370 	.ds 1
      000036                        371 _FadeInOut_PARM_2:
      000036                        372 	.ds 1
      000037                        373 _FadeInOut_PARM_3:
      000037                        374 	.ds 1
      000038                        375 _FadeInOut_green_65536_70:
      000038                        376 	.ds 1
      000039                        377 _FadeInOut_g_65536_71:
      000039                        378 	.ds 1
      00003A                        379 _FadeInOut_r_65536_71:
      00003A                        380 	.ds 1
      00003B                        381 _FadeInOut_curEffect_65536_71:
      00003B                        382 	.ds 1
      00003C                        383 _FadeInOut_curColor_65536_71:
      00003C                        384 	.ds 1
      00003D                        385 _FadeInOut_k_131072_75:
      00003D                        386 	.ds 2
      00003F                        387 _Strobe_PARM_2:
      00003F                        388 	.ds 1
      000040                        389 _Strobe_PARM_3:
      000040                        390 	.ds 1
      000041                        391 _Strobe_PARM_4:
      000041                        392 	.ds 2
      000043                        393 _Strobe_PARM_5:
      000043                        394 	.ds 2
      000045                        395 _Strobe_curColor_65536_79:
      000045                        396 	.ds 1
      000046                        397 _CylonBounce_PARM_2:
      000046                        398 	.ds 1
      000047                        399 _CylonBounce_PARM_3:
      000047                        400 	.ds 1
      000048                        401 _CylonBounce_PARM_4:
      000048                        402 	.ds 2
      00004A                        403 _CylonBounce_PARM_5:
      00004A                        404 	.ds 2
      00004C                        405 _CylonBounce_green_65536_83:
      00004C                        406 	.ds 1
      00004D                        407 _CylonBounce_curEffect_65536_84:
      00004D                        408 	.ds 1
      00004E                        409 _CylonBounce_curColor_65536_84:
      00004E                        410 	.ds 1
      00004F                        411 _CylonBounce_i_131072_85:
      00004F                        412 	.ds 2
      000051                        413 _CylonBounce_j_262144_92:
      000051                        414 	.ds 2
      000053                        415 _CylonBounce_sloc0_1_0:
      000053                        416 	.ds 1
      000054                        417 _CylonBounce_sloc1_1_0:
      000054                        418 	.ds 1
      000055                        419 _colorWipe_PARM_2:
      000055                        420 	.ds 1
      000056                        421 _colorWipe_PARM_3:
      000056                        422 	.ds 1
      000057                        423 _colorWipe_PARM_4:
      000057                        424 	.ds 1
      000058                        425 _colorWipe_curColor_65536_96:
      000058                        426 	.ds 1
      000059                        427 _rainbowCycle_curEffect_65536_100:
      000059                        428 	.ds 1
      00005A                        429 _rainbowCycle_curColor_65536_100:
      00005A                        430 	.ds 1
      00005B                        431 _rainbowCycle_WheelPos_65536_100:
      00005B                        432 	.ds 1
      00005C                        433 _rainbowCycle_sloc0_1_0:
      00005C                        434 	.ds 1
      00005D                        435 _theaterChase_PARM_2:
      00005D                        436 	.ds 1
      00005E                        437 _theaterChase_PARM_3:
      00005E                        438 	.ds 1
      00005F                        439 _theaterChase_green_65536_109:
      00005F                        440 	.ds 1
      000060                        441 _theaterChase_j_131072_111:
      000060                        442 	.ds 2
      000062                        443 _theaterChaseRainbow_curEffect_65536_121:
      000062                        444 	.ds 1
      000063                        445 _theaterChaseRainbow_curColor_65536_121:
      000063                        446 	.ds 1
      000064                        447 _theaterChaseRainbow_WheelPos_65536_121:
      000064                        448 	.ds 1
      000065                        449 _theaterChaseRainbow_j_131072_122:
      000065                        450 	.ds 2
      000067                        451 _theaterChaseRainbow_sloc0_1_0:
      000067                        452 	.ds 1
      000068                        453 _Pattern3_PARM_2:
      000068                        454 	.ds 1
      000069                        455 _Pattern3_PARM_3:
      000069                        456 	.ds 1
      00006A                        457 _Pattern3_PARM_4:
      00006A                        458 	.ds 1
      00006B                        459 _Pattern3_curColor_65536_136:
      00006B                        460 	.ds 1
      00006C                        461 _Pattern3_sloc0_1_0:
      00006C                        462 	.ds 2
      00006E                        463 _Pattern3_sloc1_1_0:
      00006E                        464 	.ds 2
      000070                        465 _fadeToBlackBy_PARM_2:
      000070                        466 	.ds 1
      000071                        467 _fadeToBlackBy_pixel_65536_140:
      000071                        468 	.ds 2
      000073                        469 _sinWave_PARM_2:
      000073                        470 	.ds 1
      000074                        471 _sinWave_PARM_3:
      000074                        472 	.ds 1
      000075                        473 _sinWave_green_65536_145:
      000075                        474 	.ds 1
      000076                        475 _sinWave_curEffect_65536_146:
      000076                        476 	.ds 1
      000077                        477 _sinWave_curColor_65536_146:
      000077                        478 	.ds 1
      000078                        479 _sinWave_i_262144_149:
      000078                        480 	.ds 2
      00007A                        481 _sinWave_sloc0_1_0:
      00007A                        482 	.ds 2
                                    483 ;--------------------------------------------------------
                                    484 ; overlayable items in internal ram
                                    485 ;--------------------------------------------------------
                                    486 	.area	OSEG    (OVR,DATA)
      000017                        487 _meteorRain_PARM_2:
      000017                        488 	.ds 1
      000018                        489 _meteorRain_PARM_3:
      000018                        490 	.ds 1
      000019                        491 _meteorRain_PARM_4:
      000019                        492 	.ds 1
      00001A                        493 _meteorRain_PARM_5:
      00001A                        494 	.ds 1
      00001B                        495 _meteorRain_PARM_6:
      00001B                        496 	.ds 1
                                    497 ;--------------------------------------------------------
                                    498 ; indirectly addressable internal ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area ISEG    (DATA)
                                    501 ;--------------------------------------------------------
                                    502 ; absolute internal ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area IABS    (ABS,DATA)
                                    505 	.area IABS    (ABS,DATA)
                                    506 ;--------------------------------------------------------
                                    507 ; bit data
                                    508 ;--------------------------------------------------------
                                    509 	.area BSEG    (BIT)
      000001                        510 _fadeToBlackBy_sloc0_1_0:
      000001                        511 	.ds 1
                                    512 ;--------------------------------------------------------
                                    513 ; paged external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area PSEG    (PAG,XDATA)
                                    516 ;--------------------------------------------------------
                                    517 ; external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XSEG    (XDATA)
                                    520 ;--------------------------------------------------------
                                    521 ; absolute external ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XABS    (ABS,XDATA)
                                    524 ;--------------------------------------------------------
                                    525 ; external initialized ram data
                                    526 ;--------------------------------------------------------
                                    527 	.area XISEG   (XDATA)
                                    528 	.area HOME    (CODE)
                                    529 	.area GSINIT0 (CODE)
                                    530 	.area GSINIT1 (CODE)
                                    531 	.area GSINIT2 (CODE)
                                    532 	.area GSINIT3 (CODE)
                                    533 	.area GSINIT4 (CODE)
                                    534 	.area GSINIT5 (CODE)
                                    535 	.area GSINIT  (CODE)
                                    536 	.area GSFINAL (CODE)
                                    537 	.area CSEG    (CODE)
                                    538 ;--------------------------------------------------------
                                    539 ; global & static initialisations
                                    540 ;--------------------------------------------------------
                                    541 	.area HOME    (CODE)
                                    542 	.area GSINIT  (CODE)
                                    543 	.area GSFINAL (CODE)
                                    544 	.area GSINIT  (CODE)
                                    545 ;	./src/WS2812.c:12: uint8_t mang[13] = {1, 4, 8, 20, 50, 95, 100, 95, 50, 20, 8, 4, 1};
      0000C9 75 22 01         [24]  546 	mov	_mang,#0x01
      0000CC 75 23 04         [24]  547 	mov	(_mang + 0x0001),#0x04
      0000CF 75 24 08         [24]  548 	mov	(_mang + 0x0002),#0x08
      0000D2 75 25 14         [24]  549 	mov	(_mang + 0x0003),#0x14
      0000D5 75 26 32         [24]  550 	mov	(_mang + 0x0004),#0x32
      0000D8 75 27 5F         [24]  551 	mov	(_mang + 0x0005),#0x5f
      0000DB 75 28 64         [24]  552 	mov	(_mang + 0x0006),#0x64
      0000DE 75 29 5F         [24]  553 	mov	(_mang + 0x0007),#0x5f
      0000E1 75 2A 32         [24]  554 	mov	(_mang + 0x0008),#0x32
      0000E4 75 2B 14         [24]  555 	mov	(_mang + 0x0009),#0x14
      0000E7 75 2C 08         [24]  556 	mov	(_mang + 0x000a),#0x08
      0000EA 75 2D 04         [24]  557 	mov	(_mang + 0x000b),#0x04
      0000ED 75 2E 01         [24]  558 	mov	(_mang + 0x000c),#0x01
                                    559 ;--------------------------------------------------------
                                    560 ; Home
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
                                    563 	.area HOME    (CODE)
                                    564 ;--------------------------------------------------------
                                    565 ; code
                                    566 ;--------------------------------------------------------
                                    567 	.area CSEG    (CODE)
                                    568 ;------------------------------------------------------------
                                    569 ;Allocation info for local variables in function 'random'
                                    570 ;------------------------------------------------------------
                                    571 ;howbig                    Allocated to registers r6 r7 
                                    572 ;------------------------------------------------------------
                                    573 ;	./src/WS2812.c:23: uint16_t random(uint16_t howbig)
                                    574 ;	-----------------------------------------
                                    575 ;	 function random
                                    576 ;	-----------------------------------------
      00071F                        577 _random:
                           000007   578 	ar7 = 0x07
                           000006   579 	ar6 = 0x06
                           000005   580 	ar5 = 0x05
                           000004   581 	ar4 = 0x04
                           000003   582 	ar3 = 0x03
                           000002   583 	ar2 = 0x02
                           000001   584 	ar1 = 0x01
                           000000   585 	ar0 = 0x00
      00071F AE 82            [24]  586 	mov	r6,dpl
      000721 AF 83            [24]  587 	mov	r7,dph
                                    588 ;	./src/WS2812.c:25: if (howbig == 0)
      000723 EE               [12]  589 	mov	a,r6
      000724 4F               [12]  590 	orl	a,r7
      000725 70 04            [24]  591 	jnz	00102$
                                    592 ;	./src/WS2812.c:27: return 0;
      000727 90 00 00         [24]  593 	mov	dptr,#0x0000
      00072A 22               [24]  594 	ret
      00072B                        595 00102$:
                                    596 ;	./src/WS2812.c:29: return rand() % howbig;
      00072B C0 07            [24]  597 	push	ar7
      00072D C0 06            [24]  598 	push	ar6
      00072F 12 18 85         [24]  599 	lcall	_rand
      000732 AC 82            [24]  600 	mov	r4,dpl
      000734 AD 83            [24]  601 	mov	r5,dph
      000736 D0 06            [24]  602 	pop	ar6
      000738 D0 07            [24]  603 	pop	ar7
      00073A 8C 82            [24]  604 	mov	dpl,r4
      00073C 8D 83            [24]  605 	mov	dph,r5
      00073E 8E 17            [24]  606 	mov	__moduint_PARM_2,r6
      000740 8F 18            [24]  607 	mov	(__moduint_PARM_2 + 1),r7
                                    608 ;	./src/WS2812.c:30: }
      000742 02 1A 26         [24]  609 	ljmp	__moduint
                                    610 ;------------------------------------------------------------
                                    611 ;Allocation info for local variables in function 'random2'
                                    612 ;------------------------------------------------------------
                                    613 ;howbig                    Allocated with name '_random2_PARM_2'
                                    614 ;howsmall                  Allocated to registers r6 r7 
                                    615 ;diff                      Allocated to registers 
                                    616 ;------------------------------------------------------------
                                    617 ;	./src/WS2812.c:32: uint16_t random2(uint16_t howsmall, uint16_t howbig)
                                    618 ;	-----------------------------------------
                                    619 ;	 function random2
                                    620 ;	-----------------------------------------
      000745                        621 _random2:
      000745 AE 82            [24]  622 	mov	r6,dpl
      000747 AF 83            [24]  623 	mov	r7,dph
                                    624 ;	./src/WS2812.c:34: if (howsmall >= howbig)
      000749 C3               [12]  625 	clr	c
      00074A EE               [12]  626 	mov	a,r6
      00074B 95 2F            [12]  627 	subb	a,_random2_PARM_2
      00074D EF               [12]  628 	mov	a,r7
      00074E 95 30            [12]  629 	subb	a,(_random2_PARM_2 + 1)
      000750 40 05            [24]  630 	jc	00102$
                                    631 ;	./src/WS2812.c:36: return howsmall;
      000752 8E 82            [24]  632 	mov	dpl,r6
      000754 8F 83            [24]  633 	mov	dph,r7
      000756 22               [24]  634 	ret
      000757                        635 00102$:
                                    636 ;	./src/WS2812.c:38: uint16_t diff = howbig - howsmall;
      000757 E5 2F            [12]  637 	mov	a,_random2_PARM_2
      000759 C3               [12]  638 	clr	c
      00075A 9E               [12]  639 	subb	a,r6
      00075B F5 82            [12]  640 	mov	dpl,a
      00075D E5 30            [12]  641 	mov	a,(_random2_PARM_2 + 1)
      00075F 9F               [12]  642 	subb	a,r7
      000760 F5 83            [12]  643 	mov	dph,a
                                    644 ;	./src/WS2812.c:39: return random(diff) + howsmall;
      000762 C0 07            [24]  645 	push	ar7
      000764 C0 06            [24]  646 	push	ar6
      000766 12 07 1F         [24]  647 	lcall	_random
      000769 E5 82            [12]  648 	mov	a,dpl
      00076B 85 83 F0         [24]  649 	mov	b,dph
      00076E D0 06            [24]  650 	pop	ar6
      000770 D0 07            [24]  651 	pop	ar7
      000772 2E               [12]  652 	add	a,r6
      000773 F5 82            [12]  653 	mov	dpl,a
      000775 EF               [12]  654 	mov	a,r7
      000776 35 F0            [12]  655 	addc	a,b
      000778 F5 83            [12]  656 	mov	dph,a
                                    657 ;	./src/WS2812.c:40: }
      00077A 22               [24]  658 	ret
                                    659 ;------------------------------------------------------------
                                    660 ;Allocation info for local variables in function 'LED__SendZero_'
                                    661 ;------------------------------------------------------------
                                    662 ;	./src/WS2812.c:42: void LED__SendZero_()
                                    663 ;	-----------------------------------------
                                    664 ;	 function LED__SendZero_
                                    665 ;	-----------------------------------------
      00077B                        666 _LED__SendZero_:
                                    667 ;	./src/WS2812.c:44: setb(LED_PORT, LED_PIN);
      00077B 43 80 40         [24]  668 	orl	_p0,#0x40
                                    669 ;	./src/WS2812.c:45: _nop_();
      00077E 00               [12]  670 	nop
                                    671 ;	./src/WS2812.c:46: _nop_();
      00077F 00               [12]  672 	nop
                                    673 ;	./src/WS2812.c:47: clrb(LED_PORT, LED_PIN);
      000780 53 80 BF         [24]  674 	anl	_p0,#0xbf
                                    675 ;	./src/WS2812.c:48: _nop_();
      000783 00               [12]  676 	nop
                                    677 ;	./src/WS2812.c:49: _nop_();
      000784 00               [12]  678 	nop
                                    679 ;	./src/WS2812.c:50: _nop_();
      000785 00               [12]  680 	nop
                                    681 ;	./src/WS2812.c:51: _nop_();
      000786 00               [12]  682 	nop
                                    683 ;	./src/WS2812.c:52: }
      000787 22               [24]  684 	ret
                                    685 ;------------------------------------------------------------
                                    686 ;Allocation info for local variables in function 'LED__SendOne_'
                                    687 ;------------------------------------------------------------
                                    688 ;	./src/WS2812.c:53: void LED__SendOne_()
                                    689 ;	-----------------------------------------
                                    690 ;	 function LED__SendOne_
                                    691 ;	-----------------------------------------
      000788                        692 _LED__SendOne_:
                                    693 ;	./src/WS2812.c:55: setb(LED_PORT, LED_PIN);
      000788 43 80 40         [24]  694 	orl	_p0,#0x40
                                    695 ;	./src/WS2812.c:56: _nop_();
      00078B 00               [12]  696 	nop
                                    697 ;	./src/WS2812.c:57: _nop_();
      00078C 00               [12]  698 	nop
                                    699 ;	./src/WS2812.c:58: _nop_();
      00078D 00               [12]  700 	nop
                                    701 ;	./src/WS2812.c:59: _nop_();
      00078E 00               [12]  702 	nop
                                    703 ;	./src/WS2812.c:60: _nop_();
      00078F 00               [12]  704 	nop
                                    705 ;	./src/WS2812.c:61: _nop_();
      000790 00               [12]  706 	nop
                                    707 ;	./src/WS2812.c:62: _nop_();
      000791 00               [12]  708 	nop
                                    709 ;	./src/WS2812.c:63: clrb(LED_PORT, LED_PIN);
      000792 53 80 BF         [24]  710 	anl	_p0,#0xbf
                                    711 ;	./src/WS2812.c:64: }
      000795 22               [24]  712 	ret
                                    713 ;------------------------------------------------------------
                                    714 ;Allocation info for local variables in function 'LED__SendByte_'
                                    715 ;------------------------------------------------------------
                                    716 ;dat                       Allocated to registers r7 
                                    717 ;------------------------------------------------------------
                                    718 ;	./src/WS2812.c:65: void LED__SendByte_(uint8_t dat)
                                    719 ;	-----------------------------------------
                                    720 ;	 function LED__SendByte_
                                    721 ;	-----------------------------------------
      000796                        722 _LED__SendByte_:
                                    723 ;	./src/WS2812.c:67: if (dat & 0x80)
      000796 E5 82            [12]  724 	mov	a,dpl
      000798 FF               [12]  725 	mov	r7,a
      000799 30 E7 09         [24]  726 	jnb	acc.7,00102$
                                    727 ;	./src/WS2812.c:68: LED__SendOne_();
      00079C C0 07            [24]  728 	push	ar7
      00079E 12 07 88         [24]  729 	lcall	_LED__SendOne_
      0007A1 D0 07            [24]  730 	pop	ar7
      0007A3 80 07            [24]  731 	sjmp	00103$
      0007A5                        732 00102$:
                                    733 ;	./src/WS2812.c:70: LED__SendZero_();
      0007A5 C0 07            [24]  734 	push	ar7
      0007A7 12 07 7B         [24]  735 	lcall	_LED__SendZero_
      0007AA D0 07            [24]  736 	pop	ar7
      0007AC                        737 00103$:
                                    738 ;	./src/WS2812.c:71: if (dat & 0x40)
      0007AC EF               [12]  739 	mov	a,r7
      0007AD 30 E6 09         [24]  740 	jnb	acc.6,00105$
                                    741 ;	./src/WS2812.c:72: LED__SendOne_();
      0007B0 C0 07            [24]  742 	push	ar7
      0007B2 12 07 88         [24]  743 	lcall	_LED__SendOne_
      0007B5 D0 07            [24]  744 	pop	ar7
      0007B7 80 07            [24]  745 	sjmp	00106$
      0007B9                        746 00105$:
                                    747 ;	./src/WS2812.c:74: LED__SendZero_();
      0007B9 C0 07            [24]  748 	push	ar7
      0007BB 12 07 7B         [24]  749 	lcall	_LED__SendZero_
      0007BE D0 07            [24]  750 	pop	ar7
      0007C0                        751 00106$:
                                    752 ;	./src/WS2812.c:75: if (dat & 0x20)
      0007C0 EF               [12]  753 	mov	a,r7
      0007C1 30 E5 09         [24]  754 	jnb	acc.5,00108$
                                    755 ;	./src/WS2812.c:76: LED__SendOne_();
      0007C4 C0 07            [24]  756 	push	ar7
      0007C6 12 07 88         [24]  757 	lcall	_LED__SendOne_
      0007C9 D0 07            [24]  758 	pop	ar7
      0007CB 80 07            [24]  759 	sjmp	00109$
      0007CD                        760 00108$:
                                    761 ;	./src/WS2812.c:78: LED__SendZero_();
      0007CD C0 07            [24]  762 	push	ar7
      0007CF 12 07 7B         [24]  763 	lcall	_LED__SendZero_
      0007D2 D0 07            [24]  764 	pop	ar7
      0007D4                        765 00109$:
                                    766 ;	./src/WS2812.c:79: if (dat & 0x10)
      0007D4 EF               [12]  767 	mov	a,r7
      0007D5 30 E4 09         [24]  768 	jnb	acc.4,00111$
                                    769 ;	./src/WS2812.c:80: LED__SendOne_();
      0007D8 C0 07            [24]  770 	push	ar7
      0007DA 12 07 88         [24]  771 	lcall	_LED__SendOne_
      0007DD D0 07            [24]  772 	pop	ar7
      0007DF 80 07            [24]  773 	sjmp	00112$
      0007E1                        774 00111$:
                                    775 ;	./src/WS2812.c:82: LED__SendZero_();
      0007E1 C0 07            [24]  776 	push	ar7
      0007E3 12 07 7B         [24]  777 	lcall	_LED__SendZero_
      0007E6 D0 07            [24]  778 	pop	ar7
      0007E8                        779 00112$:
                                    780 ;	./src/WS2812.c:83: if (dat & 0x08)
      0007E8 EF               [12]  781 	mov	a,r7
      0007E9 30 E3 09         [24]  782 	jnb	acc.3,00114$
                                    783 ;	./src/WS2812.c:84: LED__SendOne_();
      0007EC C0 07            [24]  784 	push	ar7
      0007EE 12 07 88         [24]  785 	lcall	_LED__SendOne_
      0007F1 D0 07            [24]  786 	pop	ar7
      0007F3 80 07            [24]  787 	sjmp	00115$
      0007F5                        788 00114$:
                                    789 ;	./src/WS2812.c:86: LED__SendZero_();
      0007F5 C0 07            [24]  790 	push	ar7
      0007F7 12 07 7B         [24]  791 	lcall	_LED__SendZero_
      0007FA D0 07            [24]  792 	pop	ar7
      0007FC                        793 00115$:
                                    794 ;	./src/WS2812.c:87: if (dat & 0x04)
      0007FC EF               [12]  795 	mov	a,r7
      0007FD 30 E2 09         [24]  796 	jnb	acc.2,00117$
                                    797 ;	./src/WS2812.c:88: LED__SendOne_();
      000800 C0 07            [24]  798 	push	ar7
      000802 12 07 88         [24]  799 	lcall	_LED__SendOne_
      000805 D0 07            [24]  800 	pop	ar7
      000807 80 07            [24]  801 	sjmp	00118$
      000809                        802 00117$:
                                    803 ;	./src/WS2812.c:90: LED__SendZero_();
      000809 C0 07            [24]  804 	push	ar7
      00080B 12 07 7B         [24]  805 	lcall	_LED__SendZero_
      00080E D0 07            [24]  806 	pop	ar7
      000810                        807 00118$:
                                    808 ;	./src/WS2812.c:91: if (dat & 0x02)
      000810 EF               [12]  809 	mov	a,r7
      000811 30 E1 09         [24]  810 	jnb	acc.1,00120$
                                    811 ;	./src/WS2812.c:92: LED__SendOne_();
      000814 C0 07            [24]  812 	push	ar7
      000816 12 07 88         [24]  813 	lcall	_LED__SendOne_
      000819 D0 07            [24]  814 	pop	ar7
      00081B 80 07            [24]  815 	sjmp	00121$
      00081D                        816 00120$:
                                    817 ;	./src/WS2812.c:94: LED__SendZero_();
      00081D C0 07            [24]  818 	push	ar7
      00081F 12 07 7B         [24]  819 	lcall	_LED__SendZero_
      000822 D0 07            [24]  820 	pop	ar7
      000824                        821 00121$:
                                    822 ;	./src/WS2812.c:95: if (dat & 0x01)
      000824 EF               [12]  823 	mov	a,r7
      000825 30 E0 03         [24]  824 	jnb	acc.0,00123$
                                    825 ;	./src/WS2812.c:96: LED__SendOne_();
      000828 02 07 88         [24]  826 	ljmp	_LED__SendOne_
      00082B                        827 00123$:
                                    828 ;	./src/WS2812.c:98: LED__SendZero_();
                                    829 ;	./src/WS2812.c:99: }
      00082B 02 07 7B         [24]  830 	ljmp	_LED__SendZero_
                                    831 ;------------------------------------------------------------
                                    832 ;Allocation info for local variables in function 'clearAll'
                                    833 ;------------------------------------------------------------
                                    834 ;i                         Allocated to registers r6 r7 
                                    835 ;------------------------------------------------------------
                                    836 ;	./src/WS2812.c:101: void clearAll()
                                    837 ;	-----------------------------------------
                                    838 ;	 function clearAll
                                    839 ;	-----------------------------------------
      00082E                        840 _clearAll:
                                    841 ;	./src/WS2812.c:103: for (uint16_t i = 0; i < 300; i++)
      00082E 7E 00            [12]  842 	mov	r6,#0x00
      000830 7F 00            [12]  843 	mov	r7,#0x00
      000832                        844 00103$:
      000832 8E 04            [24]  845 	mov	ar4,r6
      000834 8F 05            [24]  846 	mov	ar5,r7
      000836 C3               [12]  847 	clr	c
      000837 EC               [12]  848 	mov	a,r4
      000838 94 2C            [12]  849 	subb	a,#0x2c
      00083A ED               [12]  850 	mov	a,r5
      00083B 94 01            [12]  851 	subb	a,#0x01
      00083D 50 21            [24]  852 	jnc	00105$
                                    853 ;	./src/WS2812.c:105: LED__SendByte_(0);
      00083F 75 82 00         [24]  854 	mov	dpl,#0x00
      000842 C0 07            [24]  855 	push	ar7
      000844 C0 06            [24]  856 	push	ar6
      000846 12 07 96         [24]  857 	lcall	_LED__SendByte_
                                    858 ;	./src/WS2812.c:106: LED__SendByte_(0);
      000849 75 82 00         [24]  859 	mov	dpl,#0x00
      00084C 12 07 96         [24]  860 	lcall	_LED__SendByte_
                                    861 ;	./src/WS2812.c:107: LED__SendByte_(0);
      00084F 75 82 00         [24]  862 	mov	dpl,#0x00
      000852 12 07 96         [24]  863 	lcall	_LED__SendByte_
      000855 D0 06            [24]  864 	pop	ar6
      000857 D0 07            [24]  865 	pop	ar7
                                    866 ;	./src/WS2812.c:103: for (uint16_t i = 0; i < 300; i++)
      000859 0E               [12]  867 	inc	r6
      00085A BE 00 D5         [24]  868 	cjne	r6,#0x00,00103$
      00085D 0F               [12]  869 	inc	r7
      00085E 80 D2            [24]  870 	sjmp	00103$
      000860                        871 00105$:
                                    872 ;	./src/WS2812.c:109: }
      000860 22               [24]  873 	ret
                                    874 ;------------------------------------------------------------
                                    875 ;Allocation info for local variables in function 'showStrip'
                                    876 ;------------------------------------------------------------
                                    877 ;i                         Allocated to registers r7 
                                    878 ;------------------------------------------------------------
                                    879 ;	./src/WS2812.c:111: void showStrip()
                                    880 ;	-----------------------------------------
                                    881 ;	 function showStrip
                                    882 ;	-----------------------------------------
      000861                        883 _showStrip:
                                    884 ;	./src/WS2812.c:113: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      000861 7F 00            [12]  885 	mov	r7,#0x00
      000863                        886 00103$:
      000863 8F 05            [24]  887 	mov	ar5,r7
      000865 7E 00            [12]  888 	mov	r6,#0x00
      000867 C3               [12]  889 	clr	c
      000868 ED               [12]  890 	mov	a,r5
      000869 95 08            [12]  891 	subb	a,_NUM_LEDS
      00086B EE               [12]  892 	mov	a,r6
      00086C 95 09            [12]  893 	subb	a,(_NUM_LEDS + 1)
      00086E 50 64            [24]  894 	jnc	00105$
                                    895 ;	./src/WS2812.c:115: LED__SendByte_(leds[i * 3]);
      000870 8F 17            [24]  896 	mov	__mulint_PARM_2,r7
      000872 75 18 00         [24]  897 	mov	(__mulint_PARM_2 + 1),#0x00
      000875 90 00 03         [24]  898 	mov	dptr,#0x0003
      000878 C0 07            [24]  899 	push	ar7
      00087A 12 1A 09         [24]  900 	lcall	__mulint
      00087D AD 82            [24]  901 	mov	r5,dpl
      00087F AE 83            [24]  902 	mov	r6,dph
      000881 ED               [12]  903 	mov	a,r5
      000882 24 01            [12]  904 	add	a,#_leds
      000884 F5 82            [12]  905 	mov	dpl,a
      000886 EE               [12]  906 	mov	a,r6
      000887 34 00            [12]  907 	addc	a,#(_leds >> 8)
      000889 F5 83            [12]  908 	mov	dph,a
      00088B E0               [24]  909 	movx	a,@dptr
      00088C F5 82            [12]  910 	mov	dpl,a
      00088E C0 06            [24]  911 	push	ar6
      000890 C0 05            [24]  912 	push	ar5
      000892 12 07 96         [24]  913 	lcall	_LED__SendByte_
      000895 D0 05            [24]  914 	pop	ar5
      000897 D0 06            [24]  915 	pop	ar6
                                    916 ;	./src/WS2812.c:116: LED__SendByte_(leds[i * 3 + 1]);
      000899 74 01            [12]  917 	mov	a,#0x01
      00089B 2D               [12]  918 	add	a,r5
      00089C FB               [12]  919 	mov	r3,a
      00089D E4               [12]  920 	clr	a
      00089E 3E               [12]  921 	addc	a,r6
      00089F FC               [12]  922 	mov	r4,a
      0008A0 EB               [12]  923 	mov	a,r3
      0008A1 24 01            [12]  924 	add	a,#_leds
      0008A3 F5 82            [12]  925 	mov	dpl,a
      0008A5 EC               [12]  926 	mov	a,r4
      0008A6 34 00            [12]  927 	addc	a,#(_leds >> 8)
      0008A8 F5 83            [12]  928 	mov	dph,a
      0008AA E0               [24]  929 	movx	a,@dptr
      0008AB F5 82            [12]  930 	mov	dpl,a
      0008AD C0 06            [24]  931 	push	ar6
      0008AF C0 05            [24]  932 	push	ar5
      0008B1 12 07 96         [24]  933 	lcall	_LED__SendByte_
      0008B4 D0 05            [24]  934 	pop	ar5
      0008B6 D0 06            [24]  935 	pop	ar6
                                    936 ;	./src/WS2812.c:117: LED__SendByte_(leds[i * 3 + 2]);
      0008B8 74 02            [12]  937 	mov	a,#0x02
      0008BA 2D               [12]  938 	add	a,r5
      0008BB FD               [12]  939 	mov	r5,a
      0008BC E4               [12]  940 	clr	a
      0008BD 3E               [12]  941 	addc	a,r6
      0008BE FE               [12]  942 	mov	r6,a
      0008BF ED               [12]  943 	mov	a,r5
      0008C0 24 01            [12]  944 	add	a,#_leds
      0008C2 F5 82            [12]  945 	mov	dpl,a
      0008C4 EE               [12]  946 	mov	a,r6
      0008C5 34 00            [12]  947 	addc	a,#(_leds >> 8)
      0008C7 F5 83            [12]  948 	mov	dph,a
      0008C9 E0               [24]  949 	movx	a,@dptr
      0008CA F5 82            [12]  950 	mov	dpl,a
      0008CC 12 07 96         [24]  951 	lcall	_LED__SendByte_
      0008CF D0 07            [24]  952 	pop	ar7
                                    953 ;	./src/WS2812.c:113: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      0008D1 0F               [12]  954 	inc	r7
      0008D2 80 8F            [24]  955 	sjmp	00103$
      0008D4                        956 00105$:
                                    957 ;	./src/WS2812.c:119: }
      0008D4 22               [24]  958 	ret
                                    959 ;------------------------------------------------------------
                                    960 ;Allocation info for local variables in function 'setPixel'
                                    961 ;------------------------------------------------------------
                                    962 ;green                     Allocated with name '_setPixel_PARM_2'
                                    963 ;red                       Allocated with name '_setPixel_PARM_3'
                                    964 ;blue                      Allocated with name '_setPixel_PARM_4'
                                    965 ;Pixel                     Allocated to registers r6 r7 
                                    966 ;------------------------------------------------------------
                                    967 ;	./src/WS2812.c:122: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                    968 ;	-----------------------------------------
                                    969 ;	 function setPixel
                                    970 ;	-----------------------------------------
      0008D5                        971 _setPixel:
      0008D5 AE 82            [24]  972 	mov	r6,dpl
      0008D7 AF 83            [24]  973 	mov	r7,dph
                                    974 ;	./src/WS2812.c:124: leds[Pixel * 3] = green;
      0008D9 8E 17            [24]  975 	mov	__mulint_PARM_2,r6
      0008DB 8F 18            [24]  976 	mov	(__mulint_PARM_2 + 1),r7
      0008DD 90 00 03         [24]  977 	mov	dptr,#0x0003
      0008E0 12 1A 09         [24]  978 	lcall	__mulint
      0008E3 AE 82            [24]  979 	mov	r6,dpl
      0008E5 AF 83            [24]  980 	mov	r7,dph
      0008E7 EE               [12]  981 	mov	a,r6
      0008E8 24 01            [12]  982 	add	a,#_leds
      0008EA F5 82            [12]  983 	mov	dpl,a
      0008EC EF               [12]  984 	mov	a,r7
      0008ED 34 00            [12]  985 	addc	a,#(_leds >> 8)
      0008EF F5 83            [12]  986 	mov	dph,a
      0008F1 E5 31            [12]  987 	mov	a,_setPixel_PARM_2
      0008F3 F0               [24]  988 	movx	@dptr,a
                                    989 ;	./src/WS2812.c:125: leds[Pixel * 3 + 1] = red;
      0008F4 74 01            [12]  990 	mov	a,#0x01
      0008F6 2E               [12]  991 	add	a,r6
      0008F7 FC               [12]  992 	mov	r4,a
      0008F8 E4               [12]  993 	clr	a
      0008F9 3F               [12]  994 	addc	a,r7
      0008FA FD               [12]  995 	mov	r5,a
      0008FB EC               [12]  996 	mov	a,r4
      0008FC 24 01            [12]  997 	add	a,#_leds
      0008FE F5 82            [12]  998 	mov	dpl,a
      000900 ED               [12]  999 	mov	a,r5
      000901 34 00            [12] 1000 	addc	a,#(_leds >> 8)
      000903 F5 83            [12] 1001 	mov	dph,a
      000905 E5 32            [12] 1002 	mov	a,_setPixel_PARM_3
      000907 F0               [24] 1003 	movx	@dptr,a
                                   1004 ;	./src/WS2812.c:126: leds[Pixel * 3 + 2] = blue;
      000908 74 02            [12] 1005 	mov	a,#0x02
      00090A 2E               [12] 1006 	add	a,r6
      00090B FE               [12] 1007 	mov	r6,a
      00090C E4               [12] 1008 	clr	a
      00090D 3F               [12] 1009 	addc	a,r7
      00090E FF               [12] 1010 	mov	r7,a
      00090F EE               [12] 1011 	mov	a,r6
      000910 24 01            [12] 1012 	add	a,#_leds
      000912 F5 82            [12] 1013 	mov	dpl,a
      000914 EF               [12] 1014 	mov	a,r7
      000915 34 00            [12] 1015 	addc	a,#(_leds >> 8)
      000917 F5 83            [12] 1016 	mov	dph,a
      000919 E5 33            [12] 1017 	mov	a,_setPixel_PARM_4
      00091B F0               [24] 1018 	movx	@dptr,a
                                   1019 ;	./src/WS2812.c:127: }
      00091C 22               [24] 1020 	ret
                                   1021 ;------------------------------------------------------------
                                   1022 ;Allocation info for local variables in function 'setAll'
                                   1023 ;------------------------------------------------------------
                                   1024 ;red                       Allocated with name '_setAll_PARM_2'
                                   1025 ;blue                      Allocated with name '_setAll_PARM_3'
                                   1026 ;green                     Allocated to registers r7 
                                   1027 ;i                         Allocated to registers r5 r6 
                                   1028 ;------------------------------------------------------------
                                   1029 ;	./src/WS2812.c:130: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                   1030 ;	-----------------------------------------
                                   1031 ;	 function setAll
                                   1032 ;	-----------------------------------------
      00091D                       1033 _setAll:
      00091D AF 82            [24] 1034 	mov	r7,dpl
                                   1035 ;	./src/WS2812.c:132: for (int16_t i = 0; i < NUM_LEDS; ++i)
      00091F 7D 00            [12] 1036 	mov	r5,#0x00
      000921 7E 00            [12] 1037 	mov	r6,#0x00
      000923                       1038 00103$:
      000923 8D 03            [24] 1039 	mov	ar3,r5
      000925 8E 04            [24] 1040 	mov	ar4,r6
      000927 C3               [12] 1041 	clr	c
      000928 EB               [12] 1042 	mov	a,r3
      000929 95 08            [12] 1043 	subb	a,_NUM_LEDS
      00092B EC               [12] 1044 	mov	a,r4
      00092C 95 09            [12] 1045 	subb	a,(_NUM_LEDS + 1)
      00092E 50 22            [24] 1046 	jnc	00105$
                                   1047 ;	./src/WS2812.c:134: setPixel(i, green, red, blue);
      000930 8F 31            [24] 1048 	mov	_setPixel_PARM_2,r7
      000932 85 34 32         [24] 1049 	mov	_setPixel_PARM_3,_setAll_PARM_2
      000935 85 35 33         [24] 1050 	mov	_setPixel_PARM_4,_setAll_PARM_3
      000938 8D 82            [24] 1051 	mov	dpl,r5
      00093A 8E 83            [24] 1052 	mov	dph,r6
      00093C C0 07            [24] 1053 	push	ar7
      00093E C0 06            [24] 1054 	push	ar6
      000940 C0 05            [24] 1055 	push	ar5
      000942 12 08 D5         [24] 1056 	lcall	_setPixel
      000945 D0 05            [24] 1057 	pop	ar5
      000947 D0 06            [24] 1058 	pop	ar6
      000949 D0 07            [24] 1059 	pop	ar7
                                   1060 ;	./src/WS2812.c:132: for (int16_t i = 0; i < NUM_LEDS; ++i)
      00094B 0D               [12] 1061 	inc	r5
      00094C BD 00 D4         [24] 1062 	cjne	r5,#0x00,00103$
      00094F 0E               [12] 1063 	inc	r6
      000950 80 D1            [24] 1064 	sjmp	00103$
      000952                       1065 00105$:
                                   1066 ;	./src/WS2812.c:136: }
      000952 22               [24] 1067 	ret
                                   1068 ;------------------------------------------------------------
                                   1069 ;Allocation info for local variables in function 'FadeInOut'
                                   1070 ;------------------------------------------------------------
                                   1071 ;red                       Allocated with name '_FadeInOut_PARM_2'
                                   1072 ;blue                      Allocated with name '_FadeInOut_PARM_3'
                                   1073 ;green                     Allocated with name '_FadeInOut_green_65536_70'
                                   1074 ;g                         Allocated with name '_FadeInOut_g_65536_71'
                                   1075 ;r                         Allocated with name '_FadeInOut_r_65536_71'
                                   1076 ;b                         Allocated to registers 
                                   1077 ;curEffect                 Allocated with name '_FadeInOut_curEffect_65536_71'
                                   1078 ;curColor                  Allocated with name '_FadeInOut_curColor_65536_71'
                                   1079 ;k                         Allocated to registers r3 r4 
                                   1080 ;k                         Allocated with name '_FadeInOut_k_131072_75'
                                   1081 ;------------------------------------------------------------
                                   1082 ;	./src/WS2812.c:137: void FadeInOut(uint8_t green, uint8_t red, uint8_t blue)
                                   1083 ;	-----------------------------------------
                                   1084 ;	 function FadeInOut
                                   1085 ;	-----------------------------------------
      000953                       1086 _FadeInOut:
      000953 85 82 38         [24] 1087 	mov	_FadeInOut_green_65536_70,dpl
                                   1088 ;	./src/WS2812.c:140: uint8_t curEffect = effect;
      000956 85 0C 3B         [24] 1089 	mov	_FadeInOut_curEffect_65536_71,_effect
                                   1090 ;	./src/WS2812.c:141: uint8_t curColor = _color;
      000959 85 0F 3C         [24] 1091 	mov	_FadeInOut_curColor_65536_71,__color
                                   1092 ;	./src/WS2812.c:144: for (int16_t k = 0; k < 255; k = k + NUM_LEDS / 50)
      00095C 7B 00            [12] 1093 	mov	r3,#0x00
      00095E 7C 00            [12] 1094 	mov	r4,#0x00
      000960                       1095 00110$:
      000960 8B 01            [24] 1096 	mov	ar1,r3
      000962 8C 02            [24] 1097 	mov	ar2,r4
      000964 C3               [12] 1098 	clr	c
      000965 E9               [12] 1099 	mov	a,r1
      000966 94 FF            [12] 1100 	subb	a,#0xff
      000968 EA               [12] 1101 	mov	a,r2
      000969 64 80            [12] 1102 	xrl	a,#0x80
      00096B 94 80            [12] 1103 	subb	a,#0x80
      00096D 40 03            [24] 1104 	jc	00147$
      00096F 02 0A 5A         [24] 1105 	ljmp	00104$
      000972                       1106 00147$:
                                   1107 ;	./src/WS2812.c:146: CHECK_EFF;
      000972 E5 0C            [12] 1108 	mov	a,_effect
      000974 B5 3B 07         [24] 1109 	cjne	a,_FadeInOut_curEffect_65536_71,00101$
      000977 E5 0F            [12] 1110 	mov	a,__color
      000979 B5 3C 02         [24] 1111 	cjne	a,_FadeInOut_curColor_65536_71,00150$
      00097C 80 04            [24] 1112 	sjmp	00102$
      00097E                       1113 00150$:
      00097E                       1114 00101$:
      00097E 75 0D 12         [24] 1115 	mov	__status,#0x12
      000981 22               [24] 1116 	ret
      000982                       1117 00102$:
                                   1118 ;	./src/WS2812.c:148: r = k * red / 256;
      000982 85 36 17         [24] 1119 	mov	__mulint_PARM_2,_FadeInOut_PARM_2
      000985 75 18 00         [24] 1120 	mov	(__mulint_PARM_2 + 1),#0x00
      000988 8B 82            [24] 1121 	mov	dpl,r3
      00098A 8C 83            [24] 1122 	mov	dph,r4
      00098C C0 04            [24] 1123 	push	ar4
      00098E C0 03            [24] 1124 	push	ar3
      000990 12 1A 09         [24] 1125 	lcall	__mulint
      000993 75 17 00         [24] 1126 	mov	__divsint_PARM_2,#0x00
      000996 75 18 01         [24] 1127 	mov	(__divsint_PARM_2 + 1),#0x01
      000999 12 1C 89         [24] 1128 	lcall	__divsint
      00099C A9 82            [24] 1129 	mov	r1,dpl
      00099E D0 03            [24] 1130 	pop	ar3
      0009A0 D0 04            [24] 1131 	pop	ar4
                                   1132 ;	./src/WS2812.c:149: g = k * green / 256;
      0009A2 85 38 17         [24] 1133 	mov	__mulint_PARM_2,_FadeInOut_green_65536_70
      0009A5 75 18 00         [24] 1134 	mov	(__mulint_PARM_2 + 1),#0x00
      0009A8 8B 82            [24] 1135 	mov	dpl,r3
      0009AA 8C 83            [24] 1136 	mov	dph,r4
      0009AC C0 04            [24] 1137 	push	ar4
      0009AE C0 03            [24] 1138 	push	ar3
      0009B0 C0 01            [24] 1139 	push	ar1
      0009B2 12 1A 09         [24] 1140 	lcall	__mulint
      0009B5 75 17 00         [24] 1141 	mov	__divsint_PARM_2,#0x00
      0009B8 75 18 01         [24] 1142 	mov	(__divsint_PARM_2 + 1),#0x01
      0009BB 12 1C 89         [24] 1143 	lcall	__divsint
      0009BE A8 82            [24] 1144 	mov	r0,dpl
      0009C0 D0 01            [24] 1145 	pop	ar1
      0009C2 D0 03            [24] 1146 	pop	ar3
      0009C4 D0 04            [24] 1147 	pop	ar4
                                   1148 ;	./src/WS2812.c:150: b = k * blue / 256;
      0009C6 85 37 17         [24] 1149 	mov	__mulint_PARM_2,_FadeInOut_PARM_3
      0009C9 75 18 00         [24] 1150 	mov	(__mulint_PARM_2 + 1),#0x00
      0009CC 8B 82            [24] 1151 	mov	dpl,r3
      0009CE 8C 83            [24] 1152 	mov	dph,r4
      0009D0 C0 04            [24] 1153 	push	ar4
      0009D2 C0 03            [24] 1154 	push	ar3
      0009D4 C0 01            [24] 1155 	push	ar1
      0009D6 C0 00            [24] 1156 	push	ar0
      0009D8 12 1A 09         [24] 1157 	lcall	__mulint
      0009DB 75 17 00         [24] 1158 	mov	__divsint_PARM_2,#0x00
      0009DE 75 18 01         [24] 1159 	mov	(__divsint_PARM_2 + 1),#0x01
      0009E1 12 1C 89         [24] 1160 	lcall	__divsint
      0009E4 AA 82            [24] 1161 	mov	r2,dpl
      0009E6 D0 00            [24] 1162 	pop	ar0
      0009E8 D0 01            [24] 1163 	pop	ar1
      0009EA 8A 35            [24] 1164 	mov	_setAll_PARM_3,r2
                                   1165 ;	./src/WS2812.c:151: setAll(g, r, b);
      0009EC 89 34            [24] 1166 	mov	_setAll_PARM_2,r1
      0009EE 88 82            [24] 1167 	mov	dpl,r0
      0009F0 12 09 1D         [24] 1168 	lcall	_setAll
                                   1169 ;	./src/WS2812.c:152: showStrip();
      0009F3 12 08 61         [24] 1170 	lcall	_showStrip
                                   1171 ;	./src/WS2812.c:153: _delay_ms(DELAY2);
      0009F6 85 08 17         [24] 1172 	mov	__divuint_PARM_2,_NUM_LEDS
      0009F9 85 09 18         [24] 1173 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0009FC 90 00 C8         [24] 1174 	mov	dptr,#0x00c8
      0009FF 12 18 5C         [24] 1175 	lcall	__divuint
      000A02 85 0A 17         [24] 1176 	mov	__mulint_PARM_2,__delay
      000A05 85 0B 18         [24] 1177 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000A08 12 1A 09         [24] 1178 	lcall	__mulint
      000A0B 75 17 64         [24] 1179 	mov	__divuint_PARM_2,#0x64
      000A0E 75 18 00         [24] 1180 	mov	(__divuint_PARM_2 + 1),#0x00
      000A11 12 18 5C         [24] 1181 	lcall	__divuint
      000A14 E5 82            [12] 1182 	mov	a,dpl
      000A16 85 83 F0         [24] 1183 	mov	b,dph
      000A19 24 01            [12] 1184 	add	a,#0x01
      000A1B FA               [12] 1185 	mov	r2,a
      000A1C E4               [12] 1186 	clr	a
      000A1D 35 F0            [12] 1187 	addc	a,b
      000A1F FD               [12] 1188 	mov	r5,a
      000A20 8A 00            [24] 1189 	mov	ar0,r2
      000A22 8D 01            [24] 1190 	mov	ar1,r5
      000A24 7A 00            [12] 1191 	mov	r2,#0x00
      000A26 7D 00            [12] 1192 	mov	r5,#0x00
      000A28 88 82            [24] 1193 	mov	dpl,r0
      000A2A 89 83            [24] 1194 	mov	dph,r1
      000A2C 8A F0            [24] 1195 	mov	b,r2
      000A2E ED               [12] 1196 	mov	a,r5
      000A2F 12 05 CD         [24] 1197 	lcall	__delay_ms
                                   1198 ;	./src/WS2812.c:144: for (int16_t k = 0; k < 255; k = k + NUM_LEDS / 50)
      000A32 85 08 82         [24] 1199 	mov	dpl,_NUM_LEDS
      000A35 85 09 83         [24] 1200 	mov	dph,(_NUM_LEDS + 1)
      000A38 75 17 32         [24] 1201 	mov	__divuint_PARM_2,#0x32
      000A3B 75 18 00         [24] 1202 	mov	(__divuint_PARM_2 + 1),#0x00
      000A3E 12 18 5C         [24] 1203 	lcall	__divuint
      000A41 AA 82            [24] 1204 	mov	r2,dpl
      000A43 AD 83            [24] 1205 	mov	r5,dph
      000A45 D0 03            [24] 1206 	pop	ar3
      000A47 D0 04            [24] 1207 	pop	ar4
      000A49 8B 00            [24] 1208 	mov	ar0,r3
      000A4B 8C 01            [24] 1209 	mov	ar1,r4
      000A4D EA               [12] 1210 	mov	a,r2
      000A4E 28               [12] 1211 	add	a,r0
      000A4F FA               [12] 1212 	mov	r2,a
      000A50 ED               [12] 1213 	mov	a,r5
      000A51 39               [12] 1214 	addc	a,r1
      000A52 FD               [12] 1215 	mov	r5,a
      000A53 8A 03            [24] 1216 	mov	ar3,r2
      000A55 8D 04            [24] 1217 	mov	ar4,r5
      000A57 02 09 60         [24] 1218 	ljmp	00110$
      000A5A                       1219 00104$:
                                   1220 ;	./src/WS2812.c:156: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      000A5A 75 3D FF         [24] 1221 	mov	_FadeInOut_k_131072_75,#0xff
      000A5D 75 3E 00         [24] 1222 	mov	(_FadeInOut_k_131072_75 + 1),#0x00
      000A60                       1223 00113$:
      000A60 AA 3D            [24] 1224 	mov	r2,_FadeInOut_k_131072_75
      000A62 AB 3E            [24] 1225 	mov	r3,(_FadeInOut_k_131072_75 + 1)
      000A64 C3               [12] 1226 	clr	c
      000A65 E4               [12] 1227 	clr	a
      000A66 9A               [12] 1228 	subb	a,r2
      000A67 74 80            [12] 1229 	mov	a,#(0x00 ^ 0x80)
      000A69 8B F0            [24] 1230 	mov	b,r3
      000A6B 63 F0 80         [24] 1231 	xrl	b,#0x80
      000A6E 95 F0            [12] 1232 	subb	a,b
      000A70 40 01            [24] 1233 	jc	00151$
      000A72 22               [24] 1234 	ret
      000A73                       1235 00151$:
                                   1236 ;	./src/WS2812.c:158: CHECK_EFF;
      000A73 E5 0C            [12] 1237 	mov	a,_effect
      000A75 B5 3B 07         [24] 1238 	cjne	a,_FadeInOut_curEffect_65536_71,00105$
      000A78 E5 0F            [12] 1239 	mov	a,__color
      000A7A B5 3C 02         [24] 1240 	cjne	a,_FadeInOut_curColor_65536_71,00154$
      000A7D 80 04            [24] 1241 	sjmp	00106$
      000A7F                       1242 00154$:
      000A7F                       1243 00105$:
      000A7F 75 0D 12         [24] 1244 	mov	__status,#0x12
      000A82 22               [24] 1245 	ret
      000A83                       1246 00106$:
                                   1247 ;	./src/WS2812.c:159: r = (k / 256.0) * red;
      000A83 85 3D 82         [24] 1248 	mov	dpl,_FadeInOut_k_131072_75
      000A86 85 3E 83         [24] 1249 	mov	dph,(_FadeInOut_k_131072_75 + 1)
      000A89 12 1A E1         [24] 1250 	lcall	___sint2fs
      000A8C A8 82            [24] 1251 	mov	r0,dpl
      000A8E A9 83            [24] 1252 	mov	r1,dph
      000A90 AA F0            [24] 1253 	mov	r2,b
      000A92 FB               [12] 1254 	mov	r3,a
      000A93 E4               [12] 1255 	clr	a
      000A94 C0 E0            [24] 1256 	push	acc
      000A96 C0 E0            [24] 1257 	push	acc
      000A98 74 80            [12] 1258 	mov	a,#0x80
      000A9A C0 E0            [24] 1259 	push	acc
      000A9C 74 43            [12] 1260 	mov	a,#0x43
      000A9E C0 E0            [24] 1261 	push	acc
      000AA0 88 82            [24] 1262 	mov	dpl,r0
      000AA2 89 83            [24] 1263 	mov	dph,r1
      000AA4 8A F0            [24] 1264 	mov	b,r2
      000AA6 EB               [12] 1265 	mov	a,r3
      000AA7 12 1B 3D         [24] 1266 	lcall	___fsdiv
      000AAA A8 82            [24] 1267 	mov	r0,dpl
      000AAC A9 83            [24] 1268 	mov	r1,dph
      000AAE AA F0            [24] 1269 	mov	r2,b
      000AB0 FB               [12] 1270 	mov	r3,a
      000AB1 E5 81            [12] 1271 	mov	a,sp
      000AB3 24 FC            [12] 1272 	add	a,#0xfc
      000AB5 F5 81            [12] 1273 	mov	sp,a
      000AB7 85 36 82         [24] 1274 	mov	dpl,_FadeInOut_PARM_2
      000ABA C0 03            [24] 1275 	push	ar3
      000ABC C0 02            [24] 1276 	push	ar2
      000ABE C0 01            [24] 1277 	push	ar1
      000AC0 C0 00            [24] 1278 	push	ar0
      000AC2 12 1C 00         [24] 1279 	lcall	___uchar2fs
      000AC5 AC 82            [24] 1280 	mov	r4,dpl
      000AC7 AD 83            [24] 1281 	mov	r5,dph
      000AC9 AE F0            [24] 1282 	mov	r6,b
      000ACB FF               [12] 1283 	mov	r7,a
      000ACC D0 00            [24] 1284 	pop	ar0
      000ACE D0 01            [24] 1285 	pop	ar1
      000AD0 D0 02            [24] 1286 	pop	ar2
      000AD2 D0 03            [24] 1287 	pop	ar3
      000AD4 C0 03            [24] 1288 	push	ar3
      000AD6 C0 02            [24] 1289 	push	ar2
      000AD8 C0 01            [24] 1290 	push	ar1
      000ADA C0 00            [24] 1291 	push	ar0
      000ADC C0 04            [24] 1292 	push	ar4
      000ADE C0 05            [24] 1293 	push	ar5
      000AE0 C0 06            [24] 1294 	push	ar6
      000AE2 C0 07            [24] 1295 	push	ar7
      000AE4 88 82            [24] 1296 	mov	dpl,r0
      000AE6 89 83            [24] 1297 	mov	dph,r1
      000AE8 8A F0            [24] 1298 	mov	b,r2
      000AEA EB               [12] 1299 	mov	a,r3
      000AEB 12 19 05         [24] 1300 	lcall	___fsmul
      000AEE AC 82            [24] 1301 	mov	r4,dpl
      000AF0 AD 83            [24] 1302 	mov	r5,dph
      000AF2 AE F0            [24] 1303 	mov	r6,b
      000AF4 FF               [12] 1304 	mov	r7,a
      000AF5 E5 81            [12] 1305 	mov	a,sp
      000AF7 24 FC            [12] 1306 	add	a,#0xfc
      000AF9 F5 81            [12] 1307 	mov	sp,a
      000AFB 8C 82            [24] 1308 	mov	dpl,r4
      000AFD 8D 83            [24] 1309 	mov	dph,r5
      000AFF 8E F0            [24] 1310 	mov	b,r6
      000B01 EF               [12] 1311 	mov	a,r7
      000B02 12 1C 0B         [24] 1312 	lcall	___fs2uchar
      000B05 85 82 3A         [24] 1313 	mov	_FadeInOut_r_65536_71,dpl
                                   1314 ;	./src/WS2812.c:160: g = (k / 256.0) * green;
      000B08 85 38 82         [24] 1315 	mov	dpl,_FadeInOut_green_65536_70
      000B0B 12 1C 00         [24] 1316 	lcall	___uchar2fs
      000B0E AC 82            [24] 1317 	mov	r4,dpl
      000B10 AD 83            [24] 1318 	mov	r5,dph
      000B12 AE F0            [24] 1319 	mov	r6,b
      000B14 FF               [12] 1320 	mov	r7,a
      000B15 D0 00            [24] 1321 	pop	ar0
      000B17 D0 01            [24] 1322 	pop	ar1
      000B19 D0 02            [24] 1323 	pop	ar2
      000B1B D0 03            [24] 1324 	pop	ar3
      000B1D C0 03            [24] 1325 	push	ar3
      000B1F C0 02            [24] 1326 	push	ar2
      000B21 C0 01            [24] 1327 	push	ar1
      000B23 C0 00            [24] 1328 	push	ar0
      000B25 C0 04            [24] 1329 	push	ar4
      000B27 C0 05            [24] 1330 	push	ar5
      000B29 C0 06            [24] 1331 	push	ar6
      000B2B C0 07            [24] 1332 	push	ar7
      000B2D 88 82            [24] 1333 	mov	dpl,r0
      000B2F 89 83            [24] 1334 	mov	dph,r1
      000B31 8A F0            [24] 1335 	mov	b,r2
      000B33 EB               [12] 1336 	mov	a,r3
      000B34 12 19 05         [24] 1337 	lcall	___fsmul
      000B37 AC 82            [24] 1338 	mov	r4,dpl
      000B39 AD 83            [24] 1339 	mov	r5,dph
      000B3B AE F0            [24] 1340 	mov	r6,b
      000B3D FF               [12] 1341 	mov	r7,a
      000B3E E5 81            [12] 1342 	mov	a,sp
      000B40 24 FC            [12] 1343 	add	a,#0xfc
      000B42 F5 81            [12] 1344 	mov	sp,a
      000B44 8C 82            [24] 1345 	mov	dpl,r4
      000B46 8D 83            [24] 1346 	mov	dph,r5
      000B48 8E F0            [24] 1347 	mov	b,r6
      000B4A EF               [12] 1348 	mov	a,r7
      000B4B 12 1C 0B         [24] 1349 	lcall	___fs2uchar
      000B4E 85 82 39         [24] 1350 	mov	_FadeInOut_g_65536_71,dpl
                                   1351 ;	./src/WS2812.c:161: b = (k / 256.0) * blue;
      000B51 85 37 82         [24] 1352 	mov	dpl,_FadeInOut_PARM_3
      000B54 12 1C 00         [24] 1353 	lcall	___uchar2fs
      000B57 AC 82            [24] 1354 	mov	r4,dpl
      000B59 AD 83            [24] 1355 	mov	r5,dph
      000B5B AE F0            [24] 1356 	mov	r6,b
      000B5D FF               [12] 1357 	mov	r7,a
      000B5E D0 00            [24] 1358 	pop	ar0
      000B60 D0 01            [24] 1359 	pop	ar1
      000B62 D0 02            [24] 1360 	pop	ar2
      000B64 D0 03            [24] 1361 	pop	ar3
      000B66 C0 04            [24] 1362 	push	ar4
      000B68 C0 05            [24] 1363 	push	ar5
      000B6A C0 06            [24] 1364 	push	ar6
      000B6C C0 07            [24] 1365 	push	ar7
      000B6E 88 82            [24] 1366 	mov	dpl,r0
      000B70 89 83            [24] 1367 	mov	dph,r1
      000B72 8A F0            [24] 1368 	mov	b,r2
      000B74 EB               [12] 1369 	mov	a,r3
      000B75 12 19 05         [24] 1370 	lcall	___fsmul
      000B78 AC 82            [24] 1371 	mov	r4,dpl
      000B7A AD 83            [24] 1372 	mov	r5,dph
      000B7C AE F0            [24] 1373 	mov	r6,b
      000B7E FF               [12] 1374 	mov	r7,a
      000B7F E5 81            [12] 1375 	mov	a,sp
      000B81 24 FC            [12] 1376 	add	a,#0xfc
      000B83 F5 81            [12] 1377 	mov	sp,a
      000B85 8C 82            [24] 1378 	mov	dpl,r4
      000B87 8D 83            [24] 1379 	mov	dph,r5
      000B89 8E F0            [24] 1380 	mov	b,r6
      000B8B EF               [12] 1381 	mov	a,r7
      000B8C 12 1C 0B         [24] 1382 	lcall	___fs2uchar
      000B8F 85 82 35         [24] 1383 	mov	_setAll_PARM_3,dpl
                                   1384 ;	./src/WS2812.c:162: setAll(g, r, b);
      000B92 85 3A 34         [24] 1385 	mov	_setAll_PARM_2,_FadeInOut_r_65536_71
      000B95 85 39 82         [24] 1386 	mov	dpl,_FadeInOut_g_65536_71
      000B98 12 09 1D         [24] 1387 	lcall	_setAll
                                   1388 ;	./src/WS2812.c:163: showStrip();
      000B9B 12 08 61         [24] 1389 	lcall	_showStrip
                                   1390 ;	./src/WS2812.c:164: _delay_ms(DELAY2);
      000B9E 85 08 17         [24] 1391 	mov	__divuint_PARM_2,_NUM_LEDS
      000BA1 85 09 18         [24] 1392 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000BA4 90 00 C8         [24] 1393 	mov	dptr,#0x00c8
      000BA7 12 18 5C         [24] 1394 	lcall	__divuint
      000BAA 85 0A 17         [24] 1395 	mov	__mulint_PARM_2,__delay
      000BAD 85 0B 18         [24] 1396 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000BB0 12 1A 09         [24] 1397 	lcall	__mulint
      000BB3 75 17 64         [24] 1398 	mov	__divuint_PARM_2,#0x64
      000BB6 75 18 00         [24] 1399 	mov	(__divuint_PARM_2 + 1),#0x00
      000BB9 12 18 5C         [24] 1400 	lcall	__divuint
      000BBC E5 82            [12] 1401 	mov	a,dpl
      000BBE 85 83 F0         [24] 1402 	mov	b,dph
      000BC1 24 01            [12] 1403 	add	a,#0x01
      000BC3 FE               [12] 1404 	mov	r6,a
      000BC4 E4               [12] 1405 	clr	a
      000BC5 35 F0            [12] 1406 	addc	a,b
      000BC7 FF               [12] 1407 	mov	r7,a
      000BC8 7D 00            [12] 1408 	mov	r5,#0x00
      000BCA 7C 00            [12] 1409 	mov	r4,#0x00
      000BCC 8E 82            [24] 1410 	mov	dpl,r6
      000BCE 8F 83            [24] 1411 	mov	dph,r7
      000BD0 8D F0            [24] 1412 	mov	b,r5
      000BD2 EC               [12] 1413 	mov	a,r4
      000BD3 12 05 CD         [24] 1414 	lcall	__delay_ms
                                   1415 ;	./src/WS2812.c:156: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      000BD6 85 08 82         [24] 1416 	mov	dpl,_NUM_LEDS
      000BD9 85 09 83         [24] 1417 	mov	dph,(_NUM_LEDS + 1)
      000BDC 75 17 19         [24] 1418 	mov	__divuint_PARM_2,#0x19
      000BDF 75 18 00         [24] 1419 	mov	(__divuint_PARM_2 + 1),#0x00
      000BE2 12 18 5C         [24] 1420 	lcall	__divuint
      000BE5 AE 82            [24] 1421 	mov	r6,dpl
      000BE7 AF 83            [24] 1422 	mov	r7,dph
      000BE9 AC 3D            [24] 1423 	mov	r4,_FadeInOut_k_131072_75
      000BEB AD 3E            [24] 1424 	mov	r5,(_FadeInOut_k_131072_75 + 1)
      000BED EC               [12] 1425 	mov	a,r4
      000BEE C3               [12] 1426 	clr	c
      000BEF 9E               [12] 1427 	subb	a,r6
      000BF0 FE               [12] 1428 	mov	r6,a
      000BF1 ED               [12] 1429 	mov	a,r5
      000BF2 9F               [12] 1430 	subb	a,r7
      000BF3 FF               [12] 1431 	mov	r7,a
      000BF4 8E 3D            [24] 1432 	mov	_FadeInOut_k_131072_75,r6
      000BF6 8F 3E            [24] 1433 	mov	(_FadeInOut_k_131072_75 + 1),r7
                                   1434 ;	./src/WS2812.c:166: }
      000BF8 02 0A 60         [24] 1435 	ljmp	00113$
                                   1436 ;------------------------------------------------------------
                                   1437 ;Allocation info for local variables in function 'Strobe'
                                   1438 ;------------------------------------------------------------
                                   1439 ;red                       Allocated with name '_Strobe_PARM_2'
                                   1440 ;blue                      Allocated with name '_Strobe_PARM_3'
                                   1441 ;StrobeCount               Allocated with name '_Strobe_PARM_4'
                                   1442 ;EndPause                  Allocated with name '_Strobe_PARM_5'
                                   1443 ;green                     Allocated to registers r7 
                                   1444 ;curEffect                 Allocated to registers r6 
                                   1445 ;curColor                  Allocated with name '_Strobe_curColor_65536_79'
                                   1446 ;j                         Allocated to registers r3 r4 
                                   1447 ;------------------------------------------------------------
                                   1448 ;	./src/WS2812.c:168: void Strobe(uint8_t green, uint8_t red, uint8_t blue, int16_t StrobeCount, int16_t EndPause)
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function Strobe
                                   1451 ;	-----------------------------------------
      000BFB                       1452 _Strobe:
      000BFB AF 82            [24] 1453 	mov	r7,dpl
                                   1454 ;	./src/WS2812.c:170: uint8_t curEffect = effect;
      000BFD AE 0C            [24] 1455 	mov	r6,_effect
                                   1456 ;	./src/WS2812.c:171: uint8_t curColor = _color;
      000BFF 85 0F 45         [24] 1457 	mov	_Strobe_curColor_65536_79,__color
                                   1458 ;	./src/WS2812.c:172: for (int16_t j = 0; j < StrobeCount; j++)
      000C02 7B 00            [12] 1459 	mov	r3,#0x00
      000C04 7C 00            [12] 1460 	mov	r4,#0x00
      000C06                       1461 00106$:
      000C06 C3               [12] 1462 	clr	c
      000C07 EB               [12] 1463 	mov	a,r3
      000C08 95 41            [12] 1464 	subb	a,_Strobe_PARM_4
      000C0A EC               [12] 1465 	mov	a,r4
      000C0B 64 80            [12] 1466 	xrl	a,#0x80
      000C0D 85 42 F0         [24] 1467 	mov	b,(_Strobe_PARM_4 + 1)
      000C10 63 F0 80         [24] 1468 	xrl	b,#0x80
      000C13 95 F0            [12] 1469 	subb	a,b
      000C15 40 03            [24] 1470 	jc	00122$
      000C17 02 0C D2         [24] 1471 	ljmp	00104$
      000C1A                       1472 00122$:
                                   1473 ;	./src/WS2812.c:174: CHECK_EFF;
      000C1A EE               [12] 1474 	mov	a,r6
      000C1B B5 0C 07         [24] 1475 	cjne	a,_effect,00101$
      000C1E E5 0F            [12] 1476 	mov	a,__color
      000C20 B5 45 02         [24] 1477 	cjne	a,_Strobe_curColor_65536_79,00125$
      000C23 80 04            [24] 1478 	sjmp	00102$
      000C25                       1479 00125$:
      000C25                       1480 00101$:
      000C25 75 0D 12         [24] 1481 	mov	__status,#0x12
      000C28 22               [24] 1482 	ret
      000C29                       1483 00102$:
                                   1484 ;	./src/WS2812.c:175: setAll(green, red, blue);
      000C29 85 3F 34         [24] 1485 	mov	_setAll_PARM_2,_Strobe_PARM_2
      000C2C 85 40 35         [24] 1486 	mov	_setAll_PARM_3,_Strobe_PARM_3
      000C2F 8F 82            [24] 1487 	mov	dpl,r7
      000C31 C0 07            [24] 1488 	push	ar7
      000C33 C0 06            [24] 1489 	push	ar6
      000C35 C0 04            [24] 1490 	push	ar4
      000C37 C0 03            [24] 1491 	push	ar3
      000C39 12 09 1D         [24] 1492 	lcall	_setAll
                                   1493 ;	./src/WS2812.c:176: showStrip();
      000C3C 12 08 61         [24] 1494 	lcall	_showStrip
                                   1495 ;	./src/WS2812.c:177: _delay_ms(DELAY2);
      000C3F 85 08 17         [24] 1496 	mov	__divuint_PARM_2,_NUM_LEDS
      000C42 85 09 18         [24] 1497 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000C45 90 00 C8         [24] 1498 	mov	dptr,#0x00c8
      000C48 12 18 5C         [24] 1499 	lcall	__divuint
      000C4B 85 0A 17         [24] 1500 	mov	__mulint_PARM_2,__delay
      000C4E 85 0B 18         [24] 1501 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000C51 12 1A 09         [24] 1502 	lcall	__mulint
      000C54 75 17 64         [24] 1503 	mov	__divuint_PARM_2,#0x64
      000C57 75 18 00         [24] 1504 	mov	(__divuint_PARM_2 + 1),#0x00
      000C5A 12 18 5C         [24] 1505 	lcall	__divuint
      000C5D E5 82            [12] 1506 	mov	a,dpl
      000C5F 85 83 F0         [24] 1507 	mov	b,dph
      000C62 24 01            [12] 1508 	add	a,#0x01
      000C64 F9               [12] 1509 	mov	r1,a
      000C65 E4               [12] 1510 	clr	a
      000C66 35 F0            [12] 1511 	addc	a,b
      000C68 F8               [12] 1512 	mov	r0,a
      000C69 7A 00            [12] 1513 	mov	r2,#0x00
      000C6B 7D 00            [12] 1514 	mov	r5,#0x00
      000C6D 89 82            [24] 1515 	mov	dpl,r1
      000C6F 88 83            [24] 1516 	mov	dph,r0
      000C71 8A F0            [24] 1517 	mov	b,r2
      000C73 ED               [12] 1518 	mov	a,r5
      000C74 12 05 CD         [24] 1519 	lcall	__delay_ms
                                   1520 ;	./src/WS2812.c:178: setAll(0, 0, 0);
      000C77 75 34 00         [24] 1521 	mov	_setAll_PARM_2,#0x00
      000C7A 75 35 00         [24] 1522 	mov	_setAll_PARM_3,#0x00
      000C7D 75 82 00         [24] 1523 	mov	dpl,#0x00
      000C80 12 09 1D         [24] 1524 	lcall	_setAll
                                   1525 ;	./src/WS2812.c:179: showStrip();
      000C83 12 08 61         [24] 1526 	lcall	_showStrip
                                   1527 ;	./src/WS2812.c:180: _delay_ms(DELAY2);
      000C86 85 08 17         [24] 1528 	mov	__divuint_PARM_2,_NUM_LEDS
      000C89 85 09 18         [24] 1529 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000C8C 90 00 C8         [24] 1530 	mov	dptr,#0x00c8
      000C8F 12 18 5C         [24] 1531 	lcall	__divuint
      000C92 85 0A 17         [24] 1532 	mov	__mulint_PARM_2,__delay
      000C95 85 0B 18         [24] 1533 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000C98 12 1A 09         [24] 1534 	lcall	__mulint
      000C9B 75 17 64         [24] 1535 	mov	__divuint_PARM_2,#0x64
      000C9E 75 18 00         [24] 1536 	mov	(__divuint_PARM_2 + 1),#0x00
      000CA1 12 18 5C         [24] 1537 	lcall	__divuint
      000CA4 E5 82            [12] 1538 	mov	a,dpl
      000CA6 85 83 F0         [24] 1539 	mov	b,dph
      000CA9 24 01            [12] 1540 	add	a,#0x01
      000CAB FA               [12] 1541 	mov	r2,a
      000CAC E4               [12] 1542 	clr	a
      000CAD 35 F0            [12] 1543 	addc	a,b
      000CAF FD               [12] 1544 	mov	r5,a
      000CB0 8A 00            [24] 1545 	mov	ar0,r2
      000CB2 8D 01            [24] 1546 	mov	ar1,r5
      000CB4 7A 00            [12] 1547 	mov	r2,#0x00
      000CB6 7D 00            [12] 1548 	mov	r5,#0x00
      000CB8 88 82            [24] 1549 	mov	dpl,r0
      000CBA 89 83            [24] 1550 	mov	dph,r1
      000CBC 8A F0            [24] 1551 	mov	b,r2
      000CBE ED               [12] 1552 	mov	a,r5
      000CBF 12 05 CD         [24] 1553 	lcall	__delay_ms
      000CC2 D0 03            [24] 1554 	pop	ar3
      000CC4 D0 04            [24] 1555 	pop	ar4
      000CC6 D0 06            [24] 1556 	pop	ar6
      000CC8 D0 07            [24] 1557 	pop	ar7
                                   1558 ;	./src/WS2812.c:172: for (int16_t j = 0; j < StrobeCount; j++)
      000CCA 0B               [12] 1559 	inc	r3
      000CCB BB 00 01         [24] 1560 	cjne	r3,#0x00,00126$
      000CCE 0C               [12] 1561 	inc	r4
      000CCF                       1562 00126$:
      000CCF 02 0C 06         [24] 1563 	ljmp	00106$
      000CD2                       1564 00104$:
                                   1565 ;	./src/WS2812.c:182: _delay_ms(EndPause);
      000CD2 AC 43            [24] 1566 	mov	r4,_Strobe_PARM_5
      000CD4 E5 44            [12] 1567 	mov	a,(_Strobe_PARM_5 + 1)
      000CD6 FD               [12] 1568 	mov	r5,a
      000CD7 33               [12] 1569 	rlc	a
      000CD8 95 E0            [12] 1570 	subb	a,acc
      000CDA FE               [12] 1571 	mov	r6,a
      000CDB 8C 82            [24] 1572 	mov	dpl,r4
      000CDD 8D 83            [24] 1573 	mov	dph,r5
      000CDF 8E F0            [24] 1574 	mov	b,r6
                                   1575 ;	./src/WS2812.c:183: }
      000CE1 02 05 CD         [24] 1576 	ljmp	__delay_ms
                                   1577 ;------------------------------------------------------------
                                   1578 ;Allocation info for local variables in function 'CylonBounce'
                                   1579 ;------------------------------------------------------------
                                   1580 ;red                       Allocated with name '_CylonBounce_PARM_2'
                                   1581 ;blue                      Allocated with name '_CylonBounce_PARM_3'
                                   1582 ;EyeSize                   Allocated with name '_CylonBounce_PARM_4'
                                   1583 ;ReturnDelay               Allocated with name '_CylonBounce_PARM_5'
                                   1584 ;green                     Allocated with name '_CylonBounce_green_65536_83'
                                   1585 ;curEffect                 Allocated with name '_CylonBounce_curEffect_65536_84'
                                   1586 ;curColor                  Allocated with name '_CylonBounce_curColor_65536_84'
                                   1587 ;i                         Allocated with name '_CylonBounce_i_131072_85'
                                   1588 ;j                         Allocated to registers r4 r7 
                                   1589 ;i                         Allocated to registers 
                                   1590 ;j                         Allocated with name '_CylonBounce_j_262144_92'
                                   1591 ;sloc0                     Allocated with name '_CylonBounce_sloc0_1_0'
                                   1592 ;sloc1                     Allocated with name '_CylonBounce_sloc1_1_0'
                                   1593 ;------------------------------------------------------------
                                   1594 ;	./src/WS2812.c:185: void CylonBounce(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t ReturnDelay)
                                   1595 ;	-----------------------------------------
                                   1596 ;	 function CylonBounce
                                   1597 ;	-----------------------------------------
      000CE4                       1598 _CylonBounce:
      000CE4 85 82 4C         [24] 1599 	mov	_CylonBounce_green_65536_83,dpl
                                   1600 ;	./src/WS2812.c:187: uint8_t curEffect = effect;
      000CE7 85 0C 4D         [24] 1601 	mov	_CylonBounce_curEffect_65536_84,_effect
                                   1602 ;	./src/WS2812.c:188: uint8_t curColor = _color;
      000CEA 85 0F 4E         [24] 1603 	mov	_CylonBounce_curColor_65536_84,__color
                                   1604 ;	./src/WS2812.c:189: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      000CED E4               [12] 1605 	clr	a
      000CEE F5 4F            [12] 1606 	mov	_CylonBounce_i_131072_85,a
      000CF0 F5 50            [12] 1607 	mov	(_CylonBounce_i_131072_85 + 1),a
      000CF2                       1608 00115$:
      000CF2 A9 48            [24] 1609 	mov	r1,_CylonBounce_PARM_4
      000CF4 AA 49            [24] 1610 	mov	r2,(_CylonBounce_PARM_4 + 1)
      000CF6 E5 08            [12] 1611 	mov	a,_NUM_LEDS
      000CF8 C3               [12] 1612 	clr	c
      000CF9 99               [12] 1613 	subb	a,r1
      000CFA F8               [12] 1614 	mov	r0,a
      000CFB E5 09            [12] 1615 	mov	a,(_NUM_LEDS + 1)
      000CFD 9A               [12] 1616 	subb	a,r2
      000CFE FD               [12] 1617 	mov	r5,a
      000CFF E8               [12] 1618 	mov	a,r0
      000D00 24 FE            [12] 1619 	add	a,#0xfe
      000D02 F8               [12] 1620 	mov	r0,a
      000D03 ED               [12] 1621 	mov	a,r5
      000D04 34 FF            [12] 1622 	addc	a,#0xff
      000D06 FD               [12] 1623 	mov	r5,a
      000D07 AE 4F            [24] 1624 	mov	r6,_CylonBounce_i_131072_85
      000D09 AF 50            [24] 1625 	mov	r7,(_CylonBounce_i_131072_85 + 1)
      000D0B C3               [12] 1626 	clr	c
      000D0C EE               [12] 1627 	mov	a,r6
      000D0D 98               [12] 1628 	subb	a,r0
      000D0E EF               [12] 1629 	mov	a,r7
      000D0F 9D               [12] 1630 	subb	a,r5
      000D10 40 03            [24] 1631 	jc	00165$
      000D12 02 0E 32         [24] 1632 	ljmp	00105$
      000D15                       1633 00165$:
                                   1634 ;	./src/WS2812.c:191: setAll(0, 0, 0);
      000D15 75 34 00         [24] 1635 	mov	_setAll_PARM_2,#0x00
      000D18 75 35 00         [24] 1636 	mov	_setAll_PARM_3,#0x00
      000D1B 75 82 00         [24] 1637 	mov	dpl,#0x00
      000D1E 12 09 1D         [24] 1638 	lcall	_setAll
                                   1639 ;	./src/WS2812.c:192: setPixel(i, red / 10, green / 10, blue / 10);
      000D21 AE 46            [24] 1640 	mov	r6,_CylonBounce_PARM_2
      000D23 7F 00            [12] 1641 	mov	r7,#0x00
      000D25 75 17 0A         [24] 1642 	mov	__divsint_PARM_2,#0x0a
                                   1643 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000D28 8F 18            [24] 1644 	mov	(__divsint_PARM_2 + 1),r7
      000D2A 8E 82            [24] 1645 	mov	dpl,r6
      000D2C 8F 83            [24] 1646 	mov	dph,r7
      000D2E 12 1C 89         [24] 1647 	lcall	__divsint
      000D31 AE 82            [24] 1648 	mov	r6,dpl
      000D33 AD 4C            [24] 1649 	mov	r5,_CylonBounce_green_65536_83
      000D35 7F 00            [12] 1650 	mov	r7,#0x00
      000D37 75 17 0A         [24] 1651 	mov	__divsint_PARM_2,#0x0a
                                   1652 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000D3A 8F 18            [24] 1653 	mov	(__divsint_PARM_2 + 1),r7
      000D3C 8D 82            [24] 1654 	mov	dpl,r5
      000D3E 8F 83            [24] 1655 	mov	dph,r7
      000D40 C0 06            [24] 1656 	push	ar6
      000D42 12 1C 89         [24] 1657 	lcall	__divsint
      000D45 AD 82            [24] 1658 	mov	r5,dpl
      000D47 A8 47            [24] 1659 	mov	r0,_CylonBounce_PARM_3
      000D49 7F 00            [12] 1660 	mov	r7,#0x00
      000D4B 75 17 0A         [24] 1661 	mov	__divsint_PARM_2,#0x0a
                                   1662 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000D4E 8F 18            [24] 1663 	mov	(__divsint_PARM_2 + 1),r7
      000D50 88 82            [24] 1664 	mov	dpl,r0
      000D52 8F 83            [24] 1665 	mov	dph,r7
      000D54 C0 05            [24] 1666 	push	ar5
      000D56 12 1C 89         [24] 1667 	lcall	__divsint
      000D59 A8 82            [24] 1668 	mov	r0,dpl
      000D5B D0 05            [24] 1669 	pop	ar5
      000D5D D0 06            [24] 1670 	pop	ar6
      000D5F 8E 31            [24] 1671 	mov	_setPixel_PARM_2,r6
      000D61 8D 32            [24] 1672 	mov	_setPixel_PARM_3,r5
      000D63 88 33            [24] 1673 	mov	_setPixel_PARM_4,r0
      000D65 85 4F 82         [24] 1674 	mov	dpl,_CylonBounce_i_131072_85
      000D68 85 50 83         [24] 1675 	mov	dph,(_CylonBounce_i_131072_85 + 1)
      000D6B C0 06            [24] 1676 	push	ar6
      000D6D C0 05            [24] 1677 	push	ar5
      000D6F C0 00            [24] 1678 	push	ar0
      000D71 12 08 D5         [24] 1679 	lcall	_setPixel
      000D74 D0 00            [24] 1680 	pop	ar0
      000D76 D0 05            [24] 1681 	pop	ar5
      000D78 D0 06            [24] 1682 	pop	ar6
                                   1683 ;	./src/WS2812.c:193: for (int16_t j = 1; j <= EyeSize; j++)
      000D7A 7C 01            [12] 1684 	mov	r4,#0x01
      000D7C 7F 00            [12] 1685 	mov	r7,#0x00
      000D7E                       1686 00112$:
      000D7E C3               [12] 1687 	clr	c
      000D7F E5 48            [12] 1688 	mov	a,_CylonBounce_PARM_4
      000D81 9C               [12] 1689 	subb	a,r4
      000D82 E5 49            [12] 1690 	mov	a,(_CylonBounce_PARM_4 + 1)
      000D84 64 80            [12] 1691 	xrl	a,#0x80
      000D86 8F F0            [24] 1692 	mov	b,r7
      000D88 63 F0 80         [24] 1693 	xrl	b,#0x80
      000D8B 95 F0            [12] 1694 	subb	a,b
      000D8D 40 41            [24] 1695 	jc	00104$
                                   1696 ;	./src/WS2812.c:195: CHECK_EFF;
      000D8F E5 0C            [12] 1697 	mov	a,_effect
      000D91 B5 4D 07         [24] 1698 	cjne	a,_CylonBounce_curEffect_65536_84,00101$
      000D94 E5 0F            [12] 1699 	mov	a,__color
      000D96 B5 4E 02         [24] 1700 	cjne	a,_CylonBounce_curColor_65536_84,00169$
      000D99 80 04            [24] 1701 	sjmp	00102$
      000D9B                       1702 00169$:
      000D9B                       1703 00101$:
      000D9B 75 0D 12         [24] 1704 	mov	__status,#0x12
      000D9E 22               [24] 1705 	ret
      000D9F                       1706 00102$:
                                   1707 ;	./src/WS2812.c:196: setPixel(i + j, green, red, blue);
      000D9F EC               [12] 1708 	mov	a,r4
      000DA0 25 4F            [12] 1709 	add	a,_CylonBounce_i_131072_85
      000DA2 F5 82            [12] 1710 	mov	dpl,a
      000DA4 EF               [12] 1711 	mov	a,r7
      000DA5 35 50            [12] 1712 	addc	a,(_CylonBounce_i_131072_85 + 1)
      000DA7 F5 83            [12] 1713 	mov	dph,a
      000DA9 85 4C 31         [24] 1714 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_83
      000DAC 85 46 32         [24] 1715 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000DAF 85 47 33         [24] 1716 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000DB2 C0 07            [24] 1717 	push	ar7
      000DB4 C0 06            [24] 1718 	push	ar6
      000DB6 C0 05            [24] 1719 	push	ar5
      000DB8 C0 04            [24] 1720 	push	ar4
      000DBA C0 00            [24] 1721 	push	ar0
      000DBC 12 08 D5         [24] 1722 	lcall	_setPixel
      000DBF D0 00            [24] 1723 	pop	ar0
      000DC1 D0 04            [24] 1724 	pop	ar4
      000DC3 D0 05            [24] 1725 	pop	ar5
      000DC5 D0 06            [24] 1726 	pop	ar6
      000DC7 D0 07            [24] 1727 	pop	ar7
                                   1728 ;	./src/WS2812.c:193: for (int16_t j = 1; j <= EyeSize; j++)
      000DC9 0C               [12] 1729 	inc	r4
      000DCA BC 00 B1         [24] 1730 	cjne	r4,#0x00,00112$
      000DCD 0F               [12] 1731 	inc	r7
      000DCE 80 AE            [24] 1732 	sjmp	00112$
      000DD0                       1733 00104$:
                                   1734 ;	./src/WS2812.c:198: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      000DD0 E5 48            [12] 1735 	mov	a,_CylonBounce_PARM_4
      000DD2 25 4F            [12] 1736 	add	a,_CylonBounce_i_131072_85
      000DD4 FC               [12] 1737 	mov	r4,a
      000DD5 E5 49            [12] 1738 	mov	a,(_CylonBounce_PARM_4 + 1)
      000DD7 35 50            [12] 1739 	addc	a,(_CylonBounce_i_131072_85 + 1)
      000DD9 FF               [12] 1740 	mov	r7,a
      000DDA 0C               [12] 1741 	inc	r4
      000DDB BC 00 01         [24] 1742 	cjne	r4,#0x00,00171$
      000DDE 0F               [12] 1743 	inc	r7
      000DDF                       1744 00171$:
      000DDF 8C 82            [24] 1745 	mov	dpl,r4
      000DE1 8F 83            [24] 1746 	mov	dph,r7
      000DE3 8E 31            [24] 1747 	mov	_setPixel_PARM_2,r6
      000DE5 8D 32            [24] 1748 	mov	_setPixel_PARM_3,r5
      000DE7 88 33            [24] 1749 	mov	_setPixel_PARM_4,r0
      000DE9 12 08 D5         [24] 1750 	lcall	_setPixel
                                   1751 ;	./src/WS2812.c:199: showStrip();
      000DEC 12 08 61         [24] 1752 	lcall	_showStrip
                                   1753 ;	./src/WS2812.c:200: _delay_ms(DELAY2);
      000DEF 85 08 17         [24] 1754 	mov	__divuint_PARM_2,_NUM_LEDS
      000DF2 85 09 18         [24] 1755 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000DF5 90 00 C8         [24] 1756 	mov	dptr,#0x00c8
      000DF8 12 18 5C         [24] 1757 	lcall	__divuint
      000DFB 85 0A 17         [24] 1758 	mov	__mulint_PARM_2,__delay
      000DFE 85 0B 18         [24] 1759 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000E01 12 1A 09         [24] 1760 	lcall	__mulint
      000E04 75 17 64         [24] 1761 	mov	__divuint_PARM_2,#0x64
      000E07 75 18 00         [24] 1762 	mov	(__divuint_PARM_2 + 1),#0x00
      000E0A 12 18 5C         [24] 1763 	lcall	__divuint
      000E0D E5 82            [12] 1764 	mov	a,dpl
      000E0F 85 83 F0         [24] 1765 	mov	b,dph
      000E12 24 01            [12] 1766 	add	a,#0x01
      000E14 FE               [12] 1767 	mov	r6,a
      000E15 E4               [12] 1768 	clr	a
      000E16 35 F0            [12] 1769 	addc	a,b
      000E18 FF               [12] 1770 	mov	r7,a
      000E19 7D 00            [12] 1771 	mov	r5,#0x00
      000E1B 7C 00            [12] 1772 	mov	r4,#0x00
      000E1D 8E 82            [24] 1773 	mov	dpl,r6
      000E1F 8F 83            [24] 1774 	mov	dph,r7
      000E21 8D F0            [24] 1775 	mov	b,r5
      000E23 EC               [12] 1776 	mov	a,r4
      000E24 12 05 CD         [24] 1777 	lcall	__delay_ms
                                   1778 ;	./src/WS2812.c:189: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      000E27 05 4F            [12] 1779 	inc	_CylonBounce_i_131072_85
      000E29 E4               [12] 1780 	clr	a
      000E2A B5 4F 02         [24] 1781 	cjne	a,_CylonBounce_i_131072_85,00172$
      000E2D 05 50            [12] 1782 	inc	(_CylonBounce_i_131072_85 + 1)
      000E2F                       1783 00172$:
      000E2F 02 0C F2         [24] 1784 	ljmp	00115$
      000E32                       1785 00105$:
                                   1786 ;	./src/WS2812.c:203: _delay_ms(ReturnDelay);
      000E32 AC 4A            [24] 1787 	mov	r4,_CylonBounce_PARM_5
      000E34 E5 4B            [12] 1788 	mov	a,(_CylonBounce_PARM_5 + 1)
      000E36 FD               [12] 1789 	mov	r5,a
      000E37 33               [12] 1790 	rlc	a
      000E38 95 E0            [12] 1791 	subb	a,acc
      000E3A FE               [12] 1792 	mov	r6,a
      000E3B FF               [12] 1793 	mov	r7,a
      000E3C 8C 82            [24] 1794 	mov	dpl,r4
      000E3E 8D 83            [24] 1795 	mov	dph,r5
      000E40 8E F0            [24] 1796 	mov	b,r6
      000E42 C0 07            [24] 1797 	push	ar7
      000E44 C0 06            [24] 1798 	push	ar6
      000E46 C0 05            [24] 1799 	push	ar5
      000E48 C0 04            [24] 1800 	push	ar4
      000E4A C0 02            [24] 1801 	push	ar2
      000E4C C0 01            [24] 1802 	push	ar1
      000E4E 12 05 CD         [24] 1803 	lcall	__delay_ms
      000E51 D0 01            [24] 1804 	pop	ar1
      000E53 D0 02            [24] 1805 	pop	ar2
      000E55 D0 04            [24] 1806 	pop	ar4
      000E57 D0 05            [24] 1807 	pop	ar5
      000E59 D0 06            [24] 1808 	pop	ar6
      000E5B D0 07            [24] 1809 	pop	ar7
                                   1810 ;	./src/WS2812.c:205: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      000E5D E5 08            [12] 1811 	mov	a,_NUM_LEDS
      000E5F C3               [12] 1812 	clr	c
      000E60 99               [12] 1813 	subb	a,r1
      000E61 F9               [12] 1814 	mov	r1,a
      000E62 E5 09            [12] 1815 	mov	a,(_NUM_LEDS + 1)
      000E64 9A               [12] 1816 	subb	a,r2
      000E65 FA               [12] 1817 	mov	r2,a
      000E66 E9               [12] 1818 	mov	a,r1
      000E67 24 FE            [12] 1819 	add	a,#0xfe
      000E69 F9               [12] 1820 	mov	r1,a
      000E6A EA               [12] 1821 	mov	a,r2
      000E6B 34 FF            [12] 1822 	addc	a,#0xff
      000E6D FA               [12] 1823 	mov	r2,a
      000E6E                       1824 00121$:
      000E6E 89 00            [24] 1825 	mov	ar0,r1
      000E70 8A 03            [24] 1826 	mov	ar3,r2
      000E72 C3               [12] 1827 	clr	c
      000E73 E4               [12] 1828 	clr	a
      000E74 98               [12] 1829 	subb	a,r0
      000E75 74 80            [12] 1830 	mov	a,#(0x00 ^ 0x80)
      000E77 8B F0            [24] 1831 	mov	b,r3
      000E79 63 F0 80         [24] 1832 	xrl	b,#0x80
      000E7C 95 F0            [12] 1833 	subb	a,b
      000E7E 40 03            [24] 1834 	jc	00173$
      000E80 02 10 66         [24] 1835 	ljmp	00110$
      000E83                       1836 00173$:
                                   1837 ;	./src/WS2812.c:207: setAll(0, 0, 0);
      000E83 C0 04            [24] 1838 	push	ar4
      000E85 C0 05            [24] 1839 	push	ar5
      000E87 C0 06            [24] 1840 	push	ar6
      000E89 C0 07            [24] 1841 	push	ar7
      000E8B 75 34 00         [24] 1842 	mov	_setAll_PARM_2,#0x00
      000E8E 75 35 00         [24] 1843 	mov	_setAll_PARM_3,#0x00
      000E91 75 82 00         [24] 1844 	mov	dpl,#0x00
      000E94 C0 07            [24] 1845 	push	ar7
      000E96 C0 06            [24] 1846 	push	ar6
      000E98 C0 05            [24] 1847 	push	ar5
      000E9A C0 04            [24] 1848 	push	ar4
      000E9C C0 02            [24] 1849 	push	ar2
      000E9E C0 01            [24] 1850 	push	ar1
      000EA0 12 09 1D         [24] 1851 	lcall	_setAll
                                   1852 ;	./src/WS2812.c:208: setPixel(i, red / 10, green / 10, blue / 10);
      000EA3 A8 46            [24] 1853 	mov	r0,_CylonBounce_PARM_2
      000EA5 7B 00            [12] 1854 	mov	r3,#0x00
      000EA7 75 17 0A         [24] 1855 	mov	__divsint_PARM_2,#0x0a
                                   1856 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EAA 8B 18            [24] 1857 	mov	(__divsint_PARM_2 + 1),r3
      000EAC 88 82            [24] 1858 	mov	dpl,r0
      000EAE 8B 83            [24] 1859 	mov	dph,r3
      000EB0 12 1C 89         [24] 1860 	lcall	__divsint
      000EB3 A8 82            [24] 1861 	mov	r0,dpl
      000EB5 D0 01            [24] 1862 	pop	ar1
      000EB7 D0 02            [24] 1863 	pop	ar2
      000EB9 D0 04            [24] 1864 	pop	ar4
      000EBB D0 05            [24] 1865 	pop	ar5
      000EBD D0 06            [24] 1866 	pop	ar6
      000EBF D0 07            [24] 1867 	pop	ar7
      000EC1 AB 4C            [24] 1868 	mov	r3,_CylonBounce_green_65536_83
      000EC3 7F 00            [12] 1869 	mov	r7,#0x00
      000EC5 75 17 0A         [24] 1870 	mov	__divsint_PARM_2,#0x0a
                                   1871 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EC8 8F 18            [24] 1872 	mov	(__divsint_PARM_2 + 1),r7
      000ECA 8B 82            [24] 1873 	mov	dpl,r3
      000ECC 8F 83            [24] 1874 	mov	dph,r7
      000ECE C0 05            [24] 1875 	push	ar5
      000ED0 C0 04            [24] 1876 	push	ar4
      000ED2 C0 02            [24] 1877 	push	ar2
      000ED4 C0 01            [24] 1878 	push	ar1
      000ED6 C0 00            [24] 1879 	push	ar0
      000ED8 12 1C 89         [24] 1880 	lcall	__divsint
      000EDB AE 82            [24] 1881 	mov	r6,dpl
      000EDD 8E 53            [24] 1882 	mov	_CylonBounce_sloc0_1_0,r6
      000EDF AE 47            [24] 1883 	mov	r6,_CylonBounce_PARM_3
      000EE1 7F 00            [12] 1884 	mov	r7,#0x00
      000EE3 75 17 0A         [24] 1885 	mov	__divsint_PARM_2,#0x0a
                                   1886 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000EE6 8F 18            [24] 1887 	mov	(__divsint_PARM_2 + 1),r7
      000EE8 8E 82            [24] 1888 	mov	dpl,r6
      000EEA 8F 83            [24] 1889 	mov	dph,r7
      000EEC 12 1C 89         [24] 1890 	lcall	__divsint
      000EEF AE 82            [24] 1891 	mov	r6,dpl
      000EF1 AF 83            [24] 1892 	mov	r7,dph
      000EF3 D0 00            [24] 1893 	pop	ar0
      000EF5 D0 01            [24] 1894 	pop	ar1
      000EF7 D0 02            [24] 1895 	pop	ar2
      000EF9 D0 04            [24] 1896 	pop	ar4
      000EFB D0 05            [24] 1897 	pop	ar5
      000EFD 8E 54            [24] 1898 	mov	_CylonBounce_sloc1_1_0,r6
      000EFF 88 31            [24] 1899 	mov	_setPixel_PARM_2,r0
      000F01 85 53 32         [24] 1900 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000F04 85 54 33         [24] 1901 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000F07 89 82            [24] 1902 	mov	dpl,r1
      000F09 8A 83            [24] 1903 	mov	dph,r2
      000F0B C0 07            [24] 1904 	push	ar7
      000F0D C0 06            [24] 1905 	push	ar6
      000F0F C0 05            [24] 1906 	push	ar5
      000F11 C0 04            [24] 1907 	push	ar4
      000F13 C0 02            [24] 1908 	push	ar2
      000F15 C0 01            [24] 1909 	push	ar1
      000F17 C0 00            [24] 1910 	push	ar0
      000F19 12 08 D5         [24] 1911 	lcall	_setPixel
      000F1C D0 00            [24] 1912 	pop	ar0
      000F1E D0 01            [24] 1913 	pop	ar1
      000F20 D0 02            [24] 1914 	pop	ar2
      000F22 D0 04            [24] 1915 	pop	ar4
      000F24 D0 05            [24] 1916 	pop	ar5
      000F26 D0 06            [24] 1917 	pop	ar6
      000F28 D0 07            [24] 1918 	pop	ar7
                                   1919 ;	./src/WS2812.c:209: for (int16_t j = 1; j <= EyeSize; j++)
      000F2A 75 51 01         [24] 1920 	mov	_CylonBounce_j_262144_92,#0x01
      000F2D 75 52 00         [24] 1921 	mov	(_CylonBounce_j_262144_92 + 1),#0x00
                                   1922 ;	./src/WS2812.c:219: _delay_ms(ReturnDelay);
      000F30 D0 07            [24] 1923 	pop	ar7
      000F32 D0 06            [24] 1924 	pop	ar6
      000F34 D0 05            [24] 1925 	pop	ar5
      000F36 D0 04            [24] 1926 	pop	ar4
                                   1927 ;	./src/WS2812.c:209: for (int16_t j = 1; j <= EyeSize; j++)
      000F38                       1928 00118$:
      000F38 C3               [12] 1929 	clr	c
      000F39 E5 48            [12] 1930 	mov	a,_CylonBounce_PARM_4
      000F3B 95 51            [12] 1931 	subb	a,_CylonBounce_j_262144_92
      000F3D E5 49            [12] 1932 	mov	a,(_CylonBounce_PARM_4 + 1)
      000F3F 64 80            [12] 1933 	xrl	a,#0x80
      000F41 85 52 F0         [24] 1934 	mov	b,(_CylonBounce_j_262144_92 + 1)
      000F44 63 F0 80         [24] 1935 	xrl	b,#0x80
      000F47 95 F0            [12] 1936 	subb	a,b
      000F49 40 4C            [24] 1937 	jc	00109$
                                   1938 ;	./src/WS2812.c:211: CHECK_EFF;
      000F4B E5 0C            [12] 1939 	mov	a,_effect
      000F4D B5 4D 07         [24] 1940 	cjne	a,_CylonBounce_curEffect_65536_84,00106$
      000F50 E5 0F            [12] 1941 	mov	a,__color
      000F52 B5 4E 02         [24] 1942 	cjne	a,_CylonBounce_curColor_65536_84,00177$
      000F55 80 04            [24] 1943 	sjmp	00107$
      000F57                       1944 00177$:
      000F57                       1945 00106$:
      000F57 75 0D 12         [24] 1946 	mov	__status,#0x12
      000F5A 22               [24] 1947 	ret
      000F5B                       1948 00107$:
                                   1949 ;	./src/WS2812.c:212: setPixel(i + j, green, red, blue);
      000F5B E5 51            [12] 1950 	mov	a,_CylonBounce_j_262144_92
      000F5D 29               [12] 1951 	add	a,r1
      000F5E F5 82            [12] 1952 	mov	dpl,a
      000F60 E5 52            [12] 1953 	mov	a,(_CylonBounce_j_262144_92 + 1)
      000F62 3A               [12] 1954 	addc	a,r2
      000F63 F5 83            [12] 1955 	mov	dph,a
      000F65 85 4C 31         [24] 1956 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_83
      000F68 85 46 32         [24] 1957 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000F6B 85 47 33         [24] 1958 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000F6E C0 07            [24] 1959 	push	ar7
      000F70 C0 06            [24] 1960 	push	ar6
      000F72 C0 05            [24] 1961 	push	ar5
      000F74 C0 04            [24] 1962 	push	ar4
      000F76 C0 02            [24] 1963 	push	ar2
      000F78 C0 01            [24] 1964 	push	ar1
      000F7A C0 00            [24] 1965 	push	ar0
      000F7C 12 08 D5         [24] 1966 	lcall	_setPixel
      000F7F D0 00            [24] 1967 	pop	ar0
      000F81 D0 01            [24] 1968 	pop	ar1
      000F83 D0 02            [24] 1969 	pop	ar2
      000F85 D0 04            [24] 1970 	pop	ar4
      000F87 D0 05            [24] 1971 	pop	ar5
      000F89 D0 06            [24] 1972 	pop	ar6
      000F8B D0 07            [24] 1973 	pop	ar7
                                   1974 ;	./src/WS2812.c:209: for (int16_t j = 1; j <= EyeSize; j++)
      000F8D 05 51            [12] 1975 	inc	_CylonBounce_j_262144_92
      000F8F E4               [12] 1976 	clr	a
      000F90 B5 51 A5         [24] 1977 	cjne	a,_CylonBounce_j_262144_92,00118$
      000F93 05 52            [12] 1978 	inc	(_CylonBounce_j_262144_92 + 1)
      000F95 80 A1            [24] 1979 	sjmp	00118$
      000F97                       1980 00109$:
                                   1981 ;	./src/WS2812.c:214: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      000F97 C0 04            [24] 1982 	push	ar4
      000F99 C0 05            [24] 1983 	push	ar5
      000F9B C0 06            [24] 1984 	push	ar6
      000F9D C0 07            [24] 1985 	push	ar7
      000F9F E5 48            [12] 1986 	mov	a,_CylonBounce_PARM_4
      000FA1 29               [12] 1987 	add	a,r1
      000FA2 FB               [12] 1988 	mov	r3,a
      000FA3 E5 49            [12] 1989 	mov	a,(_CylonBounce_PARM_4 + 1)
      000FA5 3A               [12] 1990 	addc	a,r2
      000FA6 FF               [12] 1991 	mov	r7,a
      000FA7 0B               [12] 1992 	inc	r3
      000FA8 BB 00 01         [24] 1993 	cjne	r3,#0x00,00179$
      000FAB 0F               [12] 1994 	inc	r7
      000FAC                       1995 00179$:
      000FAC 8B 82            [24] 1996 	mov	dpl,r3
      000FAE 8F 83            [24] 1997 	mov	dph,r7
      000FB0 88 31            [24] 1998 	mov	_setPixel_PARM_2,r0
      000FB2 85 53 32         [24] 1999 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000FB5 85 54 33         [24] 2000 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000FB8 C0 07            [24] 2001 	push	ar7
      000FBA C0 06            [24] 2002 	push	ar6
      000FBC C0 05            [24] 2003 	push	ar5
      000FBE C0 04            [24] 2004 	push	ar4
      000FC0 C0 02            [24] 2005 	push	ar2
      000FC2 C0 01            [24] 2006 	push	ar1
      000FC4 12 08 D5         [24] 2007 	lcall	_setPixel
                                   2008 ;	./src/WS2812.c:215: showStrip();
      000FC7 12 08 61         [24] 2009 	lcall	_showStrip
                                   2010 ;	./src/WS2812.c:216: _delay_ms(DELAY2);
      000FCA 85 08 17         [24] 2011 	mov	__divuint_PARM_2,_NUM_LEDS
      000FCD 85 09 18         [24] 2012 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000FD0 90 00 C8         [24] 2013 	mov	dptr,#0x00c8
      000FD3 12 18 5C         [24] 2014 	lcall	__divuint
      000FD6 D0 01            [24] 2015 	pop	ar1
      000FD8 D0 02            [24] 2016 	pop	ar2
      000FDA D0 04            [24] 2017 	pop	ar4
      000FDC D0 05            [24] 2018 	pop	ar5
      000FDE D0 06            [24] 2019 	pop	ar6
      000FE0 D0 07            [24] 2020 	pop	ar7
      000FE2 85 0A 17         [24] 2021 	mov	__mulint_PARM_2,__delay
      000FE5 85 0B 18         [24] 2022 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000FE8 C0 05            [24] 2023 	push	ar5
      000FEA C0 04            [24] 2024 	push	ar4
      000FEC C0 02            [24] 2025 	push	ar2
      000FEE C0 01            [24] 2026 	push	ar1
      000FF0 12 1A 09         [24] 2027 	lcall	__mulint
      000FF3 AE 82            [24] 2028 	mov	r6,dpl
      000FF5 AF 83            [24] 2029 	mov	r7,dph
      000FF7 D0 01            [24] 2030 	pop	ar1
      000FF9 D0 02            [24] 2031 	pop	ar2
      000FFB D0 04            [24] 2032 	pop	ar4
      000FFD D0 05            [24] 2033 	pop	ar5
      000FFF 8E 82            [24] 2034 	mov	dpl,r6
      001001 8F 83            [24] 2035 	mov	dph,r7
      001003 75 17 64         [24] 2036 	mov	__divuint_PARM_2,#0x64
      001006 75 18 00         [24] 2037 	mov	(__divuint_PARM_2 + 1),#0x00
      001009 C0 07            [24] 2038 	push	ar7
      00100B C0 06            [24] 2039 	push	ar6
      00100D C0 05            [24] 2040 	push	ar5
      00100F C0 04            [24] 2041 	push	ar4
      001011 C0 02            [24] 2042 	push	ar2
      001013 C0 01            [24] 2043 	push	ar1
      001015 12 18 5C         [24] 2044 	lcall	__divuint
      001018 E5 82            [12] 2045 	mov	a,dpl
      00101A 85 83 F0         [24] 2046 	mov	b,dph
      00101D D0 01            [24] 2047 	pop	ar1
      00101F D0 02            [24] 2048 	pop	ar2
      001021 D0 04            [24] 2049 	pop	ar4
      001023 D0 05            [24] 2050 	pop	ar5
      001025 D0 06            [24] 2051 	pop	ar6
      001027 D0 07            [24] 2052 	pop	ar7
      001029 24 01            [12] 2053 	add	a,#0x01
      00102B FE               [12] 2054 	mov	r6,a
      00102C E4               [12] 2055 	clr	a
      00102D 35 F0            [12] 2056 	addc	a,b
      00102F FF               [12] 2057 	mov	r7,a
      001030 7D 00            [12] 2058 	mov	r5,#0x00
      001032 7C 00            [12] 2059 	mov	r4,#0x00
      001034 8E 82            [24] 2060 	mov	dpl,r6
      001036 8F 83            [24] 2061 	mov	dph,r7
      001038 8D F0            [24] 2062 	mov	b,r5
      00103A EC               [12] 2063 	mov	a,r4
      00103B C0 07            [24] 2064 	push	ar7
      00103D C0 06            [24] 2065 	push	ar6
      00103F C0 05            [24] 2066 	push	ar5
      001041 C0 04            [24] 2067 	push	ar4
      001043 C0 02            [24] 2068 	push	ar2
      001045 C0 01            [24] 2069 	push	ar1
      001047 12 05 CD         [24] 2070 	lcall	__delay_ms
      00104A D0 01            [24] 2071 	pop	ar1
      00104C D0 02            [24] 2072 	pop	ar2
      00104E D0 04            [24] 2073 	pop	ar4
      001050 D0 05            [24] 2074 	pop	ar5
      001052 D0 06            [24] 2075 	pop	ar6
      001054 D0 07            [24] 2076 	pop	ar7
                                   2077 ;	./src/WS2812.c:205: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      001056 19               [12] 2078 	dec	r1
      001057 B9 FF 01         [24] 2079 	cjne	r1,#0xff,00180$
      00105A 1A               [12] 2080 	dec	r2
      00105B                       2081 00180$:
      00105B D0 07            [24] 2082 	pop	ar7
      00105D D0 06            [24] 2083 	pop	ar6
      00105F D0 05            [24] 2084 	pop	ar5
      001061 D0 04            [24] 2085 	pop	ar4
      001063 02 0E 6E         [24] 2086 	ljmp	00121$
      001066                       2087 00110$:
                                   2088 ;	./src/WS2812.c:219: _delay_ms(ReturnDelay);
      001066 8C 82            [24] 2089 	mov	dpl,r4
      001068 8D 83            [24] 2090 	mov	dph,r5
      00106A 8E F0            [24] 2091 	mov	b,r6
      00106C EF               [12] 2092 	mov	a,r7
                                   2093 ;	./src/WS2812.c:220: }
      00106D 02 05 CD         [24] 2094 	ljmp	__delay_ms
                                   2095 ;------------------------------------------------------------
                                   2096 ;Allocation info for local variables in function 'colorWipe'
                                   2097 ;------------------------------------------------------------
                                   2098 ;red                       Allocated with name '_colorWipe_PARM_2'
                                   2099 ;blue                      Allocated with name '_colorWipe_PARM_3'
                                   2100 ;orient                    Allocated with name '_colorWipe_PARM_4'
                                   2101 ;green                     Allocated to registers r7 
                                   2102 ;curEffect                 Allocated to registers r6 
                                   2103 ;curColor                  Allocated with name '_colorWipe_curColor_65536_96'
                                   2104 ;i                         Allocated to registers r3 r4 
                                   2105 ;------------------------------------------------------------
                                   2106 ;	./src/WS2812.c:268: void colorWipe(uint8_t green, uint8_t red, uint8_t blue, uint8_t orient)
                                   2107 ;	-----------------------------------------
                                   2108 ;	 function colorWipe
                                   2109 ;	-----------------------------------------
      001070                       2110 _colorWipe:
      001070 AF 82            [24] 2111 	mov	r7,dpl
                                   2112 ;	./src/WS2812.c:270: uint8_t curEffect = effect;
      001072 AE 0C            [24] 2113 	mov	r6,_effect
                                   2114 ;	./src/WS2812.c:271: uint8_t curColor = _color;
      001074 85 0F 58         [24] 2115 	mov	_colorWipe_curColor_65536_96,__color
                                   2116 ;	./src/WS2812.c:272: for (uint16_t i = 0; i < NUM_LEDS; i++)
      001077 7B 00            [12] 2117 	mov	r3,#0x00
      001079 7C 00            [12] 2118 	mov	r4,#0x00
      00107B                       2119 00106$:
      00107B C3               [12] 2120 	clr	c
      00107C EB               [12] 2121 	mov	a,r3
      00107D 95 08            [12] 2122 	subb	a,_NUM_LEDS
      00107F EC               [12] 2123 	mov	a,r4
      001080 95 09            [12] 2124 	subb	a,(_NUM_LEDS + 1)
      001082 40 01            [24] 2125 	jc	00128$
      001084 22               [24] 2126 	ret
      001085                       2127 00128$:
                                   2128 ;	./src/WS2812.c:274: CHECK_EFF;
      001085 EE               [12] 2129 	mov	a,r6
      001086 B5 0C 07         [24] 2130 	cjne	a,_effect,00101$
      001089 E5 0F            [12] 2131 	mov	a,__color
      00108B B5 58 02         [24] 2132 	cjne	a,_colorWipe_curColor_65536_96,00131$
      00108E 80 04            [24] 2133 	sjmp	00102$
      001090                       2134 00131$:
      001090                       2135 00101$:
      001090 75 0D 12         [24] 2136 	mov	__status,#0x12
      001093 22               [24] 2137 	ret
      001094                       2138 00102$:
                                   2139 ;	./src/WS2812.c:275: setPixel(orient == 0 ? i : NUM_LEDS - i - 1, green, red, blue);
      001094 E5 57            [12] 2140 	mov	a,_colorWipe_PARM_4
      001096 70 06            [24] 2141 	jnz	00110$
      001098 8B 01            [24] 2142 	mov	ar1,r3
      00109A 8C 02            [24] 2143 	mov	ar2,r4
      00109C 80 11            [24] 2144 	sjmp	00111$
      00109E                       2145 00110$:
      00109E E5 08            [12] 2146 	mov	a,_NUM_LEDS
      0010A0 C3               [12] 2147 	clr	c
      0010A1 9B               [12] 2148 	subb	a,r3
      0010A2 F8               [12] 2149 	mov	r0,a
      0010A3 E5 09            [12] 2150 	mov	a,(_NUM_LEDS + 1)
      0010A5 9C               [12] 2151 	subb	a,r4
      0010A6 FD               [12] 2152 	mov	r5,a
      0010A7 E8               [12] 2153 	mov	a,r0
      0010A8 24 FF            [12] 2154 	add	a,#0xff
      0010AA F9               [12] 2155 	mov	r1,a
      0010AB ED               [12] 2156 	mov	a,r5
      0010AC 34 FF            [12] 2157 	addc	a,#0xff
      0010AE FA               [12] 2158 	mov	r2,a
      0010AF                       2159 00111$:
      0010AF 89 82            [24] 2160 	mov	dpl,r1
      0010B1 8A 83            [24] 2161 	mov	dph,r2
      0010B3 8F 31            [24] 2162 	mov	_setPixel_PARM_2,r7
      0010B5 85 55 32         [24] 2163 	mov	_setPixel_PARM_3,_colorWipe_PARM_2
      0010B8 85 56 33         [24] 2164 	mov	_setPixel_PARM_4,_colorWipe_PARM_3
      0010BB C0 07            [24] 2165 	push	ar7
      0010BD C0 06            [24] 2166 	push	ar6
      0010BF C0 04            [24] 2167 	push	ar4
      0010C1 C0 03            [24] 2168 	push	ar3
      0010C3 12 08 D5         [24] 2169 	lcall	_setPixel
                                   2170 ;	./src/WS2812.c:276: showStrip();
      0010C6 12 08 61         [24] 2171 	lcall	_showStrip
                                   2172 ;	./src/WS2812.c:277: _delay_ms(DELAY2 + 1);
      0010C9 85 08 17         [24] 2173 	mov	__divuint_PARM_2,_NUM_LEDS
      0010CC 85 09 18         [24] 2174 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0010CF 90 00 C8         [24] 2175 	mov	dptr,#0x00c8
      0010D2 12 18 5C         [24] 2176 	lcall	__divuint
      0010D5 85 0A 17         [24] 2177 	mov	__mulint_PARM_2,__delay
      0010D8 85 0B 18         [24] 2178 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0010DB 12 1A 09         [24] 2179 	lcall	__mulint
      0010DE 75 17 64         [24] 2180 	mov	__divuint_PARM_2,#0x64
      0010E1 75 18 00         [24] 2181 	mov	(__divuint_PARM_2 + 1),#0x00
      0010E4 12 18 5C         [24] 2182 	lcall	__divuint
      0010E7 E5 82            [12] 2183 	mov	a,dpl
      0010E9 85 83 F0         [24] 2184 	mov	b,dph
      0010EC 24 02            [12] 2185 	add	a,#0x02
      0010EE FA               [12] 2186 	mov	r2,a
      0010EF E4               [12] 2187 	clr	a
      0010F0 35 F0            [12] 2188 	addc	a,b
      0010F2 FD               [12] 2189 	mov	r5,a
      0010F3 8A 00            [24] 2190 	mov	ar0,r2
      0010F5 8D 01            [24] 2191 	mov	ar1,r5
      0010F7 7A 00            [12] 2192 	mov	r2,#0x00
      0010F9 7D 00            [12] 2193 	mov	r5,#0x00
      0010FB 88 82            [24] 2194 	mov	dpl,r0
      0010FD 89 83            [24] 2195 	mov	dph,r1
      0010FF 8A F0            [24] 2196 	mov	b,r2
      001101 ED               [12] 2197 	mov	a,r5
      001102 12 05 CD         [24] 2198 	lcall	__delay_ms
      001105 D0 03            [24] 2199 	pop	ar3
      001107 D0 04            [24] 2200 	pop	ar4
      001109 D0 06            [24] 2201 	pop	ar6
      00110B D0 07            [24] 2202 	pop	ar7
                                   2203 ;	./src/WS2812.c:272: for (uint16_t i = 0; i < NUM_LEDS; i++)
      00110D 0B               [12] 2204 	inc	r3
      00110E BB 00 01         [24] 2205 	cjne	r3,#0x00,00133$
      001111 0C               [12] 2206 	inc	r4
      001112                       2207 00133$:
                                   2208 ;	./src/WS2812.c:279: }
      001112 02 10 7B         [24] 2209 	ljmp	00106$
                                   2210 ;------------------------------------------------------------
                                   2211 ;Allocation info for local variables in function 'rainbowCycle'
                                   2212 ;------------------------------------------------------------
                                   2213 ;r                         Allocated to registers r6 
                                   2214 ;g                         Allocated to registers r0 
                                   2215 ;b                         Allocated with name '_rainbowCycle_sloc0_1_0'
                                   2216 ;curEffect                 Allocated with name '_rainbowCycle_curEffect_65536_100'
                                   2217 ;curColor                  Allocated with name '_rainbowCycle_curColor_65536_100'
                                   2218 ;WheelPos                  Allocated with name '_rainbowCycle_WheelPos_65536_100'
                                   2219 ;j                         Allocated to registers r4 r5 
                                   2220 ;i                         Allocated to registers r2 r3 
                                   2221 ;sloc0                     Allocated with name '_rainbowCycle_sloc0_1_0'
                                   2222 ;------------------------------------------------------------
                                   2223 ;	./src/WS2812.c:281: void rainbowCycle()
                                   2224 ;	-----------------------------------------
                                   2225 ;	 function rainbowCycle
                                   2226 ;	-----------------------------------------
      001115                       2227 _rainbowCycle:
                                   2228 ;	./src/WS2812.c:284: uint8_t curEffect = effect;
      001115 85 0C 59         [24] 2229 	mov	_rainbowCycle_curEffect_65536_100,_effect
                                   2230 ;	./src/WS2812.c:285: uint8_t curColor = _color;
      001118 85 0F 5A         [24] 2231 	mov	_rainbowCycle_curColor_65536_100,__color
                                   2232 ;	./src/WS2812.c:288: for (uint16_t j = 0; j < 256 * 5; j++)
      00111B 7C 00            [12] 2233 	mov	r4,#0x00
      00111D 7D 00            [12] 2234 	mov	r5,#0x00
      00111F                       2235 00116$:
      00111F 8D 03            [24] 2236 	mov	ar3,r5
      001121 74 FB            [12] 2237 	mov	a,#0x100 - 0x05
      001123 2B               [12] 2238 	add	a,r3
      001124 50 01            [24] 2239 	jnc	00155$
      001126 22               [24] 2240 	ret
      001127                       2241 00155$:
                                   2242 ;	./src/WS2812.c:290: for (uint16_t i = 0; i < NUM_LEDS; i++)
      001127 7A 00            [12] 2243 	mov	r2,#0x00
      001129 7B 00            [12] 2244 	mov	r3,#0x00
      00112B                       2245 00113$:
      00112B C3               [12] 2246 	clr	c
      00112C EA               [12] 2247 	mov	a,r2
      00112D 95 08            [12] 2248 	subb	a,_NUM_LEDS
      00112F EB               [12] 2249 	mov	a,r3
      001130 95 09            [12] 2250 	subb	a,(_NUM_LEDS + 1)
      001132 40 03            [24] 2251 	jc	00156$
      001134 02 11 EB         [24] 2252 	ljmp	00110$
      001137                       2253 00156$:
                                   2254 ;	./src/WS2812.c:292: CHECK_EFF;
      001137 E5 0C            [12] 2255 	mov	a,_effect
      001139 B5 59 07         [24] 2256 	cjne	a,_rainbowCycle_curEffect_65536_100,00101$
      00113C E5 0F            [12] 2257 	mov	a,__color
      00113E B5 5A 02         [24] 2258 	cjne	a,_rainbowCycle_curColor_65536_100,00159$
      001141 80 04            [24] 2259 	sjmp	00102$
      001143                       2260 00159$:
      001143                       2261 00101$:
      001143 75 0D 12         [24] 2262 	mov	__status,#0x12
      001146 22               [24] 2263 	ret
      001147                       2264 00102$:
                                   2265 ;	./src/WS2812.c:293: WheelPos = (((i * 256 / NUM_LEDS) + j) & 255);
      001147 8A 00            [24] 2266 	mov	ar0,r2
      001149 88 01            [24] 2267 	mov	ar1,r0
      00114B 78 00            [12] 2268 	mov	r0,#0x00
      00114D 88 82            [24] 2269 	mov	dpl,r0
      00114F 89 83            [24] 2270 	mov	dph,r1
      001151 85 08 17         [24] 2271 	mov	__divuint_PARM_2,_NUM_LEDS
      001154 85 09 18         [24] 2272 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      001157 C0 05            [24] 2273 	push	ar5
      001159 C0 04            [24] 2274 	push	ar4
      00115B C0 03            [24] 2275 	push	ar3
      00115D C0 02            [24] 2276 	push	ar2
      00115F 12 18 5C         [24] 2277 	lcall	__divuint
      001162 A8 82            [24] 2278 	mov	r0,dpl
      001164 D0 02            [24] 2279 	pop	ar2
      001166 D0 03            [24] 2280 	pop	ar3
      001168 D0 04            [24] 2281 	pop	ar4
      00116A D0 05            [24] 2282 	pop	ar5
      00116C 8C 01            [24] 2283 	mov	ar1,r4
      00116E E9               [12] 2284 	mov	a,r1
      00116F 28               [12] 2285 	add	a,r0
      001170 F9               [12] 2286 	mov	r1,a
                                   2287 ;	./src/WS2812.c:295: if (WheelPos < 85)
      001171 B9 55 00         [24] 2288 	cjne	r1,#0x55,00160$
      001174                       2289 00160$:
      001174 50 17            [24] 2290 	jnc	00108$
                                   2291 ;	./src/WS2812.c:297: g = WheelPos * 3;
      001176 E9               [12] 2292 	mov	a,r1
      001177 75 F0 03         [24] 2293 	mov	b,#0x03
      00117A A4               [48] 2294 	mul	ab
      00117B F8               [12] 2295 	mov	r0,a
                                   2296 ;	./src/WS2812.c:298: r = 255 - WheelPos * 3;
      00117C 89 06            [24] 2297 	mov	ar6,r1
      00117E EE               [12] 2298 	mov	a,r6
      00117F 75 F0 03         [24] 2299 	mov	b,#0x03
      001182 A4               [48] 2300 	mul	ab
      001183 D3               [12] 2301 	setb	c
      001184 94 FF            [12] 2302 	subb	a,#0xff
      001186 F4               [12] 2303 	cpl	a
      001187 FE               [12] 2304 	mov	r6,a
                                   2305 ;	./src/WS2812.c:299: b = 0;
      001188 75 5C 00         [24] 2306 	mov	_rainbowCycle_sloc0_1_0,#0x00
      00118B 80 38            [24] 2307 	sjmp	00109$
      00118D                       2308 00108$:
                                   2309 ;	./src/WS2812.c:301: else if (WheelPos < 170)
      00118D B9 AA 00         [24] 2310 	cjne	r1,#0xaa,00162$
      001190                       2311 00162$:
      001190 50 1D            [24] 2312 	jnc	00105$
                                   2313 ;	./src/WS2812.c:303: WheelPos -= 85;
      001192 89 07            [24] 2314 	mov	ar7,r1
      001194 EF               [12] 2315 	mov	a,r7
      001195 24 AB            [12] 2316 	add	a,#0xab
                                   2317 ;	./src/WS2812.c:304: g = 255 - WheelPos * 3;
      001197 F5 5B            [12] 2318 	mov	_rainbowCycle_WheelPos_65536_100,a
      001199 FF               [12] 2319 	mov	r7,a
      00119A 75 F0 03         [24] 2320 	mov	b,#0x03
      00119D A4               [48] 2321 	mul	ab
      00119E D3               [12] 2322 	setb	c
      00119F 94 FF            [12] 2323 	subb	a,#0xff
      0011A1 F4               [12] 2324 	cpl	a
      0011A2 F8               [12] 2325 	mov	r0,a
                                   2326 ;	./src/WS2812.c:305: r = 0;
      0011A3 7E 00            [12] 2327 	mov	r6,#0x00
                                   2328 ;	./src/WS2812.c:306: b = WheelPos * 3;
      0011A5 E5 5B            [12] 2329 	mov	a,_rainbowCycle_WheelPos_65536_100
      0011A7 75 F0 03         [24] 2330 	mov	b,#0x03
      0011AA A4               [48] 2331 	mul	ab
      0011AB F5 5C            [12] 2332 	mov	_rainbowCycle_sloc0_1_0,a
      0011AD 80 16            [24] 2333 	sjmp	00109$
      0011AF                       2334 00105$:
                                   2335 ;	./src/WS2812.c:310: WheelPos -= 170;
      0011AF E9               [12] 2336 	mov	a,r1
      0011B0 24 56            [12] 2337 	add	a,#0x56
                                   2338 ;	./src/WS2812.c:311: g = 0;
                                   2339 ;	./src/WS2812.c:312: r = WheelPos * 3;
      0011B2 F9               [12] 2340 	mov	r1,a
      0011B3 78 00            [12] 2341 	mov	r0,#0x00
      0011B5 75 F0 03         [24] 2342 	mov	b,#0x03
      0011B8 A4               [48] 2343 	mul	ab
      0011B9 FE               [12] 2344 	mov	r6,a
                                   2345 ;	./src/WS2812.c:313: b = 255 - WheelPos * 3;
      0011BA E9               [12] 2346 	mov	a,r1
      0011BB 75 F0 03         [24] 2347 	mov	b,#0x03
      0011BE A4               [48] 2348 	mul	ab
      0011BF D3               [12] 2349 	setb	c
      0011C0 94 FF            [12] 2350 	subb	a,#0xff
      0011C2 F4               [12] 2351 	cpl	a
      0011C3 F5 5C            [12] 2352 	mov	_rainbowCycle_sloc0_1_0,a
      0011C5                       2353 00109$:
                                   2354 ;	./src/WS2812.c:316: setPixel(i, g, r, b);
      0011C5 88 31            [24] 2355 	mov	_setPixel_PARM_2,r0
      0011C7 8E 32            [24] 2356 	mov	_setPixel_PARM_3,r6
      0011C9 85 5C 33         [24] 2357 	mov	_setPixel_PARM_4,_rainbowCycle_sloc0_1_0
      0011CC 8A 82            [24] 2358 	mov	dpl,r2
      0011CE 8B 83            [24] 2359 	mov	dph,r3
      0011D0 C0 05            [24] 2360 	push	ar5
      0011D2 C0 04            [24] 2361 	push	ar4
      0011D4 C0 03            [24] 2362 	push	ar3
      0011D6 C0 02            [24] 2363 	push	ar2
      0011D8 12 08 D5         [24] 2364 	lcall	_setPixel
      0011DB D0 02            [24] 2365 	pop	ar2
      0011DD D0 03            [24] 2366 	pop	ar3
      0011DF D0 04            [24] 2367 	pop	ar4
      0011E1 D0 05            [24] 2368 	pop	ar5
                                   2369 ;	./src/WS2812.c:290: for (uint16_t i = 0; i < NUM_LEDS; i++)
      0011E3 0A               [12] 2370 	inc	r2
      0011E4 BA 00 01         [24] 2371 	cjne	r2,#0x00,00164$
      0011E7 0B               [12] 2372 	inc	r3
      0011E8                       2373 00164$:
      0011E8 02 11 2B         [24] 2374 	ljmp	00113$
      0011EB                       2375 00110$:
                                   2376 ;	./src/WS2812.c:318: showStrip();
      0011EB C0 05            [24] 2377 	push	ar5
      0011ED C0 04            [24] 2378 	push	ar4
      0011EF 12 08 61         [24] 2379 	lcall	_showStrip
                                   2380 ;	./src/WS2812.c:319: _delay_ms(DELAY);
      0011F2 85 08 17         [24] 2381 	mov	__divuint_PARM_2,_NUM_LEDS
      0011F5 85 09 18         [24] 2382 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0011F8 90 00 C8         [24] 2383 	mov	dptr,#0x00c8
      0011FB 12 18 5C         [24] 2384 	lcall	__divuint
      0011FE 85 0A 17         [24] 2385 	mov	__mulint_PARM_2,__delay
      001201 85 0B 18         [24] 2386 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      001204 12 1A 09         [24] 2387 	lcall	__mulint
      001207 75 17 0A         [24] 2388 	mov	__divuint_PARM_2,#0x0a
      00120A 75 18 00         [24] 2389 	mov	(__divuint_PARM_2 + 1),#0x00
      00120D 12 18 5C         [24] 2390 	lcall	__divuint
      001210 E5 82            [12] 2391 	mov	a,dpl
      001212 85 83 F0         [24] 2392 	mov	b,dph
      001215 24 01            [12] 2393 	add	a,#0x01
      001217 FE               [12] 2394 	mov	r6,a
      001218 E4               [12] 2395 	clr	a
      001219 35 F0            [12] 2396 	addc	a,b
      00121B FF               [12] 2397 	mov	r7,a
      00121C 7B 00            [12] 2398 	mov	r3,#0x00
      00121E 7A 00            [12] 2399 	mov	r2,#0x00
      001220 8E 82            [24] 2400 	mov	dpl,r6
      001222 8F 83            [24] 2401 	mov	dph,r7
      001224 8B F0            [24] 2402 	mov	b,r3
      001226 EA               [12] 2403 	mov	a,r2
      001227 12 05 CD         [24] 2404 	lcall	__delay_ms
      00122A D0 04            [24] 2405 	pop	ar4
      00122C D0 05            [24] 2406 	pop	ar5
                                   2407 ;	./src/WS2812.c:288: for (uint16_t j = 0; j < 256 * 5; j++)
      00122E 0C               [12] 2408 	inc	r4
      00122F BC 00 01         [24] 2409 	cjne	r4,#0x00,00165$
      001232 0D               [12] 2410 	inc	r5
      001233                       2411 00165$:
                                   2412 ;	./src/WS2812.c:321: }
      001233 02 11 1F         [24] 2413 	ljmp	00116$
                                   2414 ;------------------------------------------------------------
                                   2415 ;Allocation info for local variables in function 'theaterChase'
                                   2416 ;------------------------------------------------------------
                                   2417 ;red                       Allocated with name '_theaterChase_PARM_2'
                                   2418 ;blue                      Allocated with name '_theaterChase_PARM_3'
                                   2419 ;green                     Allocated with name '_theaterChase_green_65536_109'
                                   2420 ;curEffect                 Allocated to registers r6 
                                   2421 ;curColor                  Allocated to registers r5 
                                   2422 ;j                         Allocated with name '_theaterChase_j_131072_111'
                                   2423 ;q                         Allocated to registers r1 r2 
                                   2424 ;i                         Allocated to registers r3 r4 
                                   2425 ;i                         Allocated to registers r4 r7 
                                   2426 ;------------------------------------------------------------
                                   2427 ;	./src/WS2812.c:354: void theaterChase(uint8_t green, uint8_t red, uint8_t blue)
                                   2428 ;	-----------------------------------------
                                   2429 ;	 function theaterChase
                                   2430 ;	-----------------------------------------
      001236                       2431 _theaterChase:
      001236 85 82 5F         [24] 2432 	mov	_theaterChase_green_65536_109,dpl
                                   2433 ;	./src/WS2812.c:356: uint8_t curEffect = effect;
      001239 AE 0C            [24] 2434 	mov	r6,_effect
                                   2435 ;	./src/WS2812.c:357: uint8_t curColor = _color;
      00123B AD 0F            [24] 2436 	mov	r5,__color
                                   2437 ;	./src/WS2812.c:359: for (int16_t j = 0; j < 10; j++)
      00123D E4               [12] 2438 	clr	a
      00123E F5 60            [12] 2439 	mov	_theaterChase_j_131072_111,a
      001240 F5 61            [12] 2440 	mov	(_theaterChase_j_131072_111 + 1),a
      001242                       2441 00121$:
      001242 A9 60            [24] 2442 	mov	r1,_theaterChase_j_131072_111
      001244 AA 61            [24] 2443 	mov	r2,(_theaterChase_j_131072_111 + 1)
      001246 C3               [12] 2444 	clr	c
      001247 E9               [12] 2445 	mov	a,r1
      001248 94 0A            [12] 2446 	subb	a,#0x0a
      00124A EA               [12] 2447 	mov	a,r2
      00124B 64 80            [12] 2448 	xrl	a,#0x80
      00124D 94 80            [12] 2449 	subb	a,#0x80
      00124F 40 01            [24] 2450 	jc	00165$
      001251 22               [24] 2451 	ret
      001252                       2452 00165$:
                                   2453 ;	./src/WS2812.c:361: for (int16_t q = 0; q < 3; q++)
      001252 79 00            [12] 2454 	mov	r1,#0x00
      001254 7A 00            [12] 2455 	mov	r2,#0x00
      001256                       2456 00118$:
      001256 89 00            [24] 2457 	mov	ar0,r1
      001258 8A 04            [24] 2458 	mov	ar4,r2
      00125A C3               [12] 2459 	clr	c
      00125B E8               [12] 2460 	mov	a,r0
      00125C 94 03            [12] 2461 	subb	a,#0x03
      00125E EC               [12] 2462 	mov	a,r4
      00125F 64 80            [12] 2463 	xrl	a,#0x80
      001261 94 80            [12] 2464 	subb	a,#0x80
      001263 40 03            [24] 2465 	jc	00166$
      001265 02 13 77         [24] 2466 	ljmp	00122$
      001268                       2467 00166$:
                                   2468 ;	./src/WS2812.c:363: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      001268 7B 00            [12] 2469 	mov	r3,#0x00
      00126A 7C 00            [12] 2470 	mov	r4,#0x00
      00126C                       2471 00112$:
      00126C 8B 00            [24] 2472 	mov	ar0,r3
      00126E 8C 07            [24] 2473 	mov	ar7,r4
      001270 C3               [12] 2474 	clr	c
      001271 E8               [12] 2475 	mov	a,r0
      001272 95 08            [12] 2476 	subb	a,_NUM_LEDS
      001274 EF               [12] 2477 	mov	a,r7
      001275 95 09            [12] 2478 	subb	a,(_NUM_LEDS + 1)
      001277 50 4B            [24] 2479 	jnc	00104$
                                   2480 ;	./src/WS2812.c:365: CHECK_EFF;
      001279 EE               [12] 2481 	mov	a,r6
      00127A B5 0C 06         [24] 2482 	cjne	a,_effect,00101$
      00127D ED               [12] 2483 	mov	a,r5
      00127E B5 0F 02         [24] 2484 	cjne	a,__color,00170$
      001281 80 04            [24] 2485 	sjmp	00102$
      001283                       2486 00170$:
      001283                       2487 00101$:
      001283 75 0D 12         [24] 2488 	mov	__status,#0x12
      001286 22               [24] 2489 	ret
      001287                       2490 00102$:
                                   2491 ;	./src/WS2812.c:366: setPixel(i + q, green, red, blue); // turn every third pixel on
      001287 E9               [12] 2492 	mov	a,r1
      001288 2B               [12] 2493 	add	a,r3
      001289 F5 82            [12] 2494 	mov	dpl,a
      00128B EA               [12] 2495 	mov	a,r2
      00128C 3C               [12] 2496 	addc	a,r4
      00128D F5 83            [12] 2497 	mov	dph,a
      00128F 85 5F 31         [24] 2498 	mov	_setPixel_PARM_2,_theaterChase_green_65536_109
      001292 85 5D 32         [24] 2499 	mov	_setPixel_PARM_3,_theaterChase_PARM_2
      001295 85 5E 33         [24] 2500 	mov	_setPixel_PARM_4,_theaterChase_PARM_3
      001298 C0 06            [24] 2501 	push	ar6
      00129A C0 05            [24] 2502 	push	ar5
      00129C C0 04            [24] 2503 	push	ar4
      00129E C0 03            [24] 2504 	push	ar3
      0012A0 C0 02            [24] 2505 	push	ar2
      0012A2 C0 01            [24] 2506 	push	ar1
      0012A4 12 08 D5         [24] 2507 	lcall	_setPixel
      0012A7 D0 01            [24] 2508 	pop	ar1
      0012A9 D0 02            [24] 2509 	pop	ar2
      0012AB D0 03            [24] 2510 	pop	ar3
      0012AD D0 04            [24] 2511 	pop	ar4
      0012AF D0 05            [24] 2512 	pop	ar5
      0012B1 D0 06            [24] 2513 	pop	ar6
                                   2514 ;	./src/WS2812.c:363: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      0012B3 8B 00            [24] 2515 	mov	ar0,r3
      0012B5 8C 07            [24] 2516 	mov	ar7,r4
      0012B7 74 03            [12] 2517 	mov	a,#0x03
      0012B9 28               [12] 2518 	add	a,r0
      0012BA F8               [12] 2519 	mov	r0,a
      0012BB E4               [12] 2520 	clr	a
      0012BC 3F               [12] 2521 	addc	a,r7
      0012BD FF               [12] 2522 	mov	r7,a
      0012BE 88 03            [24] 2523 	mov	ar3,r0
      0012C0 8F 04            [24] 2524 	mov	ar4,r7
      0012C2 80 A8            [24] 2525 	sjmp	00112$
      0012C4                       2526 00104$:
                                   2527 ;	./src/WS2812.c:368: showStrip();
      0012C4 C0 06            [24] 2528 	push	ar6
      0012C6 C0 05            [24] 2529 	push	ar5
      0012C8 C0 02            [24] 2530 	push	ar2
      0012CA C0 01            [24] 2531 	push	ar1
      0012CC 12 08 61         [24] 2532 	lcall	_showStrip
                                   2533 ;	./src/WS2812.c:370: _delay_ms(DELAY);
      0012CF 85 08 17         [24] 2534 	mov	__divuint_PARM_2,_NUM_LEDS
      0012D2 85 09 18         [24] 2535 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0012D5 90 00 C8         [24] 2536 	mov	dptr,#0x00c8
      0012D8 12 18 5C         [24] 2537 	lcall	__divuint
      0012DB 85 0A 17         [24] 2538 	mov	__mulint_PARM_2,__delay
      0012DE 85 0B 18         [24] 2539 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0012E1 12 1A 09         [24] 2540 	lcall	__mulint
      0012E4 75 17 0A         [24] 2541 	mov	__divuint_PARM_2,#0x0a
      0012E7 75 18 00         [24] 2542 	mov	(__divuint_PARM_2 + 1),#0x00
      0012EA 12 18 5C         [24] 2543 	lcall	__divuint
      0012ED E5 82            [12] 2544 	mov	a,dpl
      0012EF 85 83 F0         [24] 2545 	mov	b,dph
      0012F2 24 01            [12] 2546 	add	a,#0x01
      0012F4 FC               [12] 2547 	mov	r4,a
      0012F5 E4               [12] 2548 	clr	a
      0012F6 35 F0            [12] 2549 	addc	a,b
      0012F8 FF               [12] 2550 	mov	r7,a
      0012F9 8C 00            [24] 2551 	mov	ar0,r4
      0012FB 8F 03            [24] 2552 	mov	ar3,r7
      0012FD 7C 00            [12] 2553 	mov	r4,#0x00
      0012FF 7F 00            [12] 2554 	mov	r7,#0x00
      001301 88 82            [24] 2555 	mov	dpl,r0
      001303 8B 83            [24] 2556 	mov	dph,r3
      001305 8C F0            [24] 2557 	mov	b,r4
      001307 EF               [12] 2558 	mov	a,r7
      001308 12 05 CD         [24] 2559 	lcall	__delay_ms
      00130B D0 01            [24] 2560 	pop	ar1
      00130D D0 02            [24] 2561 	pop	ar2
      00130F D0 05            [24] 2562 	pop	ar5
      001311 D0 06            [24] 2563 	pop	ar6
                                   2564 ;	./src/WS2812.c:372: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      001313 7C 00            [12] 2565 	mov	r4,#0x00
      001315 7F 00            [12] 2566 	mov	r7,#0x00
      001317                       2567 00115$:
      001317 8C 00            [24] 2568 	mov	ar0,r4
      001319 8F 03            [24] 2569 	mov	ar3,r7
      00131B C3               [12] 2570 	clr	c
      00131C E8               [12] 2571 	mov	a,r0
      00131D 95 08            [12] 2572 	subb	a,_NUM_LEDS
      00131F EB               [12] 2573 	mov	a,r3
      001320 95 09            [12] 2574 	subb	a,(_NUM_LEDS + 1)
      001322 50 4B            [24] 2575 	jnc	00119$
                                   2576 ;	./src/WS2812.c:374: CHECK_EFF;
      001324 EE               [12] 2577 	mov	a,r6
      001325 B5 0C 06         [24] 2578 	cjne	a,_effect,00105$
      001328 ED               [12] 2579 	mov	a,r5
      001329 B5 0F 02         [24] 2580 	cjne	a,__color,00174$
      00132C 80 04            [24] 2581 	sjmp	00106$
      00132E                       2582 00174$:
      00132E                       2583 00105$:
      00132E 75 0D 12         [24] 2584 	mov	__status,#0x12
      001331 22               [24] 2585 	ret
      001332                       2586 00106$:
                                   2587 ;	./src/WS2812.c:375: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      001332 E9               [12] 2588 	mov	a,r1
      001333 2C               [12] 2589 	add	a,r4
      001334 F5 82            [12] 2590 	mov	dpl,a
      001336 EA               [12] 2591 	mov	a,r2
      001337 3F               [12] 2592 	addc	a,r7
      001338 F5 83            [12] 2593 	mov	dph,a
      00133A 75 31 00         [24] 2594 	mov	_setPixel_PARM_2,#0x00
      00133D 75 32 00         [24] 2595 	mov	_setPixel_PARM_3,#0x00
      001340 75 33 00         [24] 2596 	mov	_setPixel_PARM_4,#0x00
      001343 C0 07            [24] 2597 	push	ar7
      001345 C0 06            [24] 2598 	push	ar6
      001347 C0 05            [24] 2599 	push	ar5
      001349 C0 04            [24] 2600 	push	ar4
      00134B C0 02            [24] 2601 	push	ar2
      00134D C0 01            [24] 2602 	push	ar1
      00134F 12 08 D5         [24] 2603 	lcall	_setPixel
      001352 D0 01            [24] 2604 	pop	ar1
      001354 D0 02            [24] 2605 	pop	ar2
      001356 D0 04            [24] 2606 	pop	ar4
      001358 D0 05            [24] 2607 	pop	ar5
      00135A D0 06            [24] 2608 	pop	ar6
      00135C D0 07            [24] 2609 	pop	ar7
                                   2610 ;	./src/WS2812.c:372: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      00135E 8C 00            [24] 2611 	mov	ar0,r4
      001360 8F 03            [24] 2612 	mov	ar3,r7
      001362 74 03            [12] 2613 	mov	a,#0x03
      001364 28               [12] 2614 	add	a,r0
      001365 F8               [12] 2615 	mov	r0,a
      001366 E4               [12] 2616 	clr	a
      001367 3B               [12] 2617 	addc	a,r3
      001368 FB               [12] 2618 	mov	r3,a
      001369 88 04            [24] 2619 	mov	ar4,r0
      00136B 8B 07            [24] 2620 	mov	ar7,r3
      00136D 80 A8            [24] 2621 	sjmp	00115$
      00136F                       2622 00119$:
                                   2623 ;	./src/WS2812.c:361: for (int16_t q = 0; q < 3; q++)
      00136F 09               [12] 2624 	inc	r1
      001370 B9 00 01         [24] 2625 	cjne	r1,#0x00,00175$
      001373 0A               [12] 2626 	inc	r2
      001374                       2627 00175$:
      001374 02 12 56         [24] 2628 	ljmp	00118$
      001377                       2629 00122$:
                                   2630 ;	./src/WS2812.c:359: for (int16_t j = 0; j < 10; j++)
      001377 05 60            [12] 2631 	inc	_theaterChase_j_131072_111
      001379 E4               [12] 2632 	clr	a
      00137A B5 60 02         [24] 2633 	cjne	a,_theaterChase_j_131072_111,00176$
      00137D 05 61            [12] 2634 	inc	(_theaterChase_j_131072_111 + 1)
      00137F                       2635 00176$:
                                   2636 ;	./src/WS2812.c:379: }
      00137F 02 12 42         [24] 2637 	ljmp	00121$
                                   2638 ;------------------------------------------------------------
                                   2639 ;Allocation info for local variables in function 'theaterChaseRainbow'
                                   2640 ;------------------------------------------------------------
                                   2641 ;r                         Allocated to registers r6 
                                   2642 ;b                         Allocated with name '_theaterChaseRainbow_sloc0_1_0'
                                   2643 ;g                         Allocated to registers r5 
                                   2644 ;curEffect                 Allocated with name '_theaterChaseRainbow_curEffect_65536_121'
                                   2645 ;curColor                  Allocated with name '_theaterChaseRainbow_curColor_65536_121'
                                   2646 ;WheelPos                  Allocated with name '_theaterChaseRainbow_WheelPos_65536_121'
                                   2647 ;j                         Allocated with name '_theaterChaseRainbow_j_131072_122'
                                   2648 ;q                         Allocated to registers r2 r3 
                                   2649 ;i                         Allocated to registers r0 r1 
                                   2650 ;i                         Allocated to registers r6 r7 
                                   2651 ;sloc0                     Allocated with name '_theaterChaseRainbow_sloc0_1_0'
                                   2652 ;------------------------------------------------------------
                                   2653 ;	./src/WS2812.c:381: void theaterChaseRainbow()
                                   2654 ;	-----------------------------------------
                                   2655 ;	 function theaterChaseRainbow
                                   2656 ;	-----------------------------------------
      001382                       2657 _theaterChaseRainbow:
                                   2658 ;	./src/WS2812.c:384: uint8_t curEffect = effect;
      001382 85 0C 62         [24] 2659 	mov	_theaterChaseRainbow_curEffect_65536_121,_effect
                                   2660 ;	./src/WS2812.c:385: uint8_t curColor = _color;
      001385 85 0F 63         [24] 2661 	mov	_theaterChaseRainbow_curColor_65536_121,__color
                                   2662 ;	./src/WS2812.c:388: for (int16_t j = 0; j < 256; j++)
      001388 E4               [12] 2663 	clr	a
      001389 F5 65            [12] 2664 	mov	_theaterChaseRainbow_j_131072_122,a
      00138B F5 66            [12] 2665 	mov	(_theaterChaseRainbow_j_131072_122 + 1),a
      00138D                       2666 00127$:
      00138D AB 66            [24] 2667 	mov	r3,(_theaterChaseRainbow_j_131072_122 + 1)
      00138F C3               [12] 2668 	clr	c
      001390 EB               [12] 2669 	mov	a,r3
      001391 64 80            [12] 2670 	xrl	a,#0x80
      001393 94 81            [12] 2671 	subb	a,#0x81
      001395 40 01            [24] 2672 	jc	00191$
      001397 22               [24] 2673 	ret
      001398                       2674 00191$:
                                   2675 ;	./src/WS2812.c:390: for (int16_t q = 0; q < 3; q++)
      001398 7A 00            [12] 2676 	mov	r2,#0x00
      00139A 7B 00            [12] 2677 	mov	r3,#0x00
      00139C                       2678 00124$:
      00139C 8A 00            [24] 2679 	mov	ar0,r2
      00139E 8B 01            [24] 2680 	mov	ar1,r3
      0013A0 C3               [12] 2681 	clr	c
      0013A1 E8               [12] 2682 	mov	a,r0
      0013A2 94 03            [12] 2683 	subb	a,#0x03
      0013A4 E9               [12] 2684 	mov	a,r1
      0013A5 64 80            [12] 2685 	xrl	a,#0x80
      0013A7 94 80            [12] 2686 	subb	a,#0x80
      0013A9 40 03            [24] 2687 	jc	00192$
      0013AB 02 15 22         [24] 2688 	ljmp	00128$
      0013AE                       2689 00192$:
                                   2690 ;	./src/WS2812.c:392: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      0013AE 78 00            [12] 2691 	mov	r0,#0x00
      0013B0 79 00            [12] 2692 	mov	r1,#0x00
      0013B2                       2693 00118$:
      0013B2 88 04            [24] 2694 	mov	ar4,r0
      0013B4 89 05            [24] 2695 	mov	ar5,r1
      0013B6 C3               [12] 2696 	clr	c
      0013B7 EC               [12] 2697 	mov	a,r4
      0013B8 95 08            [12] 2698 	subb	a,_NUM_LEDS
      0013BA ED               [12] 2699 	mov	a,r5
      0013BB 95 09            [12] 2700 	subb	a,(_NUM_LEDS + 1)
      0013BD 40 03            [24] 2701 	jc	00193$
      0013BF 02 14 81         [24] 2702 	ljmp	00110$
      0013C2                       2703 00193$:
                                   2704 ;	./src/WS2812.c:394: CHECK_EFF;
      0013C2 E5 0C            [12] 2705 	mov	a,_effect
      0013C4 B5 62 07         [24] 2706 	cjne	a,_theaterChaseRainbow_curEffect_65536_121,00101$
      0013C7 E5 0F            [12] 2707 	mov	a,__color
      0013C9 B5 63 02         [24] 2708 	cjne	a,_theaterChaseRainbow_curColor_65536_121,00196$
      0013CC 80 04            [24] 2709 	sjmp	00102$
      0013CE                       2710 00196$:
      0013CE                       2711 00101$:
      0013CE 75 0D 12         [24] 2712 	mov	__status,#0x12
      0013D1 22               [24] 2713 	ret
      0013D2                       2714 00102$:
                                   2715 ;	./src/WS2812.c:396: WheelPos = ((i + j) % 255);
      0013D2 E5 65            [12] 2716 	mov	a,_theaterChaseRainbow_j_131072_122
      0013D4 28               [12] 2717 	add	a,r0
      0013D5 FC               [12] 2718 	mov	r4,a
      0013D6 E5 66            [12] 2719 	mov	a,(_theaterChaseRainbow_j_131072_122 + 1)
      0013D8 39               [12] 2720 	addc	a,r1
      0013D9 FD               [12] 2721 	mov	r5,a
      0013DA 8C 82            [24] 2722 	mov	dpl,r4
      0013DC 8D 83            [24] 2723 	mov	dph,r5
      0013DE 75 17 FF         [24] 2724 	mov	__modsint_PARM_2,#0xff
      0013E1 75 18 00         [24] 2725 	mov	(__modsint_PARM_2 + 1),#0x00
      0013E4 C0 03            [24] 2726 	push	ar3
      0013E6 C0 02            [24] 2727 	push	ar2
      0013E8 C0 01            [24] 2728 	push	ar1
      0013EA C0 00            [24] 2729 	push	ar0
      0013EC 12 1C 13         [24] 2730 	lcall	__modsint
      0013EF AC 82            [24] 2731 	mov	r4,dpl
      0013F1 D0 00            [24] 2732 	pop	ar0
      0013F3 D0 01            [24] 2733 	pop	ar1
      0013F5 D0 02            [24] 2734 	pop	ar2
      0013F7 D0 03            [24] 2735 	pop	ar3
                                   2736 ;	./src/WS2812.c:398: if (WheelPos < 85)
      0013F9 BC 55 00         [24] 2737 	cjne	r4,#0x55,00197$
      0013FC                       2738 00197$:
      0013FC 50 17            [24] 2739 	jnc	00108$
                                   2740 ;	./src/WS2812.c:400: g = WheelPos * 3;
      0013FE EC               [12] 2741 	mov	a,r4
      0013FF 75 F0 03         [24] 2742 	mov	b,#0x03
      001402 A4               [48] 2743 	mul	ab
      001403 FD               [12] 2744 	mov	r5,a
                                   2745 ;	./src/WS2812.c:401: r = 255 - WheelPos * 3;
      001404 8C 06            [24] 2746 	mov	ar6,r4
      001406 EE               [12] 2747 	mov	a,r6
      001407 75 F0 03         [24] 2748 	mov	b,#0x03
      00140A A4               [48] 2749 	mul	ab
      00140B D3               [12] 2750 	setb	c
      00140C 94 FF            [12] 2751 	subb	a,#0xff
      00140E F4               [12] 2752 	cpl	a
      00140F FE               [12] 2753 	mov	r6,a
                                   2754 ;	./src/WS2812.c:402: b = 0;
      001410 75 67 00         [24] 2755 	mov	_theaterChaseRainbow_sloc0_1_0,#0x00
      001413 80 38            [24] 2756 	sjmp	00109$
      001415                       2757 00108$:
                                   2758 ;	./src/WS2812.c:404: else if (WheelPos < 170)
      001415 BC AA 00         [24] 2759 	cjne	r4,#0xaa,00199$
      001418                       2760 00199$:
      001418 50 1D            [24] 2761 	jnc	00105$
                                   2762 ;	./src/WS2812.c:406: WheelPos -= 85;
      00141A 8C 07            [24] 2763 	mov	ar7,r4
      00141C EF               [12] 2764 	mov	a,r7
      00141D 24 AB            [12] 2765 	add	a,#0xab
                                   2766 ;	./src/WS2812.c:407: g = 255 - WheelPos * 3;
      00141F F5 64            [12] 2767 	mov	_theaterChaseRainbow_WheelPos_65536_121,a
      001421 FF               [12] 2768 	mov	r7,a
      001422 75 F0 03         [24] 2769 	mov	b,#0x03
      001425 A4               [48] 2770 	mul	ab
      001426 D3               [12] 2771 	setb	c
      001427 94 FF            [12] 2772 	subb	a,#0xff
      001429 F4               [12] 2773 	cpl	a
      00142A FD               [12] 2774 	mov	r5,a
                                   2775 ;	./src/WS2812.c:408: r = 0;
      00142B 7E 00            [12] 2776 	mov	r6,#0x00
                                   2777 ;	./src/WS2812.c:409: b = WheelPos * 3;
      00142D E5 64            [12] 2778 	mov	a,_theaterChaseRainbow_WheelPos_65536_121
      00142F 75 F0 03         [24] 2779 	mov	b,#0x03
      001432 A4               [48] 2780 	mul	ab
      001433 F5 67            [12] 2781 	mov	_theaterChaseRainbow_sloc0_1_0,a
      001435 80 16            [24] 2782 	sjmp	00109$
      001437                       2783 00105$:
                                   2784 ;	./src/WS2812.c:413: WheelPos -= 170;
      001437 EC               [12] 2785 	mov	a,r4
      001438 24 56            [12] 2786 	add	a,#0x56
                                   2787 ;	./src/WS2812.c:414: g = 0;
                                   2788 ;	./src/WS2812.c:415: r = WheelPos * 3;
      00143A FC               [12] 2789 	mov	r4,a
      00143B 7D 00            [12] 2790 	mov	r5,#0x00
      00143D 75 F0 03         [24] 2791 	mov	b,#0x03
      001440 A4               [48] 2792 	mul	ab
      001441 FE               [12] 2793 	mov	r6,a
                                   2794 ;	./src/WS2812.c:416: b = 255 - WheelPos * 3;
      001442 EC               [12] 2795 	mov	a,r4
      001443 75 F0 03         [24] 2796 	mov	b,#0x03
      001446 A4               [48] 2797 	mul	ab
      001447 D3               [12] 2798 	setb	c
      001448 94 FF            [12] 2799 	subb	a,#0xff
      00144A F4               [12] 2800 	cpl	a
      00144B F5 67            [12] 2801 	mov	_theaterChaseRainbow_sloc0_1_0,a
      00144D                       2802 00109$:
                                   2803 ;	./src/WS2812.c:419: setPixel(i + q, g, r, b);
      00144D EA               [12] 2804 	mov	a,r2
      00144E 28               [12] 2805 	add	a,r0
      00144F F5 82            [12] 2806 	mov	dpl,a
      001451 EB               [12] 2807 	mov	a,r3
      001452 39               [12] 2808 	addc	a,r1
      001453 F5 83            [12] 2809 	mov	dph,a
      001455 8D 31            [24] 2810 	mov	_setPixel_PARM_2,r5
      001457 8E 32            [24] 2811 	mov	_setPixel_PARM_3,r6
      001459 85 67 33         [24] 2812 	mov	_setPixel_PARM_4,_theaterChaseRainbow_sloc0_1_0
      00145C C0 03            [24] 2813 	push	ar3
      00145E C0 02            [24] 2814 	push	ar2
      001460 C0 01            [24] 2815 	push	ar1
      001462 C0 00            [24] 2816 	push	ar0
      001464 12 08 D5         [24] 2817 	lcall	_setPixel
      001467 D0 00            [24] 2818 	pop	ar0
      001469 D0 01            [24] 2819 	pop	ar1
      00146B D0 02            [24] 2820 	pop	ar2
      00146D D0 03            [24] 2821 	pop	ar3
                                   2822 ;	./src/WS2812.c:392: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      00146F 88 06            [24] 2823 	mov	ar6,r0
      001471 89 07            [24] 2824 	mov	ar7,r1
      001473 74 03            [12] 2825 	mov	a,#0x03
      001475 2E               [12] 2826 	add	a,r6
      001476 FE               [12] 2827 	mov	r6,a
      001477 E4               [12] 2828 	clr	a
      001478 3F               [12] 2829 	addc	a,r7
      001479 FF               [12] 2830 	mov	r7,a
      00147A 8E 00            [24] 2831 	mov	ar0,r6
      00147C 8F 01            [24] 2832 	mov	ar1,r7
      00147E 02 13 B2         [24] 2833 	ljmp	00118$
      001481                       2834 00110$:
                                   2835 ;	./src/WS2812.c:422: showStrip();
      001481 C0 03            [24] 2836 	push	ar3
      001483 C0 02            [24] 2837 	push	ar2
      001485 12 08 61         [24] 2838 	lcall	_showStrip
                                   2839 ;	./src/WS2812.c:424: _delay_ms(DELAY);
      001488 85 08 17         [24] 2840 	mov	__divuint_PARM_2,_NUM_LEDS
      00148B 85 09 18         [24] 2841 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00148E 90 00 C8         [24] 2842 	mov	dptr,#0x00c8
      001491 12 18 5C         [24] 2843 	lcall	__divuint
      001494 85 0A 17         [24] 2844 	mov	__mulint_PARM_2,__delay
      001497 85 0B 18         [24] 2845 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      00149A 12 1A 09         [24] 2846 	lcall	__mulint
      00149D 75 17 0A         [24] 2847 	mov	__divuint_PARM_2,#0x0a
      0014A0 75 18 00         [24] 2848 	mov	(__divuint_PARM_2 + 1),#0x00
      0014A3 12 18 5C         [24] 2849 	lcall	__divuint
      0014A6 E5 82            [12] 2850 	mov	a,dpl
      0014A8 85 83 F0         [24] 2851 	mov	b,dph
      0014AB 24 01            [12] 2852 	add	a,#0x01
      0014AD FE               [12] 2853 	mov	r6,a
      0014AE E4               [12] 2854 	clr	a
      0014AF 35 F0            [12] 2855 	addc	a,b
      0014B1 FF               [12] 2856 	mov	r7,a
      0014B2 7D 00            [12] 2857 	mov	r5,#0x00
      0014B4 7C 00            [12] 2858 	mov	r4,#0x00
      0014B6 8E 82            [24] 2859 	mov	dpl,r6
      0014B8 8F 83            [24] 2860 	mov	dph,r7
      0014BA 8D F0            [24] 2861 	mov	b,r5
      0014BC EC               [12] 2862 	mov	a,r4
      0014BD 12 05 CD         [24] 2863 	lcall	__delay_ms
      0014C0 D0 02            [24] 2864 	pop	ar2
      0014C2 D0 03            [24] 2865 	pop	ar3
                                   2866 ;	./src/WS2812.c:426: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      0014C4 7E 00            [12] 2867 	mov	r6,#0x00
      0014C6 7F 00            [12] 2868 	mov	r7,#0x00
      0014C8                       2869 00121$:
      0014C8 8E 04            [24] 2870 	mov	ar4,r6
      0014CA 8F 05            [24] 2871 	mov	ar5,r7
      0014CC C3               [12] 2872 	clr	c
      0014CD EC               [12] 2873 	mov	a,r4
      0014CE 95 08            [12] 2874 	subb	a,_NUM_LEDS
      0014D0 ED               [12] 2875 	mov	a,r5
      0014D1 95 09            [12] 2876 	subb	a,(_NUM_LEDS + 1)
      0014D3 50 45            [24] 2877 	jnc	00125$
                                   2878 ;	./src/WS2812.c:428: CHECK_EFF;
      0014D5 E5 0C            [12] 2879 	mov	a,_effect
      0014D7 B5 62 07         [24] 2880 	cjne	a,_theaterChaseRainbow_curEffect_65536_121,00111$
      0014DA E5 0F            [12] 2881 	mov	a,__color
      0014DC B5 63 02         [24] 2882 	cjne	a,_theaterChaseRainbow_curColor_65536_121,00204$
      0014DF 80 04            [24] 2883 	sjmp	00112$
      0014E1                       2884 00204$:
      0014E1                       2885 00111$:
      0014E1 75 0D 12         [24] 2886 	mov	__status,#0x12
      0014E4 22               [24] 2887 	ret
      0014E5                       2888 00112$:
                                   2889 ;	./src/WS2812.c:429: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      0014E5 EA               [12] 2890 	mov	a,r2
      0014E6 2E               [12] 2891 	add	a,r6
      0014E7 F5 82            [12] 2892 	mov	dpl,a
      0014E9 EB               [12] 2893 	mov	a,r3
      0014EA 3F               [12] 2894 	addc	a,r7
      0014EB F5 83            [12] 2895 	mov	dph,a
      0014ED 75 31 00         [24] 2896 	mov	_setPixel_PARM_2,#0x00
      0014F0 75 32 00         [24] 2897 	mov	_setPixel_PARM_3,#0x00
      0014F3 75 33 00         [24] 2898 	mov	_setPixel_PARM_4,#0x00
      0014F6 C0 07            [24] 2899 	push	ar7
      0014F8 C0 06            [24] 2900 	push	ar6
      0014FA C0 03            [24] 2901 	push	ar3
      0014FC C0 02            [24] 2902 	push	ar2
      0014FE 12 08 D5         [24] 2903 	lcall	_setPixel
      001501 D0 02            [24] 2904 	pop	ar2
      001503 D0 03            [24] 2905 	pop	ar3
      001505 D0 06            [24] 2906 	pop	ar6
      001507 D0 07            [24] 2907 	pop	ar7
                                   2908 ;	./src/WS2812.c:426: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      001509 8E 04            [24] 2909 	mov	ar4,r6
      00150B 8F 05            [24] 2910 	mov	ar5,r7
      00150D 74 03            [12] 2911 	mov	a,#0x03
      00150F 2C               [12] 2912 	add	a,r4
      001510 FC               [12] 2913 	mov	r4,a
      001511 E4               [12] 2914 	clr	a
      001512 3D               [12] 2915 	addc	a,r5
      001513 FD               [12] 2916 	mov	r5,a
      001514 8C 06            [24] 2917 	mov	ar6,r4
      001516 8D 07            [24] 2918 	mov	ar7,r5
      001518 80 AE            [24] 2919 	sjmp	00121$
      00151A                       2920 00125$:
                                   2921 ;	./src/WS2812.c:390: for (int16_t q = 0; q < 3; q++)
      00151A 0A               [12] 2922 	inc	r2
      00151B BA 00 01         [24] 2923 	cjne	r2,#0x00,00205$
      00151E 0B               [12] 2924 	inc	r3
      00151F                       2925 00205$:
      00151F 02 13 9C         [24] 2926 	ljmp	00124$
      001522                       2927 00128$:
                                   2928 ;	./src/WS2812.c:388: for (int16_t j = 0; j < 256; j++)
      001522 05 65            [12] 2929 	inc	_theaterChaseRainbow_j_131072_122
      001524 E4               [12] 2930 	clr	a
      001525 B5 65 02         [24] 2931 	cjne	a,_theaterChaseRainbow_j_131072_122,00206$
      001528 05 66            [12] 2932 	inc	(_theaterChaseRainbow_j_131072_122 + 1)
      00152A                       2933 00206$:
                                   2934 ;	./src/WS2812.c:433: }
      00152A 02 13 8D         [24] 2935 	ljmp	00127$
                                   2936 ;------------------------------------------------------------
                                   2937 ;Allocation info for local variables in function 'Pattern3'
                                   2938 ;------------------------------------------------------------
                                   2939 ;r                         Allocated with name '_Pattern3_PARM_2'
                                   2940 ;b                         Allocated with name '_Pattern3_PARM_3'
                                   2941 ;orient                    Allocated with name '_Pattern3_PARM_4'
                                   2942 ;g                         Allocated to registers r7 
                                   2943 ;curEffect                 Allocated to registers r6 
                                   2944 ;curColor                  Allocated with name '_Pattern3_curColor_65536_136'
                                   2945 ;i                         Allocated to registers r3 r4 
                                   2946 ;sloc0                     Allocated with name '_Pattern3_sloc0_1_0'
                                   2947 ;sloc1                     Allocated with name '_Pattern3_sloc1_1_0'
                                   2948 ;------------------------------------------------------------
                                   2949 ;	./src/WS2812.c:435: void Pattern3(uint8_t g, uint8_t r, uint8_t b, uint8_t orient)
                                   2950 ;	-----------------------------------------
                                   2951 ;	 function Pattern3
                                   2952 ;	-----------------------------------------
      00152D                       2953 _Pattern3:
      00152D AF 82            [24] 2954 	mov	r7,dpl
                                   2955 ;	./src/WS2812.c:437: uint8_t curEffect = effect;
      00152F AE 0C            [24] 2956 	mov	r6,_effect
                                   2957 ;	./src/WS2812.c:438: uint8_t curColor = _color;
      001531 85 0F 6B         [24] 2958 	mov	_Pattern3_curColor_65536_136,__color
                                   2959 ;	./src/WS2812.c:439: for (int i = 0; i < (NUM_LEDS / 2); i++)
      001534 7B 00            [12] 2960 	mov	r3,#0x00
      001536 7C 00            [12] 2961 	mov	r4,#0x00
      001538                       2962 00106$:
      001538 A9 08            [24] 2963 	mov	r1,_NUM_LEDS
      00153A AA 09            [24] 2964 	mov	r2,(_NUM_LEDS + 1)
      00153C 89 6C            [24] 2965 	mov	_Pattern3_sloc0_1_0,r1
      00153E EA               [12] 2966 	mov	a,r2
      00153F C3               [12] 2967 	clr	c
      001540 13               [12] 2968 	rrc	a
      001541 C5 6C            [12] 2969 	xch	a,_Pattern3_sloc0_1_0
      001543 13               [12] 2970 	rrc	a
      001544 C5 6C            [12] 2971 	xch	a,_Pattern3_sloc0_1_0
      001546 F5 6D            [12] 2972 	mov	(_Pattern3_sloc0_1_0 + 1),a
      001548 8B 6E            [24] 2973 	mov	_Pattern3_sloc1_1_0,r3
      00154A 8C 6F            [24] 2974 	mov	(_Pattern3_sloc1_1_0 + 1),r4
      00154C C3               [12] 2975 	clr	c
      00154D E5 6E            [12] 2976 	mov	a,_Pattern3_sloc1_1_0
      00154F 95 6C            [12] 2977 	subb	a,_Pattern3_sloc0_1_0
      001551 E5 6F            [12] 2978 	mov	a,(_Pattern3_sloc1_1_0 + 1)
      001553 95 6D            [12] 2979 	subb	a,(_Pattern3_sloc0_1_0 + 1)
      001555 40 03            [24] 2980 	jc	00134$
      001557 02 16 30         [24] 2981 	ljmp	00104$
      00155A                       2982 00134$:
                                   2983 ;	./src/WS2812.c:441: CHECK_EFF;
      00155A EE               [12] 2984 	mov	a,r6
      00155B B5 0C 07         [24] 2985 	cjne	a,_effect,00101$
      00155E E5 0F            [12] 2986 	mov	a,__color
      001560 B5 6B 02         [24] 2987 	cjne	a,_Pattern3_curColor_65536_136,00137$
      001563 80 04            [24] 2988 	sjmp	00102$
      001565                       2989 00137$:
      001565                       2990 00101$:
      001565 75 0D 12         [24] 2991 	mov	__status,#0x12
      001568 22               [24] 2992 	ret
      001569                       2993 00102$:
                                   2994 ;	./src/WS2812.c:442: setPixel(orient ? (NUM_LEDS / 2) + i : NUM_LEDS - 1 - i, g, r, b);
      001569 E5 6A            [12] 2995 	mov	a,_Pattern3_PARM_4
      00156B 60 0C            [24] 2996 	jz	00110$
      00156D E5 6E            [12] 2997 	mov	a,_Pattern3_sloc1_1_0
      00156F 25 6C            [12] 2998 	add	a,_Pattern3_sloc0_1_0
      001571 F8               [12] 2999 	mov	r0,a
      001572 E5 6F            [12] 3000 	mov	a,(_Pattern3_sloc1_1_0 + 1)
      001574 35 6D            [12] 3001 	addc	a,(_Pattern3_sloc0_1_0 + 1)
      001576 FD               [12] 3002 	mov	r5,a
      001577 80 0E            [24] 3003 	sjmp	00111$
      001579                       3004 00110$:
      001579 19               [12] 3005 	dec	r1
      00157A B9 FF 01         [24] 3006 	cjne	r1,#0xff,00139$
      00157D 1A               [12] 3007 	dec	r2
      00157E                       3008 00139$:
      00157E E9               [12] 3009 	mov	a,r1
      00157F C3               [12] 3010 	clr	c
      001580 95 6E            [12] 3011 	subb	a,_Pattern3_sloc1_1_0
      001582 F8               [12] 3012 	mov	r0,a
      001583 EA               [12] 3013 	mov	a,r2
      001584 95 6F            [12] 3014 	subb	a,(_Pattern3_sloc1_1_0 + 1)
      001586 FD               [12] 3015 	mov	r5,a
      001587                       3016 00111$:
      001587 88 82            [24] 3017 	mov	dpl,r0
      001589 8D 83            [24] 3018 	mov	dph,r5
      00158B 8F 31            [24] 3019 	mov	_setPixel_PARM_2,r7
      00158D 85 68 32         [24] 3020 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      001590 85 69 33         [24] 3021 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      001593 C0 07            [24] 3022 	push	ar7
      001595 C0 06            [24] 3023 	push	ar6
      001597 C0 04            [24] 3024 	push	ar4
      001599 C0 03            [24] 3025 	push	ar3
      00159B 12 08 D5         [24] 3026 	lcall	_setPixel
      00159E D0 03            [24] 3027 	pop	ar3
      0015A0 D0 04            [24] 3028 	pop	ar4
      0015A2 D0 06            [24] 3029 	pop	ar6
      0015A4 D0 07            [24] 3030 	pop	ar7
                                   3031 ;	./src/WS2812.c:443: setPixel(orient ? ((NUM_LEDS / 2) - 1) - i : i, g, r, b);
      0015A6 E5 6A            [12] 3032 	mov	a,_Pattern3_PARM_4
      0015A8 60 1C            [24] 3033 	jz	00112$
      0015AA AA 08            [24] 3034 	mov	r2,_NUM_LEDS
      0015AC E5 09            [12] 3035 	mov	a,(_NUM_LEDS + 1)
      0015AE C3               [12] 3036 	clr	c
      0015AF 13               [12] 3037 	rrc	a
      0015B0 CA               [12] 3038 	xch	a,r2
      0015B1 13               [12] 3039 	rrc	a
      0015B2 CA               [12] 3040 	xch	a,r2
      0015B3 FD               [12] 3041 	mov	r5,a
      0015B4 1A               [12] 3042 	dec	r2
      0015B5 BA FF 01         [24] 3043 	cjne	r2,#0xff,00141$
      0015B8 1D               [12] 3044 	dec	r5
      0015B9                       3045 00141$:
      0015B9 8B 00            [24] 3046 	mov	ar0,r3
      0015BB 8C 01            [24] 3047 	mov	ar1,r4
      0015BD EA               [12] 3048 	mov	a,r2
      0015BE C3               [12] 3049 	clr	c
      0015BF 98               [12] 3050 	subb	a,r0
      0015C0 FA               [12] 3051 	mov	r2,a
      0015C1 ED               [12] 3052 	mov	a,r5
      0015C2 99               [12] 3053 	subb	a,r1
      0015C3 FD               [12] 3054 	mov	r5,a
      0015C4 80 04            [24] 3055 	sjmp	00113$
      0015C6                       3056 00112$:
      0015C6 8B 02            [24] 3057 	mov	ar2,r3
      0015C8 8C 05            [24] 3058 	mov	ar5,r4
      0015CA                       3059 00113$:
      0015CA 8A 82            [24] 3060 	mov	dpl,r2
      0015CC 8D 83            [24] 3061 	mov	dph,r5
      0015CE 8F 31            [24] 3062 	mov	_setPixel_PARM_2,r7
      0015D0 85 68 32         [24] 3063 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      0015D3 85 69 33         [24] 3064 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      0015D6 C0 07            [24] 3065 	push	ar7
      0015D8 C0 06            [24] 3066 	push	ar6
      0015DA C0 04            [24] 3067 	push	ar4
      0015DC C0 03            [24] 3068 	push	ar3
      0015DE 12 08 D5         [24] 3069 	lcall	_setPixel
                                   3070 ;	./src/WS2812.c:444: showStrip();
      0015E1 12 08 61         [24] 3071 	lcall	_showStrip
                                   3072 ;	./src/WS2812.c:445: _delay_ms(DELAY2);
      0015E4 85 08 17         [24] 3073 	mov	__divuint_PARM_2,_NUM_LEDS
      0015E7 85 09 18         [24] 3074 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0015EA 90 00 C8         [24] 3075 	mov	dptr,#0x00c8
      0015ED 12 18 5C         [24] 3076 	lcall	__divuint
      0015F0 85 0A 17         [24] 3077 	mov	__mulint_PARM_2,__delay
      0015F3 85 0B 18         [24] 3078 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0015F6 12 1A 09         [24] 3079 	lcall	__mulint
      0015F9 75 17 64         [24] 3080 	mov	__divuint_PARM_2,#0x64
      0015FC 75 18 00         [24] 3081 	mov	(__divuint_PARM_2 + 1),#0x00
      0015FF 12 18 5C         [24] 3082 	lcall	__divuint
      001602 E5 82            [12] 3083 	mov	a,dpl
      001604 85 83 F0         [24] 3084 	mov	b,dph
      001607 24 01            [12] 3085 	add	a,#0x01
      001609 FA               [12] 3086 	mov	r2,a
      00160A E4               [12] 3087 	clr	a
      00160B 35 F0            [12] 3088 	addc	a,b
      00160D FD               [12] 3089 	mov	r5,a
      00160E 8A 00            [24] 3090 	mov	ar0,r2
      001610 8D 01            [24] 3091 	mov	ar1,r5
      001612 7A 00            [12] 3092 	mov	r2,#0x00
      001614 7D 00            [12] 3093 	mov	r5,#0x00
      001616 88 82            [24] 3094 	mov	dpl,r0
      001618 89 83            [24] 3095 	mov	dph,r1
      00161A 8A F0            [24] 3096 	mov	b,r2
      00161C ED               [12] 3097 	mov	a,r5
      00161D 12 05 CD         [24] 3098 	lcall	__delay_ms
      001620 D0 03            [24] 3099 	pop	ar3
      001622 D0 04            [24] 3100 	pop	ar4
      001624 D0 06            [24] 3101 	pop	ar6
      001626 D0 07            [24] 3102 	pop	ar7
                                   3103 ;	./src/WS2812.c:439: for (int i = 0; i < (NUM_LEDS / 2); i++)
      001628 0B               [12] 3104 	inc	r3
      001629 BB 00 01         [24] 3105 	cjne	r3,#0x00,00142$
      00162C 0C               [12] 3106 	inc	r4
      00162D                       3107 00142$:
      00162D 02 15 38         [24] 3108 	ljmp	00106$
      001630                       3109 00104$:
                                   3110 ;	./src/WS2812.c:447: _delay_ms(300);
      001630 90 01 2C         [24] 3111 	mov	dptr,#0x012c
      001633 E4               [12] 3112 	clr	a
      001634 F5 F0            [12] 3113 	mov	b,a
                                   3114 ;	./src/WS2812.c:448: }
      001636 02 05 CD         [24] 3115 	ljmp	__delay_ms
                                   3116 ;------------------------------------------------------------
                                   3117 ;Allocation info for local variables in function 'fadeToBlackBy'
                                   3118 ;------------------------------------------------------------
                                   3119 ;fadeBy                    Allocated with name '_fadeToBlackBy_PARM_2'
                                   3120 ;pixel                     Allocated with name '_fadeToBlackBy_pixel_65536_140'
                                   3121 ;r1                        Allocated to registers r1 
                                   3122 ;g1                        Allocated to registers r6 
                                   3123 ;b1                        Allocated to registers 
                                   3124 ;------------------------------------------------------------
                                   3125 ;	./src/WS2812.c:450: void fadeToBlackBy(uint16_t pixel, uint8_t fadeBy)
                                   3126 ;	-----------------------------------------
                                   3127 ;	 function fadeToBlackBy
                                   3128 ;	-----------------------------------------
      001639                       3129 _fadeToBlackBy:
      001639 85 82 71         [24] 3130 	mov	_fadeToBlackBy_pixel_65536_140,dpl
      00163C 85 83 72         [24] 3131 	mov	(_fadeToBlackBy_pixel_65536_140 + 1),dph
                                   3132 ;	./src/WS2812.c:455: r1 = leds[3 * pixel + 1];
      00163F 85 71 17         [24] 3133 	mov	__mulint_PARM_2,_fadeToBlackBy_pixel_65536_140
      001642 85 72 18         [24] 3134 	mov	(__mulint_PARM_2 + 1),(_fadeToBlackBy_pixel_65536_140 + 1)
      001645 90 00 03         [24] 3135 	mov	dptr,#0x0003
      001648 12 1A 09         [24] 3136 	lcall	__mulint
      00164B AC 82            [24] 3137 	mov	r4,dpl
      00164D AD 83            [24] 3138 	mov	r5,dph
      00164F 74 01            [12] 3139 	mov	a,#0x01
      001651 2C               [12] 3140 	add	a,r4
      001652 FA               [12] 3141 	mov	r2,a
      001653 E4               [12] 3142 	clr	a
      001654 3D               [12] 3143 	addc	a,r5
      001655 FB               [12] 3144 	mov	r3,a
      001656 EA               [12] 3145 	mov	a,r2
      001657 24 01            [12] 3146 	add	a,#_leds
      001659 F5 82            [12] 3147 	mov	dpl,a
      00165B EB               [12] 3148 	mov	a,r3
      00165C 34 00            [12] 3149 	addc	a,#(_leds >> 8)
      00165E F5 83            [12] 3150 	mov	dph,a
      001660 E0               [24] 3151 	movx	a,@dptr
      001661 FB               [12] 3152 	mov	r3,a
                                   3153 ;	./src/WS2812.c:456: g1 = leds[3 * pixel];
      001662 EC               [12] 3154 	mov	a,r4
      001663 24 01            [12] 3155 	add	a,#_leds
      001665 F5 82            [12] 3156 	mov	dpl,a
      001667 ED               [12] 3157 	mov	a,r5
      001668 34 00            [12] 3158 	addc	a,#(_leds >> 8)
      00166A F5 83            [12] 3159 	mov	dph,a
      00166C E0               [24] 3160 	movx	a,@dptr
      00166D FA               [12] 3161 	mov	r2,a
                                   3162 ;	./src/WS2812.c:457: b1 = leds[3 * pixel + 2];
      00166E 74 02            [12] 3163 	mov	a,#0x02
      001670 2C               [12] 3164 	add	a,r4
      001671 FC               [12] 3165 	mov	r4,a
      001672 E4               [12] 3166 	clr	a
      001673 3D               [12] 3167 	addc	a,r5
      001674 FD               [12] 3168 	mov	r5,a
      001675 EC               [12] 3169 	mov	a,r4
      001676 24 01            [12] 3170 	add	a,#_leds
      001678 F5 82            [12] 3171 	mov	dpl,a
      00167A ED               [12] 3172 	mov	a,r5
      00167B 34 00            [12] 3173 	addc	a,#(_leds >> 8)
      00167D F5 83            [12] 3174 	mov	dph,a
      00167F E0               [24] 3175 	movx	a,@dptr
      001680 FD               [12] 3176 	mov	r5,a
                                   3177 ;	./src/WS2812.c:459: r1 = (r1 <= 10) ? 0 : (int)r1 - (r1 * fadeBy / 256);
      001681 EB               [12] 3178 	mov	a,r3
      001682 24 F5            [12] 3179 	add	a,#0xff - 0x0a
      001684 92 01            [24] 3180 	mov	_fadeToBlackBy_sloc0_1_0,c
      001686 40 06            [24] 3181 	jc	00103$
      001688 79 00            [12] 3182 	mov	r1,#0x00
      00168A 7C 00            [12] 3183 	mov	r4,#0x00
      00168C 80 2E            [24] 3184 	sjmp	00104$
      00168E                       3185 00103$:
      00168E 8B 00            [24] 3186 	mov	ar0,r3
      001690 8B F0            [24] 3187 	mov	b,r3
      001692 E5 70            [12] 3188 	mov	a,_fadeToBlackBy_PARM_2
      001694 A4               [48] 3189 	mul	ab
      001695 F5 82            [12] 3190 	mov	dpl,a
      001697 85 F0 83         [24] 3191 	mov	dph,b
      00169A 75 17 00         [24] 3192 	mov	__divsint_PARM_2,#0x00
      00169D 75 18 01         [24] 3193 	mov	(__divsint_PARM_2 + 1),#0x01
      0016A0 C0 05            [24] 3194 	push	ar5
      0016A2 C0 02            [24] 3195 	push	ar2
      0016A4 C0 00            [24] 3196 	push	ar0
      0016A6 12 1C 89         [24] 3197 	lcall	__divsint
      0016A9 AB 82            [24] 3198 	mov	r3,dpl
      0016AB AF 83            [24] 3199 	mov	r7,dph
      0016AD D0 00            [24] 3200 	pop	ar0
      0016AF D0 02            [24] 3201 	pop	ar2
      0016B1 D0 05            [24] 3202 	pop	ar5
      0016B3 E8               [12] 3203 	mov	a,r0
      0016B4 C3               [12] 3204 	clr	c
      0016B5 9B               [12] 3205 	subb	a,r3
      0016B6 F8               [12] 3206 	mov	r0,a
      0016B7 F9               [12] 3207 	mov	r1,a
      0016B8 33               [12] 3208 	rlc	a
      0016B9 95 E0            [12] 3209 	subb	a,acc
      0016BB FC               [12] 3210 	mov	r4,a
      0016BC                       3211 00104$:
                                   3212 ;	./src/WS2812.c:460: g1 = (g1 <= 10) ? 0 : (int)g1 - (g1 * fadeBy / 256);
      0016BC EA               [12] 3213 	mov	a,r2
      0016BD 24 F5            [12] 3214 	add	a,#0xff - 0x0a
      0016BF 92 01            [24] 3215 	mov	_fadeToBlackBy_sloc0_1_0,c
      0016C1 40 06            [24] 3216 	jc	00105$
      0016C3 7E 00            [12] 3217 	mov	r6,#0x00
      0016C5 7F 00            [12] 3218 	mov	r7,#0x00
      0016C7 80 2E            [24] 3219 	sjmp	00106$
      0016C9                       3220 00105$:
      0016C9 8A 04            [24] 3221 	mov	ar4,r2
      0016CB 8A F0            [24] 3222 	mov	b,r2
      0016CD E5 70            [12] 3223 	mov	a,_fadeToBlackBy_PARM_2
      0016CF A4               [48] 3224 	mul	ab
      0016D0 F5 82            [12] 3225 	mov	dpl,a
      0016D2 85 F0 83         [24] 3226 	mov	dph,b
      0016D5 75 17 00         [24] 3227 	mov	__divsint_PARM_2,#0x00
      0016D8 75 18 01         [24] 3228 	mov	(__divsint_PARM_2 + 1),#0x01
      0016DB C0 05            [24] 3229 	push	ar5
      0016DD C0 04            [24] 3230 	push	ar4
      0016DF C0 01            [24] 3231 	push	ar1
      0016E1 12 1C 89         [24] 3232 	lcall	__divsint
      0016E4 AA 82            [24] 3233 	mov	r2,dpl
      0016E6 AB 83            [24] 3234 	mov	r3,dph
      0016E8 D0 01            [24] 3235 	pop	ar1
      0016EA D0 04            [24] 3236 	pop	ar4
      0016EC D0 05            [24] 3237 	pop	ar5
      0016EE EC               [12] 3238 	mov	a,r4
      0016EF C3               [12] 3239 	clr	c
      0016F0 9A               [12] 3240 	subb	a,r2
      0016F1 FC               [12] 3241 	mov	r4,a
      0016F2 FE               [12] 3242 	mov	r6,a
      0016F3 33               [12] 3243 	rlc	a
      0016F4 95 E0            [12] 3244 	subb	a,acc
      0016F6 FF               [12] 3245 	mov	r7,a
      0016F7                       3246 00106$:
                                   3247 ;	./src/WS2812.c:461: b1 = (b1 <= 10) ? 0 : (int)b1 - (b1 * fadeBy / 256);
      0016F7 ED               [12] 3248 	mov	a,r5
      0016F8 24 F5            [12] 3249 	add	a,#0xff - 0x0a
      0016FA 92 01            [24] 3250 	mov	_fadeToBlackBy_sloc0_1_0,c
      0016FC 40 06            [24] 3251 	jc	00107$
      0016FE 7C 00            [12] 3252 	mov	r4,#0x00
      001700 7F 00            [12] 3253 	mov	r7,#0x00
      001702 80 2E            [24] 3254 	sjmp	00108$
      001704                       3255 00107$:
      001704 8D 03            [24] 3256 	mov	ar3,r5
      001706 8D F0            [24] 3257 	mov	b,r5
      001708 E5 70            [12] 3258 	mov	a,_fadeToBlackBy_PARM_2
      00170A A4               [48] 3259 	mul	ab
      00170B F5 82            [12] 3260 	mov	dpl,a
      00170D 85 F0 83         [24] 3261 	mov	dph,b
      001710 75 17 00         [24] 3262 	mov	__divsint_PARM_2,#0x00
      001713 75 18 01         [24] 3263 	mov	(__divsint_PARM_2 + 1),#0x01
      001716 C0 06            [24] 3264 	push	ar6
      001718 C0 03            [24] 3265 	push	ar3
      00171A C0 01            [24] 3266 	push	ar1
      00171C 12 1C 89         [24] 3267 	lcall	__divsint
      00171F AA 82            [24] 3268 	mov	r2,dpl
      001721 AD 83            [24] 3269 	mov	r5,dph
      001723 D0 01            [24] 3270 	pop	ar1
      001725 D0 03            [24] 3271 	pop	ar3
      001727 D0 06            [24] 3272 	pop	ar6
      001729 EB               [12] 3273 	mov	a,r3
      00172A C3               [12] 3274 	clr	c
      00172B 9A               [12] 3275 	subb	a,r2
      00172C FB               [12] 3276 	mov	r3,a
      00172D FC               [12] 3277 	mov	r4,a
      00172E 33               [12] 3278 	rlc	a
      00172F 95 E0            [12] 3279 	subb	a,acc
      001731 FF               [12] 3280 	mov	r7,a
      001732                       3281 00108$:
      001732 8C 33            [24] 3282 	mov	_setPixel_PARM_4,r4
                                   3283 ;	./src/WS2812.c:463: setPixel(pixel, g1, r1, b1);
      001734 8E 31            [24] 3284 	mov	_setPixel_PARM_2,r6
      001736 89 32            [24] 3285 	mov	_setPixel_PARM_3,r1
      001738 85 71 82         [24] 3286 	mov	dpl,_fadeToBlackBy_pixel_65536_140
      00173B 85 72 83         [24] 3287 	mov	dph,(_fadeToBlackBy_pixel_65536_140 + 1)
                                   3288 ;	./src/WS2812.c:464: }
      00173E 02 08 D5         [24] 3289 	ljmp	_setPixel
                                   3290 ;------------------------------------------------------------
                                   3291 ;Allocation info for local variables in function 'meteorRain'
                                   3292 ;------------------------------------------------------------
                                   3293 ;green                     Allocated with name '_meteorRain_PARM_2'
                                   3294 ;blue                      Allocated with name '_meteorRain_PARM_3'
                                   3295 ;meteorSize                Allocated with name '_meteorRain_PARM_4'
                                   3296 ;meteorTrailDecay          Allocated with name '_meteorRain_PARM_5'
                                   3297 ;meteorRandomDecay         Allocated with name '_meteorRain_PARM_6'
                                   3298 ;red                       Allocated to registers 
                                   3299 ;------------------------------------------------------------
                                   3300 ;	./src/WS2812.c:466: void meteorRain(uint8_t red, uint8_t green, uint8_t blue, uint8_t meteorSize, uint8_t meteorTrailDecay, uint8_t meteorRandomDecay)
                                   3301 ;	-----------------------------------------
                                   3302 ;	 function meteorRain
                                   3303 ;	-----------------------------------------
      001741                       3304 _meteorRain:
                                   3305 ;	./src/WS2812.c:497: }
      001741 22               [24] 3306 	ret
                                   3307 ;------------------------------------------------------------
                                   3308 ;Allocation info for local variables in function 'sinWave'
                                   3309 ;------------------------------------------------------------
                                   3310 ;red                       Allocated with name '_sinWave_PARM_2'
                                   3311 ;blue                      Allocated with name '_sinWave_PARM_3'
                                   3312 ;green                     Allocated with name '_sinWave_green_65536_145'
                                   3313 ;dem                       Allocated to registers r3 
                                   3314 ;curEffect                 Allocated with name '_sinWave_curEffect_65536_146'
                                   3315 ;curColor                  Allocated with name '_sinWave_curColor_65536_146'
                                   3316 ;j                         Allocated to registers 
                                   3317 ;i                         Allocated with name '_sinWave_i_262144_149'
                                   3318 ;sloc0                     Allocated with name '_sinWave_sloc0_1_0'
                                   3319 ;------------------------------------------------------------
                                   3320 ;	./src/WS2812.c:572: void sinWave(uint8_t green, uint8_t red, uint8_t blue)
                                   3321 ;	-----------------------------------------
                                   3322 ;	 function sinWave
                                   3323 ;	-----------------------------------------
      001742                       3324 _sinWave:
      001742 85 82 75         [24] 3325 	mov	_sinWave_green_65536_145,dpl
                                   3326 ;	./src/WS2812.c:575: uint8_t curEffect = effect;
      001745 85 0C 76         [24] 3327 	mov	_sinWave_curEffect_65536_146,_effect
                                   3328 ;	./src/WS2812.c:576: uint8_t curColor = _color;
      001748 85 0F 77         [24] 3329 	mov	_sinWave_curColor_65536_146,__color
                                   3330 ;	./src/WS2812.c:577: for (uint8_t j = 0; j < 13; j++)
      00174B 7C 00            [12] 3331 	mov	r4,#0x00
      00174D                       3332 00112$:
      00174D BC 0D 00         [24] 3333 	cjne	r4,#0x0d,00140$
      001750                       3334 00140$:
      001750 40 01            [24] 3335 	jc	00141$
      001752 22               [24] 3336 	ret
      001753                       3337 00141$:
                                   3338 ;	./src/WS2812.c:579: dem = j;
      001753 8C 03            [24] 3339 	mov	ar3,r4
                                   3340 ;	./src/WS2812.c:580: for (int i = 0; i < NUM_LEDS; i++)
      001755 E4               [12] 3341 	clr	a
      001756 F5 78            [12] 3342 	mov	_sinWave_i_262144_149,a
      001758 F5 79            [12] 3343 	mov	(_sinWave_i_262144_149 + 1),a
      00175A                       3344 00109$:
      00175A 85 78 7A         [24] 3345 	mov	_sinWave_sloc0_1_0,_sinWave_i_262144_149
      00175D 85 79 7B         [24] 3346 	mov	(_sinWave_sloc0_1_0 + 1),(_sinWave_i_262144_149 + 1)
      001760 C3               [12] 3347 	clr	c
      001761 E5 7A            [12] 3348 	mov	a,_sinWave_sloc0_1_0
      001763 95 08            [12] 3349 	subb	a,_NUM_LEDS
      001765 E5 7B            [12] 3350 	mov	a,(_sinWave_sloc0_1_0 + 1)
      001767 95 09            [12] 3351 	subb	a,(_NUM_LEDS + 1)
      001769 40 03            [24] 3352 	jc	00142$
      00176B 02 18 19         [24] 3353 	ljmp	00106$
      00176E                       3354 00142$:
                                   3355 ;	./src/WS2812.c:582: setPixel(i, mang[dem]*green/100, mang[dem]*red/100, mang[dem]*blue/100);
      00176E EB               [12] 3356 	mov	a,r3
      00176F 24 22            [12] 3357 	add	a,#_mang
      001771 F9               [12] 3358 	mov	r1,a
      001772 87 06            [24] 3359 	mov	ar6,@r1
      001774 8E F0            [24] 3360 	mov	b,r6
      001776 E5 75            [12] 3361 	mov	a,_sinWave_green_65536_145
      001778 A4               [48] 3362 	mul	ab
      001779 F5 82            [12] 3363 	mov	dpl,a
      00177B 85 F0 83         [24] 3364 	mov	dph,b
      00177E 75 17 64         [24] 3365 	mov	__divsint_PARM_2,#0x64
      001781 75 18 00         [24] 3366 	mov	(__divsint_PARM_2 + 1),#0x00
      001784 C0 06            [24] 3367 	push	ar6
      001786 C0 04            [24] 3368 	push	ar4
      001788 C0 03            [24] 3369 	push	ar3
      00178A 12 1C 89         [24] 3370 	lcall	__divsint
      00178D AD 82            [24] 3371 	mov	r5,dpl
      00178F D0 03            [24] 3372 	pop	ar3
      001791 D0 04            [24] 3373 	pop	ar4
      001793 D0 06            [24] 3374 	pop	ar6
      001795 8E F0            [24] 3375 	mov	b,r6
      001797 E5 73            [12] 3376 	mov	a,_sinWave_PARM_2
      001799 A4               [48] 3377 	mul	ab
      00179A F5 82            [12] 3378 	mov	dpl,a
      00179C 85 F0 83         [24] 3379 	mov	dph,b
      00179F 75 17 64         [24] 3380 	mov	__divsint_PARM_2,#0x64
      0017A2 75 18 00         [24] 3381 	mov	(__divsint_PARM_2 + 1),#0x00
      0017A5 C0 06            [24] 3382 	push	ar6
      0017A7 C0 05            [24] 3383 	push	ar5
      0017A9 C0 04            [24] 3384 	push	ar4
      0017AB C0 03            [24] 3385 	push	ar3
      0017AD 12 1C 89         [24] 3386 	lcall	__divsint
      0017B0 AA 82            [24] 3387 	mov	r2,dpl
      0017B2 D0 03            [24] 3388 	pop	ar3
      0017B4 D0 04            [24] 3389 	pop	ar4
      0017B6 D0 05            [24] 3390 	pop	ar5
      0017B8 D0 06            [24] 3391 	pop	ar6
      0017BA 8E F0            [24] 3392 	mov	b,r6
      0017BC E5 74            [12] 3393 	mov	a,_sinWave_PARM_3
      0017BE A4               [48] 3394 	mul	ab
      0017BF F5 82            [12] 3395 	mov	dpl,a
      0017C1 85 F0 83         [24] 3396 	mov	dph,b
      0017C4 75 17 64         [24] 3397 	mov	__divsint_PARM_2,#0x64
      0017C7 75 18 00         [24] 3398 	mov	(__divsint_PARM_2 + 1),#0x00
      0017CA C0 05            [24] 3399 	push	ar5
      0017CC C0 04            [24] 3400 	push	ar4
      0017CE C0 03            [24] 3401 	push	ar3
      0017D0 C0 02            [24] 3402 	push	ar2
      0017D2 12 1C 89         [24] 3403 	lcall	__divsint
      0017D5 AE 82            [24] 3404 	mov	r6,dpl
      0017D7 D0 02            [24] 3405 	pop	ar2
      0017D9 D0 03            [24] 3406 	pop	ar3
      0017DB D0 04            [24] 3407 	pop	ar4
      0017DD D0 05            [24] 3408 	pop	ar5
      0017DF 8E 33            [24] 3409 	mov	_setPixel_PARM_4,r6
      0017E1 8D 31            [24] 3410 	mov	_setPixel_PARM_2,r5
      0017E3 8A 32            [24] 3411 	mov	_setPixel_PARM_3,r2
      0017E5 85 7A 82         [24] 3412 	mov	dpl,_sinWave_sloc0_1_0
      0017E8 85 7B 83         [24] 3413 	mov	dph,(_sinWave_sloc0_1_0 + 1)
      0017EB C0 04            [24] 3414 	push	ar4
      0017ED C0 03            [24] 3415 	push	ar3
      0017EF 12 08 D5         [24] 3416 	lcall	_setPixel
      0017F2 D0 03            [24] 3417 	pop	ar3
      0017F4 D0 04            [24] 3418 	pop	ar4
                                   3419 ;	./src/WS2812.c:583: if (dem++ == 12)
      0017F6 8B 07            [24] 3420 	mov	ar7,r3
      0017F8 0B               [12] 3421 	inc	r3
      0017F9 BF 0C 02         [24] 3422 	cjne	r7,#0x0c,00102$
                                   3423 ;	./src/WS2812.c:585: dem = 0;
      0017FC 7B 00            [12] 3424 	mov	r3,#0x00
      0017FE                       3425 00102$:
                                   3426 ;	./src/WS2812.c:587: CHECK_EFF;
      0017FE E5 0C            [12] 3427 	mov	a,_effect
      001800 B5 76 07         [24] 3428 	cjne	a,_sinWave_curEffect_65536_146,00103$
      001803 E5 0F            [12] 3429 	mov	a,__color
      001805 B5 77 02         [24] 3430 	cjne	a,_sinWave_curColor_65536_146,00147$
      001808 80 04            [24] 3431 	sjmp	00110$
      00180A                       3432 00147$:
      00180A                       3433 00103$:
      00180A 75 0D 12         [24] 3434 	mov	__status,#0x12
      00180D 22               [24] 3435 	ret
      00180E                       3436 00110$:
                                   3437 ;	./src/WS2812.c:580: for (int i = 0; i < NUM_LEDS; i++)
      00180E 05 78            [12] 3438 	inc	_sinWave_i_262144_149
      001810 E4               [12] 3439 	clr	a
      001811 B5 78 02         [24] 3440 	cjne	a,_sinWave_i_262144_149,00148$
      001814 05 79            [12] 3441 	inc	(_sinWave_i_262144_149 + 1)
      001816                       3442 00148$:
      001816 02 17 5A         [24] 3443 	ljmp	00109$
      001819                       3444 00106$:
                                   3445 ;	./src/WS2812.c:589: showStrip();
      001819 C0 04            [24] 3446 	push	ar4
      00181B 12 08 61         [24] 3447 	lcall	_showStrip
                                   3448 ;	./src/WS2812.c:590: _delay_ms(DELAY2);
      00181E 85 08 17         [24] 3449 	mov	__divuint_PARM_2,_NUM_LEDS
      001821 85 09 18         [24] 3450 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      001824 90 00 C8         [24] 3451 	mov	dptr,#0x00c8
      001827 12 18 5C         [24] 3452 	lcall	__divuint
      00182A 85 0A 17         [24] 3453 	mov	__mulint_PARM_2,__delay
      00182D 85 0B 18         [24] 3454 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      001830 12 1A 09         [24] 3455 	lcall	__mulint
      001833 75 17 64         [24] 3456 	mov	__divuint_PARM_2,#0x64
      001836 75 18 00         [24] 3457 	mov	(__divuint_PARM_2 + 1),#0x00
      001839 12 18 5C         [24] 3458 	lcall	__divuint
      00183C E5 82            [12] 3459 	mov	a,dpl
      00183E 85 83 F0         [24] 3460 	mov	b,dph
      001841 24 01            [12] 3461 	add	a,#0x01
      001843 FE               [12] 3462 	mov	r6,a
      001844 E4               [12] 3463 	clr	a
      001845 35 F0            [12] 3464 	addc	a,b
      001847 FF               [12] 3465 	mov	r7,a
      001848 7D 00            [12] 3466 	mov	r5,#0x00
      00184A 7B 00            [12] 3467 	mov	r3,#0x00
      00184C 8E 82            [24] 3468 	mov	dpl,r6
      00184E 8F 83            [24] 3469 	mov	dph,r7
      001850 8D F0            [24] 3470 	mov	b,r5
      001852 EB               [12] 3471 	mov	a,r3
      001853 12 05 CD         [24] 3472 	lcall	__delay_ms
      001856 D0 04            [24] 3473 	pop	ar4
                                   3474 ;	./src/WS2812.c:577: for (uint8_t j = 0; j < 13; j++)
      001858 0C               [12] 3475 	inc	r4
                                   3476 ;	./src/WS2812.c:592: }
      001859 02 17 4D         [24] 3477 	ljmp	00112$
                                   3478 	.area CSEG    (CODE)
                                   3479 	.area CONST   (CODE)
                                   3480 	.area XINIT   (CODE)
                                   3481 	.area CABS    (ABS,CODE)
