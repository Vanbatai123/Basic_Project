                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module WS2812
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _meteorRain_PARM_6
                                     12 	.globl _meteorRain_PARM_5
                                     13 	.globl _meteorRain_PARM_4
                                     14 	.globl _meteorRain_PARM_3
                                     15 	.globl _meteorRain_PARM_2
                                     16 	.globl _LED__SendByte_
                                     17 	.globl _LED__SendOne_
                                     18 	.globl _LED__SendZero_
                                     19 	.globl _rand
                                     20 	.globl __delay_ms
                                     21 	.globl _eiph1
                                     22 	.globl _eip1
                                     23 	.globl _pmd
                                     24 	.globl _pmen
                                     25 	.globl _pdtcnt
                                     26 	.globl _pdten
                                     27 	.globl _scon_1
                                     28 	.globl _eiph
                                     29 	.globl _aindids
                                     30 	.globl _spdr
                                     31 	.globl _spsr
                                     32 	.globl _spcr2
                                     33 	.globl _spcr
                                     34 	.globl _capcon4
                                     35 	.globl _capcon3
                                     36 	.globl _b
                                     37 	.globl _eip
                                     38 	.globl _c2h
                                     39 	.globl _c2l
                                     40 	.globl _pif
                                     41 	.globl _pipen
                                     42 	.globl _pinen
                                     43 	.globl _picon
                                     44 	.globl _adccon0
                                     45 	.globl _c1h
                                     46 	.globl _c1l
                                     47 	.globl _c0h
                                     48 	.globl _c0l
                                     49 	.globl _adcdly
                                     50 	.globl _adccon2
                                     51 	.globl _adccon1
                                     52 	.globl _acc
                                     53 	.globl _pwmcon1
                                     54 	.globl _piocon0
                                     55 	.globl _pwm3l
                                     56 	.globl _pwm2l
                                     57 	.globl _pwm1l
                                     58 	.globl _pwm0l
                                     59 	.globl _pwmpl
                                     60 	.globl _pwmcon0
                                     61 	.globl _fbd
                                     62 	.globl _pnp
                                     63 	.globl _pwm3h
                                     64 	.globl _pwm2h
                                     65 	.globl _pwm1h
                                     66 	.globl _pwm0h
                                     67 	.globl _pwmph
                                     68 	.globl _psw
                                     69 	.globl _adcmph
                                     70 	.globl _adcmpl
                                     71 	.globl _pwm5l
                                     72 	.globl _th2
                                     73 	.globl _pwm4l
                                     74 	.globl _tl2
                                     75 	.globl _rcmp2h
                                     76 	.globl _rcmp2l
                                     77 	.globl _t2mod
                                     78 	.globl _t2con
                                     79 	.globl _ta
                                     80 	.globl _piocon1
                                     81 	.globl _rh3
                                     82 	.globl _pwm5h
                                     83 	.globl _rl3
                                     84 	.globl _pwm4h
                                     85 	.globl _t3con
                                     86 	.globl _adcrh
                                     87 	.globl _adcrl
                                     88 	.globl _i2addr
                                     89 	.globl _i2con
                                     90 	.globl _i2toc
                                     91 	.globl _i2clk
                                     92 	.globl _i2stat
                                     93 	.globl _i2dat
                                     94 	.globl _saddr_1
                                     95 	.globl _saden_1
                                     96 	.globl _saden
                                     97 	.globl _ip
                                     98 	.globl _pwmintc
                                     99 	.globl _iph
                                    100 	.globl _p2s
                                    101 	.globl _p1sr
                                    102 	.globl _p1m2
                                    103 	.globl _p1s
                                    104 	.globl _p1m1
                                    105 	.globl _p0sr
                                    106 	.globl _p0m2
                                    107 	.globl _p0s
                                    108 	.globl _p0m1
                                    109 	.globl _p3
                                    110 	.globl _iapcn
                                    111 	.globl _iapfd
                                    112 	.globl _p3sr
                                    113 	.globl _p3m2
                                    114 	.globl _p3s
                                    115 	.globl _p3m1
                                    116 	.globl _bodcon1
                                    117 	.globl _wdcon
                                    118 	.globl _saddr
                                    119 	.globl _ie
                                    120 	.globl _iapah
                                    121 	.globl _iapal
                                    122 	.globl _iapuen
                                    123 	.globl _iaptrg
                                    124 	.globl _bodcon0
                                    125 	.globl _auxr1
                                    126 	.globl _p2
                                    127 	.globl _chpcon
                                    128 	.globl _eie1
                                    129 	.globl _eie
                                    130 	.globl _sbuf_1
                                    131 	.globl _sbuf
                                    132 	.globl _scon
                                    133 	.globl _cken
                                    134 	.globl _ckswt
                                    135 	.globl _ckdiv
                                    136 	.globl _capcon2
                                    137 	.globl _capcon1
                                    138 	.globl _capcon0
                                    139 	.globl _sfrs
                                    140 	.globl _p1
                                    141 	.globl _wkcon
                                    142 	.globl _ckcon
                                    143 	.globl _th1
                                    144 	.globl _th0
                                    145 	.globl _tl1
                                    146 	.globl _tl0
                                    147 	.globl _tmod
                                    148 	.globl _tcon
                                    149 	.globl _pcon
                                    150 	.globl _rwk
                                    151 	.globl _rctrim1
                                    152 	.globl _rctrim0
                                    153 	.globl _dph
                                    154 	.globl _dpl
                                    155 	.globl _sp
                                    156 	.globl _p0
                                    157 	.globl _sinWave_PARM_3
                                    158 	.globl _sinWave_PARM_2
                                    159 	.globl _fadeToBlackBy_PARM_2
                                    160 	.globl _Pattern3_PARM_4
                                    161 	.globl _Pattern3_PARM_3
                                    162 	.globl _Pattern3_PARM_2
                                    163 	.globl _theaterChase_PARM_3
                                    164 	.globl _theaterChase_PARM_2
                                    165 	.globl _colorWipe_PARM_4
                                    166 	.globl _colorWipe_PARM_3
                                    167 	.globl _colorWipe_PARM_2
                                    168 	.globl _CylonBounce_PARM_5
                                    169 	.globl _CylonBounce_PARM_4
                                    170 	.globl _CylonBounce_PARM_3
                                    171 	.globl _CylonBounce_PARM_2
                                    172 	.globl _Strobe_PARM_5
                                    173 	.globl _Strobe_PARM_4
                                    174 	.globl _Strobe_PARM_3
                                    175 	.globl _Strobe_PARM_2
                                    176 	.globl _FadeInOut_PARM_3
                                    177 	.globl _FadeInOut_PARM_2
                                    178 	.globl _setAll_PARM_3
                                    179 	.globl _setAll_PARM_2
                                    180 	.globl _setPixel_PARM_4
                                    181 	.globl _setPixel_PARM_3
                                    182 	.globl _setPixel_PARM_2
                                    183 	.globl _random2_PARM_2
                                    184 	.globl _mang
                                    185 	.globl _random
                                    186 	.globl _random2
                                    187 	.globl _clearAll
                                    188 	.globl _showStrip
                                    189 	.globl _setPixel
                                    190 	.globl _setAll
                                    191 	.globl _FadeInOut
                                    192 	.globl _Strobe
                                    193 	.globl _CylonBounce
                                    194 	.globl _colorWipe
                                    195 	.globl _rainbowCycle
                                    196 	.globl _theaterChase
                                    197 	.globl _theaterChaseRainbow
                                    198 	.globl _Pattern3
                                    199 	.globl _fadeToBlackBy
                                    200 	.globl _meteorRain
                                    201 	.globl _sinWave
                                    202 ;--------------------------------------------------------
                                    203 ; special function registers
                                    204 ;--------------------------------------------------------
                                    205 	.area RSEG    (ABS,DATA)
      000000                        206 	.org 0x0000
                           000080   207 _p0	=	0x0080
                           000081   208 _sp	=	0x0081
                           000082   209 _dpl	=	0x0082
                           000083   210 _dph	=	0x0083
                           000084   211 _rctrim0	=	0x0084
                           000085   212 _rctrim1	=	0x0085
                           000086   213 _rwk	=	0x0086
                           000087   214 _pcon	=	0x0087
                           000088   215 _tcon	=	0x0088
                           000089   216 _tmod	=	0x0089
                           00008A   217 _tl0	=	0x008a
                           00008B   218 _tl1	=	0x008b
                           00008C   219 _th0	=	0x008c
                           00008D   220 _th1	=	0x008d
                           00008E   221 _ckcon	=	0x008e
                           00008F   222 _wkcon	=	0x008f
                           000090   223 _p1	=	0x0090
                           000091   224 _sfrs	=	0x0091
                           000092   225 _capcon0	=	0x0092
                           000093   226 _capcon1	=	0x0093
                           000094   227 _capcon2	=	0x0094
                           000095   228 _ckdiv	=	0x0095
                           000096   229 _ckswt	=	0x0096
                           000097   230 _cken	=	0x0097
                           000098   231 _scon	=	0x0098
                           000099   232 _sbuf	=	0x0099
                           00009A   233 _sbuf_1	=	0x009a
                           00009B   234 _eie	=	0x009b
                           00009C   235 _eie1	=	0x009c
                           00009F   236 _chpcon	=	0x009f
                           0000A0   237 _p2	=	0x00a0
                           0000A2   238 _auxr1	=	0x00a2
                           0000A3   239 _bodcon0	=	0x00a3
                           0000A4   240 _iaptrg	=	0x00a4
                           0000A5   241 _iapuen	=	0x00a5
                           0000A6   242 _iapal	=	0x00a6
                           0000A7   243 _iapah	=	0x00a7
                           0000A8   244 _ie	=	0x00a8
                           0000A9   245 _saddr	=	0x00a9
                           0000AA   246 _wdcon	=	0x00aa
                           0000AB   247 _bodcon1	=	0x00ab
                           0000AC   248 _p3m1	=	0x00ac
                           0000AC   249 _p3s	=	0x00ac
                           0000AD   250 _p3m2	=	0x00ad
                           0000AD   251 _p3sr	=	0x00ad
                           0000AE   252 _iapfd	=	0x00ae
                           0000AF   253 _iapcn	=	0x00af
                           0000B0   254 _p3	=	0x00b0
                           0000B1   255 _p0m1	=	0x00b1
                           0000B1   256 _p0s	=	0x00b1
                           0000B2   257 _p0m2	=	0x00b2
                           0000B2   258 _p0sr	=	0x00b2
                           0000B3   259 _p1m1	=	0x00b3
                           0000B3   260 _p1s	=	0x00b3
                           0000B4   261 _p1m2	=	0x00b4
                           0000B4   262 _p1sr	=	0x00b4
                           0000B5   263 _p2s	=	0x00b5
                           0000B7   264 _iph	=	0x00b7
                           0000B7   265 _pwmintc	=	0x00b7
                           0000B8   266 _ip	=	0x00b8
                           0000B9   267 _saden	=	0x00b9
                           0000BA   268 _saden_1	=	0x00ba
                           0000BB   269 _saddr_1	=	0x00bb
                           0000BC   270 _i2dat	=	0x00bc
                           0000BD   271 _i2stat	=	0x00bd
                           0000BE   272 _i2clk	=	0x00be
                           0000BF   273 _i2toc	=	0x00bf
                           0000C0   274 _i2con	=	0x00c0
                           0000C1   275 _i2addr	=	0x00c1
                           0000C2   276 _adcrl	=	0x00c2
                           0000C3   277 _adcrh	=	0x00c3
                           0000C4   278 _t3con	=	0x00c4
                           0000C4   279 _pwm4h	=	0x00c4
                           0000C5   280 _rl3	=	0x00c5
                           0000C5   281 _pwm5h	=	0x00c5
                           0000C6   282 _rh3	=	0x00c6
                           0000C6   283 _piocon1	=	0x00c6
                           0000C7   284 _ta	=	0x00c7
                           0000C8   285 _t2con	=	0x00c8
                           0000C9   286 _t2mod	=	0x00c9
                           0000CA   287 _rcmp2l	=	0x00ca
                           0000CB   288 _rcmp2h	=	0x00cb
                           0000CC   289 _tl2	=	0x00cc
                           0000CC   290 _pwm4l	=	0x00cc
                           0000CD   291 _th2	=	0x00cd
                           0000CD   292 _pwm5l	=	0x00cd
                           0000CE   293 _adcmpl	=	0x00ce
                           0000CF   294 _adcmph	=	0x00cf
                           0000D0   295 _psw	=	0x00d0
                           0000D1   296 _pwmph	=	0x00d1
                           0000D2   297 _pwm0h	=	0x00d2
                           0000D3   298 _pwm1h	=	0x00d3
                           0000D4   299 _pwm2h	=	0x00d4
                           0000D5   300 _pwm3h	=	0x00d5
                           0000D6   301 _pnp	=	0x00d6
                           0000D7   302 _fbd	=	0x00d7
                           0000D8   303 _pwmcon0	=	0x00d8
                           0000D9   304 _pwmpl	=	0x00d9
                           0000DA   305 _pwm0l	=	0x00da
                           0000DB   306 _pwm1l	=	0x00db
                           0000DC   307 _pwm2l	=	0x00dc
                           0000DD   308 _pwm3l	=	0x00dd
                           0000DE   309 _piocon0	=	0x00de
                           0000DF   310 _pwmcon1	=	0x00df
                           0000E0   311 _acc	=	0x00e0
                           0000E1   312 _adccon1	=	0x00e1
                           0000E2   313 _adccon2	=	0x00e2
                           0000E3   314 _adcdly	=	0x00e3
                           0000E4   315 _c0l	=	0x00e4
                           0000E5   316 _c0h	=	0x00e5
                           0000E6   317 _c1l	=	0x00e6
                           0000E7   318 _c1h	=	0x00e7
                           0000E8   319 _adccon0	=	0x00e8
                           0000E9   320 _picon	=	0x00e9
                           0000EA   321 _pinen	=	0x00ea
                           0000EB   322 _pipen	=	0x00eb
                           0000EC   323 _pif	=	0x00ec
                           0000ED   324 _c2l	=	0x00ed
                           0000EE   325 _c2h	=	0x00ee
                           0000EF   326 _eip	=	0x00ef
                           0000F0   327 _b	=	0x00f0
                           0000F1   328 _capcon3	=	0x00f1
                           0000F2   329 _capcon4	=	0x00f2
                           0000F3   330 _spcr	=	0x00f3
                           0000F3   331 _spcr2	=	0x00f3
                           0000F4   332 _spsr	=	0x00f4
                           0000F5   333 _spdr	=	0x00f5
                           0000F6   334 _aindids	=	0x00f6
                           0000F7   335 _eiph	=	0x00f7
                           0000F8   336 _scon_1	=	0x00f8
                           0000F9   337 _pdten	=	0x00f9
                           0000FA   338 _pdtcnt	=	0x00fa
                           0000FB   339 _pmen	=	0x00fb
                           0000FC   340 _pmd	=	0x00fc
                           0000FE   341 _eip1	=	0x00fe
                           0000FF   342 _eiph1	=	0x00ff
                                    343 ;--------------------------------------------------------
                                    344 ; special function bits
                                    345 ;--------------------------------------------------------
                                    346 	.area RSEG    (ABS,DATA)
      000000                        347 	.org 0x0000
                                    348 ;--------------------------------------------------------
                                    349 ; overlayable register banks
                                    350 ;--------------------------------------------------------
                                    351 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        352 	.ds 8
                                    353 ;--------------------------------------------------------
                                    354 ; internal ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area DSEG    (DATA)
      000000                        357 _mang::
      000000                        358 	.ds 13
      00000D                        359 _random2_PARM_2:
      00000D                        360 	.ds 2
      00000F                        361 _setPixel_PARM_2:
      00000F                        362 	.ds 1
      000010                        363 _setPixel_PARM_3:
      000010                        364 	.ds 1
      000011                        365 _setPixel_PARM_4:
      000011                        366 	.ds 1
      000012                        367 _setAll_PARM_2:
      000012                        368 	.ds 1
      000013                        369 _setAll_PARM_3:
      000013                        370 	.ds 1
      000014                        371 _FadeInOut_PARM_2:
      000014                        372 	.ds 1
      000015                        373 _FadeInOut_PARM_3:
      000015                        374 	.ds 1
      000016                        375 _FadeInOut_green_65536_70:
      000016                        376 	.ds 1
      000017                        377 _FadeInOut_g_65536_71:
      000017                        378 	.ds 1
      000018                        379 _FadeInOut_r_65536_71:
      000018                        380 	.ds 1
      000019                        381 _FadeInOut_curEffect_65536_71:
      000019                        382 	.ds 1
      00001A                        383 _FadeInOut_curColor_65536_71:
      00001A                        384 	.ds 1
      00001B                        385 _FadeInOut_k_131072_75:
      00001B                        386 	.ds 2
      00001D                        387 _Strobe_PARM_2:
      00001D                        388 	.ds 1
      00001E                        389 _Strobe_PARM_3:
      00001E                        390 	.ds 1
      00001F                        391 _Strobe_PARM_4:
      00001F                        392 	.ds 2
      000021                        393 _Strobe_PARM_5:
      000021                        394 	.ds 2
      000023                        395 _Strobe_curColor_65536_79:
      000023                        396 	.ds 1
      000024                        397 _CylonBounce_PARM_2:
      000024                        398 	.ds 1
      000025                        399 _CylonBounce_PARM_3:
      000025                        400 	.ds 1
      000026                        401 _CylonBounce_PARM_4:
      000026                        402 	.ds 2
      000028                        403 _CylonBounce_PARM_5:
      000028                        404 	.ds 2
      00002A                        405 _CylonBounce_green_65536_83:
      00002A                        406 	.ds 1
      00002B                        407 _CylonBounce_curEffect_65536_84:
      00002B                        408 	.ds 1
      00002C                        409 _CylonBounce_curColor_65536_84:
      00002C                        410 	.ds 1
      00002D                        411 _CylonBounce_i_131072_85:
      00002D                        412 	.ds 2
      00002F                        413 _CylonBounce_j_262144_92:
      00002F                        414 	.ds 2
      000031                        415 _CylonBounce_sloc0_1_0:
      000031                        416 	.ds 1
      000032                        417 _CylonBounce_sloc1_1_0:
      000032                        418 	.ds 1
      000033                        419 _colorWipe_PARM_2:
      000033                        420 	.ds 1
      000034                        421 _colorWipe_PARM_3:
      000034                        422 	.ds 1
      000035                        423 _colorWipe_PARM_4:
      000035                        424 	.ds 1
      000036                        425 _colorWipe_curColor_65536_96:
      000036                        426 	.ds 1
      000037                        427 _rainbowCycle_curEffect_65536_100:
      000037                        428 	.ds 1
      000038                        429 _rainbowCycle_curColor_65536_100:
      000038                        430 	.ds 1
      000039                        431 _rainbowCycle_WheelPos_65536_100:
      000039                        432 	.ds 1
      00003A                        433 _rainbowCycle_sloc0_1_0:
      00003A                        434 	.ds 1
      00003B                        435 _theaterChase_PARM_2:
      00003B                        436 	.ds 1
      00003C                        437 _theaterChase_PARM_3:
      00003C                        438 	.ds 1
      00003D                        439 _theaterChase_green_65536_109:
      00003D                        440 	.ds 1
      00003E                        441 _theaterChase_j_131072_111:
      00003E                        442 	.ds 2
      000040                        443 _theaterChaseRainbow_curEffect_65536_121:
      000040                        444 	.ds 1
      000041                        445 _theaterChaseRainbow_curColor_65536_121:
      000041                        446 	.ds 1
      000042                        447 _theaterChaseRainbow_WheelPos_65536_121:
      000042                        448 	.ds 1
      000043                        449 _theaterChaseRainbow_j_131072_122:
      000043                        450 	.ds 2
      000045                        451 _theaterChaseRainbow_sloc0_1_0:
      000045                        452 	.ds 1
      000046                        453 _Pattern3_PARM_2:
      000046                        454 	.ds 1
      000047                        455 _Pattern3_PARM_3:
      000047                        456 	.ds 1
      000048                        457 _Pattern3_PARM_4:
      000048                        458 	.ds 1
      000049                        459 _Pattern3_curColor_65536_136:
      000049                        460 	.ds 1
      00004A                        461 _Pattern3_sloc0_1_0:
      00004A                        462 	.ds 2
      00004C                        463 _Pattern3_sloc1_1_0:
      00004C                        464 	.ds 2
      00004E                        465 _fadeToBlackBy_PARM_2:
      00004E                        466 	.ds 1
      00004F                        467 _fadeToBlackBy_pixel_65536_140:
      00004F                        468 	.ds 2
      000051                        469 _sinWave_PARM_2:
      000051                        470 	.ds 1
      000052                        471 _sinWave_PARM_3:
      000052                        472 	.ds 1
      000053                        473 _sinWave_green_65536_145:
      000053                        474 	.ds 1
      000054                        475 _sinWave_curEffect_65536_146:
      000054                        476 	.ds 1
      000055                        477 _sinWave_curColor_65536_146:
      000055                        478 	.ds 1
      000056                        479 _sinWave_i_262144_149:
      000056                        480 	.ds 2
      000058                        481 _sinWave_sloc0_1_0:
      000058                        482 	.ds 2
                                    483 ;--------------------------------------------------------
                                    484 ; overlayable items in internal ram
                                    485 ;--------------------------------------------------------
                                    486 	.area	OSEG    (OVR,DATA)
      000000                        487 _meteorRain_PARM_2:
      000000                        488 	.ds 1
      000001                        489 _meteorRain_PARM_3:
      000001                        490 	.ds 1
      000002                        491 _meteorRain_PARM_4:
      000002                        492 	.ds 1
      000003                        493 _meteorRain_PARM_5:
      000003                        494 	.ds 1
      000004                        495 _meteorRain_PARM_6:
      000004                        496 	.ds 1
                                    497 ;--------------------------------------------------------
                                    498 ; indirectly addressable internal ram data
                                    499 ;--------------------------------------------------------
                                    500 	.area ISEG    (DATA)
                                    501 ;--------------------------------------------------------
                                    502 ; absolute internal ram data
                                    503 ;--------------------------------------------------------
                                    504 	.area IABS    (ABS,DATA)
                                    505 	.area IABS    (ABS,DATA)
                                    506 ;--------------------------------------------------------
                                    507 ; bit data
                                    508 ;--------------------------------------------------------
                                    509 	.area BSEG    (BIT)
      000000                        510 _fadeToBlackBy_sloc0_1_0:
      000000                        511 	.ds 1
                                    512 ;--------------------------------------------------------
                                    513 ; paged external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area PSEG    (PAG,XDATA)
                                    516 ;--------------------------------------------------------
                                    517 ; external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XSEG    (XDATA)
                                    520 ;--------------------------------------------------------
                                    521 ; absolute external ram data
                                    522 ;--------------------------------------------------------
                                    523 	.area XABS    (ABS,XDATA)
                                    524 ;--------------------------------------------------------
                                    525 ; external initialized ram data
                                    526 ;--------------------------------------------------------
                                    527 	.area XISEG   (XDATA)
                                    528 	.area HOME    (CODE)
                                    529 	.area GSINIT0 (CODE)
                                    530 	.area GSINIT1 (CODE)
                                    531 	.area GSINIT2 (CODE)
                                    532 	.area GSINIT3 (CODE)
                                    533 	.area GSINIT4 (CODE)
                                    534 	.area GSINIT5 (CODE)
                                    535 	.area GSINIT  (CODE)
                                    536 	.area GSFINAL (CODE)
                                    537 	.area CSEG    (CODE)
                                    538 ;--------------------------------------------------------
                                    539 ; global & static initialisations
                                    540 ;--------------------------------------------------------
                                    541 	.area HOME    (CODE)
                                    542 	.area GSINIT  (CODE)
                                    543 	.area GSFINAL (CODE)
                                    544 	.area GSINIT  (CODE)
                                    545 ;	./src/WS2812.c:12: uint8_t mang[13] = {1, 4, 8, 20, 50, 95, 100, 95, 50, 20, 8, 4, 1};
      000000 75*00 01         [24]  546 	mov	_mang,#0x01
      000003 75*01 04         [24]  547 	mov	(_mang + 0x0001),#0x04
      000006 75*02 08         [24]  548 	mov	(_mang + 0x0002),#0x08
      000009 75*03 14         [24]  549 	mov	(_mang + 0x0003),#0x14
      00000C 75*04 32         [24]  550 	mov	(_mang + 0x0004),#0x32
      00000F 75*05 5F         [24]  551 	mov	(_mang + 0x0005),#0x5f
      000012 75*06 64         [24]  552 	mov	(_mang + 0x0006),#0x64
      000015 75*07 5F         [24]  553 	mov	(_mang + 0x0007),#0x5f
      000018 75*08 32         [24]  554 	mov	(_mang + 0x0008),#0x32
      00001B 75*09 14         [24]  555 	mov	(_mang + 0x0009),#0x14
      00001E 75*0A 08         [24]  556 	mov	(_mang + 0x000a),#0x08
      000021 75*0B 04         [24]  557 	mov	(_mang + 0x000b),#0x04
      000024 75*0C 01         [24]  558 	mov	(_mang + 0x000c),#0x01
                                    559 ;--------------------------------------------------------
                                    560 ; Home
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
                                    563 	.area HOME    (CODE)
                                    564 ;--------------------------------------------------------
                                    565 ; code
                                    566 ;--------------------------------------------------------
                                    567 	.area CSEG    (CODE)
                                    568 ;------------------------------------------------------------
                                    569 ;Allocation info for local variables in function 'random'
                                    570 ;------------------------------------------------------------
                                    571 ;howbig                    Allocated to registers r6 r7 
                                    572 ;------------------------------------------------------------
                                    573 ;	./src/WS2812.c:23: uint16_t random(uint16_t howbig)
                                    574 ;	-----------------------------------------
                                    575 ;	 function random
                                    576 ;	-----------------------------------------
      000000                        577 _random:
                           000007   578 	ar7 = 0x07
                           000006   579 	ar6 = 0x06
                           000005   580 	ar5 = 0x05
                           000004   581 	ar4 = 0x04
                           000003   582 	ar3 = 0x03
                           000002   583 	ar2 = 0x02
                           000001   584 	ar1 = 0x01
                           000000   585 	ar0 = 0x00
      000000 AE 82            [24]  586 	mov	r6,dpl
      000002 AF 83            [24]  587 	mov	r7,dph
                                    588 ;	./src/WS2812.c:25: if (howbig == 0)
      000004 EE               [12]  589 	mov	a,r6
      000005 4F               [12]  590 	orl	a,r7
      000006 70 04            [24]  591 	jnz	00102$
                                    592 ;	./src/WS2812.c:27: return 0;
      000008 90 00 00         [24]  593 	mov	dptr,#0x0000
      00000B 22               [24]  594 	ret
      00000C                        595 00102$:
                                    596 ;	./src/WS2812.c:29: return rand() % howbig;
      00000C C0 07            [24]  597 	push	ar7
      00000E C0 06            [24]  598 	push	ar6
      000010 12r00r00         [24]  599 	lcall	_rand
      000013 AC 82            [24]  600 	mov	r4,dpl
      000015 AD 83            [24]  601 	mov	r5,dph
      000017 D0 06            [24]  602 	pop	ar6
      000019 D0 07            [24]  603 	pop	ar7
      00001B 8C 82            [24]  604 	mov	dpl,r4
      00001D 8D 83            [24]  605 	mov	dph,r5
      00001F 8E*00            [24]  606 	mov	__moduint_PARM_2,r6
      000021 8F*01            [24]  607 	mov	(__moduint_PARM_2 + 1),r7
                                    608 ;	./src/WS2812.c:30: }
      000023 02r00r00         [24]  609 	ljmp	__moduint
                                    610 ;------------------------------------------------------------
                                    611 ;Allocation info for local variables in function 'random2'
                                    612 ;------------------------------------------------------------
                                    613 ;howbig                    Allocated with name '_random2_PARM_2'
                                    614 ;howsmall                  Allocated to registers r6 r7 
                                    615 ;diff                      Allocated to registers 
                                    616 ;------------------------------------------------------------
                                    617 ;	./src/WS2812.c:32: uint16_t random2(uint16_t howsmall, uint16_t howbig)
                                    618 ;	-----------------------------------------
                                    619 ;	 function random2
                                    620 ;	-----------------------------------------
      000026                        621 _random2:
      000026 AE 82            [24]  622 	mov	r6,dpl
      000028 AF 83            [24]  623 	mov	r7,dph
                                    624 ;	./src/WS2812.c:34: if (howsmall >= howbig)
      00002A C3               [12]  625 	clr	c
      00002B EE               [12]  626 	mov	a,r6
      00002C 95*0D            [12]  627 	subb	a,_random2_PARM_2
      00002E EF               [12]  628 	mov	a,r7
      00002F 95*0E            [12]  629 	subb	a,(_random2_PARM_2 + 1)
      000031 40 05            [24]  630 	jc	00102$
                                    631 ;	./src/WS2812.c:36: return howsmall;
      000033 8E 82            [24]  632 	mov	dpl,r6
      000035 8F 83            [24]  633 	mov	dph,r7
      000037 22               [24]  634 	ret
      000038                        635 00102$:
                                    636 ;	./src/WS2812.c:38: uint16_t diff = howbig - howsmall;
      000038 E5*0D            [12]  637 	mov	a,_random2_PARM_2
      00003A C3               [12]  638 	clr	c
      00003B 9E               [12]  639 	subb	a,r6
      00003C F5 82            [12]  640 	mov	dpl,a
      00003E E5*0E            [12]  641 	mov	a,(_random2_PARM_2 + 1)
      000040 9F               [12]  642 	subb	a,r7
      000041 F5 83            [12]  643 	mov	dph,a
                                    644 ;	./src/WS2812.c:39: return random(diff) + howsmall;
      000043 C0 07            [24]  645 	push	ar7
      000045 C0 06            [24]  646 	push	ar6
      000047 12r00r00         [24]  647 	lcall	_random
      00004A E5 82            [12]  648 	mov	a,dpl
      00004C 85 83 F0         [24]  649 	mov	b,dph
      00004F D0 06            [24]  650 	pop	ar6
      000051 D0 07            [24]  651 	pop	ar7
      000053 2E               [12]  652 	add	a,r6
      000054 F5 82            [12]  653 	mov	dpl,a
      000056 EF               [12]  654 	mov	a,r7
      000057 35 F0            [12]  655 	addc	a,b
      000059 F5 83            [12]  656 	mov	dph,a
                                    657 ;	./src/WS2812.c:40: }
      00005B 22               [24]  658 	ret
                                    659 ;------------------------------------------------------------
                                    660 ;Allocation info for local variables in function 'LED__SendZero_'
                                    661 ;------------------------------------------------------------
                                    662 ;	./src/WS2812.c:42: void LED__SendZero_()
                                    663 ;	-----------------------------------------
                                    664 ;	 function LED__SendZero_
                                    665 ;	-----------------------------------------
      00005C                        666 _LED__SendZero_:
                                    667 ;	./src/WS2812.c:44: setb(LED_PORT, LED_PIN);
      00005C 43 80 40         [24]  668 	orl	_p0,#0x40
                                    669 ;	./src/WS2812.c:45: _nop_();
      00005F 00               [12]  670 	nop
                                    671 ;	./src/WS2812.c:46: _nop_();
      000060 00               [12]  672 	nop
                                    673 ;	./src/WS2812.c:47: clrb(LED_PORT, LED_PIN);
      000061 53 80 BF         [24]  674 	anl	_p0,#0xbf
                                    675 ;	./src/WS2812.c:48: _nop_();
      000064 00               [12]  676 	nop
                                    677 ;	./src/WS2812.c:49: _nop_();
      000065 00               [12]  678 	nop
                                    679 ;	./src/WS2812.c:50: _nop_();
      000066 00               [12]  680 	nop
                                    681 ;	./src/WS2812.c:51: _nop_();
      000067 00               [12]  682 	nop
                                    683 ;	./src/WS2812.c:52: }
      000068 22               [24]  684 	ret
                                    685 ;------------------------------------------------------------
                                    686 ;Allocation info for local variables in function 'LED__SendOne_'
                                    687 ;------------------------------------------------------------
                                    688 ;	./src/WS2812.c:53: void LED__SendOne_()
                                    689 ;	-----------------------------------------
                                    690 ;	 function LED__SendOne_
                                    691 ;	-----------------------------------------
      000069                        692 _LED__SendOne_:
                                    693 ;	./src/WS2812.c:55: setb(LED_PORT, LED_PIN);
      000069 43 80 40         [24]  694 	orl	_p0,#0x40
                                    695 ;	./src/WS2812.c:56: _nop_();
      00006C 00               [12]  696 	nop
                                    697 ;	./src/WS2812.c:57: _nop_();
      00006D 00               [12]  698 	nop
                                    699 ;	./src/WS2812.c:58: _nop_();
      00006E 00               [12]  700 	nop
                                    701 ;	./src/WS2812.c:59: _nop_();
      00006F 00               [12]  702 	nop
                                    703 ;	./src/WS2812.c:60: _nop_();
      000070 00               [12]  704 	nop
                                    705 ;	./src/WS2812.c:61: _nop_();
      000071 00               [12]  706 	nop
                                    707 ;	./src/WS2812.c:62: _nop_();
      000072 00               [12]  708 	nop
                                    709 ;	./src/WS2812.c:63: clrb(LED_PORT, LED_PIN);
      000073 53 80 BF         [24]  710 	anl	_p0,#0xbf
                                    711 ;	./src/WS2812.c:64: }
      000076 22               [24]  712 	ret
                                    713 ;------------------------------------------------------------
                                    714 ;Allocation info for local variables in function 'LED__SendByte_'
                                    715 ;------------------------------------------------------------
                                    716 ;dat                       Allocated to registers r7 
                                    717 ;------------------------------------------------------------
                                    718 ;	./src/WS2812.c:65: void LED__SendByte_(uint8_t dat)
                                    719 ;	-----------------------------------------
                                    720 ;	 function LED__SendByte_
                                    721 ;	-----------------------------------------
      000077                        722 _LED__SendByte_:
                                    723 ;	./src/WS2812.c:67: if (dat & 0x80)
      000077 E5 82            [12]  724 	mov	a,dpl
      000079 FF               [12]  725 	mov	r7,a
      00007A 30 E7 09         [24]  726 	jnb	acc.7,00102$
                                    727 ;	./src/WS2812.c:68: LED__SendOne_();
      00007D C0 07            [24]  728 	push	ar7
      00007F 12r00r69         [24]  729 	lcall	_LED__SendOne_
      000082 D0 07            [24]  730 	pop	ar7
      000084 80 07            [24]  731 	sjmp	00103$
      000086                        732 00102$:
                                    733 ;	./src/WS2812.c:70: LED__SendZero_();
      000086 C0 07            [24]  734 	push	ar7
      000088 12r00r5C         [24]  735 	lcall	_LED__SendZero_
      00008B D0 07            [24]  736 	pop	ar7
      00008D                        737 00103$:
                                    738 ;	./src/WS2812.c:71: if (dat & 0x40)
      00008D EF               [12]  739 	mov	a,r7
      00008E 30 E6 09         [24]  740 	jnb	acc.6,00105$
                                    741 ;	./src/WS2812.c:72: LED__SendOne_();
      000091 C0 07            [24]  742 	push	ar7
      000093 12r00r69         [24]  743 	lcall	_LED__SendOne_
      000096 D0 07            [24]  744 	pop	ar7
      000098 80 07            [24]  745 	sjmp	00106$
      00009A                        746 00105$:
                                    747 ;	./src/WS2812.c:74: LED__SendZero_();
      00009A C0 07            [24]  748 	push	ar7
      00009C 12r00r5C         [24]  749 	lcall	_LED__SendZero_
      00009F D0 07            [24]  750 	pop	ar7
      0000A1                        751 00106$:
                                    752 ;	./src/WS2812.c:75: if (dat & 0x20)
      0000A1 EF               [12]  753 	mov	a,r7
      0000A2 30 E5 09         [24]  754 	jnb	acc.5,00108$
                                    755 ;	./src/WS2812.c:76: LED__SendOne_();
      0000A5 C0 07            [24]  756 	push	ar7
      0000A7 12r00r69         [24]  757 	lcall	_LED__SendOne_
      0000AA D0 07            [24]  758 	pop	ar7
      0000AC 80 07            [24]  759 	sjmp	00109$
      0000AE                        760 00108$:
                                    761 ;	./src/WS2812.c:78: LED__SendZero_();
      0000AE C0 07            [24]  762 	push	ar7
      0000B0 12r00r5C         [24]  763 	lcall	_LED__SendZero_
      0000B3 D0 07            [24]  764 	pop	ar7
      0000B5                        765 00109$:
                                    766 ;	./src/WS2812.c:79: if (dat & 0x10)
      0000B5 EF               [12]  767 	mov	a,r7
      0000B6 30 E4 09         [24]  768 	jnb	acc.4,00111$
                                    769 ;	./src/WS2812.c:80: LED__SendOne_();
      0000B9 C0 07            [24]  770 	push	ar7
      0000BB 12r00r69         [24]  771 	lcall	_LED__SendOne_
      0000BE D0 07            [24]  772 	pop	ar7
      0000C0 80 07            [24]  773 	sjmp	00112$
      0000C2                        774 00111$:
                                    775 ;	./src/WS2812.c:82: LED__SendZero_();
      0000C2 C0 07            [24]  776 	push	ar7
      0000C4 12r00r5C         [24]  777 	lcall	_LED__SendZero_
      0000C7 D0 07            [24]  778 	pop	ar7
      0000C9                        779 00112$:
                                    780 ;	./src/WS2812.c:83: if (dat & 0x08)
      0000C9 EF               [12]  781 	mov	a,r7
      0000CA 30 E3 09         [24]  782 	jnb	acc.3,00114$
                                    783 ;	./src/WS2812.c:84: LED__SendOne_();
      0000CD C0 07            [24]  784 	push	ar7
      0000CF 12r00r69         [24]  785 	lcall	_LED__SendOne_
      0000D2 D0 07            [24]  786 	pop	ar7
      0000D4 80 07            [24]  787 	sjmp	00115$
      0000D6                        788 00114$:
                                    789 ;	./src/WS2812.c:86: LED__SendZero_();
      0000D6 C0 07            [24]  790 	push	ar7
      0000D8 12r00r5C         [24]  791 	lcall	_LED__SendZero_
      0000DB D0 07            [24]  792 	pop	ar7
      0000DD                        793 00115$:
                                    794 ;	./src/WS2812.c:87: if (dat & 0x04)
      0000DD EF               [12]  795 	mov	a,r7
      0000DE 30 E2 09         [24]  796 	jnb	acc.2,00117$
                                    797 ;	./src/WS2812.c:88: LED__SendOne_();
      0000E1 C0 07            [24]  798 	push	ar7
      0000E3 12r00r69         [24]  799 	lcall	_LED__SendOne_
      0000E6 D0 07            [24]  800 	pop	ar7
      0000E8 80 07            [24]  801 	sjmp	00118$
      0000EA                        802 00117$:
                                    803 ;	./src/WS2812.c:90: LED__SendZero_();
      0000EA C0 07            [24]  804 	push	ar7
      0000EC 12r00r5C         [24]  805 	lcall	_LED__SendZero_
      0000EF D0 07            [24]  806 	pop	ar7
      0000F1                        807 00118$:
                                    808 ;	./src/WS2812.c:91: if (dat & 0x02)
      0000F1 EF               [12]  809 	mov	a,r7
      0000F2 30 E1 09         [24]  810 	jnb	acc.1,00120$
                                    811 ;	./src/WS2812.c:92: LED__SendOne_();
      0000F5 C0 07            [24]  812 	push	ar7
      0000F7 12r00r69         [24]  813 	lcall	_LED__SendOne_
      0000FA D0 07            [24]  814 	pop	ar7
      0000FC 80 07            [24]  815 	sjmp	00121$
      0000FE                        816 00120$:
                                    817 ;	./src/WS2812.c:94: LED__SendZero_();
      0000FE C0 07            [24]  818 	push	ar7
      000100 12r00r5C         [24]  819 	lcall	_LED__SendZero_
      000103 D0 07            [24]  820 	pop	ar7
      000105                        821 00121$:
                                    822 ;	./src/WS2812.c:95: if (dat & 0x01)
      000105 EF               [12]  823 	mov	a,r7
      000106 30 E0 03         [24]  824 	jnb	acc.0,00123$
                                    825 ;	./src/WS2812.c:96: LED__SendOne_();
      000109 02r00r69         [24]  826 	ljmp	_LED__SendOne_
      00010C                        827 00123$:
                                    828 ;	./src/WS2812.c:98: LED__SendZero_();
                                    829 ;	./src/WS2812.c:99: }
      00010C 02r00r5C         [24]  830 	ljmp	_LED__SendZero_
                                    831 ;------------------------------------------------------------
                                    832 ;Allocation info for local variables in function 'clearAll'
                                    833 ;------------------------------------------------------------
                                    834 ;i                         Allocated to registers r6 r7 
                                    835 ;------------------------------------------------------------
                                    836 ;	./src/WS2812.c:101: void clearAll()
                                    837 ;	-----------------------------------------
                                    838 ;	 function clearAll
                                    839 ;	-----------------------------------------
      00010F                        840 _clearAll:
                                    841 ;	./src/WS2812.c:103: for (uint16_t i = 0; i < 300; i++)
      00010F 7E 00            [12]  842 	mov	r6,#0x00
      000111 7F 00            [12]  843 	mov	r7,#0x00
      000113                        844 00103$:
      000113 8E 04            [24]  845 	mov	ar4,r6
      000115 8F 05            [24]  846 	mov	ar5,r7
      000117 C3               [12]  847 	clr	c
      000118 EC               [12]  848 	mov	a,r4
      000119 94 2C            [12]  849 	subb	a,#0x2c
      00011B ED               [12]  850 	mov	a,r5
      00011C 94 01            [12]  851 	subb	a,#0x01
      00011E 50 21            [24]  852 	jnc	00105$
                                    853 ;	./src/WS2812.c:105: LED__SendByte_(0);
      000120 75 82 00         [24]  854 	mov	dpl,#0x00
      000123 C0 07            [24]  855 	push	ar7
      000125 C0 06            [24]  856 	push	ar6
      000127 12r00r77         [24]  857 	lcall	_LED__SendByte_
                                    858 ;	./src/WS2812.c:106: LED__SendByte_(0);
      00012A 75 82 00         [24]  859 	mov	dpl,#0x00
      00012D 12r00r77         [24]  860 	lcall	_LED__SendByte_
                                    861 ;	./src/WS2812.c:107: LED__SendByte_(0);
      000130 75 82 00         [24]  862 	mov	dpl,#0x00
      000133 12r00r77         [24]  863 	lcall	_LED__SendByte_
      000136 D0 06            [24]  864 	pop	ar6
      000138 D0 07            [24]  865 	pop	ar7
                                    866 ;	./src/WS2812.c:103: for (uint16_t i = 0; i < 300; i++)
      00013A 0E               [12]  867 	inc	r6
      00013B BE 00 D5         [24]  868 	cjne	r6,#0x00,00103$
      00013E 0F               [12]  869 	inc	r7
      00013F 80 D2            [24]  870 	sjmp	00103$
      000141                        871 00105$:
                                    872 ;	./src/WS2812.c:109: }
      000141 22               [24]  873 	ret
                                    874 ;------------------------------------------------------------
                                    875 ;Allocation info for local variables in function 'showStrip'
                                    876 ;------------------------------------------------------------
                                    877 ;i                         Allocated to registers r7 
                                    878 ;------------------------------------------------------------
                                    879 ;	./src/WS2812.c:111: void showStrip()
                                    880 ;	-----------------------------------------
                                    881 ;	 function showStrip
                                    882 ;	-----------------------------------------
      000142                        883 _showStrip:
                                    884 ;	./src/WS2812.c:113: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      000142 7F 00            [12]  885 	mov	r7,#0x00
      000144                        886 00103$:
      000144 8F 05            [24]  887 	mov	ar5,r7
      000146 7E 00            [12]  888 	mov	r6,#0x00
      000148 C3               [12]  889 	clr	c
      000149 ED               [12]  890 	mov	a,r5
      00014A 95*00            [12]  891 	subb	a,_NUM_LEDS
      00014C EE               [12]  892 	mov	a,r6
      00014D 95*01            [12]  893 	subb	a,(_NUM_LEDS + 1)
      00014F 50 64            [24]  894 	jnc	00105$
                                    895 ;	./src/WS2812.c:115: LED__SendByte_(leds[i * 3]);
      000151 8F*00            [24]  896 	mov	__mulint_PARM_2,r7
      000153 75*01 00         [24]  897 	mov	(__mulint_PARM_2 + 1),#0x00
      000156 90 00 03         [24]  898 	mov	dptr,#0x0003
      000159 C0 07            [24]  899 	push	ar7
      00015B 12r00r00         [24]  900 	lcall	__mulint
      00015E AD 82            [24]  901 	mov	r5,dpl
      000160 AE 83            [24]  902 	mov	r6,dph
      000162 ED               [12]  903 	mov	a,r5
      000163 24r00            [12]  904 	add	a,#_leds
      000165 F5 82            [12]  905 	mov	dpl,a
      000167 EE               [12]  906 	mov	a,r6
      000168 34s00            [12]  907 	addc	a,#(_leds >> 8)
      00016A F5 83            [12]  908 	mov	dph,a
      00016C E0               [24]  909 	movx	a,@dptr
      00016D F5 82            [12]  910 	mov	dpl,a
      00016F C0 06            [24]  911 	push	ar6
      000171 C0 05            [24]  912 	push	ar5
      000173 12r00r77         [24]  913 	lcall	_LED__SendByte_
      000176 D0 05            [24]  914 	pop	ar5
      000178 D0 06            [24]  915 	pop	ar6
                                    916 ;	./src/WS2812.c:116: LED__SendByte_(leds[i * 3 + 1]);
      00017A 74 01            [12]  917 	mov	a,#0x01
      00017C 2D               [12]  918 	add	a,r5
      00017D FB               [12]  919 	mov	r3,a
      00017E E4               [12]  920 	clr	a
      00017F 3E               [12]  921 	addc	a,r6
      000180 FC               [12]  922 	mov	r4,a
      000181 EB               [12]  923 	mov	a,r3
      000182 24r00            [12]  924 	add	a,#_leds
      000184 F5 82            [12]  925 	mov	dpl,a
      000186 EC               [12]  926 	mov	a,r4
      000187 34s00            [12]  927 	addc	a,#(_leds >> 8)
      000189 F5 83            [12]  928 	mov	dph,a
      00018B E0               [24]  929 	movx	a,@dptr
      00018C F5 82            [12]  930 	mov	dpl,a
      00018E C0 06            [24]  931 	push	ar6
      000190 C0 05            [24]  932 	push	ar5
      000192 12r00r77         [24]  933 	lcall	_LED__SendByte_
      000195 D0 05            [24]  934 	pop	ar5
      000197 D0 06            [24]  935 	pop	ar6
                                    936 ;	./src/WS2812.c:117: LED__SendByte_(leds[i * 3 + 2]);
      000199 74 02            [12]  937 	mov	a,#0x02
      00019B 2D               [12]  938 	add	a,r5
      00019C FD               [12]  939 	mov	r5,a
      00019D E4               [12]  940 	clr	a
      00019E 3E               [12]  941 	addc	a,r6
      00019F FE               [12]  942 	mov	r6,a
      0001A0 ED               [12]  943 	mov	a,r5
      0001A1 24r00            [12]  944 	add	a,#_leds
      0001A3 F5 82            [12]  945 	mov	dpl,a
      0001A5 EE               [12]  946 	mov	a,r6
      0001A6 34s00            [12]  947 	addc	a,#(_leds >> 8)
      0001A8 F5 83            [12]  948 	mov	dph,a
      0001AA E0               [24]  949 	movx	a,@dptr
      0001AB F5 82            [12]  950 	mov	dpl,a
      0001AD 12r00r77         [24]  951 	lcall	_LED__SendByte_
      0001B0 D0 07            [24]  952 	pop	ar7
                                    953 ;	./src/WS2812.c:113: for (uint8_t i = 0; i < NUM_LEDS; ++i)
      0001B2 0F               [12]  954 	inc	r7
      0001B3 80 8F            [24]  955 	sjmp	00103$
      0001B5                        956 00105$:
                                    957 ;	./src/WS2812.c:119: }
      0001B5 22               [24]  958 	ret
                                    959 ;------------------------------------------------------------
                                    960 ;Allocation info for local variables in function 'setPixel'
                                    961 ;------------------------------------------------------------
                                    962 ;green                     Allocated with name '_setPixel_PARM_2'
                                    963 ;red                       Allocated with name '_setPixel_PARM_3'
                                    964 ;blue                      Allocated with name '_setPixel_PARM_4'
                                    965 ;Pixel                     Allocated to registers r6 r7 
                                    966 ;------------------------------------------------------------
                                    967 ;	./src/WS2812.c:122: void setPixel(uint16_t Pixel, uint8_t green, uint8_t red, uint8_t blue)
                                    968 ;	-----------------------------------------
                                    969 ;	 function setPixel
                                    970 ;	-----------------------------------------
      0001B6                        971 _setPixel:
      0001B6 AE 82            [24]  972 	mov	r6,dpl
      0001B8 AF 83            [24]  973 	mov	r7,dph
                                    974 ;	./src/WS2812.c:124: leds[Pixel * 3] = green;
      0001BA 8E*00            [24]  975 	mov	__mulint_PARM_2,r6
      0001BC 8F*01            [24]  976 	mov	(__mulint_PARM_2 + 1),r7
      0001BE 90 00 03         [24]  977 	mov	dptr,#0x0003
      0001C1 12r00r00         [24]  978 	lcall	__mulint
      0001C4 AE 82            [24]  979 	mov	r6,dpl
      0001C6 AF 83            [24]  980 	mov	r7,dph
      0001C8 EE               [12]  981 	mov	a,r6
      0001C9 24r00            [12]  982 	add	a,#_leds
      0001CB F5 82            [12]  983 	mov	dpl,a
      0001CD EF               [12]  984 	mov	a,r7
      0001CE 34s00            [12]  985 	addc	a,#(_leds >> 8)
      0001D0 F5 83            [12]  986 	mov	dph,a
      0001D2 E5*0F            [12]  987 	mov	a,_setPixel_PARM_2
      0001D4 F0               [24]  988 	movx	@dptr,a
                                    989 ;	./src/WS2812.c:125: leds[Pixel * 3 + 1] = red;
      0001D5 74 01            [12]  990 	mov	a,#0x01
      0001D7 2E               [12]  991 	add	a,r6
      0001D8 FC               [12]  992 	mov	r4,a
      0001D9 E4               [12]  993 	clr	a
      0001DA 3F               [12]  994 	addc	a,r7
      0001DB FD               [12]  995 	mov	r5,a
      0001DC EC               [12]  996 	mov	a,r4
      0001DD 24r00            [12]  997 	add	a,#_leds
      0001DF F5 82            [12]  998 	mov	dpl,a
      0001E1 ED               [12]  999 	mov	a,r5
      0001E2 34s00            [12] 1000 	addc	a,#(_leds >> 8)
      0001E4 F5 83            [12] 1001 	mov	dph,a
      0001E6 E5*10            [12] 1002 	mov	a,_setPixel_PARM_3
      0001E8 F0               [24] 1003 	movx	@dptr,a
                                   1004 ;	./src/WS2812.c:126: leds[Pixel * 3 + 2] = blue;
      0001E9 74 02            [12] 1005 	mov	a,#0x02
      0001EB 2E               [12] 1006 	add	a,r6
      0001EC FE               [12] 1007 	mov	r6,a
      0001ED E4               [12] 1008 	clr	a
      0001EE 3F               [12] 1009 	addc	a,r7
      0001EF FF               [12] 1010 	mov	r7,a
      0001F0 EE               [12] 1011 	mov	a,r6
      0001F1 24r00            [12] 1012 	add	a,#_leds
      0001F3 F5 82            [12] 1013 	mov	dpl,a
      0001F5 EF               [12] 1014 	mov	a,r7
      0001F6 34s00            [12] 1015 	addc	a,#(_leds >> 8)
      0001F8 F5 83            [12] 1016 	mov	dph,a
      0001FA E5*11            [12] 1017 	mov	a,_setPixel_PARM_4
      0001FC F0               [24] 1018 	movx	@dptr,a
                                   1019 ;	./src/WS2812.c:127: }
      0001FD 22               [24] 1020 	ret
                                   1021 ;------------------------------------------------------------
                                   1022 ;Allocation info for local variables in function 'setAll'
                                   1023 ;------------------------------------------------------------
                                   1024 ;red                       Allocated with name '_setAll_PARM_2'
                                   1025 ;blue                      Allocated with name '_setAll_PARM_3'
                                   1026 ;green                     Allocated to registers r7 
                                   1027 ;i                         Allocated to registers r5 r6 
                                   1028 ;------------------------------------------------------------
                                   1029 ;	./src/WS2812.c:130: void setAll(uint8_t green, uint8_t red, uint8_t blue)
                                   1030 ;	-----------------------------------------
                                   1031 ;	 function setAll
                                   1032 ;	-----------------------------------------
      0001FE                       1033 _setAll:
      0001FE AF 82            [24] 1034 	mov	r7,dpl
                                   1035 ;	./src/WS2812.c:132: for (int16_t i = 0; i < NUM_LEDS; ++i)
      000200 7D 00            [12] 1036 	mov	r5,#0x00
      000202 7E 00            [12] 1037 	mov	r6,#0x00
      000204                       1038 00103$:
      000204 8D 03            [24] 1039 	mov	ar3,r5
      000206 8E 04            [24] 1040 	mov	ar4,r6
      000208 C3               [12] 1041 	clr	c
      000209 EB               [12] 1042 	mov	a,r3
      00020A 95*00            [12] 1043 	subb	a,_NUM_LEDS
      00020C EC               [12] 1044 	mov	a,r4
      00020D 95*01            [12] 1045 	subb	a,(_NUM_LEDS + 1)
      00020F 50 22            [24] 1046 	jnc	00105$
                                   1047 ;	./src/WS2812.c:134: setPixel(i, green, red, blue);
      000211 8F*0F            [24] 1048 	mov	_setPixel_PARM_2,r7
      000213 85*12*10         [24] 1049 	mov	_setPixel_PARM_3,_setAll_PARM_2
      000216 85*13*11         [24] 1050 	mov	_setPixel_PARM_4,_setAll_PARM_3
      000219 8D 82            [24] 1051 	mov	dpl,r5
      00021B 8E 83            [24] 1052 	mov	dph,r6
      00021D C0 07            [24] 1053 	push	ar7
      00021F C0 06            [24] 1054 	push	ar6
      000221 C0 05            [24] 1055 	push	ar5
      000223 12r01rB6         [24] 1056 	lcall	_setPixel
      000226 D0 05            [24] 1057 	pop	ar5
      000228 D0 06            [24] 1058 	pop	ar6
      00022A D0 07            [24] 1059 	pop	ar7
                                   1060 ;	./src/WS2812.c:132: for (int16_t i = 0; i < NUM_LEDS; ++i)
      00022C 0D               [12] 1061 	inc	r5
      00022D BD 00 D4         [24] 1062 	cjne	r5,#0x00,00103$
      000230 0E               [12] 1063 	inc	r6
      000231 80 D1            [24] 1064 	sjmp	00103$
      000233                       1065 00105$:
                                   1066 ;	./src/WS2812.c:136: }
      000233 22               [24] 1067 	ret
                                   1068 ;------------------------------------------------------------
                                   1069 ;Allocation info for local variables in function 'FadeInOut'
                                   1070 ;------------------------------------------------------------
                                   1071 ;red                       Allocated with name '_FadeInOut_PARM_2'
                                   1072 ;blue                      Allocated with name '_FadeInOut_PARM_3'
                                   1073 ;green                     Allocated with name '_FadeInOut_green_65536_70'
                                   1074 ;g                         Allocated with name '_FadeInOut_g_65536_71'
                                   1075 ;r                         Allocated with name '_FadeInOut_r_65536_71'
                                   1076 ;b                         Allocated to registers 
                                   1077 ;curEffect                 Allocated with name '_FadeInOut_curEffect_65536_71'
                                   1078 ;curColor                  Allocated with name '_FadeInOut_curColor_65536_71'
                                   1079 ;k                         Allocated to registers r3 r4 
                                   1080 ;k                         Allocated with name '_FadeInOut_k_131072_75'
                                   1081 ;------------------------------------------------------------
                                   1082 ;	./src/WS2812.c:137: void FadeInOut(uint8_t green, uint8_t red, uint8_t blue)
                                   1083 ;	-----------------------------------------
                                   1084 ;	 function FadeInOut
                                   1085 ;	-----------------------------------------
      000234                       1086 _FadeInOut:
      000234 85 82*16         [24] 1087 	mov	_FadeInOut_green_65536_70,dpl
                                   1088 ;	./src/WS2812.c:140: uint8_t curEffect = effect;
      000237 85*00*19         [24] 1089 	mov	_FadeInOut_curEffect_65536_71,_effect
                                   1090 ;	./src/WS2812.c:141: uint8_t curColor = _color;
      00023A 85*00*1A         [24] 1091 	mov	_FadeInOut_curColor_65536_71,__color
                                   1092 ;	./src/WS2812.c:144: for (int16_t k = 0; k < 255; k = k + NUM_LEDS / 50)
      00023D 7B 00            [12] 1093 	mov	r3,#0x00
      00023F 7C 00            [12] 1094 	mov	r4,#0x00
      000241                       1095 00110$:
      000241 8B 01            [24] 1096 	mov	ar1,r3
      000243 8C 02            [24] 1097 	mov	ar2,r4
      000245 C3               [12] 1098 	clr	c
      000246 E9               [12] 1099 	mov	a,r1
      000247 94 FF            [12] 1100 	subb	a,#0xff
      000249 EA               [12] 1101 	mov	a,r2
      00024A 64 80            [12] 1102 	xrl	a,#0x80
      00024C 94 80            [12] 1103 	subb	a,#0x80
      00024E 40 03            [24] 1104 	jc	00147$
      000250 02r03r3B         [24] 1105 	ljmp	00104$
      000253                       1106 00147$:
                                   1107 ;	./src/WS2812.c:146: CHECK_EFF;
      000253 E5*00            [12] 1108 	mov	a,_effect
      000255 B5*19 07         [24] 1109 	cjne	a,_FadeInOut_curEffect_65536_71,00101$
      000258 E5*00            [12] 1110 	mov	a,__color
      00025A B5*1A 02         [24] 1111 	cjne	a,_FadeInOut_curColor_65536_71,00150$
      00025D 80 04            [24] 1112 	sjmp	00102$
      00025F                       1113 00150$:
      00025F                       1114 00101$:
      00025F 75*00 12         [24] 1115 	mov	__status,#0x12
      000262 22               [24] 1116 	ret
      000263                       1117 00102$:
                                   1118 ;	./src/WS2812.c:148: r = k * red / 256;
      000263 85*14*00         [24] 1119 	mov	__mulint_PARM_2,_FadeInOut_PARM_2
      000266 75*01 00         [24] 1120 	mov	(__mulint_PARM_2 + 1),#0x00
      000269 8B 82            [24] 1121 	mov	dpl,r3
      00026B 8C 83            [24] 1122 	mov	dph,r4
      00026D C0 04            [24] 1123 	push	ar4
      00026F C0 03            [24] 1124 	push	ar3
      000271 12r00r00         [24] 1125 	lcall	__mulint
      000274 75*00 00         [24] 1126 	mov	__divsint_PARM_2,#0x00
      000277 75*01 01         [24] 1127 	mov	(__divsint_PARM_2 + 1),#0x01
      00027A 12r00r00         [24] 1128 	lcall	__divsint
      00027D A9 82            [24] 1129 	mov	r1,dpl
      00027F D0 03            [24] 1130 	pop	ar3
      000281 D0 04            [24] 1131 	pop	ar4
                                   1132 ;	./src/WS2812.c:149: g = k * green / 256;
      000283 85*16*00         [24] 1133 	mov	__mulint_PARM_2,_FadeInOut_green_65536_70
      000286 75*01 00         [24] 1134 	mov	(__mulint_PARM_2 + 1),#0x00
      000289 8B 82            [24] 1135 	mov	dpl,r3
      00028B 8C 83            [24] 1136 	mov	dph,r4
      00028D C0 04            [24] 1137 	push	ar4
      00028F C0 03            [24] 1138 	push	ar3
      000291 C0 01            [24] 1139 	push	ar1
      000293 12r00r00         [24] 1140 	lcall	__mulint
      000296 75*00 00         [24] 1141 	mov	__divsint_PARM_2,#0x00
      000299 75*01 01         [24] 1142 	mov	(__divsint_PARM_2 + 1),#0x01
      00029C 12r00r00         [24] 1143 	lcall	__divsint
      00029F A8 82            [24] 1144 	mov	r0,dpl
      0002A1 D0 01            [24] 1145 	pop	ar1
      0002A3 D0 03            [24] 1146 	pop	ar3
      0002A5 D0 04            [24] 1147 	pop	ar4
                                   1148 ;	./src/WS2812.c:150: b = k * blue / 256;
      0002A7 85*15*00         [24] 1149 	mov	__mulint_PARM_2,_FadeInOut_PARM_3
      0002AA 75*01 00         [24] 1150 	mov	(__mulint_PARM_2 + 1),#0x00
      0002AD 8B 82            [24] 1151 	mov	dpl,r3
      0002AF 8C 83            [24] 1152 	mov	dph,r4
      0002B1 C0 04            [24] 1153 	push	ar4
      0002B3 C0 03            [24] 1154 	push	ar3
      0002B5 C0 01            [24] 1155 	push	ar1
      0002B7 C0 00            [24] 1156 	push	ar0
      0002B9 12r00r00         [24] 1157 	lcall	__mulint
      0002BC 75*00 00         [24] 1158 	mov	__divsint_PARM_2,#0x00
      0002BF 75*01 01         [24] 1159 	mov	(__divsint_PARM_2 + 1),#0x01
      0002C2 12r00r00         [24] 1160 	lcall	__divsint
      0002C5 AA 82            [24] 1161 	mov	r2,dpl
      0002C7 D0 00            [24] 1162 	pop	ar0
      0002C9 D0 01            [24] 1163 	pop	ar1
      0002CB 8A*13            [24] 1164 	mov	_setAll_PARM_3,r2
                                   1165 ;	./src/WS2812.c:151: setAll(g, r, b);
      0002CD 89*12            [24] 1166 	mov	_setAll_PARM_2,r1
      0002CF 88 82            [24] 1167 	mov	dpl,r0
      0002D1 12r01rFE         [24] 1168 	lcall	_setAll
                                   1169 ;	./src/WS2812.c:152: showStrip();
      0002D4 12r01r42         [24] 1170 	lcall	_showStrip
                                   1171 ;	./src/WS2812.c:153: _delay_ms(DELAY2);
      0002D7 85*00*00         [24] 1172 	mov	__divuint_PARM_2,_NUM_LEDS
      0002DA 85*01*01         [24] 1173 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0002DD 90 00 C8         [24] 1174 	mov	dptr,#0x00c8
      0002E0 12r00r00         [24] 1175 	lcall	__divuint
      0002E3 85*00*00         [24] 1176 	mov	__mulint_PARM_2,__delay
      0002E6 85*01*01         [24] 1177 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0002E9 12r00r00         [24] 1178 	lcall	__mulint
      0002EC 75*00 64         [24] 1179 	mov	__divuint_PARM_2,#0x64
      0002EF 75*01 00         [24] 1180 	mov	(__divuint_PARM_2 + 1),#0x00
      0002F2 12r00r00         [24] 1181 	lcall	__divuint
      0002F5 E5 82            [12] 1182 	mov	a,dpl
      0002F7 85 83 F0         [24] 1183 	mov	b,dph
      0002FA 24 01            [12] 1184 	add	a,#0x01
      0002FC FA               [12] 1185 	mov	r2,a
      0002FD E4               [12] 1186 	clr	a
      0002FE 35 F0            [12] 1187 	addc	a,b
      000300 FD               [12] 1188 	mov	r5,a
      000301 8A 00            [24] 1189 	mov	ar0,r2
      000303 8D 01            [24] 1190 	mov	ar1,r5
      000305 7A 00            [12] 1191 	mov	r2,#0x00
      000307 7D 00            [12] 1192 	mov	r5,#0x00
      000309 88 82            [24] 1193 	mov	dpl,r0
      00030B 89 83            [24] 1194 	mov	dph,r1
      00030D 8A F0            [24] 1195 	mov	b,r2
      00030F ED               [12] 1196 	mov	a,r5
      000310 12r00r00         [24] 1197 	lcall	__delay_ms
                                   1198 ;	./src/WS2812.c:144: for (int16_t k = 0; k < 255; k = k + NUM_LEDS / 50)
      000313 85*00 82         [24] 1199 	mov	dpl,_NUM_LEDS
      000316 85*01 83         [24] 1200 	mov	dph,(_NUM_LEDS + 1)
      000319 75*00 32         [24] 1201 	mov	__divuint_PARM_2,#0x32
      00031C 75*01 00         [24] 1202 	mov	(__divuint_PARM_2 + 1),#0x00
      00031F 12r00r00         [24] 1203 	lcall	__divuint
      000322 AA 82            [24] 1204 	mov	r2,dpl
      000324 AD 83            [24] 1205 	mov	r5,dph
      000326 D0 03            [24] 1206 	pop	ar3
      000328 D0 04            [24] 1207 	pop	ar4
      00032A 8B 00            [24] 1208 	mov	ar0,r3
      00032C 8C 01            [24] 1209 	mov	ar1,r4
      00032E EA               [12] 1210 	mov	a,r2
      00032F 28               [12] 1211 	add	a,r0
      000330 FA               [12] 1212 	mov	r2,a
      000331 ED               [12] 1213 	mov	a,r5
      000332 39               [12] 1214 	addc	a,r1
      000333 FD               [12] 1215 	mov	r5,a
      000334 8A 03            [24] 1216 	mov	ar3,r2
      000336 8D 04            [24] 1217 	mov	ar4,r5
      000338 02r02r41         [24] 1218 	ljmp	00110$
      00033B                       1219 00104$:
                                   1220 ;	./src/WS2812.c:156: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      00033B 75*1B FF         [24] 1221 	mov	_FadeInOut_k_131072_75,#0xff
      00033E 75*1C 00         [24] 1222 	mov	(_FadeInOut_k_131072_75 + 1),#0x00
      000341                       1223 00113$:
      000341 AA*1B            [24] 1224 	mov	r2,_FadeInOut_k_131072_75
      000343 AB*1C            [24] 1225 	mov	r3,(_FadeInOut_k_131072_75 + 1)
      000345 C3               [12] 1226 	clr	c
      000346 E4               [12] 1227 	clr	a
      000347 9A               [12] 1228 	subb	a,r2
      000348 74 80            [12] 1229 	mov	a,#(0x00 ^ 0x80)
      00034A 8B F0            [24] 1230 	mov	b,r3
      00034C 63 F0 80         [24] 1231 	xrl	b,#0x80
      00034F 95 F0            [12] 1232 	subb	a,b
      000351 40 01            [24] 1233 	jc	00151$
      000353 22               [24] 1234 	ret
      000354                       1235 00151$:
                                   1236 ;	./src/WS2812.c:158: CHECK_EFF;
      000354 E5*00            [12] 1237 	mov	a,_effect
      000356 B5*19 07         [24] 1238 	cjne	a,_FadeInOut_curEffect_65536_71,00105$
      000359 E5*00            [12] 1239 	mov	a,__color
      00035B B5*1A 02         [24] 1240 	cjne	a,_FadeInOut_curColor_65536_71,00154$
      00035E 80 04            [24] 1241 	sjmp	00106$
      000360                       1242 00154$:
      000360                       1243 00105$:
      000360 75*00 12         [24] 1244 	mov	__status,#0x12
      000363 22               [24] 1245 	ret
      000364                       1246 00106$:
                                   1247 ;	./src/WS2812.c:159: r = (k / 256.0) * red;
      000364 85*1B 82         [24] 1248 	mov	dpl,_FadeInOut_k_131072_75
      000367 85*1C 83         [24] 1249 	mov	dph,(_FadeInOut_k_131072_75 + 1)
      00036A 12r00r00         [24] 1250 	lcall	___sint2fs
      00036D A8 82            [24] 1251 	mov	r0,dpl
      00036F A9 83            [24] 1252 	mov	r1,dph
      000371 AA F0            [24] 1253 	mov	r2,b
      000373 FB               [12] 1254 	mov	r3,a
      000374 E4               [12] 1255 	clr	a
      000375 C0 E0            [24] 1256 	push	acc
      000377 C0 E0            [24] 1257 	push	acc
      000379 74 80            [12] 1258 	mov	a,#0x80
      00037B C0 E0            [24] 1259 	push	acc
      00037D 74 43            [12] 1260 	mov	a,#0x43
      00037F C0 E0            [24] 1261 	push	acc
      000381 88 82            [24] 1262 	mov	dpl,r0
      000383 89 83            [24] 1263 	mov	dph,r1
      000385 8A F0            [24] 1264 	mov	b,r2
      000387 EB               [12] 1265 	mov	a,r3
      000388 12r00r00         [24] 1266 	lcall	___fsdiv
      00038B A8 82            [24] 1267 	mov	r0,dpl
      00038D A9 83            [24] 1268 	mov	r1,dph
      00038F AA F0            [24] 1269 	mov	r2,b
      000391 FB               [12] 1270 	mov	r3,a
      000392 E5 81            [12] 1271 	mov	a,sp
      000394 24 FC            [12] 1272 	add	a,#0xfc
      000396 F5 81            [12] 1273 	mov	sp,a
      000398 85*14 82         [24] 1274 	mov	dpl,_FadeInOut_PARM_2
      00039B C0 03            [24] 1275 	push	ar3
      00039D C0 02            [24] 1276 	push	ar2
      00039F C0 01            [24] 1277 	push	ar1
      0003A1 C0 00            [24] 1278 	push	ar0
      0003A3 12r00r00         [24] 1279 	lcall	___uchar2fs
      0003A6 AC 82            [24] 1280 	mov	r4,dpl
      0003A8 AD 83            [24] 1281 	mov	r5,dph
      0003AA AE F0            [24] 1282 	mov	r6,b
      0003AC FF               [12] 1283 	mov	r7,a
      0003AD D0 00            [24] 1284 	pop	ar0
      0003AF D0 01            [24] 1285 	pop	ar1
      0003B1 D0 02            [24] 1286 	pop	ar2
      0003B3 D0 03            [24] 1287 	pop	ar3
      0003B5 C0 03            [24] 1288 	push	ar3
      0003B7 C0 02            [24] 1289 	push	ar2
      0003B9 C0 01            [24] 1290 	push	ar1
      0003BB C0 00            [24] 1291 	push	ar0
      0003BD C0 04            [24] 1292 	push	ar4
      0003BF C0 05            [24] 1293 	push	ar5
      0003C1 C0 06            [24] 1294 	push	ar6
      0003C3 C0 07            [24] 1295 	push	ar7
      0003C5 88 82            [24] 1296 	mov	dpl,r0
      0003C7 89 83            [24] 1297 	mov	dph,r1
      0003C9 8A F0            [24] 1298 	mov	b,r2
      0003CB EB               [12] 1299 	mov	a,r3
      0003CC 12r00r00         [24] 1300 	lcall	___fsmul
      0003CF AC 82            [24] 1301 	mov	r4,dpl
      0003D1 AD 83            [24] 1302 	mov	r5,dph
      0003D3 AE F0            [24] 1303 	mov	r6,b
      0003D5 FF               [12] 1304 	mov	r7,a
      0003D6 E5 81            [12] 1305 	mov	a,sp
      0003D8 24 FC            [12] 1306 	add	a,#0xfc
      0003DA F5 81            [12] 1307 	mov	sp,a
      0003DC 8C 82            [24] 1308 	mov	dpl,r4
      0003DE 8D 83            [24] 1309 	mov	dph,r5
      0003E0 8E F0            [24] 1310 	mov	b,r6
      0003E2 EF               [12] 1311 	mov	a,r7
      0003E3 12r00r00         [24] 1312 	lcall	___fs2uchar
      0003E6 85 82*18         [24] 1313 	mov	_FadeInOut_r_65536_71,dpl
                                   1314 ;	./src/WS2812.c:160: g = (k / 256.0) * green;
      0003E9 85*16 82         [24] 1315 	mov	dpl,_FadeInOut_green_65536_70
      0003EC 12r00r00         [24] 1316 	lcall	___uchar2fs
      0003EF AC 82            [24] 1317 	mov	r4,dpl
      0003F1 AD 83            [24] 1318 	mov	r5,dph
      0003F3 AE F0            [24] 1319 	mov	r6,b
      0003F5 FF               [12] 1320 	mov	r7,a
      0003F6 D0 00            [24] 1321 	pop	ar0
      0003F8 D0 01            [24] 1322 	pop	ar1
      0003FA D0 02            [24] 1323 	pop	ar2
      0003FC D0 03            [24] 1324 	pop	ar3
      0003FE C0 03            [24] 1325 	push	ar3
      000400 C0 02            [24] 1326 	push	ar2
      000402 C0 01            [24] 1327 	push	ar1
      000404 C0 00            [24] 1328 	push	ar0
      000406 C0 04            [24] 1329 	push	ar4
      000408 C0 05            [24] 1330 	push	ar5
      00040A C0 06            [24] 1331 	push	ar6
      00040C C0 07            [24] 1332 	push	ar7
      00040E 88 82            [24] 1333 	mov	dpl,r0
      000410 89 83            [24] 1334 	mov	dph,r1
      000412 8A F0            [24] 1335 	mov	b,r2
      000414 EB               [12] 1336 	mov	a,r3
      000415 12r00r00         [24] 1337 	lcall	___fsmul
      000418 AC 82            [24] 1338 	mov	r4,dpl
      00041A AD 83            [24] 1339 	mov	r5,dph
      00041C AE F0            [24] 1340 	mov	r6,b
      00041E FF               [12] 1341 	mov	r7,a
      00041F E5 81            [12] 1342 	mov	a,sp
      000421 24 FC            [12] 1343 	add	a,#0xfc
      000423 F5 81            [12] 1344 	mov	sp,a
      000425 8C 82            [24] 1345 	mov	dpl,r4
      000427 8D 83            [24] 1346 	mov	dph,r5
      000429 8E F0            [24] 1347 	mov	b,r6
      00042B EF               [12] 1348 	mov	a,r7
      00042C 12r00r00         [24] 1349 	lcall	___fs2uchar
      00042F 85 82*17         [24] 1350 	mov	_FadeInOut_g_65536_71,dpl
                                   1351 ;	./src/WS2812.c:161: b = (k / 256.0) * blue;
      000432 85*15 82         [24] 1352 	mov	dpl,_FadeInOut_PARM_3
      000435 12r00r00         [24] 1353 	lcall	___uchar2fs
      000438 AC 82            [24] 1354 	mov	r4,dpl
      00043A AD 83            [24] 1355 	mov	r5,dph
      00043C AE F0            [24] 1356 	mov	r6,b
      00043E FF               [12] 1357 	mov	r7,a
      00043F D0 00            [24] 1358 	pop	ar0
      000441 D0 01            [24] 1359 	pop	ar1
      000443 D0 02            [24] 1360 	pop	ar2
      000445 D0 03            [24] 1361 	pop	ar3
      000447 C0 04            [24] 1362 	push	ar4
      000449 C0 05            [24] 1363 	push	ar5
      00044B C0 06            [24] 1364 	push	ar6
      00044D C0 07            [24] 1365 	push	ar7
      00044F 88 82            [24] 1366 	mov	dpl,r0
      000451 89 83            [24] 1367 	mov	dph,r1
      000453 8A F0            [24] 1368 	mov	b,r2
      000455 EB               [12] 1369 	mov	a,r3
      000456 12r00r00         [24] 1370 	lcall	___fsmul
      000459 AC 82            [24] 1371 	mov	r4,dpl
      00045B AD 83            [24] 1372 	mov	r5,dph
      00045D AE F0            [24] 1373 	mov	r6,b
      00045F FF               [12] 1374 	mov	r7,a
      000460 E5 81            [12] 1375 	mov	a,sp
      000462 24 FC            [12] 1376 	add	a,#0xfc
      000464 F5 81            [12] 1377 	mov	sp,a
      000466 8C 82            [24] 1378 	mov	dpl,r4
      000468 8D 83            [24] 1379 	mov	dph,r5
      00046A 8E F0            [24] 1380 	mov	b,r6
      00046C EF               [12] 1381 	mov	a,r7
      00046D 12r00r00         [24] 1382 	lcall	___fs2uchar
      000470 85 82*13         [24] 1383 	mov	_setAll_PARM_3,dpl
                                   1384 ;	./src/WS2812.c:162: setAll(g, r, b);
      000473 85*18*12         [24] 1385 	mov	_setAll_PARM_2,_FadeInOut_r_65536_71
      000476 85*17 82         [24] 1386 	mov	dpl,_FadeInOut_g_65536_71
      000479 12r01rFE         [24] 1387 	lcall	_setAll
                                   1388 ;	./src/WS2812.c:163: showStrip();
      00047C 12r01r42         [24] 1389 	lcall	_showStrip
                                   1390 ;	./src/WS2812.c:164: _delay_ms(DELAY2);
      00047F 85*00*00         [24] 1391 	mov	__divuint_PARM_2,_NUM_LEDS
      000482 85*01*01         [24] 1392 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000485 90 00 C8         [24] 1393 	mov	dptr,#0x00c8
      000488 12r00r00         [24] 1394 	lcall	__divuint
      00048B 85*00*00         [24] 1395 	mov	__mulint_PARM_2,__delay
      00048E 85*01*01         [24] 1396 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000491 12r00r00         [24] 1397 	lcall	__mulint
      000494 75*00 64         [24] 1398 	mov	__divuint_PARM_2,#0x64
      000497 75*01 00         [24] 1399 	mov	(__divuint_PARM_2 + 1),#0x00
      00049A 12r00r00         [24] 1400 	lcall	__divuint
      00049D E5 82            [12] 1401 	mov	a,dpl
      00049F 85 83 F0         [24] 1402 	mov	b,dph
      0004A2 24 01            [12] 1403 	add	a,#0x01
      0004A4 FE               [12] 1404 	mov	r6,a
      0004A5 E4               [12] 1405 	clr	a
      0004A6 35 F0            [12] 1406 	addc	a,b
      0004A8 FF               [12] 1407 	mov	r7,a
      0004A9 7D 00            [12] 1408 	mov	r5,#0x00
      0004AB 7C 00            [12] 1409 	mov	r4,#0x00
      0004AD 8E 82            [24] 1410 	mov	dpl,r6
      0004AF 8F 83            [24] 1411 	mov	dph,r7
      0004B1 8D F0            [24] 1412 	mov	b,r5
      0004B3 EC               [12] 1413 	mov	a,r4
      0004B4 12r00r00         [24] 1414 	lcall	__delay_ms
                                   1415 ;	./src/WS2812.c:156: for (int16_t k = 255; k > 0; k = k - NUM_LEDS / 25)
      0004B7 85*00 82         [24] 1416 	mov	dpl,_NUM_LEDS
      0004BA 85*01 83         [24] 1417 	mov	dph,(_NUM_LEDS + 1)
      0004BD 75*00 19         [24] 1418 	mov	__divuint_PARM_2,#0x19
      0004C0 75*01 00         [24] 1419 	mov	(__divuint_PARM_2 + 1),#0x00
      0004C3 12r00r00         [24] 1420 	lcall	__divuint
      0004C6 AE 82            [24] 1421 	mov	r6,dpl
      0004C8 AF 83            [24] 1422 	mov	r7,dph
      0004CA AC*1B            [24] 1423 	mov	r4,_FadeInOut_k_131072_75
      0004CC AD*1C            [24] 1424 	mov	r5,(_FadeInOut_k_131072_75 + 1)
      0004CE EC               [12] 1425 	mov	a,r4
      0004CF C3               [12] 1426 	clr	c
      0004D0 9E               [12] 1427 	subb	a,r6
      0004D1 FE               [12] 1428 	mov	r6,a
      0004D2 ED               [12] 1429 	mov	a,r5
      0004D3 9F               [12] 1430 	subb	a,r7
      0004D4 FF               [12] 1431 	mov	r7,a
      0004D5 8E*1B            [24] 1432 	mov	_FadeInOut_k_131072_75,r6
      0004D7 8F*1C            [24] 1433 	mov	(_FadeInOut_k_131072_75 + 1),r7
                                   1434 ;	./src/WS2812.c:166: }
      0004D9 02r03r41         [24] 1435 	ljmp	00113$
                                   1436 ;------------------------------------------------------------
                                   1437 ;Allocation info for local variables in function 'Strobe'
                                   1438 ;------------------------------------------------------------
                                   1439 ;red                       Allocated with name '_Strobe_PARM_2'
                                   1440 ;blue                      Allocated with name '_Strobe_PARM_3'
                                   1441 ;StrobeCount               Allocated with name '_Strobe_PARM_4'
                                   1442 ;EndPause                  Allocated with name '_Strobe_PARM_5'
                                   1443 ;green                     Allocated to registers r7 
                                   1444 ;curEffect                 Allocated to registers r6 
                                   1445 ;curColor                  Allocated with name '_Strobe_curColor_65536_79'
                                   1446 ;j                         Allocated to registers r3 r4 
                                   1447 ;------------------------------------------------------------
                                   1448 ;	./src/WS2812.c:168: void Strobe(uint8_t green, uint8_t red, uint8_t blue, int16_t StrobeCount, int16_t EndPause)
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function Strobe
                                   1451 ;	-----------------------------------------
      0004DC                       1452 _Strobe:
      0004DC AF 82            [24] 1453 	mov	r7,dpl
                                   1454 ;	./src/WS2812.c:170: uint8_t curEffect = effect;
      0004DE AE*00            [24] 1455 	mov	r6,_effect
                                   1456 ;	./src/WS2812.c:171: uint8_t curColor = _color;
      0004E0 85*00*23         [24] 1457 	mov	_Strobe_curColor_65536_79,__color
                                   1458 ;	./src/WS2812.c:172: for (int16_t j = 0; j < StrobeCount; j++)
      0004E3 7B 00            [12] 1459 	mov	r3,#0x00
      0004E5 7C 00            [12] 1460 	mov	r4,#0x00
      0004E7                       1461 00106$:
      0004E7 C3               [12] 1462 	clr	c
      0004E8 EB               [12] 1463 	mov	a,r3
      0004E9 95*1F            [12] 1464 	subb	a,_Strobe_PARM_4
      0004EB EC               [12] 1465 	mov	a,r4
      0004EC 64 80            [12] 1466 	xrl	a,#0x80
      0004EE 85*20 F0         [24] 1467 	mov	b,(_Strobe_PARM_4 + 1)
      0004F1 63 F0 80         [24] 1468 	xrl	b,#0x80
      0004F4 95 F0            [12] 1469 	subb	a,b
      0004F6 40 03            [24] 1470 	jc	00122$
      0004F8 02r05rB3         [24] 1471 	ljmp	00104$
      0004FB                       1472 00122$:
                                   1473 ;	./src/WS2812.c:174: CHECK_EFF;
      0004FB EE               [12] 1474 	mov	a,r6
      0004FC B5*00 07         [24] 1475 	cjne	a,_effect,00101$
      0004FF E5*00            [12] 1476 	mov	a,__color
      000501 B5*23 02         [24] 1477 	cjne	a,_Strobe_curColor_65536_79,00125$
      000504 80 04            [24] 1478 	sjmp	00102$
      000506                       1479 00125$:
      000506                       1480 00101$:
      000506 75*00 12         [24] 1481 	mov	__status,#0x12
      000509 22               [24] 1482 	ret
      00050A                       1483 00102$:
                                   1484 ;	./src/WS2812.c:175: setAll(green, red, blue);
      00050A 85*1D*12         [24] 1485 	mov	_setAll_PARM_2,_Strobe_PARM_2
      00050D 85*1E*13         [24] 1486 	mov	_setAll_PARM_3,_Strobe_PARM_3
      000510 8F 82            [24] 1487 	mov	dpl,r7
      000512 C0 07            [24] 1488 	push	ar7
      000514 C0 06            [24] 1489 	push	ar6
      000516 C0 04            [24] 1490 	push	ar4
      000518 C0 03            [24] 1491 	push	ar3
      00051A 12r01rFE         [24] 1492 	lcall	_setAll
                                   1493 ;	./src/WS2812.c:176: showStrip();
      00051D 12r01r42         [24] 1494 	lcall	_showStrip
                                   1495 ;	./src/WS2812.c:177: _delay_ms(DELAY2);
      000520 85*00*00         [24] 1496 	mov	__divuint_PARM_2,_NUM_LEDS
      000523 85*01*01         [24] 1497 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000526 90 00 C8         [24] 1498 	mov	dptr,#0x00c8
      000529 12r00r00         [24] 1499 	lcall	__divuint
      00052C 85*00*00         [24] 1500 	mov	__mulint_PARM_2,__delay
      00052F 85*01*01         [24] 1501 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000532 12r00r00         [24] 1502 	lcall	__mulint
      000535 75*00 64         [24] 1503 	mov	__divuint_PARM_2,#0x64
      000538 75*01 00         [24] 1504 	mov	(__divuint_PARM_2 + 1),#0x00
      00053B 12r00r00         [24] 1505 	lcall	__divuint
      00053E E5 82            [12] 1506 	mov	a,dpl
      000540 85 83 F0         [24] 1507 	mov	b,dph
      000543 24 01            [12] 1508 	add	a,#0x01
      000545 F9               [12] 1509 	mov	r1,a
      000546 E4               [12] 1510 	clr	a
      000547 35 F0            [12] 1511 	addc	a,b
      000549 F8               [12] 1512 	mov	r0,a
      00054A 7A 00            [12] 1513 	mov	r2,#0x00
      00054C 7D 00            [12] 1514 	mov	r5,#0x00
      00054E 89 82            [24] 1515 	mov	dpl,r1
      000550 88 83            [24] 1516 	mov	dph,r0
      000552 8A F0            [24] 1517 	mov	b,r2
      000554 ED               [12] 1518 	mov	a,r5
      000555 12r00r00         [24] 1519 	lcall	__delay_ms
                                   1520 ;	./src/WS2812.c:178: setAll(0, 0, 0);
      000558 75*12 00         [24] 1521 	mov	_setAll_PARM_2,#0x00
      00055B 75*13 00         [24] 1522 	mov	_setAll_PARM_3,#0x00
      00055E 75 82 00         [24] 1523 	mov	dpl,#0x00
      000561 12r01rFE         [24] 1524 	lcall	_setAll
                                   1525 ;	./src/WS2812.c:179: showStrip();
      000564 12r01r42         [24] 1526 	lcall	_showStrip
                                   1527 ;	./src/WS2812.c:180: _delay_ms(DELAY2);
      000567 85*00*00         [24] 1528 	mov	__divuint_PARM_2,_NUM_LEDS
      00056A 85*01*01         [24] 1529 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      00056D 90 00 C8         [24] 1530 	mov	dptr,#0x00c8
      000570 12r00r00         [24] 1531 	lcall	__divuint
      000573 85*00*00         [24] 1532 	mov	__mulint_PARM_2,__delay
      000576 85*01*01         [24] 1533 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000579 12r00r00         [24] 1534 	lcall	__mulint
      00057C 75*00 64         [24] 1535 	mov	__divuint_PARM_2,#0x64
      00057F 75*01 00         [24] 1536 	mov	(__divuint_PARM_2 + 1),#0x00
      000582 12r00r00         [24] 1537 	lcall	__divuint
      000585 E5 82            [12] 1538 	mov	a,dpl
      000587 85 83 F0         [24] 1539 	mov	b,dph
      00058A 24 01            [12] 1540 	add	a,#0x01
      00058C FA               [12] 1541 	mov	r2,a
      00058D E4               [12] 1542 	clr	a
      00058E 35 F0            [12] 1543 	addc	a,b
      000590 FD               [12] 1544 	mov	r5,a
      000591 8A 00            [24] 1545 	mov	ar0,r2
      000593 8D 01            [24] 1546 	mov	ar1,r5
      000595 7A 00            [12] 1547 	mov	r2,#0x00
      000597 7D 00            [12] 1548 	mov	r5,#0x00
      000599 88 82            [24] 1549 	mov	dpl,r0
      00059B 89 83            [24] 1550 	mov	dph,r1
      00059D 8A F0            [24] 1551 	mov	b,r2
      00059F ED               [12] 1552 	mov	a,r5
      0005A0 12r00r00         [24] 1553 	lcall	__delay_ms
      0005A3 D0 03            [24] 1554 	pop	ar3
      0005A5 D0 04            [24] 1555 	pop	ar4
      0005A7 D0 06            [24] 1556 	pop	ar6
      0005A9 D0 07            [24] 1557 	pop	ar7
                                   1558 ;	./src/WS2812.c:172: for (int16_t j = 0; j < StrobeCount; j++)
      0005AB 0B               [12] 1559 	inc	r3
      0005AC BB 00 01         [24] 1560 	cjne	r3,#0x00,00126$
      0005AF 0C               [12] 1561 	inc	r4
      0005B0                       1562 00126$:
      0005B0 02r04rE7         [24] 1563 	ljmp	00106$
      0005B3                       1564 00104$:
                                   1565 ;	./src/WS2812.c:182: _delay_ms(EndPause);
      0005B3 AC*21            [24] 1566 	mov	r4,_Strobe_PARM_5
      0005B5 E5*22            [12] 1567 	mov	a,(_Strobe_PARM_5 + 1)
      0005B7 FD               [12] 1568 	mov	r5,a
      0005B8 33               [12] 1569 	rlc	a
      0005B9 95 E0            [12] 1570 	subb	a,acc
      0005BB FE               [12] 1571 	mov	r6,a
      0005BC 8C 82            [24] 1572 	mov	dpl,r4
      0005BE 8D 83            [24] 1573 	mov	dph,r5
      0005C0 8E F0            [24] 1574 	mov	b,r6
                                   1575 ;	./src/WS2812.c:183: }
      0005C2 02r00r00         [24] 1576 	ljmp	__delay_ms
                                   1577 ;------------------------------------------------------------
                                   1578 ;Allocation info for local variables in function 'CylonBounce'
                                   1579 ;------------------------------------------------------------
                                   1580 ;red                       Allocated with name '_CylonBounce_PARM_2'
                                   1581 ;blue                      Allocated with name '_CylonBounce_PARM_3'
                                   1582 ;EyeSize                   Allocated with name '_CylonBounce_PARM_4'
                                   1583 ;ReturnDelay               Allocated with name '_CylonBounce_PARM_5'
                                   1584 ;green                     Allocated with name '_CylonBounce_green_65536_83'
                                   1585 ;curEffect                 Allocated with name '_CylonBounce_curEffect_65536_84'
                                   1586 ;curColor                  Allocated with name '_CylonBounce_curColor_65536_84'
                                   1587 ;i                         Allocated with name '_CylonBounce_i_131072_85'
                                   1588 ;j                         Allocated to registers r4 r7 
                                   1589 ;i                         Allocated to registers 
                                   1590 ;j                         Allocated with name '_CylonBounce_j_262144_92'
                                   1591 ;sloc0                     Allocated with name '_CylonBounce_sloc0_1_0'
                                   1592 ;sloc1                     Allocated with name '_CylonBounce_sloc1_1_0'
                                   1593 ;------------------------------------------------------------
                                   1594 ;	./src/WS2812.c:185: void CylonBounce(uint8_t green, uint8_t red, uint8_t blue, int16_t EyeSize, int16_t ReturnDelay)
                                   1595 ;	-----------------------------------------
                                   1596 ;	 function CylonBounce
                                   1597 ;	-----------------------------------------
      0005C5                       1598 _CylonBounce:
      0005C5 85 82*2A         [24] 1599 	mov	_CylonBounce_green_65536_83,dpl
                                   1600 ;	./src/WS2812.c:187: uint8_t curEffect = effect;
      0005C8 85*00*2B         [24] 1601 	mov	_CylonBounce_curEffect_65536_84,_effect
                                   1602 ;	./src/WS2812.c:188: uint8_t curColor = _color;
      0005CB 85*00*2C         [24] 1603 	mov	_CylonBounce_curColor_65536_84,__color
                                   1604 ;	./src/WS2812.c:189: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      0005CE E4               [12] 1605 	clr	a
      0005CF F5*2D            [12] 1606 	mov	_CylonBounce_i_131072_85,a
      0005D1 F5*2E            [12] 1607 	mov	(_CylonBounce_i_131072_85 + 1),a
      0005D3                       1608 00115$:
      0005D3 A9*26            [24] 1609 	mov	r1,_CylonBounce_PARM_4
      0005D5 AA*27            [24] 1610 	mov	r2,(_CylonBounce_PARM_4 + 1)
      0005D7 E5*00            [12] 1611 	mov	a,_NUM_LEDS
      0005D9 C3               [12] 1612 	clr	c
      0005DA 99               [12] 1613 	subb	a,r1
      0005DB F8               [12] 1614 	mov	r0,a
      0005DC E5*01            [12] 1615 	mov	a,(_NUM_LEDS + 1)
      0005DE 9A               [12] 1616 	subb	a,r2
      0005DF FD               [12] 1617 	mov	r5,a
      0005E0 E8               [12] 1618 	mov	a,r0
      0005E1 24 FE            [12] 1619 	add	a,#0xfe
      0005E3 F8               [12] 1620 	mov	r0,a
      0005E4 ED               [12] 1621 	mov	a,r5
      0005E5 34 FF            [12] 1622 	addc	a,#0xff
      0005E7 FD               [12] 1623 	mov	r5,a
      0005E8 AE*2D            [24] 1624 	mov	r6,_CylonBounce_i_131072_85
      0005EA AF*2E            [24] 1625 	mov	r7,(_CylonBounce_i_131072_85 + 1)
      0005EC C3               [12] 1626 	clr	c
      0005ED EE               [12] 1627 	mov	a,r6
      0005EE 98               [12] 1628 	subb	a,r0
      0005EF EF               [12] 1629 	mov	a,r7
      0005F0 9D               [12] 1630 	subb	a,r5
      0005F1 40 03            [24] 1631 	jc	00165$
      0005F3 02r07r13         [24] 1632 	ljmp	00105$
      0005F6                       1633 00165$:
                                   1634 ;	./src/WS2812.c:191: setAll(0, 0, 0);
      0005F6 75*12 00         [24] 1635 	mov	_setAll_PARM_2,#0x00
      0005F9 75*13 00         [24] 1636 	mov	_setAll_PARM_3,#0x00
      0005FC 75 82 00         [24] 1637 	mov	dpl,#0x00
      0005FF 12r01rFE         [24] 1638 	lcall	_setAll
                                   1639 ;	./src/WS2812.c:192: setPixel(i, red / 10, green / 10, blue / 10);
      000602 AE*24            [24] 1640 	mov	r6,_CylonBounce_PARM_2
      000604 7F 00            [12] 1641 	mov	r7,#0x00
      000606 75*00 0A         [24] 1642 	mov	__divsint_PARM_2,#0x0a
                                   1643 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000609 8F*01            [24] 1644 	mov	(__divsint_PARM_2 + 1),r7
      00060B 8E 82            [24] 1645 	mov	dpl,r6
      00060D 8F 83            [24] 1646 	mov	dph,r7
      00060F 12r00r00         [24] 1647 	lcall	__divsint
      000612 AE 82            [24] 1648 	mov	r6,dpl
      000614 AD*2A            [24] 1649 	mov	r5,_CylonBounce_green_65536_83
      000616 7F 00            [12] 1650 	mov	r7,#0x00
      000618 75*00 0A         [24] 1651 	mov	__divsint_PARM_2,#0x0a
                                   1652 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00061B 8F*01            [24] 1653 	mov	(__divsint_PARM_2 + 1),r7
      00061D 8D 82            [24] 1654 	mov	dpl,r5
      00061F 8F 83            [24] 1655 	mov	dph,r7
      000621 C0 06            [24] 1656 	push	ar6
      000623 12r00r00         [24] 1657 	lcall	__divsint
      000626 AD 82            [24] 1658 	mov	r5,dpl
      000628 A8*25            [24] 1659 	mov	r0,_CylonBounce_PARM_3
      00062A 7F 00            [12] 1660 	mov	r7,#0x00
      00062C 75*00 0A         [24] 1661 	mov	__divsint_PARM_2,#0x0a
                                   1662 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00062F 8F*01            [24] 1663 	mov	(__divsint_PARM_2 + 1),r7
      000631 88 82            [24] 1664 	mov	dpl,r0
      000633 8F 83            [24] 1665 	mov	dph,r7
      000635 C0 05            [24] 1666 	push	ar5
      000637 12r00r00         [24] 1667 	lcall	__divsint
      00063A A8 82            [24] 1668 	mov	r0,dpl
      00063C D0 05            [24] 1669 	pop	ar5
      00063E D0 06            [24] 1670 	pop	ar6
      000640 8E*0F            [24] 1671 	mov	_setPixel_PARM_2,r6
      000642 8D*10            [24] 1672 	mov	_setPixel_PARM_3,r5
      000644 88*11            [24] 1673 	mov	_setPixel_PARM_4,r0
      000646 85*2D 82         [24] 1674 	mov	dpl,_CylonBounce_i_131072_85
      000649 85*2E 83         [24] 1675 	mov	dph,(_CylonBounce_i_131072_85 + 1)
      00064C C0 06            [24] 1676 	push	ar6
      00064E C0 05            [24] 1677 	push	ar5
      000650 C0 00            [24] 1678 	push	ar0
      000652 12r01rB6         [24] 1679 	lcall	_setPixel
      000655 D0 00            [24] 1680 	pop	ar0
      000657 D0 05            [24] 1681 	pop	ar5
      000659 D0 06            [24] 1682 	pop	ar6
                                   1683 ;	./src/WS2812.c:193: for (int16_t j = 1; j <= EyeSize; j++)
      00065B 7C 01            [12] 1684 	mov	r4,#0x01
      00065D 7F 00            [12] 1685 	mov	r7,#0x00
      00065F                       1686 00112$:
      00065F C3               [12] 1687 	clr	c
      000660 E5*26            [12] 1688 	mov	a,_CylonBounce_PARM_4
      000662 9C               [12] 1689 	subb	a,r4
      000663 E5*27            [12] 1690 	mov	a,(_CylonBounce_PARM_4 + 1)
      000665 64 80            [12] 1691 	xrl	a,#0x80
      000667 8F F0            [24] 1692 	mov	b,r7
      000669 63 F0 80         [24] 1693 	xrl	b,#0x80
      00066C 95 F0            [12] 1694 	subb	a,b
      00066E 40 41            [24] 1695 	jc	00104$
                                   1696 ;	./src/WS2812.c:195: CHECK_EFF;
      000670 E5*00            [12] 1697 	mov	a,_effect
      000672 B5*2B 07         [24] 1698 	cjne	a,_CylonBounce_curEffect_65536_84,00101$
      000675 E5*00            [12] 1699 	mov	a,__color
      000677 B5*2C 02         [24] 1700 	cjne	a,_CylonBounce_curColor_65536_84,00169$
      00067A 80 04            [24] 1701 	sjmp	00102$
      00067C                       1702 00169$:
      00067C                       1703 00101$:
      00067C 75*00 12         [24] 1704 	mov	__status,#0x12
      00067F 22               [24] 1705 	ret
      000680                       1706 00102$:
                                   1707 ;	./src/WS2812.c:196: setPixel(i + j, green, red, blue);
      000680 EC               [12] 1708 	mov	a,r4
      000681 25*2D            [12] 1709 	add	a,_CylonBounce_i_131072_85
      000683 F5 82            [12] 1710 	mov	dpl,a
      000685 EF               [12] 1711 	mov	a,r7
      000686 35*2E            [12] 1712 	addc	a,(_CylonBounce_i_131072_85 + 1)
      000688 F5 83            [12] 1713 	mov	dph,a
      00068A 85*2A*0F         [24] 1714 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_83
      00068D 85*24*10         [24] 1715 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      000690 85*25*11         [24] 1716 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      000693 C0 07            [24] 1717 	push	ar7
      000695 C0 06            [24] 1718 	push	ar6
      000697 C0 05            [24] 1719 	push	ar5
      000699 C0 04            [24] 1720 	push	ar4
      00069B C0 00            [24] 1721 	push	ar0
      00069D 12r01rB6         [24] 1722 	lcall	_setPixel
      0006A0 D0 00            [24] 1723 	pop	ar0
      0006A2 D0 04            [24] 1724 	pop	ar4
      0006A4 D0 05            [24] 1725 	pop	ar5
      0006A6 D0 06            [24] 1726 	pop	ar6
      0006A8 D0 07            [24] 1727 	pop	ar7
                                   1728 ;	./src/WS2812.c:193: for (int16_t j = 1; j <= EyeSize; j++)
      0006AA 0C               [12] 1729 	inc	r4
      0006AB BC 00 B1         [24] 1730 	cjne	r4,#0x00,00112$
      0006AE 0F               [12] 1731 	inc	r7
      0006AF 80 AE            [24] 1732 	sjmp	00112$
      0006B1                       1733 00104$:
                                   1734 ;	./src/WS2812.c:198: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      0006B1 E5*26            [12] 1735 	mov	a,_CylonBounce_PARM_4
      0006B3 25*2D            [12] 1736 	add	a,_CylonBounce_i_131072_85
      0006B5 FC               [12] 1737 	mov	r4,a
      0006B6 E5*27            [12] 1738 	mov	a,(_CylonBounce_PARM_4 + 1)
      0006B8 35*2E            [12] 1739 	addc	a,(_CylonBounce_i_131072_85 + 1)
      0006BA FF               [12] 1740 	mov	r7,a
      0006BB 0C               [12] 1741 	inc	r4
      0006BC BC 00 01         [24] 1742 	cjne	r4,#0x00,00171$
      0006BF 0F               [12] 1743 	inc	r7
      0006C0                       1744 00171$:
      0006C0 8C 82            [24] 1745 	mov	dpl,r4
      0006C2 8F 83            [24] 1746 	mov	dph,r7
      0006C4 8E*0F            [24] 1747 	mov	_setPixel_PARM_2,r6
      0006C6 8D*10            [24] 1748 	mov	_setPixel_PARM_3,r5
      0006C8 88*11            [24] 1749 	mov	_setPixel_PARM_4,r0
      0006CA 12r01rB6         [24] 1750 	lcall	_setPixel
                                   1751 ;	./src/WS2812.c:199: showStrip();
      0006CD 12r01r42         [24] 1752 	lcall	_showStrip
                                   1753 ;	./src/WS2812.c:200: _delay_ms(DELAY2);
      0006D0 85*00*00         [24] 1754 	mov	__divuint_PARM_2,_NUM_LEDS
      0006D3 85*01*01         [24] 1755 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0006D6 90 00 C8         [24] 1756 	mov	dptr,#0x00c8
      0006D9 12r00r00         [24] 1757 	lcall	__divuint
      0006DC 85*00*00         [24] 1758 	mov	__mulint_PARM_2,__delay
      0006DF 85*01*01         [24] 1759 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0006E2 12r00r00         [24] 1760 	lcall	__mulint
      0006E5 75*00 64         [24] 1761 	mov	__divuint_PARM_2,#0x64
      0006E8 75*01 00         [24] 1762 	mov	(__divuint_PARM_2 + 1),#0x00
      0006EB 12r00r00         [24] 1763 	lcall	__divuint
      0006EE E5 82            [12] 1764 	mov	a,dpl
      0006F0 85 83 F0         [24] 1765 	mov	b,dph
      0006F3 24 01            [12] 1766 	add	a,#0x01
      0006F5 FE               [12] 1767 	mov	r6,a
      0006F6 E4               [12] 1768 	clr	a
      0006F7 35 F0            [12] 1769 	addc	a,b
      0006F9 FF               [12] 1770 	mov	r7,a
      0006FA 7D 00            [12] 1771 	mov	r5,#0x00
      0006FC 7C 00            [12] 1772 	mov	r4,#0x00
      0006FE 8E 82            [24] 1773 	mov	dpl,r6
      000700 8F 83            [24] 1774 	mov	dph,r7
      000702 8D F0            [24] 1775 	mov	b,r5
      000704 EC               [12] 1776 	mov	a,r4
      000705 12r00r00         [24] 1777 	lcall	__delay_ms
                                   1778 ;	./src/WS2812.c:189: for (int16_t i = 0; i < NUM_LEDS - EyeSize - 2; i++)
      000708 05*2D            [12] 1779 	inc	_CylonBounce_i_131072_85
      00070A E4               [12] 1780 	clr	a
      00070B B5*2D 02         [24] 1781 	cjne	a,_CylonBounce_i_131072_85,00172$
      00070E 05*2E            [12] 1782 	inc	(_CylonBounce_i_131072_85 + 1)
      000710                       1783 00172$:
      000710 02r05rD3         [24] 1784 	ljmp	00115$
      000713                       1785 00105$:
                                   1786 ;	./src/WS2812.c:203: _delay_ms(ReturnDelay);
      000713 AC*28            [24] 1787 	mov	r4,_CylonBounce_PARM_5
      000715 E5*29            [12] 1788 	mov	a,(_CylonBounce_PARM_5 + 1)
      000717 FD               [12] 1789 	mov	r5,a
      000718 33               [12] 1790 	rlc	a
      000719 95 E0            [12] 1791 	subb	a,acc
      00071B FE               [12] 1792 	mov	r6,a
      00071C FF               [12] 1793 	mov	r7,a
      00071D 8C 82            [24] 1794 	mov	dpl,r4
      00071F 8D 83            [24] 1795 	mov	dph,r5
      000721 8E F0            [24] 1796 	mov	b,r6
      000723 C0 07            [24] 1797 	push	ar7
      000725 C0 06            [24] 1798 	push	ar6
      000727 C0 05            [24] 1799 	push	ar5
      000729 C0 04            [24] 1800 	push	ar4
      00072B C0 02            [24] 1801 	push	ar2
      00072D C0 01            [24] 1802 	push	ar1
      00072F 12r00r00         [24] 1803 	lcall	__delay_ms
      000732 D0 01            [24] 1804 	pop	ar1
      000734 D0 02            [24] 1805 	pop	ar2
      000736 D0 04            [24] 1806 	pop	ar4
      000738 D0 05            [24] 1807 	pop	ar5
      00073A D0 06            [24] 1808 	pop	ar6
      00073C D0 07            [24] 1809 	pop	ar7
                                   1810 ;	./src/WS2812.c:205: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      00073E E5*00            [12] 1811 	mov	a,_NUM_LEDS
      000740 C3               [12] 1812 	clr	c
      000741 99               [12] 1813 	subb	a,r1
      000742 F9               [12] 1814 	mov	r1,a
      000743 E5*01            [12] 1815 	mov	a,(_NUM_LEDS + 1)
      000745 9A               [12] 1816 	subb	a,r2
      000746 FA               [12] 1817 	mov	r2,a
      000747 E9               [12] 1818 	mov	a,r1
      000748 24 FE            [12] 1819 	add	a,#0xfe
      00074A F9               [12] 1820 	mov	r1,a
      00074B EA               [12] 1821 	mov	a,r2
      00074C 34 FF            [12] 1822 	addc	a,#0xff
      00074E FA               [12] 1823 	mov	r2,a
      00074F                       1824 00121$:
      00074F 89 00            [24] 1825 	mov	ar0,r1
      000751 8A 03            [24] 1826 	mov	ar3,r2
      000753 C3               [12] 1827 	clr	c
      000754 E4               [12] 1828 	clr	a
      000755 98               [12] 1829 	subb	a,r0
      000756 74 80            [12] 1830 	mov	a,#(0x00 ^ 0x80)
      000758 8B F0            [24] 1831 	mov	b,r3
      00075A 63 F0 80         [24] 1832 	xrl	b,#0x80
      00075D 95 F0            [12] 1833 	subb	a,b
      00075F 40 03            [24] 1834 	jc	00173$
      000761 02r09r47         [24] 1835 	ljmp	00110$
      000764                       1836 00173$:
                                   1837 ;	./src/WS2812.c:207: setAll(0, 0, 0);
      000764 C0 04            [24] 1838 	push	ar4
      000766 C0 05            [24] 1839 	push	ar5
      000768 C0 06            [24] 1840 	push	ar6
      00076A C0 07            [24] 1841 	push	ar7
      00076C 75*12 00         [24] 1842 	mov	_setAll_PARM_2,#0x00
      00076F 75*13 00         [24] 1843 	mov	_setAll_PARM_3,#0x00
      000772 75 82 00         [24] 1844 	mov	dpl,#0x00
      000775 C0 07            [24] 1845 	push	ar7
      000777 C0 06            [24] 1846 	push	ar6
      000779 C0 05            [24] 1847 	push	ar5
      00077B C0 04            [24] 1848 	push	ar4
      00077D C0 02            [24] 1849 	push	ar2
      00077F C0 01            [24] 1850 	push	ar1
      000781 12r01rFE         [24] 1851 	lcall	_setAll
                                   1852 ;	./src/WS2812.c:208: setPixel(i, red / 10, green / 10, blue / 10);
      000784 A8*24            [24] 1853 	mov	r0,_CylonBounce_PARM_2
      000786 7B 00            [12] 1854 	mov	r3,#0x00
      000788 75*00 0A         [24] 1855 	mov	__divsint_PARM_2,#0x0a
                                   1856 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00078B 8B*01            [24] 1857 	mov	(__divsint_PARM_2 + 1),r3
      00078D 88 82            [24] 1858 	mov	dpl,r0
      00078F 8B 83            [24] 1859 	mov	dph,r3
      000791 12r00r00         [24] 1860 	lcall	__divsint
      000794 A8 82            [24] 1861 	mov	r0,dpl
      000796 D0 01            [24] 1862 	pop	ar1
      000798 D0 02            [24] 1863 	pop	ar2
      00079A D0 04            [24] 1864 	pop	ar4
      00079C D0 05            [24] 1865 	pop	ar5
      00079E D0 06            [24] 1866 	pop	ar6
      0007A0 D0 07            [24] 1867 	pop	ar7
      0007A2 AB*2A            [24] 1868 	mov	r3,_CylonBounce_green_65536_83
      0007A4 7F 00            [12] 1869 	mov	r7,#0x00
      0007A6 75*00 0A         [24] 1870 	mov	__divsint_PARM_2,#0x0a
                                   1871 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0007A9 8F*01            [24] 1872 	mov	(__divsint_PARM_2 + 1),r7
      0007AB 8B 82            [24] 1873 	mov	dpl,r3
      0007AD 8F 83            [24] 1874 	mov	dph,r7
      0007AF C0 05            [24] 1875 	push	ar5
      0007B1 C0 04            [24] 1876 	push	ar4
      0007B3 C0 02            [24] 1877 	push	ar2
      0007B5 C0 01            [24] 1878 	push	ar1
      0007B7 C0 00            [24] 1879 	push	ar0
      0007B9 12r00r00         [24] 1880 	lcall	__divsint
      0007BC AE 82            [24] 1881 	mov	r6,dpl
      0007BE 8E*31            [24] 1882 	mov	_CylonBounce_sloc0_1_0,r6
      0007C0 AE*25            [24] 1883 	mov	r6,_CylonBounce_PARM_3
      0007C2 7F 00            [12] 1884 	mov	r7,#0x00
      0007C4 75*00 0A         [24] 1885 	mov	__divsint_PARM_2,#0x0a
                                   1886 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0007C7 8F*01            [24] 1887 	mov	(__divsint_PARM_2 + 1),r7
      0007C9 8E 82            [24] 1888 	mov	dpl,r6
      0007CB 8F 83            [24] 1889 	mov	dph,r7
      0007CD 12r00r00         [24] 1890 	lcall	__divsint
      0007D0 AE 82            [24] 1891 	mov	r6,dpl
      0007D2 AF 83            [24] 1892 	mov	r7,dph
      0007D4 D0 00            [24] 1893 	pop	ar0
      0007D6 D0 01            [24] 1894 	pop	ar1
      0007D8 D0 02            [24] 1895 	pop	ar2
      0007DA D0 04            [24] 1896 	pop	ar4
      0007DC D0 05            [24] 1897 	pop	ar5
      0007DE 8E*32            [24] 1898 	mov	_CylonBounce_sloc1_1_0,r6
      0007E0 88*0F            [24] 1899 	mov	_setPixel_PARM_2,r0
      0007E2 85*31*10         [24] 1900 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      0007E5 85*32*11         [24] 1901 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      0007E8 89 82            [24] 1902 	mov	dpl,r1
      0007EA 8A 83            [24] 1903 	mov	dph,r2
      0007EC C0 07            [24] 1904 	push	ar7
      0007EE C0 06            [24] 1905 	push	ar6
      0007F0 C0 05            [24] 1906 	push	ar5
      0007F2 C0 04            [24] 1907 	push	ar4
      0007F4 C0 02            [24] 1908 	push	ar2
      0007F6 C0 01            [24] 1909 	push	ar1
      0007F8 C0 00            [24] 1910 	push	ar0
      0007FA 12r01rB6         [24] 1911 	lcall	_setPixel
      0007FD D0 00            [24] 1912 	pop	ar0
      0007FF D0 01            [24] 1913 	pop	ar1
      000801 D0 02            [24] 1914 	pop	ar2
      000803 D0 04            [24] 1915 	pop	ar4
      000805 D0 05            [24] 1916 	pop	ar5
      000807 D0 06            [24] 1917 	pop	ar6
      000809 D0 07            [24] 1918 	pop	ar7
                                   1919 ;	./src/WS2812.c:209: for (int16_t j = 1; j <= EyeSize; j++)
      00080B 75*2F 01         [24] 1920 	mov	_CylonBounce_j_262144_92,#0x01
      00080E 75*30 00         [24] 1921 	mov	(_CylonBounce_j_262144_92 + 1),#0x00
                                   1922 ;	./src/WS2812.c:219: _delay_ms(ReturnDelay);
      000811 D0 07            [24] 1923 	pop	ar7
      000813 D0 06            [24] 1924 	pop	ar6
      000815 D0 05            [24] 1925 	pop	ar5
      000817 D0 04            [24] 1926 	pop	ar4
                                   1927 ;	./src/WS2812.c:209: for (int16_t j = 1; j <= EyeSize; j++)
      000819                       1928 00118$:
      000819 C3               [12] 1929 	clr	c
      00081A E5*26            [12] 1930 	mov	a,_CylonBounce_PARM_4
      00081C 95*2F            [12] 1931 	subb	a,_CylonBounce_j_262144_92
      00081E E5*27            [12] 1932 	mov	a,(_CylonBounce_PARM_4 + 1)
      000820 64 80            [12] 1933 	xrl	a,#0x80
      000822 85*30 F0         [24] 1934 	mov	b,(_CylonBounce_j_262144_92 + 1)
      000825 63 F0 80         [24] 1935 	xrl	b,#0x80
      000828 95 F0            [12] 1936 	subb	a,b
      00082A 40 4C            [24] 1937 	jc	00109$
                                   1938 ;	./src/WS2812.c:211: CHECK_EFF;
      00082C E5*00            [12] 1939 	mov	a,_effect
      00082E B5*2B 07         [24] 1940 	cjne	a,_CylonBounce_curEffect_65536_84,00106$
      000831 E5*00            [12] 1941 	mov	a,__color
      000833 B5*2C 02         [24] 1942 	cjne	a,_CylonBounce_curColor_65536_84,00177$
      000836 80 04            [24] 1943 	sjmp	00107$
      000838                       1944 00177$:
      000838                       1945 00106$:
      000838 75*00 12         [24] 1946 	mov	__status,#0x12
      00083B 22               [24] 1947 	ret
      00083C                       1948 00107$:
                                   1949 ;	./src/WS2812.c:212: setPixel(i + j, green, red, blue);
      00083C E5*2F            [12] 1950 	mov	a,_CylonBounce_j_262144_92
      00083E 29               [12] 1951 	add	a,r1
      00083F F5 82            [12] 1952 	mov	dpl,a
      000841 E5*30            [12] 1953 	mov	a,(_CylonBounce_j_262144_92 + 1)
      000843 3A               [12] 1954 	addc	a,r2
      000844 F5 83            [12] 1955 	mov	dph,a
      000846 85*2A*0F         [24] 1956 	mov	_setPixel_PARM_2,_CylonBounce_green_65536_83
      000849 85*24*10         [24] 1957 	mov	_setPixel_PARM_3,_CylonBounce_PARM_2
      00084C 85*25*11         [24] 1958 	mov	_setPixel_PARM_4,_CylonBounce_PARM_3
      00084F C0 07            [24] 1959 	push	ar7
      000851 C0 06            [24] 1960 	push	ar6
      000853 C0 05            [24] 1961 	push	ar5
      000855 C0 04            [24] 1962 	push	ar4
      000857 C0 02            [24] 1963 	push	ar2
      000859 C0 01            [24] 1964 	push	ar1
      00085B C0 00            [24] 1965 	push	ar0
      00085D 12r01rB6         [24] 1966 	lcall	_setPixel
      000860 D0 00            [24] 1967 	pop	ar0
      000862 D0 01            [24] 1968 	pop	ar1
      000864 D0 02            [24] 1969 	pop	ar2
      000866 D0 04            [24] 1970 	pop	ar4
      000868 D0 05            [24] 1971 	pop	ar5
      00086A D0 06            [24] 1972 	pop	ar6
      00086C D0 07            [24] 1973 	pop	ar7
                                   1974 ;	./src/WS2812.c:209: for (int16_t j = 1; j <= EyeSize; j++)
      00086E 05*2F            [12] 1975 	inc	_CylonBounce_j_262144_92
      000870 E4               [12] 1976 	clr	a
      000871 B5*2F A5         [24] 1977 	cjne	a,_CylonBounce_j_262144_92,00118$
      000874 05*30            [12] 1978 	inc	(_CylonBounce_j_262144_92 + 1)
      000876 80 A1            [24] 1979 	sjmp	00118$
      000878                       1980 00109$:
                                   1981 ;	./src/WS2812.c:214: setPixel(i + EyeSize + 1, red / 10, green / 10, blue / 10);
      000878 C0 04            [24] 1982 	push	ar4
      00087A C0 05            [24] 1983 	push	ar5
      00087C C0 06            [24] 1984 	push	ar6
      00087E C0 07            [24] 1985 	push	ar7
      000880 E5*26            [12] 1986 	mov	a,_CylonBounce_PARM_4
      000882 29               [12] 1987 	add	a,r1
      000883 FB               [12] 1988 	mov	r3,a
      000884 E5*27            [12] 1989 	mov	a,(_CylonBounce_PARM_4 + 1)
      000886 3A               [12] 1990 	addc	a,r2
      000887 FF               [12] 1991 	mov	r7,a
      000888 0B               [12] 1992 	inc	r3
      000889 BB 00 01         [24] 1993 	cjne	r3,#0x00,00179$
      00088C 0F               [12] 1994 	inc	r7
      00088D                       1995 00179$:
      00088D 8B 82            [24] 1996 	mov	dpl,r3
      00088F 8F 83            [24] 1997 	mov	dph,r7
      000891 88*0F            [24] 1998 	mov	_setPixel_PARM_2,r0
      000893 85*31*10         [24] 1999 	mov	_setPixel_PARM_3,_CylonBounce_sloc0_1_0
      000896 85*32*11         [24] 2000 	mov	_setPixel_PARM_4,_CylonBounce_sloc1_1_0
      000899 C0 07            [24] 2001 	push	ar7
      00089B C0 06            [24] 2002 	push	ar6
      00089D C0 05            [24] 2003 	push	ar5
      00089F C0 04            [24] 2004 	push	ar4
      0008A1 C0 02            [24] 2005 	push	ar2
      0008A3 C0 01            [24] 2006 	push	ar1
      0008A5 12r01rB6         [24] 2007 	lcall	_setPixel
                                   2008 ;	./src/WS2812.c:215: showStrip();
      0008A8 12r01r42         [24] 2009 	lcall	_showStrip
                                   2010 ;	./src/WS2812.c:216: _delay_ms(DELAY2);
      0008AB 85*00*00         [24] 2011 	mov	__divuint_PARM_2,_NUM_LEDS
      0008AE 85*01*01         [24] 2012 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0008B1 90 00 C8         [24] 2013 	mov	dptr,#0x00c8
      0008B4 12r00r00         [24] 2014 	lcall	__divuint
      0008B7 D0 01            [24] 2015 	pop	ar1
      0008B9 D0 02            [24] 2016 	pop	ar2
      0008BB D0 04            [24] 2017 	pop	ar4
      0008BD D0 05            [24] 2018 	pop	ar5
      0008BF D0 06            [24] 2019 	pop	ar6
      0008C1 D0 07            [24] 2020 	pop	ar7
      0008C3 85*00*00         [24] 2021 	mov	__mulint_PARM_2,__delay
      0008C6 85*01*01         [24] 2022 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0008C9 C0 05            [24] 2023 	push	ar5
      0008CB C0 04            [24] 2024 	push	ar4
      0008CD C0 02            [24] 2025 	push	ar2
      0008CF C0 01            [24] 2026 	push	ar1
      0008D1 12r00r00         [24] 2027 	lcall	__mulint
      0008D4 AE 82            [24] 2028 	mov	r6,dpl
      0008D6 AF 83            [24] 2029 	mov	r7,dph
      0008D8 D0 01            [24] 2030 	pop	ar1
      0008DA D0 02            [24] 2031 	pop	ar2
      0008DC D0 04            [24] 2032 	pop	ar4
      0008DE D0 05            [24] 2033 	pop	ar5
      0008E0 8E 82            [24] 2034 	mov	dpl,r6
      0008E2 8F 83            [24] 2035 	mov	dph,r7
      0008E4 75*00 64         [24] 2036 	mov	__divuint_PARM_2,#0x64
      0008E7 75*01 00         [24] 2037 	mov	(__divuint_PARM_2 + 1),#0x00
      0008EA C0 07            [24] 2038 	push	ar7
      0008EC C0 06            [24] 2039 	push	ar6
      0008EE C0 05            [24] 2040 	push	ar5
      0008F0 C0 04            [24] 2041 	push	ar4
      0008F2 C0 02            [24] 2042 	push	ar2
      0008F4 C0 01            [24] 2043 	push	ar1
      0008F6 12r00r00         [24] 2044 	lcall	__divuint
      0008F9 E5 82            [12] 2045 	mov	a,dpl
      0008FB 85 83 F0         [24] 2046 	mov	b,dph
      0008FE D0 01            [24] 2047 	pop	ar1
      000900 D0 02            [24] 2048 	pop	ar2
      000902 D0 04            [24] 2049 	pop	ar4
      000904 D0 05            [24] 2050 	pop	ar5
      000906 D0 06            [24] 2051 	pop	ar6
      000908 D0 07            [24] 2052 	pop	ar7
      00090A 24 01            [12] 2053 	add	a,#0x01
      00090C FE               [12] 2054 	mov	r6,a
      00090D E4               [12] 2055 	clr	a
      00090E 35 F0            [12] 2056 	addc	a,b
      000910 FF               [12] 2057 	mov	r7,a
      000911 7D 00            [12] 2058 	mov	r5,#0x00
      000913 7C 00            [12] 2059 	mov	r4,#0x00
      000915 8E 82            [24] 2060 	mov	dpl,r6
      000917 8F 83            [24] 2061 	mov	dph,r7
      000919 8D F0            [24] 2062 	mov	b,r5
      00091B EC               [12] 2063 	mov	a,r4
      00091C C0 07            [24] 2064 	push	ar7
      00091E C0 06            [24] 2065 	push	ar6
      000920 C0 05            [24] 2066 	push	ar5
      000922 C0 04            [24] 2067 	push	ar4
      000924 C0 02            [24] 2068 	push	ar2
      000926 C0 01            [24] 2069 	push	ar1
      000928 12r00r00         [24] 2070 	lcall	__delay_ms
      00092B D0 01            [24] 2071 	pop	ar1
      00092D D0 02            [24] 2072 	pop	ar2
      00092F D0 04            [24] 2073 	pop	ar4
      000931 D0 05            [24] 2074 	pop	ar5
      000933 D0 06            [24] 2075 	pop	ar6
      000935 D0 07            [24] 2076 	pop	ar7
                                   2077 ;	./src/WS2812.c:205: for (int16_t i = NUM_LEDS - EyeSize - 2; i > 0; i--)
      000937 19               [12] 2078 	dec	r1
      000938 B9 FF 01         [24] 2079 	cjne	r1,#0xff,00180$
      00093B 1A               [12] 2080 	dec	r2
      00093C                       2081 00180$:
      00093C D0 07            [24] 2082 	pop	ar7
      00093E D0 06            [24] 2083 	pop	ar6
      000940 D0 05            [24] 2084 	pop	ar5
      000942 D0 04            [24] 2085 	pop	ar4
      000944 02r07r4F         [24] 2086 	ljmp	00121$
      000947                       2087 00110$:
                                   2088 ;	./src/WS2812.c:219: _delay_ms(ReturnDelay);
      000947 8C 82            [24] 2089 	mov	dpl,r4
      000949 8D 83            [24] 2090 	mov	dph,r5
      00094B 8E F0            [24] 2091 	mov	b,r6
      00094D EF               [12] 2092 	mov	a,r7
                                   2093 ;	./src/WS2812.c:220: }
      00094E 02r00r00         [24] 2094 	ljmp	__delay_ms
                                   2095 ;------------------------------------------------------------
                                   2096 ;Allocation info for local variables in function 'colorWipe'
                                   2097 ;------------------------------------------------------------
                                   2098 ;red                       Allocated with name '_colorWipe_PARM_2'
                                   2099 ;blue                      Allocated with name '_colorWipe_PARM_3'
                                   2100 ;orient                    Allocated with name '_colorWipe_PARM_4'
                                   2101 ;green                     Allocated to registers r7 
                                   2102 ;curEffect                 Allocated to registers r6 
                                   2103 ;curColor                  Allocated with name '_colorWipe_curColor_65536_96'
                                   2104 ;i                         Allocated to registers r3 r4 
                                   2105 ;------------------------------------------------------------
                                   2106 ;	./src/WS2812.c:268: void colorWipe(uint8_t green, uint8_t red, uint8_t blue, uint8_t orient)
                                   2107 ;	-----------------------------------------
                                   2108 ;	 function colorWipe
                                   2109 ;	-----------------------------------------
      000951                       2110 _colorWipe:
      000951 AF 82            [24] 2111 	mov	r7,dpl
                                   2112 ;	./src/WS2812.c:270: uint8_t curEffect = effect;
      000953 AE*00            [24] 2113 	mov	r6,_effect
                                   2114 ;	./src/WS2812.c:271: uint8_t curColor = _color;
      000955 85*00*36         [24] 2115 	mov	_colorWipe_curColor_65536_96,__color
                                   2116 ;	./src/WS2812.c:272: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000958 7B 00            [12] 2117 	mov	r3,#0x00
      00095A 7C 00            [12] 2118 	mov	r4,#0x00
      00095C                       2119 00106$:
      00095C C3               [12] 2120 	clr	c
      00095D EB               [12] 2121 	mov	a,r3
      00095E 95*00            [12] 2122 	subb	a,_NUM_LEDS
      000960 EC               [12] 2123 	mov	a,r4
      000961 95*01            [12] 2124 	subb	a,(_NUM_LEDS + 1)
      000963 40 01            [24] 2125 	jc	00128$
      000965 22               [24] 2126 	ret
      000966                       2127 00128$:
                                   2128 ;	./src/WS2812.c:274: CHECK_EFF;
      000966 EE               [12] 2129 	mov	a,r6
      000967 B5*00 07         [24] 2130 	cjne	a,_effect,00101$
      00096A E5*00            [12] 2131 	mov	a,__color
      00096C B5*36 02         [24] 2132 	cjne	a,_colorWipe_curColor_65536_96,00131$
      00096F 80 04            [24] 2133 	sjmp	00102$
      000971                       2134 00131$:
      000971                       2135 00101$:
      000971 75*00 12         [24] 2136 	mov	__status,#0x12
      000974 22               [24] 2137 	ret
      000975                       2138 00102$:
                                   2139 ;	./src/WS2812.c:275: setPixel(orient == 0 ? i : NUM_LEDS - i - 1, green, red, blue);
      000975 E5*35            [12] 2140 	mov	a,_colorWipe_PARM_4
      000977 70 06            [24] 2141 	jnz	00110$
      000979 8B 01            [24] 2142 	mov	ar1,r3
      00097B 8C 02            [24] 2143 	mov	ar2,r4
      00097D 80 11            [24] 2144 	sjmp	00111$
      00097F                       2145 00110$:
      00097F E5*00            [12] 2146 	mov	a,_NUM_LEDS
      000981 C3               [12] 2147 	clr	c
      000982 9B               [12] 2148 	subb	a,r3
      000983 F8               [12] 2149 	mov	r0,a
      000984 E5*01            [12] 2150 	mov	a,(_NUM_LEDS + 1)
      000986 9C               [12] 2151 	subb	a,r4
      000987 FD               [12] 2152 	mov	r5,a
      000988 E8               [12] 2153 	mov	a,r0
      000989 24 FF            [12] 2154 	add	a,#0xff
      00098B F9               [12] 2155 	mov	r1,a
      00098C ED               [12] 2156 	mov	a,r5
      00098D 34 FF            [12] 2157 	addc	a,#0xff
      00098F FA               [12] 2158 	mov	r2,a
      000990                       2159 00111$:
      000990 89 82            [24] 2160 	mov	dpl,r1
      000992 8A 83            [24] 2161 	mov	dph,r2
      000994 8F*0F            [24] 2162 	mov	_setPixel_PARM_2,r7
      000996 85*33*10         [24] 2163 	mov	_setPixel_PARM_3,_colorWipe_PARM_2
      000999 85*34*11         [24] 2164 	mov	_setPixel_PARM_4,_colorWipe_PARM_3
      00099C C0 07            [24] 2165 	push	ar7
      00099E C0 06            [24] 2166 	push	ar6
      0009A0 C0 04            [24] 2167 	push	ar4
      0009A2 C0 03            [24] 2168 	push	ar3
      0009A4 12r01rB6         [24] 2169 	lcall	_setPixel
                                   2170 ;	./src/WS2812.c:276: showStrip();
      0009A7 12r01r42         [24] 2171 	lcall	_showStrip
                                   2172 ;	./src/WS2812.c:277: _delay_ms(DELAY2 + 1);
      0009AA 85*00*00         [24] 2173 	mov	__divuint_PARM_2,_NUM_LEDS
      0009AD 85*01*01         [24] 2174 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      0009B0 90 00 C8         [24] 2175 	mov	dptr,#0x00c8
      0009B3 12r00r00         [24] 2176 	lcall	__divuint
      0009B6 85*00*00         [24] 2177 	mov	__mulint_PARM_2,__delay
      0009B9 85*01*01         [24] 2178 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      0009BC 12r00r00         [24] 2179 	lcall	__mulint
      0009BF 75*00 64         [24] 2180 	mov	__divuint_PARM_2,#0x64
      0009C2 75*01 00         [24] 2181 	mov	(__divuint_PARM_2 + 1),#0x00
      0009C5 12r00r00         [24] 2182 	lcall	__divuint
      0009C8 E5 82            [12] 2183 	mov	a,dpl
      0009CA 85 83 F0         [24] 2184 	mov	b,dph
      0009CD 24 02            [12] 2185 	add	a,#0x02
      0009CF FA               [12] 2186 	mov	r2,a
      0009D0 E4               [12] 2187 	clr	a
      0009D1 35 F0            [12] 2188 	addc	a,b
      0009D3 FD               [12] 2189 	mov	r5,a
      0009D4 8A 00            [24] 2190 	mov	ar0,r2
      0009D6 8D 01            [24] 2191 	mov	ar1,r5
      0009D8 7A 00            [12] 2192 	mov	r2,#0x00
      0009DA 7D 00            [12] 2193 	mov	r5,#0x00
      0009DC 88 82            [24] 2194 	mov	dpl,r0
      0009DE 89 83            [24] 2195 	mov	dph,r1
      0009E0 8A F0            [24] 2196 	mov	b,r2
      0009E2 ED               [12] 2197 	mov	a,r5
      0009E3 12r00r00         [24] 2198 	lcall	__delay_ms
      0009E6 D0 03            [24] 2199 	pop	ar3
      0009E8 D0 04            [24] 2200 	pop	ar4
      0009EA D0 06            [24] 2201 	pop	ar6
      0009EC D0 07            [24] 2202 	pop	ar7
                                   2203 ;	./src/WS2812.c:272: for (uint16_t i = 0; i < NUM_LEDS; i++)
      0009EE 0B               [12] 2204 	inc	r3
      0009EF BB 00 01         [24] 2205 	cjne	r3,#0x00,00133$
      0009F2 0C               [12] 2206 	inc	r4
      0009F3                       2207 00133$:
                                   2208 ;	./src/WS2812.c:279: }
      0009F3 02r09r5C         [24] 2209 	ljmp	00106$
                                   2210 ;------------------------------------------------------------
                                   2211 ;Allocation info for local variables in function 'rainbowCycle'
                                   2212 ;------------------------------------------------------------
                                   2213 ;r                         Allocated to registers r6 
                                   2214 ;g                         Allocated to registers r0 
                                   2215 ;b                         Allocated with name '_rainbowCycle_sloc0_1_0'
                                   2216 ;curEffect                 Allocated with name '_rainbowCycle_curEffect_65536_100'
                                   2217 ;curColor                  Allocated with name '_rainbowCycle_curColor_65536_100'
                                   2218 ;WheelPos                  Allocated with name '_rainbowCycle_WheelPos_65536_100'
                                   2219 ;j                         Allocated to registers r4 r5 
                                   2220 ;i                         Allocated to registers r2 r3 
                                   2221 ;sloc0                     Allocated with name '_rainbowCycle_sloc0_1_0'
                                   2222 ;------------------------------------------------------------
                                   2223 ;	./src/WS2812.c:281: void rainbowCycle()
                                   2224 ;	-----------------------------------------
                                   2225 ;	 function rainbowCycle
                                   2226 ;	-----------------------------------------
      0009F6                       2227 _rainbowCycle:
                                   2228 ;	./src/WS2812.c:284: uint8_t curEffect = effect;
      0009F6 85*00*37         [24] 2229 	mov	_rainbowCycle_curEffect_65536_100,_effect
                                   2230 ;	./src/WS2812.c:285: uint8_t curColor = _color;
      0009F9 85*00*38         [24] 2231 	mov	_rainbowCycle_curColor_65536_100,__color
                                   2232 ;	./src/WS2812.c:288: for (uint16_t j = 0; j < 256 * 5; j++)
      0009FC 7C 00            [12] 2233 	mov	r4,#0x00
      0009FE 7D 00            [12] 2234 	mov	r5,#0x00
      000A00                       2235 00116$:
      000A00 8D 03            [24] 2236 	mov	ar3,r5
      000A02 74 FB            [12] 2237 	mov	a,#0x100 - 0x05
      000A04 2B               [12] 2238 	add	a,r3
      000A05 50 01            [24] 2239 	jnc	00155$
      000A07 22               [24] 2240 	ret
      000A08                       2241 00155$:
                                   2242 ;	./src/WS2812.c:290: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000A08 7A 00            [12] 2243 	mov	r2,#0x00
      000A0A 7B 00            [12] 2244 	mov	r3,#0x00
      000A0C                       2245 00113$:
      000A0C C3               [12] 2246 	clr	c
      000A0D EA               [12] 2247 	mov	a,r2
      000A0E 95*00            [12] 2248 	subb	a,_NUM_LEDS
      000A10 EB               [12] 2249 	mov	a,r3
      000A11 95*01            [12] 2250 	subb	a,(_NUM_LEDS + 1)
      000A13 40 03            [24] 2251 	jc	00156$
      000A15 02r0ArCC         [24] 2252 	ljmp	00110$
      000A18                       2253 00156$:
                                   2254 ;	./src/WS2812.c:292: CHECK_EFF;
      000A18 E5*00            [12] 2255 	mov	a,_effect
      000A1A B5*37 07         [24] 2256 	cjne	a,_rainbowCycle_curEffect_65536_100,00101$
      000A1D E5*00            [12] 2257 	mov	a,__color
      000A1F B5*38 02         [24] 2258 	cjne	a,_rainbowCycle_curColor_65536_100,00159$
      000A22 80 04            [24] 2259 	sjmp	00102$
      000A24                       2260 00159$:
      000A24                       2261 00101$:
      000A24 75*00 12         [24] 2262 	mov	__status,#0x12
      000A27 22               [24] 2263 	ret
      000A28                       2264 00102$:
                                   2265 ;	./src/WS2812.c:293: WheelPos = (((i * 256 / NUM_LEDS) + j) & 255);
      000A28 8A 00            [24] 2266 	mov	ar0,r2
      000A2A 88 01            [24] 2267 	mov	ar1,r0
      000A2C 78 00            [12] 2268 	mov	r0,#0x00
      000A2E 88 82            [24] 2269 	mov	dpl,r0
      000A30 89 83            [24] 2270 	mov	dph,r1
      000A32 85*00*00         [24] 2271 	mov	__divuint_PARM_2,_NUM_LEDS
      000A35 85*01*01         [24] 2272 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000A38 C0 05            [24] 2273 	push	ar5
      000A3A C0 04            [24] 2274 	push	ar4
      000A3C C0 03            [24] 2275 	push	ar3
      000A3E C0 02            [24] 2276 	push	ar2
      000A40 12r00r00         [24] 2277 	lcall	__divuint
      000A43 A8 82            [24] 2278 	mov	r0,dpl
      000A45 D0 02            [24] 2279 	pop	ar2
      000A47 D0 03            [24] 2280 	pop	ar3
      000A49 D0 04            [24] 2281 	pop	ar4
      000A4B D0 05            [24] 2282 	pop	ar5
      000A4D 8C 01            [24] 2283 	mov	ar1,r4
      000A4F E9               [12] 2284 	mov	a,r1
      000A50 28               [12] 2285 	add	a,r0
      000A51 F9               [12] 2286 	mov	r1,a
                                   2287 ;	./src/WS2812.c:295: if (WheelPos < 85)
      000A52 B9 55 00         [24] 2288 	cjne	r1,#0x55,00160$
      000A55                       2289 00160$:
      000A55 50 17            [24] 2290 	jnc	00108$
                                   2291 ;	./src/WS2812.c:297: g = WheelPos * 3;
      000A57 E9               [12] 2292 	mov	a,r1
      000A58 75 F0 03         [24] 2293 	mov	b,#0x03
      000A5B A4               [48] 2294 	mul	ab
      000A5C F8               [12] 2295 	mov	r0,a
                                   2296 ;	./src/WS2812.c:298: r = 255 - WheelPos * 3;
      000A5D 89 06            [24] 2297 	mov	ar6,r1
      000A5F EE               [12] 2298 	mov	a,r6
      000A60 75 F0 03         [24] 2299 	mov	b,#0x03
      000A63 A4               [48] 2300 	mul	ab
      000A64 D3               [12] 2301 	setb	c
      000A65 94 FF            [12] 2302 	subb	a,#0xff
      000A67 F4               [12] 2303 	cpl	a
      000A68 FE               [12] 2304 	mov	r6,a
                                   2305 ;	./src/WS2812.c:299: b = 0;
      000A69 75*3A 00         [24] 2306 	mov	_rainbowCycle_sloc0_1_0,#0x00
      000A6C 80 38            [24] 2307 	sjmp	00109$
      000A6E                       2308 00108$:
                                   2309 ;	./src/WS2812.c:301: else if (WheelPos < 170)
      000A6E B9 AA 00         [24] 2310 	cjne	r1,#0xaa,00162$
      000A71                       2311 00162$:
      000A71 50 1D            [24] 2312 	jnc	00105$
                                   2313 ;	./src/WS2812.c:303: WheelPos -= 85;
      000A73 89 07            [24] 2314 	mov	ar7,r1
      000A75 EF               [12] 2315 	mov	a,r7
      000A76 24 AB            [12] 2316 	add	a,#0xab
                                   2317 ;	./src/WS2812.c:304: g = 255 - WheelPos * 3;
      000A78 F5*39            [12] 2318 	mov	_rainbowCycle_WheelPos_65536_100,a
      000A7A FF               [12] 2319 	mov	r7,a
      000A7B 75 F0 03         [24] 2320 	mov	b,#0x03
      000A7E A4               [48] 2321 	mul	ab
      000A7F D3               [12] 2322 	setb	c
      000A80 94 FF            [12] 2323 	subb	a,#0xff
      000A82 F4               [12] 2324 	cpl	a
      000A83 F8               [12] 2325 	mov	r0,a
                                   2326 ;	./src/WS2812.c:305: r = 0;
      000A84 7E 00            [12] 2327 	mov	r6,#0x00
                                   2328 ;	./src/WS2812.c:306: b = WheelPos * 3;
      000A86 E5*39            [12] 2329 	mov	a,_rainbowCycle_WheelPos_65536_100
      000A88 75 F0 03         [24] 2330 	mov	b,#0x03
      000A8B A4               [48] 2331 	mul	ab
      000A8C F5*3A            [12] 2332 	mov	_rainbowCycle_sloc0_1_0,a
      000A8E 80 16            [24] 2333 	sjmp	00109$
      000A90                       2334 00105$:
                                   2335 ;	./src/WS2812.c:310: WheelPos -= 170;
      000A90 E9               [12] 2336 	mov	a,r1
      000A91 24 56            [12] 2337 	add	a,#0x56
                                   2338 ;	./src/WS2812.c:311: g = 0;
                                   2339 ;	./src/WS2812.c:312: r = WheelPos * 3;
      000A93 F9               [12] 2340 	mov	r1,a
      000A94 78 00            [12] 2341 	mov	r0,#0x00
      000A96 75 F0 03         [24] 2342 	mov	b,#0x03
      000A99 A4               [48] 2343 	mul	ab
      000A9A FE               [12] 2344 	mov	r6,a
                                   2345 ;	./src/WS2812.c:313: b = 255 - WheelPos * 3;
      000A9B E9               [12] 2346 	mov	a,r1
      000A9C 75 F0 03         [24] 2347 	mov	b,#0x03
      000A9F A4               [48] 2348 	mul	ab
      000AA0 D3               [12] 2349 	setb	c
      000AA1 94 FF            [12] 2350 	subb	a,#0xff
      000AA3 F4               [12] 2351 	cpl	a
      000AA4 F5*3A            [12] 2352 	mov	_rainbowCycle_sloc0_1_0,a
      000AA6                       2353 00109$:
                                   2354 ;	./src/WS2812.c:316: setPixel(i, g, r, b);
      000AA6 88*0F            [24] 2355 	mov	_setPixel_PARM_2,r0
      000AA8 8E*10            [24] 2356 	mov	_setPixel_PARM_3,r6
      000AAA 85*3A*11         [24] 2357 	mov	_setPixel_PARM_4,_rainbowCycle_sloc0_1_0
      000AAD 8A 82            [24] 2358 	mov	dpl,r2
      000AAF 8B 83            [24] 2359 	mov	dph,r3
      000AB1 C0 05            [24] 2360 	push	ar5
      000AB3 C0 04            [24] 2361 	push	ar4
      000AB5 C0 03            [24] 2362 	push	ar3
      000AB7 C0 02            [24] 2363 	push	ar2
      000AB9 12r01rB6         [24] 2364 	lcall	_setPixel
      000ABC D0 02            [24] 2365 	pop	ar2
      000ABE D0 03            [24] 2366 	pop	ar3
      000AC0 D0 04            [24] 2367 	pop	ar4
      000AC2 D0 05            [24] 2368 	pop	ar5
                                   2369 ;	./src/WS2812.c:290: for (uint16_t i = 0; i < NUM_LEDS; i++)
      000AC4 0A               [12] 2370 	inc	r2
      000AC5 BA 00 01         [24] 2371 	cjne	r2,#0x00,00164$
      000AC8 0B               [12] 2372 	inc	r3
      000AC9                       2373 00164$:
      000AC9 02r0Ar0C         [24] 2374 	ljmp	00113$
      000ACC                       2375 00110$:
                                   2376 ;	./src/WS2812.c:318: showStrip();
      000ACC C0 05            [24] 2377 	push	ar5
      000ACE C0 04            [24] 2378 	push	ar4
      000AD0 12r01r42         [24] 2379 	lcall	_showStrip
                                   2380 ;	./src/WS2812.c:319: _delay_ms(DELAY);
      000AD3 85*00*00         [24] 2381 	mov	__divuint_PARM_2,_NUM_LEDS
      000AD6 85*01*01         [24] 2382 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000AD9 90 00 C8         [24] 2383 	mov	dptr,#0x00c8
      000ADC 12r00r00         [24] 2384 	lcall	__divuint
      000ADF 85*00*00         [24] 2385 	mov	__mulint_PARM_2,__delay
      000AE2 85*01*01         [24] 2386 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000AE5 12r00r00         [24] 2387 	lcall	__mulint
      000AE8 75*00 0A         [24] 2388 	mov	__divuint_PARM_2,#0x0a
      000AEB 75*01 00         [24] 2389 	mov	(__divuint_PARM_2 + 1),#0x00
      000AEE 12r00r00         [24] 2390 	lcall	__divuint
      000AF1 E5 82            [12] 2391 	mov	a,dpl
      000AF3 85 83 F0         [24] 2392 	mov	b,dph
      000AF6 24 01            [12] 2393 	add	a,#0x01
      000AF8 FE               [12] 2394 	mov	r6,a
      000AF9 E4               [12] 2395 	clr	a
      000AFA 35 F0            [12] 2396 	addc	a,b
      000AFC FF               [12] 2397 	mov	r7,a
      000AFD 7B 00            [12] 2398 	mov	r3,#0x00
      000AFF 7A 00            [12] 2399 	mov	r2,#0x00
      000B01 8E 82            [24] 2400 	mov	dpl,r6
      000B03 8F 83            [24] 2401 	mov	dph,r7
      000B05 8B F0            [24] 2402 	mov	b,r3
      000B07 EA               [12] 2403 	mov	a,r2
      000B08 12r00r00         [24] 2404 	lcall	__delay_ms
      000B0B D0 04            [24] 2405 	pop	ar4
      000B0D D0 05            [24] 2406 	pop	ar5
                                   2407 ;	./src/WS2812.c:288: for (uint16_t j = 0; j < 256 * 5; j++)
      000B0F 0C               [12] 2408 	inc	r4
      000B10 BC 00 01         [24] 2409 	cjne	r4,#0x00,00165$
      000B13 0D               [12] 2410 	inc	r5
      000B14                       2411 00165$:
                                   2412 ;	./src/WS2812.c:321: }
      000B14 02r0Ar00         [24] 2413 	ljmp	00116$
                                   2414 ;------------------------------------------------------------
                                   2415 ;Allocation info for local variables in function 'theaterChase'
                                   2416 ;------------------------------------------------------------
                                   2417 ;red                       Allocated with name '_theaterChase_PARM_2'
                                   2418 ;blue                      Allocated with name '_theaterChase_PARM_3'
                                   2419 ;green                     Allocated with name '_theaterChase_green_65536_109'
                                   2420 ;curEffect                 Allocated to registers r6 
                                   2421 ;curColor                  Allocated to registers r5 
                                   2422 ;j                         Allocated with name '_theaterChase_j_131072_111'
                                   2423 ;q                         Allocated to registers r1 r2 
                                   2424 ;i                         Allocated to registers r3 r4 
                                   2425 ;i                         Allocated to registers r4 r7 
                                   2426 ;------------------------------------------------------------
                                   2427 ;	./src/WS2812.c:354: void theaterChase(uint8_t green, uint8_t red, uint8_t blue)
                                   2428 ;	-----------------------------------------
                                   2429 ;	 function theaterChase
                                   2430 ;	-----------------------------------------
      000B17                       2431 _theaterChase:
      000B17 85 82*3D         [24] 2432 	mov	_theaterChase_green_65536_109,dpl
                                   2433 ;	./src/WS2812.c:356: uint8_t curEffect = effect;
      000B1A AE*00            [24] 2434 	mov	r6,_effect
                                   2435 ;	./src/WS2812.c:357: uint8_t curColor = _color;
      000B1C AD*00            [24] 2436 	mov	r5,__color
                                   2437 ;	./src/WS2812.c:359: for (int16_t j = 0; j < 10; j++)
      000B1E E4               [12] 2438 	clr	a
      000B1F F5*3E            [12] 2439 	mov	_theaterChase_j_131072_111,a
      000B21 F5*3F            [12] 2440 	mov	(_theaterChase_j_131072_111 + 1),a
      000B23                       2441 00121$:
      000B23 A9*3E            [24] 2442 	mov	r1,_theaterChase_j_131072_111
      000B25 AA*3F            [24] 2443 	mov	r2,(_theaterChase_j_131072_111 + 1)
      000B27 C3               [12] 2444 	clr	c
      000B28 E9               [12] 2445 	mov	a,r1
      000B29 94 0A            [12] 2446 	subb	a,#0x0a
      000B2B EA               [12] 2447 	mov	a,r2
      000B2C 64 80            [12] 2448 	xrl	a,#0x80
      000B2E 94 80            [12] 2449 	subb	a,#0x80
      000B30 40 01            [24] 2450 	jc	00165$
      000B32 22               [24] 2451 	ret
      000B33                       2452 00165$:
                                   2453 ;	./src/WS2812.c:361: for (int16_t q = 0; q < 3; q++)
      000B33 79 00            [12] 2454 	mov	r1,#0x00
      000B35 7A 00            [12] 2455 	mov	r2,#0x00
      000B37                       2456 00118$:
      000B37 89 00            [24] 2457 	mov	ar0,r1
      000B39 8A 04            [24] 2458 	mov	ar4,r2
      000B3B C3               [12] 2459 	clr	c
      000B3C E8               [12] 2460 	mov	a,r0
      000B3D 94 03            [12] 2461 	subb	a,#0x03
      000B3F EC               [12] 2462 	mov	a,r4
      000B40 64 80            [12] 2463 	xrl	a,#0x80
      000B42 94 80            [12] 2464 	subb	a,#0x80
      000B44 40 03            [24] 2465 	jc	00166$
      000B46 02r0Cr58         [24] 2466 	ljmp	00122$
      000B49                       2467 00166$:
                                   2468 ;	./src/WS2812.c:363: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000B49 7B 00            [12] 2469 	mov	r3,#0x00
      000B4B 7C 00            [12] 2470 	mov	r4,#0x00
      000B4D                       2471 00112$:
      000B4D 8B 00            [24] 2472 	mov	ar0,r3
      000B4F 8C 07            [24] 2473 	mov	ar7,r4
      000B51 C3               [12] 2474 	clr	c
      000B52 E8               [12] 2475 	mov	a,r0
      000B53 95*00            [12] 2476 	subb	a,_NUM_LEDS
      000B55 EF               [12] 2477 	mov	a,r7
      000B56 95*01            [12] 2478 	subb	a,(_NUM_LEDS + 1)
      000B58 50 4B            [24] 2479 	jnc	00104$
                                   2480 ;	./src/WS2812.c:365: CHECK_EFF;
      000B5A EE               [12] 2481 	mov	a,r6
      000B5B B5*00 06         [24] 2482 	cjne	a,_effect,00101$
      000B5E ED               [12] 2483 	mov	a,r5
      000B5F B5*00 02         [24] 2484 	cjne	a,__color,00170$
      000B62 80 04            [24] 2485 	sjmp	00102$
      000B64                       2486 00170$:
      000B64                       2487 00101$:
      000B64 75*00 12         [24] 2488 	mov	__status,#0x12
      000B67 22               [24] 2489 	ret
      000B68                       2490 00102$:
                                   2491 ;	./src/WS2812.c:366: setPixel(i + q, green, red, blue); // turn every third pixel on
      000B68 E9               [12] 2492 	mov	a,r1
      000B69 2B               [12] 2493 	add	a,r3
      000B6A F5 82            [12] 2494 	mov	dpl,a
      000B6C EA               [12] 2495 	mov	a,r2
      000B6D 3C               [12] 2496 	addc	a,r4
      000B6E F5 83            [12] 2497 	mov	dph,a
      000B70 85*3D*0F         [24] 2498 	mov	_setPixel_PARM_2,_theaterChase_green_65536_109
      000B73 85*3B*10         [24] 2499 	mov	_setPixel_PARM_3,_theaterChase_PARM_2
      000B76 85*3C*11         [24] 2500 	mov	_setPixel_PARM_4,_theaterChase_PARM_3
      000B79 C0 06            [24] 2501 	push	ar6
      000B7B C0 05            [24] 2502 	push	ar5
      000B7D C0 04            [24] 2503 	push	ar4
      000B7F C0 03            [24] 2504 	push	ar3
      000B81 C0 02            [24] 2505 	push	ar2
      000B83 C0 01            [24] 2506 	push	ar1
      000B85 12r01rB6         [24] 2507 	lcall	_setPixel
      000B88 D0 01            [24] 2508 	pop	ar1
      000B8A D0 02            [24] 2509 	pop	ar2
      000B8C D0 03            [24] 2510 	pop	ar3
      000B8E D0 04            [24] 2511 	pop	ar4
      000B90 D0 05            [24] 2512 	pop	ar5
      000B92 D0 06            [24] 2513 	pop	ar6
                                   2514 ;	./src/WS2812.c:363: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000B94 8B 00            [24] 2515 	mov	ar0,r3
      000B96 8C 07            [24] 2516 	mov	ar7,r4
      000B98 74 03            [12] 2517 	mov	a,#0x03
      000B9A 28               [12] 2518 	add	a,r0
      000B9B F8               [12] 2519 	mov	r0,a
      000B9C E4               [12] 2520 	clr	a
      000B9D 3F               [12] 2521 	addc	a,r7
      000B9E FF               [12] 2522 	mov	r7,a
      000B9F 88 03            [24] 2523 	mov	ar3,r0
      000BA1 8F 04            [24] 2524 	mov	ar4,r7
      000BA3 80 A8            [24] 2525 	sjmp	00112$
      000BA5                       2526 00104$:
                                   2527 ;	./src/WS2812.c:368: showStrip();
      000BA5 C0 06            [24] 2528 	push	ar6
      000BA7 C0 05            [24] 2529 	push	ar5
      000BA9 C0 02            [24] 2530 	push	ar2
      000BAB C0 01            [24] 2531 	push	ar1
      000BAD 12r01r42         [24] 2532 	lcall	_showStrip
                                   2533 ;	./src/WS2812.c:370: _delay_ms(DELAY);
      000BB0 85*00*00         [24] 2534 	mov	__divuint_PARM_2,_NUM_LEDS
      000BB3 85*01*01         [24] 2535 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000BB6 90 00 C8         [24] 2536 	mov	dptr,#0x00c8
      000BB9 12r00r00         [24] 2537 	lcall	__divuint
      000BBC 85*00*00         [24] 2538 	mov	__mulint_PARM_2,__delay
      000BBF 85*01*01         [24] 2539 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000BC2 12r00r00         [24] 2540 	lcall	__mulint
      000BC5 75*00 0A         [24] 2541 	mov	__divuint_PARM_2,#0x0a
      000BC8 75*01 00         [24] 2542 	mov	(__divuint_PARM_2 + 1),#0x00
      000BCB 12r00r00         [24] 2543 	lcall	__divuint
      000BCE E5 82            [12] 2544 	mov	a,dpl
      000BD0 85 83 F0         [24] 2545 	mov	b,dph
      000BD3 24 01            [12] 2546 	add	a,#0x01
      000BD5 FC               [12] 2547 	mov	r4,a
      000BD6 E4               [12] 2548 	clr	a
      000BD7 35 F0            [12] 2549 	addc	a,b
      000BD9 FF               [12] 2550 	mov	r7,a
      000BDA 8C 00            [24] 2551 	mov	ar0,r4
      000BDC 8F 03            [24] 2552 	mov	ar3,r7
      000BDE 7C 00            [12] 2553 	mov	r4,#0x00
      000BE0 7F 00            [12] 2554 	mov	r7,#0x00
      000BE2 88 82            [24] 2555 	mov	dpl,r0
      000BE4 8B 83            [24] 2556 	mov	dph,r3
      000BE6 8C F0            [24] 2557 	mov	b,r4
      000BE8 EF               [12] 2558 	mov	a,r7
      000BE9 12r00r00         [24] 2559 	lcall	__delay_ms
      000BEC D0 01            [24] 2560 	pop	ar1
      000BEE D0 02            [24] 2561 	pop	ar2
      000BF0 D0 05            [24] 2562 	pop	ar5
      000BF2 D0 06            [24] 2563 	pop	ar6
                                   2564 ;	./src/WS2812.c:372: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000BF4 7C 00            [12] 2565 	mov	r4,#0x00
      000BF6 7F 00            [12] 2566 	mov	r7,#0x00
      000BF8                       2567 00115$:
      000BF8 8C 00            [24] 2568 	mov	ar0,r4
      000BFA 8F 03            [24] 2569 	mov	ar3,r7
      000BFC C3               [12] 2570 	clr	c
      000BFD E8               [12] 2571 	mov	a,r0
      000BFE 95*00            [12] 2572 	subb	a,_NUM_LEDS
      000C00 EB               [12] 2573 	mov	a,r3
      000C01 95*01            [12] 2574 	subb	a,(_NUM_LEDS + 1)
      000C03 50 4B            [24] 2575 	jnc	00119$
                                   2576 ;	./src/WS2812.c:374: CHECK_EFF;
      000C05 EE               [12] 2577 	mov	a,r6
      000C06 B5*00 06         [24] 2578 	cjne	a,_effect,00105$
      000C09 ED               [12] 2579 	mov	a,r5
      000C0A B5*00 02         [24] 2580 	cjne	a,__color,00174$
      000C0D 80 04            [24] 2581 	sjmp	00106$
      000C0F                       2582 00174$:
      000C0F                       2583 00105$:
      000C0F 75*00 12         [24] 2584 	mov	__status,#0x12
      000C12 22               [24] 2585 	ret
      000C13                       2586 00106$:
                                   2587 ;	./src/WS2812.c:375: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      000C13 E9               [12] 2588 	mov	a,r1
      000C14 2C               [12] 2589 	add	a,r4
      000C15 F5 82            [12] 2590 	mov	dpl,a
      000C17 EA               [12] 2591 	mov	a,r2
      000C18 3F               [12] 2592 	addc	a,r7
      000C19 F5 83            [12] 2593 	mov	dph,a
      000C1B 75*0F 00         [24] 2594 	mov	_setPixel_PARM_2,#0x00
      000C1E 75*10 00         [24] 2595 	mov	_setPixel_PARM_3,#0x00
      000C21 75*11 00         [24] 2596 	mov	_setPixel_PARM_4,#0x00
      000C24 C0 07            [24] 2597 	push	ar7
      000C26 C0 06            [24] 2598 	push	ar6
      000C28 C0 05            [24] 2599 	push	ar5
      000C2A C0 04            [24] 2600 	push	ar4
      000C2C C0 02            [24] 2601 	push	ar2
      000C2E C0 01            [24] 2602 	push	ar1
      000C30 12r01rB6         [24] 2603 	lcall	_setPixel
      000C33 D0 01            [24] 2604 	pop	ar1
      000C35 D0 02            [24] 2605 	pop	ar2
      000C37 D0 04            [24] 2606 	pop	ar4
      000C39 D0 05            [24] 2607 	pop	ar5
      000C3B D0 06            [24] 2608 	pop	ar6
      000C3D D0 07            [24] 2609 	pop	ar7
                                   2610 ;	./src/WS2812.c:372: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000C3F 8C 00            [24] 2611 	mov	ar0,r4
      000C41 8F 03            [24] 2612 	mov	ar3,r7
      000C43 74 03            [12] 2613 	mov	a,#0x03
      000C45 28               [12] 2614 	add	a,r0
      000C46 F8               [12] 2615 	mov	r0,a
      000C47 E4               [12] 2616 	clr	a
      000C48 3B               [12] 2617 	addc	a,r3
      000C49 FB               [12] 2618 	mov	r3,a
      000C4A 88 04            [24] 2619 	mov	ar4,r0
      000C4C 8B 07            [24] 2620 	mov	ar7,r3
      000C4E 80 A8            [24] 2621 	sjmp	00115$
      000C50                       2622 00119$:
                                   2623 ;	./src/WS2812.c:361: for (int16_t q = 0; q < 3; q++)
      000C50 09               [12] 2624 	inc	r1
      000C51 B9 00 01         [24] 2625 	cjne	r1,#0x00,00175$
      000C54 0A               [12] 2626 	inc	r2
      000C55                       2627 00175$:
      000C55 02r0Br37         [24] 2628 	ljmp	00118$
      000C58                       2629 00122$:
                                   2630 ;	./src/WS2812.c:359: for (int16_t j = 0; j < 10; j++)
      000C58 05*3E            [12] 2631 	inc	_theaterChase_j_131072_111
      000C5A E4               [12] 2632 	clr	a
      000C5B B5*3E 02         [24] 2633 	cjne	a,_theaterChase_j_131072_111,00176$
      000C5E 05*3F            [12] 2634 	inc	(_theaterChase_j_131072_111 + 1)
      000C60                       2635 00176$:
                                   2636 ;	./src/WS2812.c:379: }
      000C60 02r0Br23         [24] 2637 	ljmp	00121$
                                   2638 ;------------------------------------------------------------
                                   2639 ;Allocation info for local variables in function 'theaterChaseRainbow'
                                   2640 ;------------------------------------------------------------
                                   2641 ;r                         Allocated to registers r6 
                                   2642 ;b                         Allocated with name '_theaterChaseRainbow_sloc0_1_0'
                                   2643 ;g                         Allocated to registers r5 
                                   2644 ;curEffect                 Allocated with name '_theaterChaseRainbow_curEffect_65536_121'
                                   2645 ;curColor                  Allocated with name '_theaterChaseRainbow_curColor_65536_121'
                                   2646 ;WheelPos                  Allocated with name '_theaterChaseRainbow_WheelPos_65536_121'
                                   2647 ;j                         Allocated with name '_theaterChaseRainbow_j_131072_122'
                                   2648 ;q                         Allocated to registers r2 r3 
                                   2649 ;i                         Allocated to registers r0 r1 
                                   2650 ;i                         Allocated to registers r6 r7 
                                   2651 ;sloc0                     Allocated with name '_theaterChaseRainbow_sloc0_1_0'
                                   2652 ;------------------------------------------------------------
                                   2653 ;	./src/WS2812.c:381: void theaterChaseRainbow()
                                   2654 ;	-----------------------------------------
                                   2655 ;	 function theaterChaseRainbow
                                   2656 ;	-----------------------------------------
      000C63                       2657 _theaterChaseRainbow:
                                   2658 ;	./src/WS2812.c:384: uint8_t curEffect = effect;
      000C63 85*00*40         [24] 2659 	mov	_theaterChaseRainbow_curEffect_65536_121,_effect
                                   2660 ;	./src/WS2812.c:385: uint8_t curColor = _color;
      000C66 85*00*41         [24] 2661 	mov	_theaterChaseRainbow_curColor_65536_121,__color
                                   2662 ;	./src/WS2812.c:388: for (int16_t j = 0; j < 256; j++)
      000C69 E4               [12] 2663 	clr	a
      000C6A F5*43            [12] 2664 	mov	_theaterChaseRainbow_j_131072_122,a
      000C6C F5*44            [12] 2665 	mov	(_theaterChaseRainbow_j_131072_122 + 1),a
      000C6E                       2666 00127$:
      000C6E AB*44            [24] 2667 	mov	r3,(_theaterChaseRainbow_j_131072_122 + 1)
      000C70 C3               [12] 2668 	clr	c
      000C71 EB               [12] 2669 	mov	a,r3
      000C72 64 80            [12] 2670 	xrl	a,#0x80
      000C74 94 81            [12] 2671 	subb	a,#0x81
      000C76 40 01            [24] 2672 	jc	00191$
      000C78 22               [24] 2673 	ret
      000C79                       2674 00191$:
                                   2675 ;	./src/WS2812.c:390: for (int16_t q = 0; q < 3; q++)
      000C79 7A 00            [12] 2676 	mov	r2,#0x00
      000C7B 7B 00            [12] 2677 	mov	r3,#0x00
      000C7D                       2678 00124$:
      000C7D 8A 00            [24] 2679 	mov	ar0,r2
      000C7F 8B 01            [24] 2680 	mov	ar1,r3
      000C81 C3               [12] 2681 	clr	c
      000C82 E8               [12] 2682 	mov	a,r0
      000C83 94 03            [12] 2683 	subb	a,#0x03
      000C85 E9               [12] 2684 	mov	a,r1
      000C86 64 80            [12] 2685 	xrl	a,#0x80
      000C88 94 80            [12] 2686 	subb	a,#0x80
      000C8A 40 03            [24] 2687 	jc	00192$
      000C8C 02r0Er03         [24] 2688 	ljmp	00128$
      000C8F                       2689 00192$:
                                   2690 ;	./src/WS2812.c:392: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000C8F 78 00            [12] 2691 	mov	r0,#0x00
      000C91 79 00            [12] 2692 	mov	r1,#0x00
      000C93                       2693 00118$:
      000C93 88 04            [24] 2694 	mov	ar4,r0
      000C95 89 05            [24] 2695 	mov	ar5,r1
      000C97 C3               [12] 2696 	clr	c
      000C98 EC               [12] 2697 	mov	a,r4
      000C99 95*00            [12] 2698 	subb	a,_NUM_LEDS
      000C9B ED               [12] 2699 	mov	a,r5
      000C9C 95*01            [12] 2700 	subb	a,(_NUM_LEDS + 1)
      000C9E 40 03            [24] 2701 	jc	00193$
      000CA0 02r0Dr62         [24] 2702 	ljmp	00110$
      000CA3                       2703 00193$:
                                   2704 ;	./src/WS2812.c:394: CHECK_EFF;
      000CA3 E5*00            [12] 2705 	mov	a,_effect
      000CA5 B5*40 07         [24] 2706 	cjne	a,_theaterChaseRainbow_curEffect_65536_121,00101$
      000CA8 E5*00            [12] 2707 	mov	a,__color
      000CAA B5*41 02         [24] 2708 	cjne	a,_theaterChaseRainbow_curColor_65536_121,00196$
      000CAD 80 04            [24] 2709 	sjmp	00102$
      000CAF                       2710 00196$:
      000CAF                       2711 00101$:
      000CAF 75*00 12         [24] 2712 	mov	__status,#0x12
      000CB2 22               [24] 2713 	ret
      000CB3                       2714 00102$:
                                   2715 ;	./src/WS2812.c:396: WheelPos = ((i + j) % 255);
      000CB3 E5*43            [12] 2716 	mov	a,_theaterChaseRainbow_j_131072_122
      000CB5 28               [12] 2717 	add	a,r0
      000CB6 FC               [12] 2718 	mov	r4,a
      000CB7 E5*44            [12] 2719 	mov	a,(_theaterChaseRainbow_j_131072_122 + 1)
      000CB9 39               [12] 2720 	addc	a,r1
      000CBA FD               [12] 2721 	mov	r5,a
      000CBB 8C 82            [24] 2722 	mov	dpl,r4
      000CBD 8D 83            [24] 2723 	mov	dph,r5
      000CBF 75*00 FF         [24] 2724 	mov	__modsint_PARM_2,#0xff
      000CC2 75*01 00         [24] 2725 	mov	(__modsint_PARM_2 + 1),#0x00
      000CC5 C0 03            [24] 2726 	push	ar3
      000CC7 C0 02            [24] 2727 	push	ar2
      000CC9 C0 01            [24] 2728 	push	ar1
      000CCB C0 00            [24] 2729 	push	ar0
      000CCD 12r00r00         [24] 2730 	lcall	__modsint
      000CD0 AC 82            [24] 2731 	mov	r4,dpl
      000CD2 D0 00            [24] 2732 	pop	ar0
      000CD4 D0 01            [24] 2733 	pop	ar1
      000CD6 D0 02            [24] 2734 	pop	ar2
      000CD8 D0 03            [24] 2735 	pop	ar3
                                   2736 ;	./src/WS2812.c:398: if (WheelPos < 85)
      000CDA BC 55 00         [24] 2737 	cjne	r4,#0x55,00197$
      000CDD                       2738 00197$:
      000CDD 50 17            [24] 2739 	jnc	00108$
                                   2740 ;	./src/WS2812.c:400: g = WheelPos * 3;
      000CDF EC               [12] 2741 	mov	a,r4
      000CE0 75 F0 03         [24] 2742 	mov	b,#0x03
      000CE3 A4               [48] 2743 	mul	ab
      000CE4 FD               [12] 2744 	mov	r5,a
                                   2745 ;	./src/WS2812.c:401: r = 255 - WheelPos * 3;
      000CE5 8C 06            [24] 2746 	mov	ar6,r4
      000CE7 EE               [12] 2747 	mov	a,r6
      000CE8 75 F0 03         [24] 2748 	mov	b,#0x03
      000CEB A4               [48] 2749 	mul	ab
      000CEC D3               [12] 2750 	setb	c
      000CED 94 FF            [12] 2751 	subb	a,#0xff
      000CEF F4               [12] 2752 	cpl	a
      000CF0 FE               [12] 2753 	mov	r6,a
                                   2754 ;	./src/WS2812.c:402: b = 0;
      000CF1 75*45 00         [24] 2755 	mov	_theaterChaseRainbow_sloc0_1_0,#0x00
      000CF4 80 38            [24] 2756 	sjmp	00109$
      000CF6                       2757 00108$:
                                   2758 ;	./src/WS2812.c:404: else if (WheelPos < 170)
      000CF6 BC AA 00         [24] 2759 	cjne	r4,#0xaa,00199$
      000CF9                       2760 00199$:
      000CF9 50 1D            [24] 2761 	jnc	00105$
                                   2762 ;	./src/WS2812.c:406: WheelPos -= 85;
      000CFB 8C 07            [24] 2763 	mov	ar7,r4
      000CFD EF               [12] 2764 	mov	a,r7
      000CFE 24 AB            [12] 2765 	add	a,#0xab
                                   2766 ;	./src/WS2812.c:407: g = 255 - WheelPos * 3;
      000D00 F5*42            [12] 2767 	mov	_theaterChaseRainbow_WheelPos_65536_121,a
      000D02 FF               [12] 2768 	mov	r7,a
      000D03 75 F0 03         [24] 2769 	mov	b,#0x03
      000D06 A4               [48] 2770 	mul	ab
      000D07 D3               [12] 2771 	setb	c
      000D08 94 FF            [12] 2772 	subb	a,#0xff
      000D0A F4               [12] 2773 	cpl	a
      000D0B FD               [12] 2774 	mov	r5,a
                                   2775 ;	./src/WS2812.c:408: r = 0;
      000D0C 7E 00            [12] 2776 	mov	r6,#0x00
                                   2777 ;	./src/WS2812.c:409: b = WheelPos * 3;
      000D0E E5*42            [12] 2778 	mov	a,_theaterChaseRainbow_WheelPos_65536_121
      000D10 75 F0 03         [24] 2779 	mov	b,#0x03
      000D13 A4               [48] 2780 	mul	ab
      000D14 F5*45            [12] 2781 	mov	_theaterChaseRainbow_sloc0_1_0,a
      000D16 80 16            [24] 2782 	sjmp	00109$
      000D18                       2783 00105$:
                                   2784 ;	./src/WS2812.c:413: WheelPos -= 170;
      000D18 EC               [12] 2785 	mov	a,r4
      000D19 24 56            [12] 2786 	add	a,#0x56
                                   2787 ;	./src/WS2812.c:414: g = 0;
                                   2788 ;	./src/WS2812.c:415: r = WheelPos * 3;
      000D1B FC               [12] 2789 	mov	r4,a
      000D1C 7D 00            [12] 2790 	mov	r5,#0x00
      000D1E 75 F0 03         [24] 2791 	mov	b,#0x03
      000D21 A4               [48] 2792 	mul	ab
      000D22 FE               [12] 2793 	mov	r6,a
                                   2794 ;	./src/WS2812.c:416: b = 255 - WheelPos * 3;
      000D23 EC               [12] 2795 	mov	a,r4
      000D24 75 F0 03         [24] 2796 	mov	b,#0x03
      000D27 A4               [48] 2797 	mul	ab
      000D28 D3               [12] 2798 	setb	c
      000D29 94 FF            [12] 2799 	subb	a,#0xff
      000D2B F4               [12] 2800 	cpl	a
      000D2C F5*45            [12] 2801 	mov	_theaterChaseRainbow_sloc0_1_0,a
      000D2E                       2802 00109$:
                                   2803 ;	./src/WS2812.c:419: setPixel(i + q, g, r, b);
      000D2E EA               [12] 2804 	mov	a,r2
      000D2F 28               [12] 2805 	add	a,r0
      000D30 F5 82            [12] 2806 	mov	dpl,a
      000D32 EB               [12] 2807 	mov	a,r3
      000D33 39               [12] 2808 	addc	a,r1
      000D34 F5 83            [12] 2809 	mov	dph,a
      000D36 8D*0F            [24] 2810 	mov	_setPixel_PARM_2,r5
      000D38 8E*10            [24] 2811 	mov	_setPixel_PARM_3,r6
      000D3A 85*45*11         [24] 2812 	mov	_setPixel_PARM_4,_theaterChaseRainbow_sloc0_1_0
      000D3D C0 03            [24] 2813 	push	ar3
      000D3F C0 02            [24] 2814 	push	ar2
      000D41 C0 01            [24] 2815 	push	ar1
      000D43 C0 00            [24] 2816 	push	ar0
      000D45 12r01rB6         [24] 2817 	lcall	_setPixel
      000D48 D0 00            [24] 2818 	pop	ar0
      000D4A D0 01            [24] 2819 	pop	ar1
      000D4C D0 02            [24] 2820 	pop	ar2
      000D4E D0 03            [24] 2821 	pop	ar3
                                   2822 ;	./src/WS2812.c:392: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000D50 88 06            [24] 2823 	mov	ar6,r0
      000D52 89 07            [24] 2824 	mov	ar7,r1
      000D54 74 03            [12] 2825 	mov	a,#0x03
      000D56 2E               [12] 2826 	add	a,r6
      000D57 FE               [12] 2827 	mov	r6,a
      000D58 E4               [12] 2828 	clr	a
      000D59 3F               [12] 2829 	addc	a,r7
      000D5A FF               [12] 2830 	mov	r7,a
      000D5B 8E 00            [24] 2831 	mov	ar0,r6
      000D5D 8F 01            [24] 2832 	mov	ar1,r7
      000D5F 02r0Cr93         [24] 2833 	ljmp	00118$
      000D62                       2834 00110$:
                                   2835 ;	./src/WS2812.c:422: showStrip();
      000D62 C0 03            [24] 2836 	push	ar3
      000D64 C0 02            [24] 2837 	push	ar2
      000D66 12r01r42         [24] 2838 	lcall	_showStrip
                                   2839 ;	./src/WS2812.c:424: _delay_ms(DELAY);
      000D69 85*00*00         [24] 2840 	mov	__divuint_PARM_2,_NUM_LEDS
      000D6C 85*01*01         [24] 2841 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000D6F 90 00 C8         [24] 2842 	mov	dptr,#0x00c8
      000D72 12r00r00         [24] 2843 	lcall	__divuint
      000D75 85*00*00         [24] 2844 	mov	__mulint_PARM_2,__delay
      000D78 85*01*01         [24] 2845 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000D7B 12r00r00         [24] 2846 	lcall	__mulint
      000D7E 75*00 0A         [24] 2847 	mov	__divuint_PARM_2,#0x0a
      000D81 75*01 00         [24] 2848 	mov	(__divuint_PARM_2 + 1),#0x00
      000D84 12r00r00         [24] 2849 	lcall	__divuint
      000D87 E5 82            [12] 2850 	mov	a,dpl
      000D89 85 83 F0         [24] 2851 	mov	b,dph
      000D8C 24 01            [12] 2852 	add	a,#0x01
      000D8E FE               [12] 2853 	mov	r6,a
      000D8F E4               [12] 2854 	clr	a
      000D90 35 F0            [12] 2855 	addc	a,b
      000D92 FF               [12] 2856 	mov	r7,a
      000D93 7D 00            [12] 2857 	mov	r5,#0x00
      000D95 7C 00            [12] 2858 	mov	r4,#0x00
      000D97 8E 82            [24] 2859 	mov	dpl,r6
      000D99 8F 83            [24] 2860 	mov	dph,r7
      000D9B 8D F0            [24] 2861 	mov	b,r5
      000D9D EC               [12] 2862 	mov	a,r4
      000D9E 12r00r00         [24] 2863 	lcall	__delay_ms
      000DA1 D0 02            [24] 2864 	pop	ar2
      000DA3 D0 03            [24] 2865 	pop	ar3
                                   2866 ;	./src/WS2812.c:426: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000DA5 7E 00            [12] 2867 	mov	r6,#0x00
      000DA7 7F 00            [12] 2868 	mov	r7,#0x00
      000DA9                       2869 00121$:
      000DA9 8E 04            [24] 2870 	mov	ar4,r6
      000DAB 8F 05            [24] 2871 	mov	ar5,r7
      000DAD C3               [12] 2872 	clr	c
      000DAE EC               [12] 2873 	mov	a,r4
      000DAF 95*00            [12] 2874 	subb	a,_NUM_LEDS
      000DB1 ED               [12] 2875 	mov	a,r5
      000DB2 95*01            [12] 2876 	subb	a,(_NUM_LEDS + 1)
      000DB4 50 45            [24] 2877 	jnc	00125$
                                   2878 ;	./src/WS2812.c:428: CHECK_EFF;
      000DB6 E5*00            [12] 2879 	mov	a,_effect
      000DB8 B5*40 07         [24] 2880 	cjne	a,_theaterChaseRainbow_curEffect_65536_121,00111$
      000DBB E5*00            [12] 2881 	mov	a,__color
      000DBD B5*41 02         [24] 2882 	cjne	a,_theaterChaseRainbow_curColor_65536_121,00204$
      000DC0 80 04            [24] 2883 	sjmp	00112$
      000DC2                       2884 00204$:
      000DC2                       2885 00111$:
      000DC2 75*00 12         [24] 2886 	mov	__status,#0x12
      000DC5 22               [24] 2887 	ret
      000DC6                       2888 00112$:
                                   2889 ;	./src/WS2812.c:429: setPixel(i + q, 0, 0, 0); // turn every third pixel off
      000DC6 EA               [12] 2890 	mov	a,r2
      000DC7 2E               [12] 2891 	add	a,r6
      000DC8 F5 82            [12] 2892 	mov	dpl,a
      000DCA EB               [12] 2893 	mov	a,r3
      000DCB 3F               [12] 2894 	addc	a,r7
      000DCC F5 83            [12] 2895 	mov	dph,a
      000DCE 75*0F 00         [24] 2896 	mov	_setPixel_PARM_2,#0x00
      000DD1 75*10 00         [24] 2897 	mov	_setPixel_PARM_3,#0x00
      000DD4 75*11 00         [24] 2898 	mov	_setPixel_PARM_4,#0x00
      000DD7 C0 07            [24] 2899 	push	ar7
      000DD9 C0 06            [24] 2900 	push	ar6
      000DDB C0 03            [24] 2901 	push	ar3
      000DDD C0 02            [24] 2902 	push	ar2
      000DDF 12r01rB6         [24] 2903 	lcall	_setPixel
      000DE2 D0 02            [24] 2904 	pop	ar2
      000DE4 D0 03            [24] 2905 	pop	ar3
      000DE6 D0 06            [24] 2906 	pop	ar6
      000DE8 D0 07            [24] 2907 	pop	ar7
                                   2908 ;	./src/WS2812.c:426: for (int16_t i = 0; i < NUM_LEDS; i = i + 3)
      000DEA 8E 04            [24] 2909 	mov	ar4,r6
      000DEC 8F 05            [24] 2910 	mov	ar5,r7
      000DEE 74 03            [12] 2911 	mov	a,#0x03
      000DF0 2C               [12] 2912 	add	a,r4
      000DF1 FC               [12] 2913 	mov	r4,a
      000DF2 E4               [12] 2914 	clr	a
      000DF3 3D               [12] 2915 	addc	a,r5
      000DF4 FD               [12] 2916 	mov	r5,a
      000DF5 8C 06            [24] 2917 	mov	ar6,r4
      000DF7 8D 07            [24] 2918 	mov	ar7,r5
      000DF9 80 AE            [24] 2919 	sjmp	00121$
      000DFB                       2920 00125$:
                                   2921 ;	./src/WS2812.c:390: for (int16_t q = 0; q < 3; q++)
      000DFB 0A               [12] 2922 	inc	r2
      000DFC BA 00 01         [24] 2923 	cjne	r2,#0x00,00205$
      000DFF 0B               [12] 2924 	inc	r3
      000E00                       2925 00205$:
      000E00 02r0Cr7D         [24] 2926 	ljmp	00124$
      000E03                       2927 00128$:
                                   2928 ;	./src/WS2812.c:388: for (int16_t j = 0; j < 256; j++)
      000E03 05*43            [12] 2929 	inc	_theaterChaseRainbow_j_131072_122
      000E05 E4               [12] 2930 	clr	a
      000E06 B5*43 02         [24] 2931 	cjne	a,_theaterChaseRainbow_j_131072_122,00206$
      000E09 05*44            [12] 2932 	inc	(_theaterChaseRainbow_j_131072_122 + 1)
      000E0B                       2933 00206$:
                                   2934 ;	./src/WS2812.c:433: }
      000E0B 02r0Cr6E         [24] 2935 	ljmp	00127$
                                   2936 ;------------------------------------------------------------
                                   2937 ;Allocation info for local variables in function 'Pattern3'
                                   2938 ;------------------------------------------------------------
                                   2939 ;r                         Allocated with name '_Pattern3_PARM_2'
                                   2940 ;b                         Allocated with name '_Pattern3_PARM_3'
                                   2941 ;orient                    Allocated with name '_Pattern3_PARM_4'
                                   2942 ;g                         Allocated to registers r7 
                                   2943 ;curEffect                 Allocated to registers r6 
                                   2944 ;curColor                  Allocated with name '_Pattern3_curColor_65536_136'
                                   2945 ;i                         Allocated to registers r3 r4 
                                   2946 ;sloc0                     Allocated with name '_Pattern3_sloc0_1_0'
                                   2947 ;sloc1                     Allocated with name '_Pattern3_sloc1_1_0'
                                   2948 ;------------------------------------------------------------
                                   2949 ;	./src/WS2812.c:435: void Pattern3(uint8_t g, uint8_t r, uint8_t b, uint8_t orient)
                                   2950 ;	-----------------------------------------
                                   2951 ;	 function Pattern3
                                   2952 ;	-----------------------------------------
      000E0E                       2953 _Pattern3:
      000E0E AF 82            [24] 2954 	mov	r7,dpl
                                   2955 ;	./src/WS2812.c:437: uint8_t curEffect = effect;
      000E10 AE*00            [24] 2956 	mov	r6,_effect
                                   2957 ;	./src/WS2812.c:438: uint8_t curColor = _color;
      000E12 85*00*49         [24] 2958 	mov	_Pattern3_curColor_65536_136,__color
                                   2959 ;	./src/WS2812.c:439: for (int i = 0; i < (NUM_LEDS / 2); i++)
      000E15 7B 00            [12] 2960 	mov	r3,#0x00
      000E17 7C 00            [12] 2961 	mov	r4,#0x00
      000E19                       2962 00106$:
      000E19 A9*00            [24] 2963 	mov	r1,_NUM_LEDS
      000E1B AA*01            [24] 2964 	mov	r2,(_NUM_LEDS + 1)
      000E1D 89*4A            [24] 2965 	mov	_Pattern3_sloc0_1_0,r1
      000E1F EA               [12] 2966 	mov	a,r2
      000E20 C3               [12] 2967 	clr	c
      000E21 13               [12] 2968 	rrc	a
      000E22 C5*4A            [12] 2969 	xch	a,_Pattern3_sloc0_1_0
      000E24 13               [12] 2970 	rrc	a
      000E25 C5*4A            [12] 2971 	xch	a,_Pattern3_sloc0_1_0
      000E27 F5*4B            [12] 2972 	mov	(_Pattern3_sloc0_1_0 + 1),a
      000E29 8B*4C            [24] 2973 	mov	_Pattern3_sloc1_1_0,r3
      000E2B 8C*4D            [24] 2974 	mov	(_Pattern3_sloc1_1_0 + 1),r4
      000E2D C3               [12] 2975 	clr	c
      000E2E E5*4C            [12] 2976 	mov	a,_Pattern3_sloc1_1_0
      000E30 95*4A            [12] 2977 	subb	a,_Pattern3_sloc0_1_0
      000E32 E5*4D            [12] 2978 	mov	a,(_Pattern3_sloc1_1_0 + 1)
      000E34 95*4B            [12] 2979 	subb	a,(_Pattern3_sloc0_1_0 + 1)
      000E36 40 03            [24] 2980 	jc	00134$
      000E38 02r0Fr11         [24] 2981 	ljmp	00104$
      000E3B                       2982 00134$:
                                   2983 ;	./src/WS2812.c:441: CHECK_EFF;
      000E3B EE               [12] 2984 	mov	a,r6
      000E3C B5*00 07         [24] 2985 	cjne	a,_effect,00101$
      000E3F E5*00            [12] 2986 	mov	a,__color
      000E41 B5*49 02         [24] 2987 	cjne	a,_Pattern3_curColor_65536_136,00137$
      000E44 80 04            [24] 2988 	sjmp	00102$
      000E46                       2989 00137$:
      000E46                       2990 00101$:
      000E46 75*00 12         [24] 2991 	mov	__status,#0x12
      000E49 22               [24] 2992 	ret
      000E4A                       2993 00102$:
                                   2994 ;	./src/WS2812.c:442: setPixel(orient ? (NUM_LEDS / 2) + i : NUM_LEDS - 1 - i, g, r, b);
      000E4A E5*48            [12] 2995 	mov	a,_Pattern3_PARM_4
      000E4C 60 0C            [24] 2996 	jz	00110$
      000E4E E5*4C            [12] 2997 	mov	a,_Pattern3_sloc1_1_0
      000E50 25*4A            [12] 2998 	add	a,_Pattern3_sloc0_1_0
      000E52 F8               [12] 2999 	mov	r0,a
      000E53 E5*4D            [12] 3000 	mov	a,(_Pattern3_sloc1_1_0 + 1)
      000E55 35*4B            [12] 3001 	addc	a,(_Pattern3_sloc0_1_0 + 1)
      000E57 FD               [12] 3002 	mov	r5,a
      000E58 80 0E            [24] 3003 	sjmp	00111$
      000E5A                       3004 00110$:
      000E5A 19               [12] 3005 	dec	r1
      000E5B B9 FF 01         [24] 3006 	cjne	r1,#0xff,00139$
      000E5E 1A               [12] 3007 	dec	r2
      000E5F                       3008 00139$:
      000E5F E9               [12] 3009 	mov	a,r1
      000E60 C3               [12] 3010 	clr	c
      000E61 95*4C            [12] 3011 	subb	a,_Pattern3_sloc1_1_0
      000E63 F8               [12] 3012 	mov	r0,a
      000E64 EA               [12] 3013 	mov	a,r2
      000E65 95*4D            [12] 3014 	subb	a,(_Pattern3_sloc1_1_0 + 1)
      000E67 FD               [12] 3015 	mov	r5,a
      000E68                       3016 00111$:
      000E68 88 82            [24] 3017 	mov	dpl,r0
      000E6A 8D 83            [24] 3018 	mov	dph,r5
      000E6C 8F*0F            [24] 3019 	mov	_setPixel_PARM_2,r7
      000E6E 85*46*10         [24] 3020 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      000E71 85*47*11         [24] 3021 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      000E74 C0 07            [24] 3022 	push	ar7
      000E76 C0 06            [24] 3023 	push	ar6
      000E78 C0 04            [24] 3024 	push	ar4
      000E7A C0 03            [24] 3025 	push	ar3
      000E7C 12r01rB6         [24] 3026 	lcall	_setPixel
      000E7F D0 03            [24] 3027 	pop	ar3
      000E81 D0 04            [24] 3028 	pop	ar4
      000E83 D0 06            [24] 3029 	pop	ar6
      000E85 D0 07            [24] 3030 	pop	ar7
                                   3031 ;	./src/WS2812.c:443: setPixel(orient ? ((NUM_LEDS / 2) - 1) - i : i, g, r, b);
      000E87 E5*48            [12] 3032 	mov	a,_Pattern3_PARM_4
      000E89 60 1C            [24] 3033 	jz	00112$
      000E8B AA*00            [24] 3034 	mov	r2,_NUM_LEDS
      000E8D E5*01            [12] 3035 	mov	a,(_NUM_LEDS + 1)
      000E8F C3               [12] 3036 	clr	c
      000E90 13               [12] 3037 	rrc	a
      000E91 CA               [12] 3038 	xch	a,r2
      000E92 13               [12] 3039 	rrc	a
      000E93 CA               [12] 3040 	xch	a,r2
      000E94 FD               [12] 3041 	mov	r5,a
      000E95 1A               [12] 3042 	dec	r2
      000E96 BA FF 01         [24] 3043 	cjne	r2,#0xff,00141$
      000E99 1D               [12] 3044 	dec	r5
      000E9A                       3045 00141$:
      000E9A 8B 00            [24] 3046 	mov	ar0,r3
      000E9C 8C 01            [24] 3047 	mov	ar1,r4
      000E9E EA               [12] 3048 	mov	a,r2
      000E9F C3               [12] 3049 	clr	c
      000EA0 98               [12] 3050 	subb	a,r0
      000EA1 FA               [12] 3051 	mov	r2,a
      000EA2 ED               [12] 3052 	mov	a,r5
      000EA3 99               [12] 3053 	subb	a,r1
      000EA4 FD               [12] 3054 	mov	r5,a
      000EA5 80 04            [24] 3055 	sjmp	00113$
      000EA7                       3056 00112$:
      000EA7 8B 02            [24] 3057 	mov	ar2,r3
      000EA9 8C 05            [24] 3058 	mov	ar5,r4
      000EAB                       3059 00113$:
      000EAB 8A 82            [24] 3060 	mov	dpl,r2
      000EAD 8D 83            [24] 3061 	mov	dph,r5
      000EAF 8F*0F            [24] 3062 	mov	_setPixel_PARM_2,r7
      000EB1 85*46*10         [24] 3063 	mov	_setPixel_PARM_3,_Pattern3_PARM_2
      000EB4 85*47*11         [24] 3064 	mov	_setPixel_PARM_4,_Pattern3_PARM_3
      000EB7 C0 07            [24] 3065 	push	ar7
      000EB9 C0 06            [24] 3066 	push	ar6
      000EBB C0 04            [24] 3067 	push	ar4
      000EBD C0 03            [24] 3068 	push	ar3
      000EBF 12r01rB6         [24] 3069 	lcall	_setPixel
                                   3070 ;	./src/WS2812.c:444: showStrip();
      000EC2 12r01r42         [24] 3071 	lcall	_showStrip
                                   3072 ;	./src/WS2812.c:445: _delay_ms(DELAY2);
      000EC5 85*00*00         [24] 3073 	mov	__divuint_PARM_2,_NUM_LEDS
      000EC8 85*01*01         [24] 3074 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      000ECB 90 00 C8         [24] 3075 	mov	dptr,#0x00c8
      000ECE 12r00r00         [24] 3076 	lcall	__divuint
      000ED1 85*00*00         [24] 3077 	mov	__mulint_PARM_2,__delay
      000ED4 85*01*01         [24] 3078 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      000ED7 12r00r00         [24] 3079 	lcall	__mulint
      000EDA 75*00 64         [24] 3080 	mov	__divuint_PARM_2,#0x64
      000EDD 75*01 00         [24] 3081 	mov	(__divuint_PARM_2 + 1),#0x00
      000EE0 12r00r00         [24] 3082 	lcall	__divuint
      000EE3 E5 82            [12] 3083 	mov	a,dpl
      000EE5 85 83 F0         [24] 3084 	mov	b,dph
      000EE8 24 01            [12] 3085 	add	a,#0x01
      000EEA FA               [12] 3086 	mov	r2,a
      000EEB E4               [12] 3087 	clr	a
      000EEC 35 F0            [12] 3088 	addc	a,b
      000EEE FD               [12] 3089 	mov	r5,a
      000EEF 8A 00            [24] 3090 	mov	ar0,r2
      000EF1 8D 01            [24] 3091 	mov	ar1,r5
      000EF3 7A 00            [12] 3092 	mov	r2,#0x00
      000EF5 7D 00            [12] 3093 	mov	r5,#0x00
      000EF7 88 82            [24] 3094 	mov	dpl,r0
      000EF9 89 83            [24] 3095 	mov	dph,r1
      000EFB 8A F0            [24] 3096 	mov	b,r2
      000EFD ED               [12] 3097 	mov	a,r5
      000EFE 12r00r00         [24] 3098 	lcall	__delay_ms
      000F01 D0 03            [24] 3099 	pop	ar3
      000F03 D0 04            [24] 3100 	pop	ar4
      000F05 D0 06            [24] 3101 	pop	ar6
      000F07 D0 07            [24] 3102 	pop	ar7
                                   3103 ;	./src/WS2812.c:439: for (int i = 0; i < (NUM_LEDS / 2); i++)
      000F09 0B               [12] 3104 	inc	r3
      000F0A BB 00 01         [24] 3105 	cjne	r3,#0x00,00142$
      000F0D 0C               [12] 3106 	inc	r4
      000F0E                       3107 00142$:
      000F0E 02r0Er19         [24] 3108 	ljmp	00106$
      000F11                       3109 00104$:
                                   3110 ;	./src/WS2812.c:447: _delay_ms(300);
      000F11 90 01 2C         [24] 3111 	mov	dptr,#0x012c
      000F14 E4               [12] 3112 	clr	a
      000F15 F5 F0            [12] 3113 	mov	b,a
                                   3114 ;	./src/WS2812.c:448: }
      000F17 02r00r00         [24] 3115 	ljmp	__delay_ms
                                   3116 ;------------------------------------------------------------
                                   3117 ;Allocation info for local variables in function 'fadeToBlackBy'
                                   3118 ;------------------------------------------------------------
                                   3119 ;fadeBy                    Allocated with name '_fadeToBlackBy_PARM_2'
                                   3120 ;pixel                     Allocated with name '_fadeToBlackBy_pixel_65536_140'
                                   3121 ;r1                        Allocated to registers r1 
                                   3122 ;g1                        Allocated to registers r6 
                                   3123 ;b1                        Allocated to registers 
                                   3124 ;------------------------------------------------------------
                                   3125 ;	./src/WS2812.c:450: void fadeToBlackBy(uint16_t pixel, uint8_t fadeBy)
                                   3126 ;	-----------------------------------------
                                   3127 ;	 function fadeToBlackBy
                                   3128 ;	-----------------------------------------
      000F1A                       3129 _fadeToBlackBy:
      000F1A 85 82*4F         [24] 3130 	mov	_fadeToBlackBy_pixel_65536_140,dpl
      000F1D 85 83*50         [24] 3131 	mov	(_fadeToBlackBy_pixel_65536_140 + 1),dph
                                   3132 ;	./src/WS2812.c:455: r1 = leds[3 * pixel + 1];
      000F20 85*4F*00         [24] 3133 	mov	__mulint_PARM_2,_fadeToBlackBy_pixel_65536_140
      000F23 85*50*01         [24] 3134 	mov	(__mulint_PARM_2 + 1),(_fadeToBlackBy_pixel_65536_140 + 1)
      000F26 90 00 03         [24] 3135 	mov	dptr,#0x0003
      000F29 12r00r00         [24] 3136 	lcall	__mulint
      000F2C AC 82            [24] 3137 	mov	r4,dpl
      000F2E AD 83            [24] 3138 	mov	r5,dph
      000F30 74 01            [12] 3139 	mov	a,#0x01
      000F32 2C               [12] 3140 	add	a,r4
      000F33 FA               [12] 3141 	mov	r2,a
      000F34 E4               [12] 3142 	clr	a
      000F35 3D               [12] 3143 	addc	a,r5
      000F36 FB               [12] 3144 	mov	r3,a
      000F37 EA               [12] 3145 	mov	a,r2
      000F38 24r00            [12] 3146 	add	a,#_leds
      000F3A F5 82            [12] 3147 	mov	dpl,a
      000F3C EB               [12] 3148 	mov	a,r3
      000F3D 34s00            [12] 3149 	addc	a,#(_leds >> 8)
      000F3F F5 83            [12] 3150 	mov	dph,a
      000F41 E0               [24] 3151 	movx	a,@dptr
      000F42 FB               [12] 3152 	mov	r3,a
                                   3153 ;	./src/WS2812.c:456: g1 = leds[3 * pixel];
      000F43 EC               [12] 3154 	mov	a,r4
      000F44 24r00            [12] 3155 	add	a,#_leds
      000F46 F5 82            [12] 3156 	mov	dpl,a
      000F48 ED               [12] 3157 	mov	a,r5
      000F49 34s00            [12] 3158 	addc	a,#(_leds >> 8)
      000F4B F5 83            [12] 3159 	mov	dph,a
      000F4D E0               [24] 3160 	movx	a,@dptr
      000F4E FA               [12] 3161 	mov	r2,a
                                   3162 ;	./src/WS2812.c:457: b1 = leds[3 * pixel + 2];
      000F4F 74 02            [12] 3163 	mov	a,#0x02
      000F51 2C               [12] 3164 	add	a,r4
      000F52 FC               [12] 3165 	mov	r4,a
      000F53 E4               [12] 3166 	clr	a
      000F54 3D               [12] 3167 	addc	a,r5
      000F55 FD               [12] 3168 	mov	r5,a
      000F56 EC               [12] 3169 	mov	a,r4
      000F57 24r00            [12] 3170 	add	a,#_leds
      000F59 F5 82            [12] 3171 	mov	dpl,a
      000F5B ED               [12] 3172 	mov	a,r5
      000F5C 34s00            [12] 3173 	addc	a,#(_leds >> 8)
      000F5E F5 83            [12] 3174 	mov	dph,a
      000F60 E0               [24] 3175 	movx	a,@dptr
      000F61 FD               [12] 3176 	mov	r5,a
                                   3177 ;	./src/WS2812.c:459: r1 = (r1 <= 10) ? 0 : (int)r1 - (r1 * fadeBy / 256);
      000F62 EB               [12] 3178 	mov	a,r3
      000F63 24 F5            [12] 3179 	add	a,#0xff - 0x0a
      000F65 92*00            [24] 3180 	mov	_fadeToBlackBy_sloc0_1_0,c
      000F67 40 06            [24] 3181 	jc	00103$
      000F69 79 00            [12] 3182 	mov	r1,#0x00
      000F6B 7C 00            [12] 3183 	mov	r4,#0x00
      000F6D 80 2E            [24] 3184 	sjmp	00104$
      000F6F                       3185 00103$:
      000F6F 8B 00            [24] 3186 	mov	ar0,r3
      000F71 8B F0            [24] 3187 	mov	b,r3
      000F73 E5*4E            [12] 3188 	mov	a,_fadeToBlackBy_PARM_2
      000F75 A4               [48] 3189 	mul	ab
      000F76 F5 82            [12] 3190 	mov	dpl,a
      000F78 85 F0 83         [24] 3191 	mov	dph,b
      000F7B 75*00 00         [24] 3192 	mov	__divsint_PARM_2,#0x00
      000F7E 75*01 01         [24] 3193 	mov	(__divsint_PARM_2 + 1),#0x01
      000F81 C0 05            [24] 3194 	push	ar5
      000F83 C0 02            [24] 3195 	push	ar2
      000F85 C0 00            [24] 3196 	push	ar0
      000F87 12r00r00         [24] 3197 	lcall	__divsint
      000F8A AB 82            [24] 3198 	mov	r3,dpl
      000F8C AF 83            [24] 3199 	mov	r7,dph
      000F8E D0 00            [24] 3200 	pop	ar0
      000F90 D0 02            [24] 3201 	pop	ar2
      000F92 D0 05            [24] 3202 	pop	ar5
      000F94 E8               [12] 3203 	mov	a,r0
      000F95 C3               [12] 3204 	clr	c
      000F96 9B               [12] 3205 	subb	a,r3
      000F97 F8               [12] 3206 	mov	r0,a
      000F98 F9               [12] 3207 	mov	r1,a
      000F99 33               [12] 3208 	rlc	a
      000F9A 95 E0            [12] 3209 	subb	a,acc
      000F9C FC               [12] 3210 	mov	r4,a
      000F9D                       3211 00104$:
                                   3212 ;	./src/WS2812.c:460: g1 = (g1 <= 10) ? 0 : (int)g1 - (g1 * fadeBy / 256);
      000F9D EA               [12] 3213 	mov	a,r2
      000F9E 24 F5            [12] 3214 	add	a,#0xff - 0x0a
      000FA0 92*00            [24] 3215 	mov	_fadeToBlackBy_sloc0_1_0,c
      000FA2 40 06            [24] 3216 	jc	00105$
      000FA4 7E 00            [12] 3217 	mov	r6,#0x00
      000FA6 7F 00            [12] 3218 	mov	r7,#0x00
      000FA8 80 2E            [24] 3219 	sjmp	00106$
      000FAA                       3220 00105$:
      000FAA 8A 04            [24] 3221 	mov	ar4,r2
      000FAC 8A F0            [24] 3222 	mov	b,r2
      000FAE E5*4E            [12] 3223 	mov	a,_fadeToBlackBy_PARM_2
      000FB0 A4               [48] 3224 	mul	ab
      000FB1 F5 82            [12] 3225 	mov	dpl,a
      000FB3 85 F0 83         [24] 3226 	mov	dph,b
      000FB6 75*00 00         [24] 3227 	mov	__divsint_PARM_2,#0x00
      000FB9 75*01 01         [24] 3228 	mov	(__divsint_PARM_2 + 1),#0x01
      000FBC C0 05            [24] 3229 	push	ar5
      000FBE C0 04            [24] 3230 	push	ar4
      000FC0 C0 01            [24] 3231 	push	ar1
      000FC2 12r00r00         [24] 3232 	lcall	__divsint
      000FC5 AA 82            [24] 3233 	mov	r2,dpl
      000FC7 AB 83            [24] 3234 	mov	r3,dph
      000FC9 D0 01            [24] 3235 	pop	ar1
      000FCB D0 04            [24] 3236 	pop	ar4
      000FCD D0 05            [24] 3237 	pop	ar5
      000FCF EC               [12] 3238 	mov	a,r4
      000FD0 C3               [12] 3239 	clr	c
      000FD1 9A               [12] 3240 	subb	a,r2
      000FD2 FC               [12] 3241 	mov	r4,a
      000FD3 FE               [12] 3242 	mov	r6,a
      000FD4 33               [12] 3243 	rlc	a
      000FD5 95 E0            [12] 3244 	subb	a,acc
      000FD7 FF               [12] 3245 	mov	r7,a
      000FD8                       3246 00106$:
                                   3247 ;	./src/WS2812.c:461: b1 = (b1 <= 10) ? 0 : (int)b1 - (b1 * fadeBy / 256);
      000FD8 ED               [12] 3248 	mov	a,r5
      000FD9 24 F5            [12] 3249 	add	a,#0xff - 0x0a
      000FDB 92*00            [24] 3250 	mov	_fadeToBlackBy_sloc0_1_0,c
      000FDD 40 06            [24] 3251 	jc	00107$
      000FDF 7C 00            [12] 3252 	mov	r4,#0x00
      000FE1 7F 00            [12] 3253 	mov	r7,#0x00
      000FE3 80 2E            [24] 3254 	sjmp	00108$
      000FE5                       3255 00107$:
      000FE5 8D 03            [24] 3256 	mov	ar3,r5
      000FE7 8D F0            [24] 3257 	mov	b,r5
      000FE9 E5*4E            [12] 3258 	mov	a,_fadeToBlackBy_PARM_2
      000FEB A4               [48] 3259 	mul	ab
      000FEC F5 82            [12] 3260 	mov	dpl,a
      000FEE 85 F0 83         [24] 3261 	mov	dph,b
      000FF1 75*00 00         [24] 3262 	mov	__divsint_PARM_2,#0x00
      000FF4 75*01 01         [24] 3263 	mov	(__divsint_PARM_2 + 1),#0x01
      000FF7 C0 06            [24] 3264 	push	ar6
      000FF9 C0 03            [24] 3265 	push	ar3
      000FFB C0 01            [24] 3266 	push	ar1
      000FFD 12r00r00         [24] 3267 	lcall	__divsint
      001000 AA 82            [24] 3268 	mov	r2,dpl
      001002 AD 83            [24] 3269 	mov	r5,dph
      001004 D0 01            [24] 3270 	pop	ar1
      001006 D0 03            [24] 3271 	pop	ar3
      001008 D0 06            [24] 3272 	pop	ar6
      00100A EB               [12] 3273 	mov	a,r3
      00100B C3               [12] 3274 	clr	c
      00100C 9A               [12] 3275 	subb	a,r2
      00100D FB               [12] 3276 	mov	r3,a
      00100E FC               [12] 3277 	mov	r4,a
      00100F 33               [12] 3278 	rlc	a
      001010 95 E0            [12] 3279 	subb	a,acc
      001012 FF               [12] 3280 	mov	r7,a
      001013                       3281 00108$:
      001013 8C*11            [24] 3282 	mov	_setPixel_PARM_4,r4
                                   3283 ;	./src/WS2812.c:463: setPixel(pixel, g1, r1, b1);
      001015 8E*0F            [24] 3284 	mov	_setPixel_PARM_2,r6
      001017 89*10            [24] 3285 	mov	_setPixel_PARM_3,r1
      001019 85*4F 82         [24] 3286 	mov	dpl,_fadeToBlackBy_pixel_65536_140
      00101C 85*50 83         [24] 3287 	mov	dph,(_fadeToBlackBy_pixel_65536_140 + 1)
                                   3288 ;	./src/WS2812.c:464: }
      00101F 02r01rB6         [24] 3289 	ljmp	_setPixel
                                   3290 ;------------------------------------------------------------
                                   3291 ;Allocation info for local variables in function 'meteorRain'
                                   3292 ;------------------------------------------------------------
                                   3293 ;green                     Allocated with name '_meteorRain_PARM_2'
                                   3294 ;blue                      Allocated with name '_meteorRain_PARM_3'
                                   3295 ;meteorSize                Allocated with name '_meteorRain_PARM_4'
                                   3296 ;meteorTrailDecay          Allocated with name '_meteorRain_PARM_5'
                                   3297 ;meteorRandomDecay         Allocated with name '_meteorRain_PARM_6'
                                   3298 ;red                       Allocated to registers 
                                   3299 ;------------------------------------------------------------
                                   3300 ;	./src/WS2812.c:466: void meteorRain(uint8_t red, uint8_t green, uint8_t blue, uint8_t meteorSize, uint8_t meteorTrailDecay, uint8_t meteorRandomDecay)
                                   3301 ;	-----------------------------------------
                                   3302 ;	 function meteorRain
                                   3303 ;	-----------------------------------------
      001022                       3304 _meteorRain:
                                   3305 ;	./src/WS2812.c:497: }
      001022 22               [24] 3306 	ret
                                   3307 ;------------------------------------------------------------
                                   3308 ;Allocation info for local variables in function 'sinWave'
                                   3309 ;------------------------------------------------------------
                                   3310 ;red                       Allocated with name '_sinWave_PARM_2'
                                   3311 ;blue                      Allocated with name '_sinWave_PARM_3'
                                   3312 ;green                     Allocated with name '_sinWave_green_65536_145'
                                   3313 ;dem                       Allocated to registers r3 
                                   3314 ;curEffect                 Allocated with name '_sinWave_curEffect_65536_146'
                                   3315 ;curColor                  Allocated with name '_sinWave_curColor_65536_146'
                                   3316 ;j                         Allocated to registers 
                                   3317 ;i                         Allocated with name '_sinWave_i_262144_149'
                                   3318 ;sloc0                     Allocated with name '_sinWave_sloc0_1_0'
                                   3319 ;------------------------------------------------------------
                                   3320 ;	./src/WS2812.c:572: void sinWave(uint8_t green, uint8_t red, uint8_t blue)
                                   3321 ;	-----------------------------------------
                                   3322 ;	 function sinWave
                                   3323 ;	-----------------------------------------
      001023                       3324 _sinWave:
      001023 85 82*53         [24] 3325 	mov	_sinWave_green_65536_145,dpl
                                   3326 ;	./src/WS2812.c:575: uint8_t curEffect = effect;
      001026 85*00*54         [24] 3327 	mov	_sinWave_curEffect_65536_146,_effect
                                   3328 ;	./src/WS2812.c:576: uint8_t curColor = _color;
      001029 85*00*55         [24] 3329 	mov	_sinWave_curColor_65536_146,__color
                                   3330 ;	./src/WS2812.c:577: for (uint8_t j = 0; j < 13; j++)
      00102C 7C 00            [12] 3331 	mov	r4,#0x00
      00102E                       3332 00112$:
      00102E BC 0D 00         [24] 3333 	cjne	r4,#0x0d,00140$
      001031                       3334 00140$:
      001031 40 01            [24] 3335 	jc	00141$
      001033 22               [24] 3336 	ret
      001034                       3337 00141$:
                                   3338 ;	./src/WS2812.c:579: dem = j;
      001034 8C 03            [24] 3339 	mov	ar3,r4
                                   3340 ;	./src/WS2812.c:580: for (int i = 0; i < NUM_LEDS; i++)
      001036 E4               [12] 3341 	clr	a
      001037 F5*56            [12] 3342 	mov	_sinWave_i_262144_149,a
      001039 F5*57            [12] 3343 	mov	(_sinWave_i_262144_149 + 1),a
      00103B                       3344 00109$:
      00103B 85*56*58         [24] 3345 	mov	_sinWave_sloc0_1_0,_sinWave_i_262144_149
      00103E 85*57*59         [24] 3346 	mov	(_sinWave_sloc0_1_0 + 1),(_sinWave_i_262144_149 + 1)
      001041 C3               [12] 3347 	clr	c
      001042 E5*58            [12] 3348 	mov	a,_sinWave_sloc0_1_0
      001044 95*00            [12] 3349 	subb	a,_NUM_LEDS
      001046 E5*59            [12] 3350 	mov	a,(_sinWave_sloc0_1_0 + 1)
      001048 95*01            [12] 3351 	subb	a,(_NUM_LEDS + 1)
      00104A 40 03            [24] 3352 	jc	00142$
      00104C 02r10rFA         [24] 3353 	ljmp	00106$
      00104F                       3354 00142$:
                                   3355 ;	./src/WS2812.c:582: setPixel(i, mang[dem]*green/100, mang[dem]*red/100, mang[dem]*blue/100);
      00104F EB               [12] 3356 	mov	a,r3
      001050 24r00            [12] 3357 	add	a,#_mang
      001052 F9               [12] 3358 	mov	r1,a
      001053 87 06            [24] 3359 	mov	ar6,@r1
      001055 8E F0            [24] 3360 	mov	b,r6
      001057 E5*53            [12] 3361 	mov	a,_sinWave_green_65536_145
      001059 A4               [48] 3362 	mul	ab
      00105A F5 82            [12] 3363 	mov	dpl,a
      00105C 85 F0 83         [24] 3364 	mov	dph,b
      00105F 75*00 64         [24] 3365 	mov	__divsint_PARM_2,#0x64
      001062 75*01 00         [24] 3366 	mov	(__divsint_PARM_2 + 1),#0x00
      001065 C0 06            [24] 3367 	push	ar6
      001067 C0 04            [24] 3368 	push	ar4
      001069 C0 03            [24] 3369 	push	ar3
      00106B 12r00r00         [24] 3370 	lcall	__divsint
      00106E AD 82            [24] 3371 	mov	r5,dpl
      001070 D0 03            [24] 3372 	pop	ar3
      001072 D0 04            [24] 3373 	pop	ar4
      001074 D0 06            [24] 3374 	pop	ar6
      001076 8E F0            [24] 3375 	mov	b,r6
      001078 E5*51            [12] 3376 	mov	a,_sinWave_PARM_2
      00107A A4               [48] 3377 	mul	ab
      00107B F5 82            [12] 3378 	mov	dpl,a
      00107D 85 F0 83         [24] 3379 	mov	dph,b
      001080 75*00 64         [24] 3380 	mov	__divsint_PARM_2,#0x64
      001083 75*01 00         [24] 3381 	mov	(__divsint_PARM_2 + 1),#0x00
      001086 C0 06            [24] 3382 	push	ar6
      001088 C0 05            [24] 3383 	push	ar5
      00108A C0 04            [24] 3384 	push	ar4
      00108C C0 03            [24] 3385 	push	ar3
      00108E 12r00r00         [24] 3386 	lcall	__divsint
      001091 AA 82            [24] 3387 	mov	r2,dpl
      001093 D0 03            [24] 3388 	pop	ar3
      001095 D0 04            [24] 3389 	pop	ar4
      001097 D0 05            [24] 3390 	pop	ar5
      001099 D0 06            [24] 3391 	pop	ar6
      00109B 8E F0            [24] 3392 	mov	b,r6
      00109D E5*52            [12] 3393 	mov	a,_sinWave_PARM_3
      00109F A4               [48] 3394 	mul	ab
      0010A0 F5 82            [12] 3395 	mov	dpl,a
      0010A2 85 F0 83         [24] 3396 	mov	dph,b
      0010A5 75*00 64         [24] 3397 	mov	__divsint_PARM_2,#0x64
      0010A8 75*01 00         [24] 3398 	mov	(__divsint_PARM_2 + 1),#0x00
      0010AB C0 05            [24] 3399 	push	ar5
      0010AD C0 04            [24] 3400 	push	ar4
      0010AF C0 03            [24] 3401 	push	ar3
      0010B1 C0 02            [24] 3402 	push	ar2
      0010B3 12r00r00         [24] 3403 	lcall	__divsint
      0010B6 AE 82            [24] 3404 	mov	r6,dpl
      0010B8 D0 02            [24] 3405 	pop	ar2
      0010BA D0 03            [24] 3406 	pop	ar3
      0010BC D0 04            [24] 3407 	pop	ar4
      0010BE D0 05            [24] 3408 	pop	ar5
      0010C0 8E*11            [24] 3409 	mov	_setPixel_PARM_4,r6
      0010C2 8D*0F            [24] 3410 	mov	_setPixel_PARM_2,r5
      0010C4 8A*10            [24] 3411 	mov	_setPixel_PARM_3,r2
      0010C6 85*58 82         [24] 3412 	mov	dpl,_sinWave_sloc0_1_0
      0010C9 85*59 83         [24] 3413 	mov	dph,(_sinWave_sloc0_1_0 + 1)
      0010CC C0 04            [24] 3414 	push	ar4
      0010CE C0 03            [24] 3415 	push	ar3
      0010D0 12r01rB6         [24] 3416 	lcall	_setPixel
      0010D3 D0 03            [24] 3417 	pop	ar3
      0010D5 D0 04            [24] 3418 	pop	ar4
                                   3419 ;	./src/WS2812.c:583: if (dem++ == 12)
      0010D7 8B 07            [24] 3420 	mov	ar7,r3
      0010D9 0B               [12] 3421 	inc	r3
      0010DA BF 0C 02         [24] 3422 	cjne	r7,#0x0c,00102$
                                   3423 ;	./src/WS2812.c:585: dem = 0;
      0010DD 7B 00            [12] 3424 	mov	r3,#0x00
      0010DF                       3425 00102$:
                                   3426 ;	./src/WS2812.c:587: CHECK_EFF;
      0010DF E5*00            [12] 3427 	mov	a,_effect
      0010E1 B5*54 07         [24] 3428 	cjne	a,_sinWave_curEffect_65536_146,00103$
      0010E4 E5*00            [12] 3429 	mov	a,__color
      0010E6 B5*55 02         [24] 3430 	cjne	a,_sinWave_curColor_65536_146,00147$
      0010E9 80 04            [24] 3431 	sjmp	00110$
      0010EB                       3432 00147$:
      0010EB                       3433 00103$:
      0010EB 75*00 12         [24] 3434 	mov	__status,#0x12
      0010EE 22               [24] 3435 	ret
      0010EF                       3436 00110$:
                                   3437 ;	./src/WS2812.c:580: for (int i = 0; i < NUM_LEDS; i++)
      0010EF 05*56            [12] 3438 	inc	_sinWave_i_262144_149
      0010F1 E4               [12] 3439 	clr	a
      0010F2 B5*56 02         [24] 3440 	cjne	a,_sinWave_i_262144_149,00148$
      0010F5 05*57            [12] 3441 	inc	(_sinWave_i_262144_149 + 1)
      0010F7                       3442 00148$:
      0010F7 02r10r3B         [24] 3443 	ljmp	00109$
      0010FA                       3444 00106$:
                                   3445 ;	./src/WS2812.c:589: showStrip();
      0010FA C0 04            [24] 3446 	push	ar4
      0010FC 12r01r42         [24] 3447 	lcall	_showStrip
                                   3448 ;	./src/WS2812.c:590: _delay_ms(DELAY2);
      0010FF 85*00*00         [24] 3449 	mov	__divuint_PARM_2,_NUM_LEDS
      001102 85*01*01         [24] 3450 	mov	(__divuint_PARM_2 + 1),(_NUM_LEDS + 1)
      001105 90 00 C8         [24] 3451 	mov	dptr,#0x00c8
      001108 12r00r00         [24] 3452 	lcall	__divuint
      00110B 85*00*00         [24] 3453 	mov	__mulint_PARM_2,__delay
      00110E 85*01*01         [24] 3454 	mov	(__mulint_PARM_2 + 1),(__delay + 1)
      001111 12r00r00         [24] 3455 	lcall	__mulint
      001114 75*00 64         [24] 3456 	mov	__divuint_PARM_2,#0x64
      001117 75*01 00         [24] 3457 	mov	(__divuint_PARM_2 + 1),#0x00
      00111A 12r00r00         [24] 3458 	lcall	__divuint
      00111D E5 82            [12] 3459 	mov	a,dpl
      00111F 85 83 F0         [24] 3460 	mov	b,dph
      001122 24 01            [12] 3461 	add	a,#0x01
      001124 FE               [12] 3462 	mov	r6,a
      001125 E4               [12] 3463 	clr	a
      001126 35 F0            [12] 3464 	addc	a,b
      001128 FF               [12] 3465 	mov	r7,a
      001129 7D 00            [12] 3466 	mov	r5,#0x00
      00112B 7B 00            [12] 3467 	mov	r3,#0x00
      00112D 8E 82            [24] 3468 	mov	dpl,r6
      00112F 8F 83            [24] 3469 	mov	dph,r7
      001131 8D F0            [24] 3470 	mov	b,r5
      001133 EB               [12] 3471 	mov	a,r3
      001134 12r00r00         [24] 3472 	lcall	__delay_ms
      001137 D0 04            [24] 3473 	pop	ar4
                                   3474 ;	./src/WS2812.c:577: for (uint8_t j = 0; j < 13; j++)
      001139 0C               [12] 3475 	inc	r4
                                   3476 ;	./src/WS2812.c:592: }
      00113A 02r10r2E         [24] 3477 	ljmp	00112$
                                   3478 	.area CSEG    (CODE)
                                   3479 	.area CONST   (CODE)
                                   3480 	.area XINIT   (CODE)
                                   3481 	.area CABS    (ABS,CODE)
